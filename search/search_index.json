{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p> Th\u00e8mes en cours d'\u00e9tude  </p> <p> R\u00e9vision : R\u00e9cursivit\u00e9 </p> <p> A venir : Programmation orient\u00e9 objet </p> <p>Actualit\u00e9s </p> <ul> <li>  La page contenant les 48 sujets l'\u00c9preuve Pratique 2024 est ici </li> </ul> <p>Les modalit\u00e9s du BAC 2024 ont \u00e9t\u00e9 annonc\u00e9es :</p> <ul> <li>le sujet \u00e9crit comportera 3 exercices not\u00e9 sur 20</li> <li>l'\u00e9preuve pratique sera compos\u00e9 de 2 exercices not\u00e9s sur 20</li> <li> <p>Le poids de l'\u00e9crit sera de 3/4 et le poids de la pratique de 1/4</p> </li> <li> <p> Organisez-vous avec (par exemple) Notion ou Zenkit</p> </li> </ul> <p>Entra\u00eenement</p> <p>Vous trouverez ci dessous quelques sites pour vous entrainez </p> <ul> <li> Nouveau site d'entra\u00eenement NSI</li> <li>e-nsi \u00e9crit</li> <li>e-nsi pratique</li> <li>Site recensant les sujets de BAC \u00e9crit : ici</li> </ul> <p>Th\u00e8mes trait\u00e9s</p> <p> Liste des th\u00e8mes \u00e0 traiter dans le programme : pdf</p> <ul> <li>R\u00e9vision : Codex </li> </ul>"},{"location":"T1_Structures_de_donnees/sommaire/","title":"Sommaire","text":"<ol> <li>Listes Piles Files </li> <li>Listes cha\u00een\u00e9es</li> <li>Dictionnaires </li> <li>Arbres</li> <li>Graphes</li> </ol>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/01_Listes_Piles_Files/","title":"Structures de donn\u00e9es lin\u00e9aires : listes, piles, files","text":"<p>Les structures que nous allons voir peuvent s'envisager sous deux aspects :</p> <ul> <li>le c\u00f4t\u00e9 utilisateur, qui utilisera une interface pour manipuler les donn\u00e9es.</li> <li>le c\u00f4t\u00e9 concepteur, qui aura choisi une impl\u00e9mentation pour construire la structure de donn\u00e9es.</li> </ul> <p>Par exemple, le volant et les p\u00e9dales constituent (une partie de) l'interface d'une voiture. L'impl\u00e9mentation va d\u00e9signer tous les m\u00e9canismes techniques qui sont mis en \u0153uvre pour que le mouvement de rotation du volant aboutisse \u00e0 un changement de direction des roues.</p> <p></p> <p>Nous avons d\u00e9j\u00e0 abord\u00e9 ces deux aspects lors de la d\u00e9couverte de la Programmation Orient\u00e9e Objet. Le principe d'encapsulation fait que l'utilisateur n'a qu'\u00e0 conna\u00eetre l'existence des m\u00e9thodes disponibles, et non pas le contenu technique de celle-ci. Cela permet notamment de modifier le contenu technique (l'impl\u00e9mentation) sans que les habitudes de l'utilisateur (l'interface) ne soient chang\u00e9es.</p> <p>Arr\u00eatons-nous maintenant en d\u00e9tail sur les interfaces et impl\u00e9mentations possibles des listes, des piles et des files.</p> <p>Lorsque l'impl\u00e9mentation de la liste fait appara\u00eetre une cha\u00eene de valeurs, chacune pointant vers la suivante, on dit que la liste est une liste cha\u00een\u00e9e.</p> <p></p> <p>Impl\u00e9mentation choisie :</p> <ul> <li>Une liste est caract\u00e9ris\u00e9e par un ensemble de cellules.</li> <li>Le lien (on dira souvent le \u00abpointeur\u00bb) vers la variable est un lien vers la premi\u00e8re cellule, qui renverra elle-m\u00eame sur la deuxi\u00e8me, etc.</li> <li>Chaque cellule contient donc une valeur et un lien vers la cellule suivante.</li> <li>Une liste peut \u00eatre vide (la liste vide est not\u00e9e <code>x</code> ou bien <code>None</code> sur les sch\u00e9mas)</li> </ul> <p>Une cons\u00e9quence de cette impl\u00e9mentation sous forme de liste cha\u00een\u00e9e est la non-constance du temps d'acc\u00e8s \u00e0 un \u00e9l\u00e9ment de liste : pour acc\u00e9der au 3\u00e8me \u00e9l\u00e9ment, il faut obligatoirement passer par les deux pr\u00e9c\u00e9dents.</p> <p>\u00c0 retenir : dans une liste cha\u00een\u00e9e, le temps d'acc\u00e8s aux \u00e9l\u00e9ments n'est pas constant.</p> In\u00a0[16]: Copied! <pre>class Cellule :\n    \n    def __init__(self, contenu, suivante):\n        self.contenu = contenu\n        self.suivante = suivante\n</pre> class Cellule :          def __init__(self, contenu, suivante):         self.contenu = contenu         self.suivante = suivante <p>Cette impl\u00e9mentation rudimentaire permet bien la cr\u00e9ation d'une liste :</p> In\u00a0[17]: Copied! <pre>lst = Cellule(3, Cellule(5, Cellule(1,None)))\n</pre> lst = Cellule(3, Cellule(5, Cellule(1,None))) <p>La liste cr\u00e9\u00e9e est donc : </p> <p>Mais plus pr\u00e9cis\u00e9ment, on a : </p> <p>Exercice : retrouvez comment acc\u00e9der aux \u00e9l\u00e9ments 3, 5 et 1.</p> In\u00a0[18]: Copied! <pre>\n</pre> Out[18]: <pre>3</pre> In\u00a0[19]: Copied! <pre>\n</pre> Out[19]: <pre>5</pre> In\u00a0[20]: Copied! <pre>\n</pre> Out[20]: <pre>1</pre> <p>On pourra remarquer que l'interface propos\u00e9e \u00e0 l'utilisateur n'est pas des plus pratiques...</p> <p>Nous connaissons d\u00e9j\u00e0 les listes de Python :</p> In\u00a0[\u00a0]: Copied! <pre>maliste = [3,1,-1,42]\n</pre> maliste = [3,1,-1,42] <p>Et nous connaissons aussi (un peu) l'interface de ce type <code>list</code>, notamment avec les m\u00e9thodes <code>append()</code> ou <code>reverse()</code>. N\u00e9anmoins, l'impl\u00e9mentation qui a \u00e9t\u00e9 choisie par les concepteurs de Python de ce type <code>list</code> fait que le celui-ci se rapproche plus d'un tableau dynamique.</p> <p>Dans un tableau dynamique :</p> <ul> <li>le temps d'acc\u00e8s \u00e0 n'importe quel \u00e9l\u00e9ment est rapide. Ce temps d'acc\u00e8s est constant quelque soit l'\u00e9l\u00e9ment : on dit que l'acc\u00e8s est en $O(1)$.</li> <li>l'insertion d'un \u00e9l\u00e9ment au d\u00e9but ou au milieu de la liste est lente : cela oblige \u00e0 d\u00e9caler tous les \u00e9l\u00e9ments \u00e0 droite de celui-ci. Le temps pris par l'insertion est proportionnel au nombre d'\u00e9l\u00e9ments \u00e0 d\u00e9placer : on dit que l'insertion est en $O(n)$.</li> </ul> <p>Dans une liste cha\u00een\u00e9e :</p> <ul> <li>le temps d'acc\u00e8s \u00e0 n'importe quel \u00e9l\u00e9ment peut \u00eatre lent (proportionnel \u00e0 la position de l'\u00e9l\u00e9ment dans la liste). Le temps d'acc\u00e8s est en $O(n)$.</li> <li>l'insertion d'un \u00e9l\u00e9ment \u00e0 l'int\u00e9rieur de la liste est rapide : il y a simplement \u00e0 modifier la valeur du lien de la cellule \u00e0 gauche de l'endroit d'insertion. L'action d'ins\u00e9rer est donc en $O(1)$. Toutefois, avant d'arriver \u00e0 l'endroit d'insertion, il faut avoir parcouru toutes les cellules pr\u00e9c\u00e9dentes ! Le temps total d'insertion est donc lui aussi lin\u00e9aire, en $O(n)$.</li> </ul> <p>Nous nous servirons parfois du type <code>list</code> de Python dans la suite de ce cours, mais il ne faut pas oublier qu'il n'est pas un \u00abvrai\u00bb type <code>list</code>.</p> <p>Imaginons que nous poss\u00e9dons une interface offrant les fonctionnalit\u00e9s suivantes :</p> <ul> <li><code>Liste()</code> : cr\u00e9e une liste vide.</li> <li><code>est_vide()</code> : indique si la liste est vide.</li> <li><code>ajoute_tete()</code> : ins\u00e8re un \u00e9l\u00e9ment en t\u00eate de liste.</li> <li><code>renvoie_tete()</code> : renvoie la valeur de l'\u00e9l\u00e9ment en t\u00eate de liste ET le supprime de la liste.</li> </ul> <p>Exercice : On consid\u00e8re l'encha\u00eenement d'op\u00e9rations ci-dessous. \u00c9crire \u00e0 chaque \u00e9tape l'\u00e9tat de la liste <code>lst</code> et la valeur \u00e9ventuellement renvoy\u00e9e.</p> In\u00a0[\u00a0]: Copied! <pre>1. lst = Liste()      # lst = \n2. lst.ajoute_tete(3) # lst = \n3. lst.ajoute_tete(5) # lst = \n4. lst.ajoute_tete(1) # lst = \n5. lst.renvoie_tete() # \n6. lst.est_vide()     # \n7. lst.ajoute_tete(2) # lst = \n8. lst.renvoie_tete() # \n9. lst.renvoie_tete() # \n10. lst.renvoie_tete()# \n11. lst.est_vide()    #\n</pre> 1. lst = Liste()      # lst =  2. lst.ajoute_tete(3) # lst =  3. lst.ajoute_tete(5) # lst =  4. lst.ajoute_tete(1) # lst =  5. lst.renvoie_tete() #  6. lst.est_vide()     #  7. lst.ajoute_tete(2) # lst =  8. lst.renvoie_tete() #  9. lst.renvoie_tete() #  10. lst.renvoie_tete()#  11. lst.est_vide()    #   <p></p> <p>Comme expliqu\u00e9 pr\u00e9c\u00e9demment, une pile travaille en mode LIFO (Last In First Out). Pour \u00eatre utilis\u00e9e, l'interface d'une pile doit permettre a minima :</p> <ul> <li>la cr\u00e9ation d'une pile vide</li> <li>l'ajout d'un \u00e9l\u00e9ment dans la pile (qui sera forc\u00e9ment au dessus). On dira qu'on empile.</li> <li>le retrait d'un \u00e9l\u00e9ment de la pile (qui sera forc\u00e9ment celui du dessus) et le renvoi de sa valeur. On dira qu'on d\u00e9pile.</li> </ul> <p>Exercice : On consid\u00e8re l'encha\u00eenement d'op\u00e9rations ci-dessous. \u00c9crire \u00e0 chaque \u00e9tape l'\u00e9tat de la pile <code>p</code> et la valeur \u00e9ventuellement renvoy\u00e9e.</p> <p>Bien comprendre que la classe <code>Pile()</code> et ses m\u00e9thodes n'existent pas vraiment. Nous jouons avec son interface.</p> In\u00a0[\u00a0]: Copied! <pre>1. p = Pile()   # p\n2. p.empile(3)  # p=\n3. p.empile(5)  # p= \n4. p.est_vide() #  \n4. p.empile(1)  # p= \n5. p.depile()   # p= \n6. p.depile()   # p= \n7. p.empile(9)  # p= \n8. p.depile()   # p= \n9. p.depile()   # p= \n10. p.est_vide() #\n</pre> 1. p = Pile()   # p 2. p.empile(3)  # p= 3. p.empile(5)  # p=  4. p.est_vide() #   4. p.empile(1)  # p=  5. p.depile()   # p=  6. p.depile()   # p=  7. p.empile(9)  # p=  8. p.depile()   # p=  9. p.depile()   # p=  10. p.est_vide() #  In\u00a0[3]: Copied! <pre>class Pile:\n    def __init__(self):\n        self.data = []\n      \n    def est_vide(self):\n        return len(self.data) == 0 \n    \n    def empile(self,x):\n        pass\n\n    def depile(self):\n        pass\n\n    def __str__(self):       # Hors-Programme : pour afficher \n        s = \"|\"              # convenablement la pile avec print(p)\n        for k in self.data :\n            s = s + str(k) + \"|\"\n        return s\n\n    def __repr__(self):       # Hors-Programme : pour afficher \n        s = \"|\"              # convenablement la pile avec p\n        for k in self.data :\n            s = s + str(k) + \"|\"\n        return s\n</pre> class Pile:     def __init__(self):         self.data = []            def est_vide(self):         return len(self.data) == 0           def empile(self,x):         pass      def depile(self):         pass      def __str__(self):       # Hors-Programme : pour afficher          s = \"|\"              # convenablement la pile avec print(p)         for k in self.data :             s = s + str(k) + \"|\"         return s      def __repr__(self):       # Hors-Programme : pour afficher          s = \"|\"              # convenablement la pile avec p         for k in self.data :             s = s + str(k) + \"|\"         return s         In\u00a0[4]: Copied! <pre>p = Pile()\np.empile(5)\np.empile(3)\np.empile(7)\n</pre> p = Pile() p.empile(5) p.empile(3) p.empile(7) In\u00a0[5]: Copied! <pre>p\n</pre> p Out[5]: <pre>|5|3|7|</pre> In\u00a0[8]: Copied! <pre>class Cellule :\n    \n    def __init__(self, contenu, suivante):\n        self.contenu = contenu\n        self.suivante = suivante\n</pre> class Cellule :          def __init__(self, contenu, suivante):         self.contenu = contenu         self.suivante = suivante <p>Exercice : \u00e0 l'aide cette classe, re-cr\u00e9er une classe <code>Pile</code> disposant exactement de la m\u00eame interface que dans l'exercice pr\u00e9c\u00e9dent.</p> In\u00a0[9]: Copied! <pre>class Pile:\n    def __init__(self):\n        self.data = None\n    \n    def est_vide(self):\n        return self.data == None\n    \n    def empile(self, x):\n        pass\n    \n    def depile(self):\n         #on r\u00e9cup\u00e8re la valeur \u00e0 renvoyer\n         # on supprime la 1\u00e8re cellule  \n        return \n    \n    def __str__(self):\n        s = \"|\"\n        c = self.data\n        while c != None :\n            s += str(c.contenu)+\"|\"\n            c = c.suivante\n        return s\n</pre> class Pile:     def __init__(self):         self.data = None          def est_vide(self):         return self.data == None          def empile(self, x):         pass          def depile(self):          #on r\u00e9cup\u00e8re la valeur \u00e0 renvoyer          # on supprime la 1\u00e8re cellule           return           def __str__(self):         s = \"|\"         c = self.data         while c != None :             s += str(c.contenu)+\"|\"             c = c.suivante         return s  In\u00a0[10]: Copied! <pre>p = Pile()\np.empile(5)\np.empile(3)\np.empile(7)\n</pre> p = Pile() p.empile(5) p.empile(3) p.empile(7) In\u00a0[11]: Copied! <pre>print(p)\n</pre> print(p) <pre>|7|3|5|\n</pre> <p>\u00c0 retenir : pour l'utilisateur, les interfaces du 3.2.1 et 3.2.2 sont strictement identiques. Il ne peut pas savoir, en les utilisant, l'impl\u00e9mentation qui est derri\u00e8re. </p> In\u00a0[13]: Copied! <pre>adresses = Pile()\nadresse_courante = \"\"\n\ndef go_to(nouvelle_adresse) :\n    global adresse_courante\n    #\n    #\n\ndef back():\n    global adresse_courante\n    #\n    #\n</pre> adresses = Pile() adresse_courante = \"\"  def go_to(nouvelle_adresse) :     global adresse_courante     #     #  def back():     global adresse_courante     #     # <p>Exemple d'utilisation :</p> In\u00a0[14]: Copied! <pre>go_to(\"google.fr\")\ngo_to(\"lemonde.fr\")\ngo_to(\"blabla.fr\")\n</pre> go_to(\"google.fr\") go_to(\"lemonde.fr\") go_to(\"blabla.fr\") In\u00a0[15]: Copied! <pre>back()\nadresse_courante\n</pre> back() adresse_courante Out[15]: <pre>'lemonde.fr'</pre> <p></p> <p>Comme expliqu\u00e9 pr\u00e9c\u00e9demment, une file travaille en mode FIFO (First In First Out). Pour \u00eatre utilis\u00e9e, une file doit permettre a minima :</p> <ul> <li>la cr\u00e9ation d'une file vide</li> <li>l'ajout d'un \u00e9l\u00e9ment dans la file (qui sera forc\u00e9ment au dessous). On dira qu'on enfile.</li> <li>le retrait d'un \u00e9l\u00e9ment de la file (qui sera forc\u00e9ment celui du dessus) et le renvoi de sa valeur. On dira qu'on d\u00e9file.</li> </ul> <p>Exercice : On consid\u00e8re l'encha\u00eenement d'op\u00e9rations ci-dessous. \u00c9crire \u00e0 chaque \u00e9tape l'\u00e9tat de la file <code>f</code> et la valeur \u00e9ventuellement renvoy\u00e9e.</p> In\u00a0[\u00a0]: Copied! <pre>1. f = File()\n2. f.enfile(3) # f =\n3. f.enfile(5) # f  = \n4. f.est_vide() # \n4. f.enfile(1) # f  = \n5. f.defile() # \n6. f.defile() # \n7. f.enfile(9) # \n8. f.defile() # \n9. f.defile()# \n10. f.est_vide() #\n</pre> 1. f = File() 2. f.enfile(3) # f = 3. f.enfile(5) # f  =  4. f.est_vide() #  4. f.enfile(1) # f  =  5. f.defile() #  6. f.defile() #  7. f.enfile(9) #  8. f.defile() #  9. f.defile()#  10. f.est_vide() #  <p>Exercice : cr\u00e9er la classe ci-dessus. L\u00e0 encore, le type \u00ablist\u00bb de Python est peut \u00eatre utilis\u00e9, voir ici. N\u00e9anmoins quelques remarques seront \u00e0 apporter.</p> In\u00a0[1]: Copied! <pre>class File:\n    def __init__(self):\n        self.data = []\n      \n    def est_vide(self):\n        return len(self.data) == 0 \n  \n    def enfile(self,x):\n        pass\n\n    def defile(self):\n        pass\n\n    def __str__(self):       # Hors-Programme : pour afficher \n        s = \"|\"              # convenablement la file avec print(p)\n        for k in self.data :\n            s = s + str(k) + \"|\"\n        return s\n</pre> class File:     def __init__(self):         self.data = []            def est_vide(self):         return len(self.data) == 0         def enfile(self,x):         pass      def defile(self):         pass      def __str__(self):       # Hors-Programme : pour afficher          s = \"|\"              # convenablement la file avec print(p)         for k in self.data :             s = s + str(k) + \"|\"         return s In\u00a0[2]: Copied! <pre>f = File()\nf.enfile(5)\nf.enfile(8)\nprint(f)\nf.defile()\n</pre> f = File() f.enfile(5) f.enfile(8) print(f) f.defile() <pre>|5|8|\n</pre> Out[2]: <pre>5</pre> <p>Remarque : Notre impl\u00e9mentation r\u00e9pond parfaitement \u00e0 l'interface qui \u00e9tait demand\u00e9e. Mais si le \u00abcahier des charges\u00bb obligeait \u00e0 ce que les op\u00e9rations <code>enfile()</code> et <code>defile()</code> aient lieu en temps constant (en $O(1)$), notre impl\u00e9mentation ne conviendrait pas.</p> <p>En cause : notre m\u00e9thode <code>defile()</code> agit en temps lin\u00e9aire  ($O(n)$) et non pas en temps constant. L'utilisation de la structure de \u00abliste\u00bb de Python (les tableaux dynamiques) provoque, lors de l'instruction <code>self.data.pop(0) </code> un redimensionnement de la liste, qui voit dispara\u00eetre son premier \u00e9l\u00e9ment. Chaque \u00e9l\u00e9ment doit \u00eatre recopi\u00e9 dans la case qui pr\u00e9c\u00e8de, avant de supprimer la derni\u00e8re case. Ceci nous co\u00fbte un temps lin\u00e9aire.</p> <p>Comment cr\u00e9er une file avec 2 piles ? L'id\u00e9e est la suivante : on cr\u00e9e une pile d'entr\u00e9e et une pile de sortie.</p> <ul> <li>quand on veut enfiler, on empile sur la pile d'entr\u00e9e.</li> <li>quand on veut d\u00e9filer, on d\u00e9pile sur la pile de sortie.</li> <li>si celle-ci est vide, on d\u00e9pile enti\u00e8rement la pile d'entr\u00e9e dans la pile de sortie.</li> </ul> <p></p> In\u00a0[9]: Copied! <pre># il est imp\u00e9ratif de comprendre qu'on peut choisir l'impl\u00e9mentation\n# de la classe Pile qu'on pr\u00e9f\u00e8re parmi les deux trait\u00e9es plus haut.\n# Comme elles ont la M\u00caME INTERFACE et qu'on ne va se servir que\n# de cette interface, leur m\u00e9canisme interne n'a aucune influence\n# sur le code de la classe File que nous ferons ensuite.\n\n# au hasard, on choisit celle avec la liste cha\u00een\u00e9e :\n\nclass Pile:\n    def __init__(self):\n        self.data = None\n    \n    def est_vide(self):\n        return self.data == None\n    \n    def empile(self, x):\n        self.data = Cellule(x,self.data)\n    \n    def depile(self):\n        v = self.data.contenu #on r\u00e9cup\u00e8re la valeur \u00e0 renvoyer\n        self.data = self.data.suivante  # on supprime la 1\u00e8re cellule  \n        return v\n    \n    def __str__(self):\n        s = \"|\"\n        c = self.data\n        while c != None :\n            s += str(c.contenu)+\"|\"\n            c = c.suivante\n        return s\n\n    \n# il ne faut pas oublier de remettre la classe Cellule qui intervient\n# dans notre classe Pile :\n\nclass Cellule :\n    \n    def __init__(self, contenu, suivante):\n        self.contenu = contenu\n        self.suivante = suivante\n</pre> # il est imp\u00e9ratif de comprendre qu'on peut choisir l'impl\u00e9mentation # de la classe Pile qu'on pr\u00e9f\u00e8re parmi les deux trait\u00e9es plus haut. # Comme elles ont la M\u00caME INTERFACE et qu'on ne va se servir que # de cette interface, leur m\u00e9canisme interne n'a aucune influence # sur le code de la classe File que nous ferons ensuite.  # au hasard, on choisit celle avec la liste cha\u00een\u00e9e :  class Pile:     def __init__(self):         self.data = None          def est_vide(self):         return self.data == None          def empile(self, x):         self.data = Cellule(x,self.data)          def depile(self):         v = self.data.contenu #on r\u00e9cup\u00e8re la valeur \u00e0 renvoyer         self.data = self.data.suivante  # on supprime la 1\u00e8re cellule           return v          def __str__(self):         s = \"|\"         c = self.data         while c != None :             s += str(c.contenu)+\"|\"             c = c.suivante         return s       # il ne faut pas oublier de remettre la classe Cellule qui intervient # dans notre classe Pile :  class Cellule :          def __init__(self, contenu, suivante):         self.contenu = contenu         self.suivante = suivante       In\u00a0[10]: Copied! <pre>class File:\n    def __init__(self):\n        self.entree = Pile()\n        self.sortie = Pile()\n   \n    def est_vide(self):\n        pass\n\n    def enfile(self,x):\n        pass\n\n    def defile(self):\n        pass\n</pre> class File:     def __init__(self):         self.entree = Pile()         self.sortie = Pile()         def est_vide(self):         pass      def enfile(self,x):         pass      def defile(self):         pass           In\u00a0[11]: Copied! <pre>f = File()\nf.enfile(5)\nf.enfile(8)\n\nf.defile()\n</pre> f = File() f.enfile(5) f.enfile(8)  f.defile() Out[11]: <pre>5</pre> <p>Lien vers les exercices</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/01_Listes_Piles_Files/#structures-de-donnees-lineaires-listes-piles-files","title":"Structures de donn\u00e9es lin\u00e9aires :  listes, piles, files\u00b6","text":""},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/01_Listes_Piles_Files/#0-preambule-interface-implementation","title":"0. Pr\u00e9ambule : interface \u2260 impl\u00e9mentation\u00b6","text":""},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/01_Listes_Piles_Files/#1-structures-de-donnees-lineaires","title":"1. Structures de donn\u00e9es lin\u00e9aires\u00b6","text":""},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/01_Listes_Piles_Files/#11-a-chaque-donnee-sa-structure","title":"1.1 \u00c0 chaque donn\u00e9e sa structure\u00b6","text":"<p>En informatique comme dans la vie courante, il est conseill\u00e9 d'adapter sa mani\u00e8re de stocker et de traiter des donn\u00e9es en fonction de la nature de celles-ci :</p> <ul> <li>Le serveur d'un caf\u00e9, charg\u00e9 de transporter les boissons du comptoir aux tables des clients, n'utilisera pas un sac en plastique pour faire le transport : il pr\u00e9f\u00e8rera un plateau.</li> <li>Le chercheur de champignons, lui, n'utilisera pas un plateau pour stocker ses trouvailles : il pr\u00e9f\u00e8rera un panier.</li> <li>Pour stocker des chaussettes, on pr\u00e9f\u00e8rera les entasser dans un tiroir (apr\u00e8s les avoir appair\u00e9es), plut\u00f4t que de les suspendre \u00e0 des cintres.</li> </ul> <p>De m\u00eame en informatique, pour chaque type de donn\u00e9es, pour chaque utilisation pr\u00e9vue, une structure particuli\u00e8re de donn\u00e9es se rev\u00e8lera (peut-\u00eatre) plus adapt\u00e9e qu'une autre.</p> <p>Int\u00e9ressons nous par exemple aux donn\u00e9es lin\u00e9aires. Ce sont des donn\u00e9es qui ne comportent pas de hi\u00e9rarchie : toutes les donn\u00e9es sont de la m\u00eame nature et ont le m\u00eame r\u00f4le. Par exemple, un relev\u00e9 mensuel de temp\u00e9ratures, la liste des \u00e9l\u00e8ves d'une classe, un historique d'op\u00e9rations bancaires...</p> <p>Ces donn\u00e9es sont \u00abplates\u00bb, n'ont pas de sous-domaines : la structure de liste para\u00eet parfaitement adapt\u00e9e.</p> <p>Lorsque les donn\u00e9es de cette liste sont en fait des couples (comme dans le cas d'une liste de noms/num\u00e9ros de t\u00e9l\u00e9phone), alors la structure la plus adapt\u00e9e est sans doute celle du dictionnaire.</p> <p>Les listes et les dictionnaires sont donc des exemples de structures de donn\u00e9es lin\u00e9aires.</p> <p>M\u00eame si ce n'est pas l'objet de ce cours, donnons des exemples de structures adapt\u00e9es aux donn\u00e9es non-lin\u00e9aires :</p> <p>Si une liste de courses est subdivis\u00e9e en \"rayon frais / bricolage / papeterie\" et que le rayon frais est lui-m\u00eame s\u00e9par\u00e9 en \"laitages / viandes / fruits &amp; l\u00e9gumes\", alors une structure d'arbre sera plus adapt\u00e9e pour la repr\u00e9senter. Les structures arborescentes seront vues plus tard en Terminale.</p> <p>Enfin, si nos donn\u00e9es \u00e0 \u00e9tudier sont les relations sur les r\u00e9seaux sociaux des \u00e9l\u00e8ves d'une classe, alors la structure de graphe s'imposera d'elle-m\u00eame. Cette structure sera elle-aussi \u00e9tudi\u00e9e plus tard cette ann\u00e9e.</p>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/01_Listes_Piles_Files/#12-comment-seront-traitees-ces-donnees-lineaires-listes-piles-et-files","title":"1.2 Comment seront trait\u00e9es ces donn\u00e9es lin\u00e9aires ? Listes, piles et files\u00b6","text":"<p>La nature des donn\u00e9es ne fait pas tout. Il faut aussi s'int\u00e9resser \u00e0 la mani\u00e8re dont on voudra les traiter : \u00e0 quelle position les faire entrer dans notre structure ? \u00c0 quel moment devront-elles en \u00e9ventuellement en sortir ?</p> <p>Lorsque cette probl\u00e9matique d'entr\u00e9e/sortie n'intervient pas, la structure \u00abclassique\u00bb de liste est adapt\u00e9e. Mais lorsque celle-ci est importante, il convient de diff\u00e9rencier la structure de pile de celle de file.</p>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/01_Listes_Piles_Files/#121-les-piles-stack","title":"1.2.1 Les piles (stack)\u00b6","text":"<p>Une structure de pile (penser \u00e0 une pile d'assiette) est associ\u00e9e \u00e0 la m\u00e9thode LIFO (Last In, First Out) : les \u00e9l\u00e9ments sont empil\u00e9s les uns au-dessus des autres, et on ne peut toujours d\u00e9piler que l'\u00e9l\u00e9ment du haut de la pile. Le dernier \u00e9l\u00e9ment \u00e0 \u00eatre arriv\u00e9 est donc le premier \u00e0 \u00eatre sorti.</p> <p></p> <p>Exemples de donn\u00e9es stock\u00e9es sous forme de pile :</p> <ul> <li>lors de l'ex\u00e9cution d'une fonction r\u00e9cursive, le processeur empile successivement les appels \u00e0 traiter : seule l'instruction du haut de la pile peut \u00eatre trait\u00e9e.</li> </ul> <p></p> <ul> <li>dans un navigateur internet, la liste des pages parcourues est stock\u00e9e sous forme de pile : la fonction \u00abBack\u00bb permet de \u00abd\u00e9piler\u00bb peu \u00e0 peu les pages pr\u00e9c\u00e9demment parcourues : </li> <li>lors d'un Devoir Surveill\u00e9, la derni\u00e8re copie remise sur le bureau du professeur est (souvent) la premi\u00e8re corrig\u00e9e.</li> </ul>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/01_Listes_Piles_Files/#122-les-files-queue","title":"1.2.2 Les files (queue)\u00b6","text":"<p>Une structure de file (penser \u00e0 une file d'attente) est associ\u00e9e \u00e0 la m\u00e9thode FIFO (First In, First Out) : les \u00e9l\u00e9ments sont enfil\u00e9s les uns \u00e0 la suite des autres, et on ne peut toujours d\u00e9filer que l'\u00e9l\u00e9ment du haut de la file. Le premier \u00e9l\u00e9ment \u00e0 \u00eatre arriv\u00e9 est donc le premier \u00e0 en sortir. Sinon \u00e7a r\u00e2le dans la file d'attente. </p> <p>Exemples de donn\u00e9es stock\u00e9es sous forme de file :</p> <ul> <li>les documents envoy\u00e9s \u00e0 l'imprimante sont trait\u00e9es dans une file d'impression.</li> <li>la \u00abqueue\u00bb \u00e0 la cantine est (normalement) trait\u00e9e sous forme de file.</li> </ul>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/01_Listes_Piles_Files/#123-le-probleme-du-stockage-transformer-les-piles-en-files","title":"1.2.3 Le probl\u00e8me du stockage : transformer les piles en files\u00b6","text":"<p>Dans les entrep\u00f4ts de stockage, comme dans les rayons d'un supermarch\u00e9, la structure naturelle est celle de la pile : les gens attrapent l'\u00e9l\u00e9ment situ\u00e9 devant eux (\u00aben haut de la pile\u00bb). Si les employ\u00e9s du supermarch\u00e9 remettent en rayon les produits plus r\u00e9cents sur le dessus de la pile, les produits au bas de la pile ne seront jamais choisis et p\u00e9rimeront. Ils doivent donc transformer la pile en file : lors de la mise en rayon de nouveaux produits, ceux-ci seront plac\u00e9s derri\u00e8re (\u00abau bas de la file\u00bb) afin que partent en priorit\u00e9 les produits \u00e0 date de p\u00e9remption plus courte. On passe donc du LIFO au FIFO.</p> <p>Certains dispositifs permettent de le faire naturellement : Ci-dessous, une file... de piles (\u00e9lectriques). Le chargement par le haut du distributeur fait que celle qui sera sortie (en bas) sera celle qui aurait \u00e9t\u00e9 rentr\u00e9e en premier (par le haut). Ce FIFO est donc provoqu\u00e9 naturellement par la gravit\u00e9 (et un peu d'astuce).  Cette probl\u00e9matique est universelle : voir par exemple ce site.</p>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/01_Listes_Piles_Files/#2-les-listes","title":"2. Les listes\u00b6","text":""},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/01_Listes_Piles_Files/#21-definition-generale","title":"2.1 D\u00e9finition g\u00e9n\u00e9rale\u00b6","text":"<p>Une liste est un ensemble ordonn\u00e9 d'objets. G\u00e9n\u00e9ralement, ces donn\u00e9es seront de m\u00eame type, mais ce n'est pas structurellement obligatoire.</p>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/01_Listes_Piles_Files/#22-les-listes-chainees","title":"2.2 Les listes cha\u00een\u00e9es\u00b6","text":""},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/01_Listes_Piles_Files/#23-exemple-dimplementation-minimale-dune-liste-chainee","title":"2.3 Exemple d'impl\u00e9mentation minimale d'une liste cha\u00een\u00e9e\u00b6","text":""},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/01_Listes_Piles_Files/#24-et-les-listes-de-python","title":"2.4 Et les listes de Python ???\u00b6","text":""},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/01_Listes_Piles_Files/#25-un-exemple-dinterface-pour-les-listes","title":"2.5 Un exemple d'interface pour les listes\u00b6","text":""},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/01_Listes_Piles_Files/#3-les-piles","title":"3. Les piles\u00b6","text":""},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/01_Listes_Piles_Files/#31-utilisation-dune-interface-de-pile","title":"3.1 Utilisation d'une interface de pile\u00b6","text":""},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/01_Listes_Piles_Files/#32-implementations-dune-pile","title":"3.2 Impl\u00e9mentation(s) d'une pile\u00b6","text":"<p>L'objectif est de cr\u00e9er une classe <code>Pile</code>. L'instruction  <code>Pile()</code>  cr\u00e9era une pile vide. Chaque objet <code>Pile</code> disposera des m\u00e9thodes suivantes :</p> <ul> <li><code>est_vide()</code> : indique si la pile est vide.</li> <li><code>empile()</code> : ins\u00e8re un \u00e9l\u00e9ment en haut de la pile.</li> <li><code>depile()</code> : renvoie la valeur de l'\u00e9l\u00e9ment en haut de la pile ET le supprime de la pile.</li> <li><code>__str__()</code> : permet d'afficher la pile sous forme agr\u00e9able (par ex : <code>|3|6|2|5|</code>) par <code>print()</code></li> </ul>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/01_Listes_Piles_Files/#321-a-laide-du-type-list-de-python","title":"3.2.1 \u00c0 l'aide du type <code>list</code> de Python\u00b6","text":"<p>Exercice : cr\u00e9er la classe ci-dessus. Le type <code>list</code> de Python est parfaitement adapt\u00e9. Des renseignement int\u00e9ressants \u00e0 son sujet peuvent \u00eatre trouv\u00e9s ici.</p>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/01_Listes_Piles_Files/#322-a-laide-dune-liste-chainee-et-de-la-classe-cellule-creee-au-23","title":"3.2.2 \u00c0 l'aide d'une liste cha\u00een\u00e9e et de la classe  <code>Cellule</code> cr\u00e9\u00e9e au 2.3\u00b6","text":"<p>Au 2.3 nous avons cr\u00e9\u00e9 la classe  <code>Cellule</code> :</p>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/01_Listes_Piles_Files/#33-application-des-piles","title":"3.3 Application des piles\u00b6","text":"<p>\u00c0 l'aide de deux variables <code>adresses</code> et <code>adresse_courante</code>, et de la classe <code>Pile</code> cr\u00e9\u00e9e plus haut, simulez une gestion de l'historique de navigation internet. Seules deux fonctions <code>go_to(nouvelle_adresse)</code> et <code>back()</code> sont \u00e0 cr\u00e9er.</p>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/01_Listes_Piles_Files/#4-les-files","title":"4. Les files\u00b6","text":""},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/01_Listes_Piles_Files/#41-utilisation-dune-interface-de-file","title":"4.1 Utilisation d'une interface de file\u00b6","text":""},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/01_Listes_Piles_Files/#42-implementation-dune-file","title":"4.2 Impl\u00e9mentation d'une file\u00b6","text":"<p>L'objectif est de cr\u00e9er une classe <code>File</code>, disposant des m\u00e9thodes suivantes :</p> <ul> <li><code>File()</code> : cr\u00e9e une file vide.</li> <li><code>est_vide()</code> : indique si la file est vide.</li> <li><code>enfile()</code> : ins\u00e8re un \u00e9l\u00e9ment en bas de la file.</li> <li><code>defile()</code> : renvoie la valeur de l'\u00e9l\u00e9ment en haut de la file ET le supprime de la file.</li> <li><code>__str__()</code> : permet d'afficher la file sous forme agr\u00e9able (par ex : <code>|3|6|2|5|</code>) par <code>print()</code></li> </ul>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/01_Listes_Piles_Files/#43-implementation-dune-file-avec-deux-piles","title":"4.3 Impl\u00e9mentation d'une file avec deux piles\u00b6","text":""},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/01_Listes_Piles_Files/#5-mise-en-application","title":"5. Mise en application\u00b6","text":""},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/01_Listes_Piles_Files/#bibliographie","title":"Bibliographie\u00b6","text":"<ul> <li>Num\u00e9rique et Sciences Informatiques, Terminale, T. BALABONSKI, S. CONCHON, J.-C. FILLIATRE, K. NGUYEN, \u00e9ditions ELLIPSES.</li> <li>Pr\u00e9pabac NSI, Terminale, G.CONNAN, V.PETROV, G.ROZSAVOLGYI, L.SIGNAC, \u00e9ditions HATIER.</li> <li>Cours du DIU-EIL, David RENAULT, Universit\u00e9 de Bordeaux.</li> </ul> <p> G.Lassus, Lyc\u00e9e Fran\u00e7ois Mauriac --  Bordeaux</p>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/Exercices/","title":"Exercices","text":"<p>Exercice 1</p> \u00c9nonc\u00e9Corr. Q1Corr. Q2Corr. Q3Corr. Q4 <p>Exercice 5 du sujet Centres \u00c9trangers 1 - 2021</p> <p></p> <p></p> \ud83d\udc0d Script Python<pre><code>def maximum(P):\n    if est_vide(P):\n        return None\n    m = depile(P)\n    while not est_vide(P):\n        val = depile(P)\n        if val &gt; m:\n            m = val\n    return m\n</code></pre> <p>Avec le code ci-dessus, la pile <code>p</code> est vide \u00e0 la fin de l'ex\u00e9cution. Pour \u00e9viter cela, on peut par exemple cr\u00e9er une pile <code>q</code> temporaire qui recevra les \u00e9l\u00e9ments de <code>p</code>, avant de retransf\u00e9rer \u00e0 la fin du programme les \u00e9l\u00e9ments de <code>q</code>  dans <code>p</code>.</p> \ud83d\udc0d Script Python<pre><code>def maximum(P):\n    Q = creer_pile()\n    if est_vide(P):\n        return None\n    m = depile(P)\n    empile(Q, m)\n    while not est_vide(P):\n        val = depile(P)\n        empile(Q, val)\n        if val &gt; m:\n            m = val\n    while not est_vide(Q):\n        empile(P, depile(Q))\n    return m\n</code></pre> <p>Q4a. On va vider la pile <code>p</code> dans une pile <code>q</code> tout en comptant le nombre d'\u00e9l\u00e9ments d\u00e9pil\u00e9s dans une variable <code>t</code>.  On redonne ensuite \u00e0 <code>p</code> son \u00e9tat initial en vidant <code>q</code> dans <code>p</code>.</p> <p>Q4b</p> \ud83d\udc0d Script Python<pre><code>def taille(P):\n    if est_vide(P):\n        return 0\n    Q = creer_pile()\n    t = 0\n    while not est_vide(P):\n        empile(Q, depile(P))\n        t += 1\n    while not est_vide(Q):\n        empile(P, depile(Q))\n    return t\n</code></pre> <p>Exercice 2</p> \u00c9nonc\u00e9Corr. Q1Corr. Q2aCorr. Q2bCorr. Q3Corr. Q4 <p>Exercice 1 du sujet La R\u00e9union J2 - 2022</p> <p></p> <p>La variable <code>temp</code> contient la valeur 25.</p> <p><code>p1</code> est identique, elle contient toujours les valeurs 25, 3 et 7. </p> \ud83d\udc0d Script Python<pre><code>def addition(p):\n    nb1 = depiler(p)\n    nb2 = depiler(p)\n    empiler(p, nb1 + nb2)\n</code></pre> \ud83d\udc0d Script Python<pre><code>p = pile_vide()\nempiler(p, 3)\nempiler(p, 5)\naddition(p)\nempiler(p, 7)\nmultiplication(p)\n</code></pre> <p>Exercice 3</p> \u00c9nonc\u00e9Corr. Q1aCorr. Q1bCorr. Q2aCorr. Q2bCorr. Q3Corr. Q4 <p>Exercice 2 du sujet M\u00e9tropole Candidats Libres J1 - 2021</p> \ud83d\udc0d Script Python<pre><code>pile1 = Pile()\npile1.empiler(7)\npile1.empiler(5)\npile1.empiler(2)\n</code></pre> <p>L'affichage produit est <code>7, 5, 5, 2</code>.</p> <ul> <li>Cas n\u00b01 : <code>3, 2</code> </li> <li>Cas n\u00b02 : <code>3, 2, 5, 7</code></li> <li>Cas n\u00b03 : <code>3</code></li> <li>Cas n\u00b04 : <code>\u00abpile vide\u00bb</code></li> </ul> <p>La fonction <code>mystere</code> permet d'obtenir la pile retourn\u00e9e jusqu'\u00e0 un \u00e9l\u00e9ment particulier (s'il existe).</p> \ud83d\udc0d Script Python<pre><code>def etendre(pile1, pile2):\n    while not pile2.est_vide():\n        val = pile2.depiler()\n        pile1.empiler(val)\n</code></pre> \ud83d\udc0d Script Python<pre><code>def supprime_toutes_occurences(pile, element):\n    p_temp = Pile()\n    while not pile.est_vide():\n        val = pile.depiler()\n        if val != element:\n            p_temp.empiler(val)\n    while not p_temp.est_vide():\n        val = p_temp.depiler()\n        pile.empiler(val)\n</code></pre> <p>Exercice 4</p> \u00c9nonc\u00e9Corr. Q1aCorr. Q1bCorr. Q2Corr. Q3Corr. Q4 <p>Exercice 5 du sujet Am\u00e9rique du Nord J1 - 2021</p> <p>Le contenu de la pile P sera </p> \ud83d\udc0d Script Python<pre><code>| \"rouge\" |\n| \"vert\"  |\n| \"jaune\" |\n| \"rouge\" |\n| \"jaune\" |\n _________\n</code></pre> \ud83d\udc0d Script Python<pre><code>def taille_file(F):\n    \"\"\"File -&gt; Int\"\"\"\n    F_temp = creer_file_vide()\n    n = 0\n    while not est_vide(F):\n        enfiler(F_temp, defiler(F))\n        n += 1\n    while not est_vide(F_temp):\n        enfiler(F, defiler(F_temp))\n    return n\n</code></pre> \ud83d\udc0d Script Python<pre><code>def former_pile(F):\n    \"\"\"File -&gt; Pile\"\"\"\n    P_temp = creer_pile_vide()\n    P = creer_pile_vide()\n    while not est_vide(F):\n        empiler(P_temp, defiler(F))\n    while not est_vide(P_temp):\n        empiler(P, depiler(P_temp))\n    return P\n</code></pre> \ud83d\udc0d Script Python<pre><code>def nb_elements(F, elt):\n    \"\"\"File, Int -&gt; Int\"\"\"\n    F_temp = creer_file_vide()\n    n = 0\n    while not est_vide(F):\n        val = defiler(F)\n        if val == elt:\n            n += 1\n        enfiler(F_temp, val)\n    while not est_vide(F_temp):\n        enfiler(F, deFiler(F_temp))\n    return n\n</code></pre> \ud83d\udc0d Script Python<pre><code>def verifier_contenu(F, nb_rouge, nb_vert, nb_jaune):\n    \"\"\"File, Int, Int, Int -&gt; Bool\"\"\"\n    return nb_elements(F, \"rouge\") &lt;= nb_rouge and \\\n           nb_elements(F, \"vert\") &lt;= nb_vert and \\\n           nb_elements(F, \"jaune\") &lt;= nb_jaune\n</code></pre> <p>Exercice 5</p> <p>Cet exercice est bas\u00e9 sur l'\u00e9nigme n\u00b05 d'Advent Of Code 2018.</p> <p>Le but est de r\u00e9duire le plus possible une cha\u00eene de caract\u00e8res (comme <code>dabAcCaCBAcCcaDA</code> ) en ob\u00e9issant \u00e0 la r\u00e8gle suivante :</p> <p>R\u00e8gle de simplification</p> <p>D\u00e8s que deux lettres identiques mais de casse diff\u00e9rente (majuscule-minuscule ou minuscule-majuscule) sont c\u00f4te \u00e0 c\u00f4te dans la cha\u00eene, on les supprime de la cha\u00eene.</p> <p>Exemple :  \ud83d\udccb Texte<pre><code>dabAcCaCBAcCcaDA  On enl\u00e8ve le premier 'cC'.\ndabAaCBAcCcaDA    Cela donne naissance \u00e0 un 'Aa', qu'on enl\u00e8ve.\ndabCBAcCcaDA      On enl\u00e8ve alors 'cC' (ou 'Cc', cela revient au m\u00eame).\ndabCBAcaDA        Plus aucune simplification n'est possible.\n</code></pre></p> <p>La cha\u00eene de caract\u00e8res qu'il va falloir simplifier contient ... 50000 caract\u00e8res.</p>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/Exercices/#1-elaboration-dune-fonction-utile","title":"1. \u00c9laboration d'une fonction utile","text":"<p>On rappelle que la fonction <code>ord</code> renvoie le code ASCII d'une lettre. En comparant les codes ASCII de deux lettres identiques mais de casse diff\u00e9rentes, en d\u00e9duire une fonction <code>simplifiable</code> qui prend en param\u00e8tres deux lettres <code>l1</code> et <code>l2</code> et qui renvoie un bool\u00e9en indiquant si ces deux lettres sont simplifiables. </p> <p>Exemples d'utilisation : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; simplifiable('c', 'C')\nTrue\n&gt;&gt;&gt; simplifiable('C', 'c')\nTrue\n&gt;&gt;&gt; simplifiable('C', 'C')\nFalse\n</code></pre></p> Correction \ud83d\udc0d Script Python<pre><code>def simplifiable(l1, l2):\n    return abs(ord(l1) - ord(l2)) == 32\n</code></pre>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/Exercices/#2-une-seule-simplification-de-la-chaine-de-caracteres","title":"2. Une seule simplification de la cha\u00eene de caract\u00e8res","text":"<p>\u00c9crire une fonction <code>simplifie</code> qui prend en param\u00e8tre une cha\u00eene de caract\u00e8re <code>s</code> et qui renvoie cette m\u00eame cha\u00eene de caract\u00e8res, ayant \u00e9t\u00e9 simplifi\u00e9e une fois au maximum.</p> <p>Principe : on parcourt la cha\u00eene et d\u00e8s qu'on trouve une simplification \u00e0 faire, on simplifie la cha\u00eene et on la renvoie imm\u00e9diatement.</p> <p>Exemples d'utilisation : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; simplifie('dabAcCaCBAcCcaDA')\n'dabAaCBAcCcaDA'\n&gt;&gt;&gt; simplifie('dabAaCBAcCcaDA')\n'dabCBAcCcaDA'\n&gt;&gt;&gt; simplifie('dabCBAcCcaDA')\n'dabCBAcaDA'\n&gt;&gt;&gt; simplifie('dabCBAcaDA')\n'dabCBAcaDA'\n</code></pre></p> <p>Pour information, on rappelle la technique de slicing de cha\u00eene de caract\u00e8res : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; ch = 'abcde'\n&gt;&gt;&gt; ch[:2]\n'ab'\n&gt;&gt;&gt; ch[2:]\n'cde'\n</code></pre></p> Correction \ud83d\udc0d Script Python<pre><code>def simplifie(s):\n    for i in range(len(s) - 1):\n        if simplifiable(s[i+1], s[i]):\n            return s[:i] + s[i+2:]\n    return s\n</code></pre>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/Exercices/#3-resolution-du-probleme","title":"3. R\u00e9solution du probl\u00e8me","text":"<p>Apr\u00e8s vous \u00eatre demand\u00e9 comment savoir facilement qu'une cha\u00eene n'\u00e9tait plus simplifiable, proposer une fonction <code>reduction</code> qui prend en param\u00e8tre une cha\u00eene <code>s</code> et qui renvoie cette cha\u00eene <code>s</code> une fois effectu\u00e9es toutes les simplifications possibles.</p> <p>Exemple d'utilisation : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; reduction('dabAcCaCBAcCcaDA')\n'dabCBAcaDA'\n</code></pre></p> Correction \ud83d\udc0d Script Python<pre><code>def reduction(s):\n    fini = False\n    while not fini:\n        s_temp = s\n        s = simplifie(s)\n        if len(s_temp) == len(s):\n            fini = True\n    return s\n</code></pre>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/Exercices/#4-le-vrai-enonce-dadvent-of-code","title":"4. Le vrai \u00e9nonc\u00e9 d'Advent of Code","text":"<p>Dans cette \u00e9nigme n\u00b05, la r\u00e9ponse \u00e0 donner est le nombre de caract\u00e8res de la cha\u00eene une fois simplifi\u00e9e. Ce qui ne devrait pas nous poser de probl\u00e8me.</p> <p>Par contre, la cha\u00eene <code>'dabAcCaCBAcCcaDA'</code> sur laquellle nous avons travaill\u00e9 n'est qu'un exemple... La vraie cha\u00eene contient 50000 caract\u00e8res : </p> <p>Anecdotique ? Pas vraiment...</p> <p>Effectuez la r\u00e9duction de cette cha\u00eene avec votre programme pr\u00e9c\u00e9dent. Que remarquez-vous ?</p> Correction \ud83d\udc0d Script Python<pre><code>s = 'YyLlXxYKkbNnQqBFfxXbyYWwBhHyYTCBbCjI...'\n\ndef simplifiable(l1, l2):\n    return abs(ord(l1) - ord(l2)) == 32\n\ndef simplifie(s):\n    for i in range(len(s) - 1):\n        if simplifiable(s[i+1], s[i]):\n            return s[:i] + s[i+2:]\n    return s\n\ndef reduction(s):\n    fini = False\n    while not fini:\n        s_temp = s\n        s = simplifie(s)\n        if len(s_temp) == len(s):\n            fini = True\n    return s\n\nprint(len(reduction(s)))\n</code></pre> <p>Le r\u00e9sultat (9370) est loooong \u00e0 nous parvenir ! (30 secondes sur ma machine)</p>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/Exercices/#5-sauve-par-une-pile","title":"5. Sauv\u00e9 par une pile","text":"<p>Cet exercice peut \u00eatre r\u00e9solu beaucoup plus efficacement gr\u00e2ce \u00e0 l'utilisation d'une pile... mais comment ?</p> <p>Vous pouvez utiliser l'impl\u00e9mentation de pile disponible ici.</p> Aide \u00e0 la construction de l'algorithme <p>Pour chaque lettre de la cha\u00eene :</p> <ul> <li>si la pile est vide, on empile cette lettre</li> <li>sinon, on regarde si la lettre est simplifiable avec la lettre du haut de la pile :<ul> <li>si oui, on supprime cette lettre du haut de la pile et on passe \u00e0 la lettre suivante de la cha\u00eene</li> <li>si non, on empile cette lettre sur la pile, et on passe \u00e0 la suivante.</li> </ul> </li> </ul> Correction \ud83d\udc0d Script Python<pre><code>s = 'YyLlXxYKkbNnQqBFfxXbyYWwBhHyYTCBbCjI...'\n\np = Pile() # ne pas oublier de r\u00e9cup\u00e9rer une impl\u00e9mentation de la classe Pile()...\n\ndef simplifiable(l1, l2):\n    return abs(ord(l1) - ord(l2)) == 32\n\nfor lettre in s:\n    if p.est_vide():\n        p.empile(lettre)\n    else:\n        sommet = p.depile()\n        if not simplifiable(sommet, lettre):\n            p.empile(sommet)\n            p.empile(lettre)\n\nprint(p.taille())     \n</code></pre> <p>Le r\u00e9sultat est cette fois imm\u00e9diat : 0.04 secondes sur ma machine, soit environ 1000 fois plus rapide que le code pr\u00e9c\u00e9dent.</p>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/cours/","title":"Structures de donn\u00e9es lin\u00e9aires :  piles, files","text":""},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/cours/#0-preambule-interface-implementation","title":"0. Pr\u00e9ambule : interface \u2260 impl\u00e9mentation","text":"<p>Les structures que nous allons voir peuvent s'envisager sous deux aspects : - le c\u00f4t\u00e9 utilisateur, qui utilisera une interface pour manipuler les donn\u00e9es. - le c\u00f4t\u00e9 concepteur, qui aura choisi une impl\u00e9mentation pour construire la structure de donn\u00e9es.</p> <p>Par exemple, le volant et les p\u00e9dales constituent (une partie de) l'interface d'une voiture. L'impl\u00e9mentation va d\u00e9signer tous les m\u00e9canismes techniques qui sont mis en \u0153uvre pour que le mouvement de rotation du volant aboutisse \u00e0 un changement de direction des roues. </p> <p></p> <p>Nous avons d\u00e9j\u00e0 abord\u00e9 ces deux aspects lors de la d\u00e9couverte de la Programmation Orient\u00e9e Objet. Le principe d'encapsulation fait que l'utilisateur n'a qu'\u00e0 conna\u00eetre l'existence des m\u00e9thodes disponibles, et non pas le contenu technique de celle-ci. Cela permet notamment de modifier le contenu technique (l'impl\u00e9mentation) sans que les habitudes de l'utilisateur (l'interface) ne soient chang\u00e9es.</p>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/cours/#1-structures-de-donnees-lineaires","title":"1. Structures de donn\u00e9es lin\u00e9aires","text":""},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/cours/#11-a-chaque-donnee-sa-structure","title":"1.1 \u00c0 chaque donn\u00e9e sa structure","text":"<p>En informatique comme dans la vie courante, il est conseill\u00e9 d'adapter sa mani\u00e8re de stocker et de traiter des donn\u00e9es en fonction de la nature de celles-ci : - Le serveur d'un caf\u00e9, charg\u00e9 de transporter les boissons du comptoir aux tables des clients, n'utilisera pas un sac en plastique pour faire le transport : il pr\u00e9f\u00e8rera un plateau.  - Le chercheur de champignons, lui, n'utilisera pas un plateau pour stocker ses trouvailles : il pr\u00e9f\u00e8rera un panier. - Pour stocker des chaussettes, on pr\u00e9f\u00e8rera les entasser dans un tiroir (apr\u00e8s les avoir appair\u00e9es), plut\u00f4t que de les suspendre \u00e0 des cintres. </p> <p>De m\u00eame en informatique, pour chaque type de donn\u00e9es, pour chaque utilisation pr\u00e9vue, une structure particuli\u00e8re de donn\u00e9es se rev\u00e8lera (peut-\u00eatre) plus adapt\u00e9e qu'une autre.</p> <p>Int\u00e9ressons nous par exemple aux donn\u00e9es lin\u00e9aires. Ce sont des donn\u00e9es qui ne comportent pas de hi\u00e9rarchie : toutes les donn\u00e9es sont de la m\u00eame nature et ont le m\u00eame r\u00f4le.  Par exemple, un relev\u00e9 mensuel de temp\u00e9ratures, la liste des \u00e9l\u00e8ves d'une classe, un historique d'op\u00e9rations bancaires... </p> <p>Ces donn\u00e9es sont \u00abplates\u00bb, n'ont pas de sous-domaines : la structure de liste para\u00eet parfaitement adapt\u00e9e. </p> <p>Lorsque les donn\u00e9es de cette liste sont en fait des couples (comme dans le cas d'une liste de noms/num\u00e9ros de t\u00e9l\u00e9phone), alors la structure la plus adapt\u00e9e est sans doute celle du dictionnaire.</p> <p>Les listes et les dictionnaires sont donc des exemples de structures de donn\u00e9es lin\u00e9aires.</p> <p>M\u00eame si ce n'est pas l'objet de ce cours, donnons des exemples de structures adapt\u00e9es aux donn\u00e9es non-lin\u00e9aires :</p> <p>Si une liste de courses est subdivis\u00e9e en \"rayon frais / bricolage / papeterie\" et que le rayon frais est lui-m\u00eame s\u00e9par\u00e9 en \"laitages / viandes / fruits &amp; l\u00e9gumes\", alors une structure d'arbre sera plus adapt\u00e9e pour la repr\u00e9senter. Les structures arborescentes seront vues plus tard en Terminale.</p> <p>Enfin, si nos donn\u00e9es \u00e0 \u00e9tudier sont les relations sur les r\u00e9seaux sociaux des \u00e9l\u00e8ves d'une classe, alors la structure de graphe s'imposera d'elle-m\u00eame. Cette structure sera elle-aussi \u00e9tudi\u00e9e plus tard cette ann\u00e9e. </p>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/cours/#12-comment-seront-traitees-ces-donnees-lineaires-listes-piles-et-files","title":"1.2 Comment seront trait\u00e9es ces donn\u00e9es lin\u00e9aires ? Listes, piles et files","text":"<p>La nature des donn\u00e9es ne fait pas tout. Il faut aussi s'int\u00e9resser \u00e0 la mani\u00e8re dont on voudra les traiter : \u00e0 quelle position les faire entrer dans notre structure ? \u00c0 quel moment devront-elles en \u00e9ventuellement en sortir ?</p> <p>Lorsque cette probl\u00e9matique d'entr\u00e9e/sortie n'intervient pas, la structure \u00abclassique\u00bb de liste est adapt\u00e9e. Mais lorsque celle-ci est importante, il convient de diff\u00e9rencier la structure de pile de celle de file.</p>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/cours/#121-les-piles-stack","title":"1.2.1 Les piles (stack)","text":"<p>Une structure de pile (penser \u00e0 une pile d'assiette) est associ\u00e9e \u00e0 la m\u00e9thode LIFO (Last In, First Out) : les \u00e9l\u00e9ments sont empil\u00e9s les uns au-dessus des autres, et on ne peut toujours d\u00e9piler que l'\u00e9l\u00e9ment du haut de la pile. Le dernier \u00e9l\u00e9ment \u00e0 \u00eatre arriv\u00e9 est donc le premier \u00e0 \u00eatre sorti.</p> <p></p> <p>Exemples de donn\u00e9es stock\u00e9es sous forme de pile :  - lors de l'ex\u00e9cution d'une fonction r\u00e9cursive, le processeur empile successivement les appels \u00e0 traiter : seule l'instruction du haut de la pile peut \u00eatre trait\u00e9e.</p> <p></p> <ul> <li>dans un navigateur internet, la liste des pages parcourues est stock\u00e9e sous forme de pile : la fonction \u00abBack\u00bb permet de \u00abd\u00e9piler\u00bb peu \u00e0 peu les pages pr\u00e9c\u00e9demment parcourues : </li> </ul> <p></p> <ul> <li>lors d'un Devoir Surveill\u00e9, la derni\u00e8re copie remise sur le bureau du professeur est (souvent) la premi\u00e8re corrig\u00e9e.</li> </ul>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/cours/#122-les-files-queue","title":"1.2.2 Les files (queue)","text":"<p>Une structure de file (penser \u00e0 une file d'attente) est associ\u00e9e \u00e0 la m\u00e9thode FIFO (First In, First Out) : les \u00e9l\u00e9ments sont enfil\u00e9s les uns \u00e0 la suite des autres, et on ne peut toujours d\u00e9filer que l'\u00e9l\u00e9ment du haut de la file. Le premier \u00e9l\u00e9ment \u00e0 \u00eatre arriv\u00e9 est donc le premier \u00e0 en sortir. Sinon \u00e7a r\u00e2le dans la file d'attente.</p> <p></p> <p>Exemples de donn\u00e9es stock\u00e9es sous forme de file :  - les documents envoy\u00e9s \u00e0 l'imprimante sont trait\u00e9es dans une file d'impression. - la \u00abqueue\u00bb \u00e0 la cantine est (normalement) trait\u00e9e sous forme de file.</p>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/cours/#123-le-probleme-du-stockage-transformer-les-piles-en-files","title":"1.2.3 Le probl\u00e8me du stockage : transformer les piles en files","text":"<p>Dans les entrep\u00f4ts de stockage, comme dans les rayons d'un supermarch\u00e9, la structure naturelle est celle de la pile : les gens attrapent l'\u00e9l\u00e9ment situ\u00e9 devant eux (\u00aben haut de la pile\u00bb). Si les employ\u00e9s du supermarch\u00e9 remettent en rayon les produits plus r\u00e9cents sur le dessus de la pile, les produits au bas de la pile ne seront jamais choisis et p\u00e9rimeront. Ils doivent donc transformer la pile en file : lors de la mise en rayon de nouveaux produits, ceux-ci seront plac\u00e9s derri\u00e8re (\u00abau bas de la file\u00bb) afin que partent en priorit\u00e9 les produits \u00e0 date de p\u00e9remption plus courte. On passe donc du LIFO au FIFO.  </p> <p>Certains dispositifs permettent de le faire naturellement : Ci-dessous, une file... de piles (\u00e9lectriques). Le chargement par le haut du distributeur fait que celle qui sera sortie (en bas) sera celle qui aurait \u00e9t\u00e9 rentr\u00e9e en premier (par le haut). Ce FIFO est donc provoqu\u00e9 naturellement par la gravit\u00e9 (et un peu d'astuce).&lt;br /</p> <p></p> <p>Cette probl\u00e9matique est universelle : voir par exemple ce site.</p> <p>Arr\u00eatons-nous maintenant en d\u00e9tail sur les interfaces et impl\u00e9mentations possibles des listes, des piles et des files.</p>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/cours/#2-les-listes","title":"2. Les listes","text":""},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/cours/#21-definition-generale","title":"2.1 D\u00e9finition g\u00e9n\u00e9rale","text":"<p>Une liste est un ensemble ordonn\u00e9 d'objets. G\u00e9n\u00e9ralement, ces donn\u00e9es seront de m\u00eame type, mais ce n'est pas structurellement obligatoire.</p>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/cours/#22-les-listes-chainees","title":"2.2 Les listes cha\u00een\u00e9es","text":"<p>Lorsque l'impl\u00e9mentation de la liste fait appara\u00eetre une cha\u00eene de valeurs, chacune pointant vers la suivante, on dit que la liste est une liste cha\u00een\u00e9e.</p> <p></p> <p>Impl\u00e9mentation choisie : - Une liste est caract\u00e9ris\u00e9e par un ensemble de cellules. - Le lien (on dira souvent le \u00abpointeur\u00bb) vers la variable est un lien vers la premi\u00e8re cellule, qui renverra elle-m\u00eame sur la deuxi\u00e8me, etc. - Chaque cellule contient donc une valeur et un lien vers la cellule suivante. - Une liste peut \u00eatre vide (la liste vide est not\u00e9e <code>x</code> ou bien <code>None</code> sur les sch\u00e9mas)</p> <p>Une cons\u00e9quence de cette impl\u00e9mentation sous forme de liste cha\u00een\u00e9e est la non-constance du temps d'acc\u00e8s \u00e0 un \u00e9l\u00e9ment de liste : pour acc\u00e9der au 3\u00e8me \u00e9l\u00e9ment, il faut obligatoirement passer par les deux pr\u00e9c\u00e9dents.</p> <p>\u00c0 retenir : dans une liste cha\u00een\u00e9e, le temps d'acc\u00e8s aux \u00e9l\u00e9ments n'est pas constant.</p>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/cours/#23-exemple-dimplementation-minimale-dune-liste-chainee","title":"2.3 Exemple d'impl\u00e9mentation minimale d'une liste cha\u00een\u00e9e","text":"\ud83d\udc0d Script Python<pre><code>class Cellule :\n\n    def __init__(self, contenu, suivante):\n        self.contenu = contenu\n        self.suivante = suivante\n</code></pre> <p>Cette impl\u00e9mentation rudimentaire permet bien la cr\u00e9ation d'une liste :</p> \ud83d\udc0d Script Python<pre><code>lst = Cellule(3, Cellule(5, Cellule(1,None)))\n</code></pre> <p>La liste cr\u00e9\u00e9e est donc : </p> <p>Mais plus pr\u00e9cis\u00e9ment, on a : </p> <p>A faire</p> Enonc\u00e9Correction <p>retrouvez comment acc\u00e9der aux \u00e9l\u00e9ments 3, 5 et 1.</p> <p>pour 3 : lst.contenu  pour 5 : lst.suivante.contenu  pour 1 : lst.suivante.suivante.contenu</p> <p>On pourra remarquer que l'interface propos\u00e9e \u00e0 l'utilisateur n'est pas des plus pratiques...</p>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/cours/#24-et-les-listes-de-python","title":"2.4 Et les listes de Python ???","text":"<p>Nous connaissons d\u00e9j\u00e0 les listes de Python :</p> \ud83d\udc0d Script Python<pre><code>maliste = [3,1,-1,42]\n</code></pre> <p>Et nous connaissons aussi (un peu) l'interface de ce type <code>list</code>, notamment avec les m\u00e9thodes <code>append()</code> ou <code>reverse()</code>. N\u00e9anmoins, l'impl\u00e9mentation qui a \u00e9t\u00e9 choisie par les concepteurs de Python de ce type <code>list</code> fait que le celui-ci se rapproche plus d'un tableau dynamique. </p> <p>Dans un tableau dynamique : - le temps d'acc\u00e8s \u00e0 n'importe quel \u00e9l\u00e9ment est rapide. Ce temps d'acc\u00e8s est constant quelque soit l'\u00e9l\u00e9ment : on dit que l'acc\u00e8s est en \\(O(1)\\). - l'insertion d'un \u00e9l\u00e9ment au d\u00e9but ou au milieu de la liste est lente : cela oblige \u00e0 d\u00e9caler tous les \u00e9l\u00e9ments \u00e0 droite de celui-ci. Le temps pris par l'insertion est proportionnel au nombre d'\u00e9l\u00e9ments \u00e0 d\u00e9placer : on dit que l'insertion est en \\(O(n)\\).</p> <p>Dans une liste cha\u00een\u00e9e : - le temps d'acc\u00e8s \u00e0 n'importe quel \u00e9l\u00e9ment peut \u00eatre lent (proportionnel \u00e0 la position de l'\u00e9l\u00e9ment dans la liste). Le temps d'acc\u00e8s est en \\(O(n)\\). - l'insertion d'un \u00e9l\u00e9ment \u00e0 l'int\u00e9rieur de la liste est rapide : il y a simplement \u00e0 modifier la valeur du lien de la cellule \u00e0 gauche de l'endroit d'insertion. L'action d'ins\u00e9rer est donc en \\(O(1)\\). Toutefois, avant d'arriver \u00e0 l'endroit d'insertion, il faut avoir parcouru toutes les cellules pr\u00e9c\u00e9dentes ! Le temps total d'insertion est donc lui aussi lin\u00e9aire, en \\(O(n)\\).</p> <p>Nous nous servirons parfois du type <code>list</code> de Python dans la suite de ce cours, mais il ne faut pas oublier qu'il n'est pas un \u00abvrai\u00bb type <code>list</code>.</p>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/cours/#25-un-exemple-dinterface-pour-les-listes","title":"2.5 Un exemple d'interface pour les listes","text":"<p>Imaginons que nous poss\u00e9dons une interface offrant les fonctionnalit\u00e9s suivantes :  - <code>Liste()</code> : cr\u00e9e une liste vide. - <code>est_vide()</code> : indique si la liste est vide. - <code>ajoute_tete()</code> : ins\u00e8re un \u00e9l\u00e9ment en t\u00eate de liste. - <code>renvoie_tete()</code> : renvoie la valeur de l'\u00e9l\u00e9ment en t\u00eate de liste ET le supprime de la liste.</p> <p>Exercice</p> Entra\u00eenementCorrection <p>On consid\u00e8re l'encha\u00eenement d'op\u00e9rations ci-dessous. \u00c9crire \u00e0 chaque \u00e9tape l'\u00e9tat de la liste <code>lst</code> et la valeur \u00e9ventuellement renvoy\u00e9e.</p> \ud83d\udc0d Script Python<pre><code>1. lst = Liste()      # lst = \n2. lst.ajoute_tete(3) # lst = \n3. lst.ajoute_tete(5) # lst = \n4. lst.ajoute_tete(1) # lst = \n5. lst.renvoie_tete() # \n6. lst.est_vide()     # \n7. lst.ajoute_tete(2) # lst = \n8. lst.renvoie_tete() # \n9. lst.renvoie_tete() # \n10. lst.renvoie_tete()# \n11. lst.est_vide()    #  \n</code></pre> \ud83d\udc0d Script Python<pre><code>1. lst = Liste()      # lst = None\n2. lst.ajoute_tete(3) # lst = 3\n3. lst.ajoute_tete(5) # lst = 5 3 \n4. lst.ajoute_tete(1) # lst = 1 5 3\n5. lst.renvoie_tete() # lst = 5 3 valeur renvoy\u00e9e : 1\n6. lst.est_vide()     # valeur renvoy\u00e9e : False\n7. lst.ajoute_tete(2) # lst = 2 5 3\n8. lst.renvoie_tete() # lst = 5 3 valeur renvoy\u00e9e : 2\n9. lst.renvoie_tete() # lst = 3 valeur renvoy\u00e9e : 5\n10. lst.renvoie_tete()# lst = None valeur renvoy\u00e9e : 3\n11. lst.est_vide()    #  valeur renvoy\u00e9e : True\n</code></pre>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/cours/#3-les-piles","title":"3. Les piles","text":"<p>Comme expliqu\u00e9 pr\u00e9c\u00e9demment, une pile travaille en mode LIFO (Last In First Out). Pour \u00eatre utilis\u00e9e, l'interface d'une pile doit permettre a minima : - la cr\u00e9ation d'une pile vide - l'ajout d'un \u00e9l\u00e9ment dans la pile (qui sera forc\u00e9ment au dessus). On dira qu'on empile. - le retrait d'un \u00e9l\u00e9ment de la pile (qui sera forc\u00e9ment celui du dessus) et le renvoi de sa valeur. On dira qu'on d\u00e9pile.</p>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/cours/#31-utilisation-dune-interface-de-pile","title":"3.1 Utilisation d'une interface de pile","text":"<p>Exercice : </p> Entra\u00eenementCorrection <p>On consid\u00e8re l'encha\u00eenement d'op\u00e9rations ci-dessous. \u00c9crire \u00e0 chaque \u00e9tape l'\u00e9tat de la pile <code>p</code> et la valeur \u00e9ventuellement renvoy\u00e9e.</p> <p>Bien comprendre que la classe <code>Pile()</code> et ses m\u00e9thodes n'existent pas vraiment. Nous jouons avec son interface.</p> \ud83d\udc0d Script Python<pre><code>1. p = Pile()   # p\n2. p.empile(3)  # p=\n3. p.empile(5)  # p= \n4. p.est_vide() #  \n4. p.empile(1)  # p= \n5. p.depile()   # p= \n6. p.depile()   # p= \n7. p.empile(9)  # p= \n8. p.depile()   # p= \n9. p.depile()   # p= \n10. p.est_vide() # \n</code></pre> \ud83d\udc0d Script Python<pre><code>1. p = Pile()  # p=None\n2. p.empile(3)   # p= 3\n3. p.empile(5)  # p= 3 5 par convention\n4. p.est_vide()  #  False\n4. p.empile(1)  # p= 3 5 1\n5. p.depile()  # p= 3 5    valeur renvoy\u00e9e : 1\n6. p.depile()  # p= 3      valeur renvoy\u00e9e : 5\n7. p.empile(9)  # p= 3 9\n8. p.depile()  # p= 3       valeur renvoy\u00e9e :9\n9. p.depile()  # p= None      valeur renvoy\u00e9e : 3\n10. p.est_vide() # True\n</code></pre>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/cours/#32-implementations-dune-pile","title":"3.2 Impl\u00e9mentation(s) d'une pile","text":"<p>L'objectif est de cr\u00e9er une classe <code>Pile</code>. L'instruction  <code>Pile()</code>  cr\u00e9era une pile vide. Chaque objet <code>Pile</code> disposera des m\u00e9thodes suivantes :</p> <ul> <li><code>est_vide()</code> : indique si la pile est vide.</li> <li><code>empile()</code> : ins\u00e8re un \u00e9l\u00e9ment en haut de la pile.</li> <li><code>depile()</code> : renvoie la valeur de l'\u00e9l\u00e9ment en haut de la pile ET le supprime de la pile.</li> <li><code>__str__()</code> : permet d'afficher la pile sous forme agr\u00e9able (par ex : <code>|3|6|2|5|</code>) par <code>print()</code></li> </ul>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/cours/#321-a-laide-du-type-list-de-python","title":"3.2.1 \u00c0 l'aide du type <code>list</code> de Python","text":"<p>Exercice</p> Enonc\u00e9Correction <p>cr\u00e9er la classe ci-dessus. Le type <code>list</code> de Python est parfaitement adapt\u00e9.  Des renseignement int\u00e9ressants \u00e0 son sujet peuvent \u00eatre trouv\u00e9s ici.</p> \ud83d\udc0d Script Python<pre><code>class Pile:\n    def __init__(self):\n        self.data = []\n\n    def est_vide(self):\n        return len(self.data) == 0 \n\n    def empile(self,x):\n        pass\n\n    def depile(self):\n        pass\n\n    def __str__(self):       # Hors-Programme : pour afficher \n        s = \"|\"              # convenablement la pile avec print(p)\n        for k in self.data :\n            s = s + str(k) + \"|\"\n        return s\n\n    def __repr__(self):       # Hors-Programme : pour afficher \n        s = \"|\"              # convenablement la pile avec p\n        for k in self.data :\n            s = s + str(k) + \"|\"\n        return s  \n\n    p = Pile()\n    p.empile(5)\n    p.empile(3)\n    p.empile(7)\n</code></pre> \ud83d\udc0d Script Python<pre><code>class Pile:\n    def __init__(self):\n        self.data = []\n\n    def est_vide(self):\n        return len(self.data) == 0 \n\n\n    def empile(self,x):\n        self.data.append(x)\n\n    def depile(self):\n        if self.est_vide() == True :\n            raise IndexError(\"Vous avez essay\u00e9 de d\u00e9piler une pile vide !\")\n        else :\n            return self.data.pop() \n\n    def __str__(self):       # Hors-Programme : pour afficher \n        s = \"|\"              # convenablement la pile avec print(p)\n        for k in self.data :\n            s = s + str(k) + \"|\"\n        return s\n\n    def __repr__(self):       # Hors-Programme : pour afficher \n        s = \"|\"              # convenablement la pile avec p\n        for k in self.data :\n            s = s + str(k) + \"|\"\n        return s  \n\n    p = Pile()\n    p.empile(5)\n    p.empile(3)\n    p.empile(7)\n\n    p \n    &gt;&gt;&gt; |5|3|7|\n</code></pre>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/cours/#322-a-laide-dune-liste-chainee-et-de-la-classe-cellule-creee-au-23","title":"3.2.2 \u00c0 l'aide d'une liste cha\u00een\u00e9e et de la classe  <code>Cellule</code> cr\u00e9\u00e9e au 2.3","text":"<p>Au 2.3 nous avons cr\u00e9\u00e9 la classe  <code>Cellule</code> :</p> \ud83d\udc0d Script Python<pre><code>class Cellule :\n\n    def __init__(self, contenu, suivante):\n        self.contenu = contenu\n        self.suivante = suivante\n</code></pre> <p>Exercice</p> Enonc\u00e9Correction <p>\u00e0 l'aide cette classe, re-cr\u00e9er une classe <code>Pile</code> disposant exactement de la m\u00eame interface que dans l'exercice pr\u00e9c\u00e9dent.</p> \ud83d\udc0d Script Python<pre><code>class Pile:\n    def __init__(self):\n        self.data = None\n\n    def est_vide(self):\n        return self.data == None\n\n    def empile(self, x):\n        pass\n\n    def depile(self):\n        #on r\u00e9cup\u00e8re la valeur \u00e0 renvoyer\n        # on supprime la 1\u00e8re cellule  \n        return \n\n    def __str__(self):\n        s = \"|\"\n        c = self.data\n        while c != None :\n            s += str(c.contenu)+\"|\"\n            c = c.suivante\n        return s\n\n    p = Pile()\n    p.empile(5)\n    p.empile(3)\n    p.empile(7)\n\n    print(p)\n    &gt;&gt;&gt; |7|3|5|\n</code></pre> \ud83d\udc0d Script Python<pre><code>class Pile:\n    def __init__(self):\n        self.data = None\n\n    def est_vide(self):\n        return self.data == None\n\n    def empile(self, x):\n        self.data = Cellule(x,self.data)\n\n    def depile(self):\n        v = self.data.contenu #on r\u00e9cup\u00e8re la valeur \u00e0 renvoyer\n        self.data = self.data.suivante  # on supprime la 1\u00e8re cellule  \n        return v\n\n    def __str__(self):\n        s = \"|\"\n        c = self.data\n        while c != None :\n            s += str(c.contenu)+\"|\"\n            c = c.suivante\n        return s\n</code></pre> <p>\u00c0 retenir</p> <p>pour l'utilisateur, les interfaces du 3.2.1 et 3.2.2 sont strictement identiques. Il ne peut pas savoir, en les utilisant, l'impl\u00e9mentation qui est derri\u00e8re.  </p>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/cours/#33-application-des-piles","title":"3.3 Application des piles","text":"<p>Navigation web</p> Enonc\u00e9Correction <p>\u00c0 l'aide de deux variables <code>adresses</code> et <code>adresse_courante</code>, et de la classe <code>Pile</code> cr\u00e9\u00e9e plus haut, simulez une gestion de l'historique de navigation internet. Seules deux fonctions <code>go_to(nouvelle_adresse)</code> et <code>back()</code> sont \u00e0 cr\u00e9er.</p> \ud83d\udc0d Script Python<pre><code>adresses = Pile()\nadresse_courante = \"\"\n\ndef go_to(nouvelle_adresse) :\n    global adresse_courante\n    #\n    #\n\ndef back():\n    global adresse_courante\n    #\n    #\n\n#Exemple d'utilisation :\ngo_to(\"google.fr\")\ngo_to(\"lemonde.fr\")\ngo_to(\"blabla.fr\")\n\nback()\nadresse_courante\n&gt;&gt; 'lemonde.fr'\n</code></pre> \ud83d\udc0d Script Python<pre><code>adresses = Pile()\nadresse_courante = \"\"\n\ndef go_to(nouvelle_adresse) :\n    global adresse_courante\n    adresses.empile(nouvelle_adresse)\n    adresse_courante = nouvelle_adresse\n\ndef back():\n    global adresse_courante\n    adresses.depile()\n    adresse_courante = adresses.data.contenu\n</code></pre>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/cours/#4-les-files","title":"4. Les files","text":"<p>Comme expliqu\u00e9 pr\u00e9c\u00e9demment, une file travaille en mode FIFO (First In First Out). Pour \u00eatre utilis\u00e9e, une file doit permettre a minima : - la cr\u00e9ation d'une file vide - l'ajout d'un \u00e9l\u00e9ment dans la file (qui sera forc\u00e9ment au dessous). On dira qu'on enfile. - le retrait d'un \u00e9l\u00e9ment de la file (qui sera forc\u00e9ment celui du dessus) et le renvoi de sa valeur. On dira qu'on d\u00e9file.</p>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/cours/#41-utilisation-dune-interface-de-file","title":"4.1 Utilisation d'une interface de file","text":"<p>Exercice</p> Enonc\u00e9Correction <p>On consid\u00e8re l'encha\u00eenement d'op\u00e9rations ci-dessous. \u00c9crire \u00e0 chaque \u00e9tape l'\u00e9tat de la file <code>f</code> et la valeur \u00e9ventuellement renvoy\u00e9e.</p> \ud83d\udc0d Script Python<pre><code>1. f = File()\n2. f.enfile(3) # f =\n3. f.enfile(5) # f  = \n4. f.est_vide() # \n4. f.enfile(1) # f  = \n5. f.defile() # \n6. f.defile() # \n7. f.enfile(9) # \n8. f.defile() # \n9. f.defile()# \n10. f.est_vide() # \n</code></pre> \ud83d\udc0d Script Python<pre><code>1. f = File()\n2. f.enfile(3) # f = 3\n3. f.enfile(5) # f  = 5 3\n4. f.est_vide() # False\n4. f.enfile(1) # f  = 1 5 3\n5. f.defile() # val renvoy\u00e9e : 3 , f =  1 5\n6. f.defile() # val renvoy\u00e9e : 5 , f =  1 \n7. f.enfile(9) # f = 9 1\n8. f.defile() # val renvoy\u00e9e : 1 , f =  9 \n9. f.defile()# val renvoy\u00e9e : 9 , f =  \n10. f.est_vide() # True\n</code></pre>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/cours/#42-implementation-dune-file","title":"4.2 Impl\u00e9mentation d'une file","text":"<p>L'objectif est de cr\u00e9er une classe <code>File</code>, disposant des m\u00e9thodes suivantes : - <code>File()</code> : cr\u00e9e une file vide. - <code>est_vide()</code> : indique si la file est vide. - <code>enfile()</code> : ins\u00e8re un \u00e9l\u00e9ment en bas de la file. - <code>defile()</code> : renvoie la valeur de l'\u00e9l\u00e9ment en haut de la file ET le supprime de la file. - <code>__str__()</code> : permet d'afficher la file sous forme agr\u00e9able (par ex : <code>|3|6|2|5|</code>) par <code>print()</code></p> <p>Exercice</p> Enonc\u00e9Correction <p>cr\u00e9er la classe ci-dessus. L\u00e0 encore, le type \u00ablist\u00bb de Python est peut \u00eatre utilis\u00e9, voir ici. N\u00e9anmoins quelques remarques seront \u00e0 apporter.</p> \ud83d\udc0d Script Python<pre><code>class File:\n    def __init__(self):\n        self.data = []\n\n    def est_vide(self):\n        return len(self.data) == 0 \n\n    def enfile(self,x):\n        pass\n\n    def defile(self):\n        pass\n\n    def __str__(self):       # Hors-Programme : pour afficher \n        s = \"|\"              # convenablement la file avec print(p)\n        for k in self.data :\n            s = s + str(k) + \"|\"\n        return s\n\n    f = File()\n    f.enfile(5)\n    f.enfile(8)\n    print(f)\n    f.defile()\n</code></pre> \ud83d\udc0d Script Python<pre><code>class File:\n    def __init__(self):\n        self.data = []\n\n    def est_vide(self):\n        return len(self.data) == 0 \n\n\n    def enfile(self,x):\n        self.data.append(x)\n\n    def defile(self):\n        if self.est_vide() == True :\n            raise IndexError(\"Vous avez essay\u00e9 de d\u00e9filer une file vide !\")\n        else :\n            return self.data.pop(0) \n\n    def __str__(self):       # Hors-Programme : pour afficher \n        s = \"|\"              # convenablement la file avec print(p)\n        for k in self.data :\n            s = s + str(k) + \"|\"\n        return s\n</code></pre> <p>Remarque : Notre impl\u00e9mentation r\u00e9pond parfaitement \u00e0 l'interface qui \u00e9tait demand\u00e9e. Mais si le \u00abcahier des charges\u00bb obligeait \u00e0 ce que les op\u00e9rations <code>enfile()</code> et <code>defile()</code> aient lieu en temps constant (en \\(O(1)\\)), notre impl\u00e9mentation ne conviendrait pas.  </p> <p>En cause : notre m\u00e9thode <code>defile()</code> agit en temps lin\u00e9aire  (\\(O(n)\\)) et non pas en temps constant. L'utilisation de la structure de \u00abliste\u00bb de Python (les tableaux dynamiques) provoque, lors de l'instruction <code>self.data.pop(0)</code> un redimensionnement de la liste, qui voit dispara\u00eetre son premier \u00e9l\u00e9ment. Chaque \u00e9l\u00e9ment doit \u00eatre recopi\u00e9 dans la case qui pr\u00e9c\u00e8de, avant de supprimer la derni\u00e8re case. Ceci nous co\u00fbte un temps lin\u00e9aire.</p>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/cours/#43-implementation-dune-file-avec-deux-piles","title":"4.3 Impl\u00e9mentation d'une file avec deux piles","text":"<p>Comment cr\u00e9er une file avec 2 piles ? L'id\u00e9e est la suivante : on cr\u00e9e une pile d'entr\u00e9e et une pile de sortie.  - quand on veut enfiler, on empile sur la pile d'entr\u00e9e. - quand on veut d\u00e9filer, on d\u00e9pile sur la pile de sortie. - si celle-ci est vide, on d\u00e9pile enti\u00e8rement la pile d'entr\u00e9e dans la pile de sortie.</p> <p></p> \ud83d\udc0d Script Python<pre><code># il est imp\u00e9ratif de comprendre qu'on peut choisir l'impl\u00e9mentation\n# de la classe Pile qu'on pr\u00e9f\u00e8re parmi les deux trait\u00e9es plus haut.\n# Comme elles ont la M\u00caME INTERFACE et qu'on ne va se servir que\n# de cette interface, leur m\u00e9canisme interne n'a aucune influence\n# sur le code de la classe File que nous ferons ensuite.\n\n# au hasard, on choisit celle avec la liste cha\u00een\u00e9e :\n\nclass Pile:\n    def __init__(self):\n        self.data = None\n\n    def est_vide(self):\n        return self.data == None\n\n    def empile(self, x):\n        self.data = Cellule(x,self.data)\n\n    def depile(self):\n        v = self.data.contenu #on r\u00e9cup\u00e8re la valeur \u00e0 renvoyer\n        self.data = self.data.suivante  # on supprime la 1\u00e8re cellule  \n        return v\n\n    def __str__(self):\n        s = \"|\"\n        c = self.data\n        while c != None :\n            s += str(c.contenu)+\"|\"\n            c = c.suivante\n        return s\n\n\n# il ne faut pas oublier de remettre la classe Cellule qui intervient\n# dans notre classe Pile :\n\nclass Cellule :\n\n    def __init__(self, contenu, suivante):\n        self.contenu = contenu\n        self.suivante = suivante\n</code></pre> <p>A compl\u00e9ter</p> classe FileCorrection \ud83d\udc0d Script Python<pre><code>class File:\n    def __init__(self):\n        self.entree = Pile()\n        self.sortie = Pile()\n\n    def est_vide(self):\n        pass\n\n    def enfile(self,x):\n        pass\n\n    def defile(self):\n        pass\n\nf = File()\nf.enfile(5)\nf.enfile(8)\n\nf.defile()\n</code></pre> \ud83d\udc0d Script Python<pre><code>class File:\n    def __init__(self):\n        self.entree = Pile()\n        self.sortie = Pile()\n\n    def est_vide(self):\n        return self.entree.est_vide() and self.sortie.est_vide()\n\n    def enfile(self,x):\n        self.entree.empile(x)\n\n    def defile(self):\n        if self.est_vide():\n            raise IndexError(\"File vide !\")\n\n        if self.sortie.est_vide() == True :\n            while self.entree.est_vide() == False :\n                self.sortie.empile(self.entree.depile())\n\n        return self.sortie.depile()\n\n    def __str__(self):       # Hors-Programme : pour afficher \n        return str(self.entree) + str(self.sortie)\n</code></pre> <p>Bibliographie</p> <ul> <li>Num\u00e9rique et Sciences Informatiques, Terminale, T. BALABONSKI, S. CONCHON, J.-C. FILLIATRE, K. NGUYEN, \u00e9ditions ELLIPSES.</li> <li>Pr\u00e9pabac NSI, Terminale, G.CONNAN, V.PETROV, G.ROZSAVOLGYI, L.SIGNAC, \u00e9ditions HATIER.</li> <li>Cours du DIU-EIL, David RENAULT, Universit\u00e9 de Bordeaux.</li> <li>Cours de Gilles Lassus  Lyc\u00e9e Fran\u00e7ois Mauriac --  Bordeaux  </li> </ul>"},{"location":"T1_Structures_de_donnees/1.1_Listes_Piles_Files/data/chaine/","title":"Chaine","text":"\ud83d\udc0d Script Python<pre><code>s = 'YyLlXxYKkbNnQqBFfxXbyYWwBhHyYTCBbCjIiqwtTWQJczeEauUAZDdFfmwWMccbBOojBbXxKnNkkKsSeEsxXmxlpPLXMuULlSJqnSsNQmMmMCYyXDdvVDdtTxYmBbsSNdDnyYaAOBbouUwWiIMyYzZyPptGDbpoOPBdnNtTapPeEAHhrXxRtSjJsTPpepPGgCcEfFenNEmMGUpPugCanNAnNcEzZTtQqZzRreMmpzPpzZZJbBjxXTtEcCemMPJjXxhHTtydDmIOolLiJQqHhkKMmjVeEsSWwnNQqsNgGnLkKlcCSvdVvcCDeWPpwEvVUuNnTGhHgVZEenNQqRrTtSspjJPHhcNnYyCwoOHhcFJjaAXxDdqQfTnbBNtSsyLlYCGgWEezZiufFUhHHSshkKTvVoOtIfFTbBtTyYeqQEZnNztDdNnxYytFflLTWwSgGsmsSMXzvIikeEfFpPKdDccCTtFfqlRrLQgGqxyYXQCpuUPkQqKTeEtSsXmMmMxVDdWweuUEyYtFfboOBbBbBTuBbrReEKfAaFkoeEtTYyRroOQqcCjYyYycCtTJOLVvkKWwYylukKqnFfilEeXxLgVvqQGINQZJjlnNLzVvKkpjkKJPsSBIibQmMqXQqHhrTtRayYAECczgGZeHhFfMCbBcVvfFZzRrNlLwQqZzWnjUukKxXkKFfJuUzZqQyYfPpiIOojJFNZzhHlLnVfFvwYHhyWMmOUuqtTARWwrZNnzasSzYLlyCBbcLlKkoOZZzIiKkQiqQIRiIkKrgFfpPnexXEPpNTtOobgGBEeCDdcoOQqGQCUuhoOSnNsbBWwfFwiIFfEeZzWQEIieSmMaAsFfEeSsHKkhjOoJmvVMlLGtvVTTWwtgXSsxpPIZziKHhXXCLlcxyaeEcCAYxkLlCcEefOoFLlWweEyOnNojJZzYcXxmMWwXxydXxDFfgGYGGgxOpPoUuXRrgplLPWwqLlQEQYylLqgSsjJDsSIidIVviGnNaAFfelLVvdDHsShmCcroOOoJjSsQqqQHVFfvhiqQeEWmnNzZjJJbtTBsSjGgoOMKDdfqxXQFjJmMitTIcCkcCwrRxnNFfvVXIRDdJAXxahHZzJjzZBbjjbBJhuUAaxXHMwpPfFmMcCfuUyAfFauZUuuUzRrUjJuPZzfKlLdDhsSSsAatyYaAHhTbnNBbBQqmmiFfIxOZzoXAaAaWwMWwzZaAMhrRHHsNnSBboEeXCcxOrAaZzsSRkLqzZQPplFaIiAhHZzwWMmEeWwnplLmMQXDdYsSyWwxHhRrWwoOKhoOltTLHAaDdkgGLkKlquUPpXxdnNrRpXxPbNnbVviIGgBBzFfZIiwWDCcGggJjiIGxXxQGgqQqteENwWnTiIAAaaSsNnTVPpbBFfvtXCcDuUdDdBdhHKOokiWSCcswIcCcCKkoPSspOWwUkKuAaKkoOwhAawWaALlHCcWcJYyKkMmMmhHzZjvVtThHCDYyALlNnrRGcCVvpPgvCcMmVLhwWuUmMHUupPladDHhNnpPMTtmazZvVAakUuxXKDmMZzdGgLlABbNnMmWqQRrvVeEjSsJwJMmjTwAEQqeFfRrQqQqaqQdaADWGgtFfacCaBboVvZzDdOZzTtgGOFfGgoqBWwbxXZzsBVVvDnNhHXxdvZwWzOrRosSEeyYVvUuEebWwoOXxUuQqTqQtBbiIEXxeBHQqtTiIxXRZCtTchHQqzBktTKIitTNvVnYZzysEeSMBbKAjJpPFfavxLlXVQqKkDEMmYyenNXxtTlYbFfByLIiQqKkGPhHpFaxXAfglLYySsBpPvVbyYdnNyyYYKkXzZeEeEWwRxXreEgGUusHCPpczJjZOohsSpWtTwgGPKkvVFpPVvfSsOMmnPpNoOozezNnZksMmSIiaAEeGgoOpPuUWwDYcsYySPXCcYyoUNnCcuOZzLbBlAGguxnNwWvHhVXsPaApSPpQOoKtTVvExXekOmMoOooZzOOoIihQqHCcqmzIiZMQHhqTsSQqfFtxzwWrReETtmwNsOxXovVAeJjEaSnWMSNtTnsWsSwaAvVZJrRjfFnaANDdYzlLOoQqZysrRtTwvVWSRdAkXxKarvqQVgpPGOomkPpKMHhpPlkKDdpPLSszLlZyYBbxgGUuCdDeEcaACcXCclLRLllLIigGmMrRXxBbCcOoeELnNbBKxDdXHhkmMlTtpeEPQqzZDnNIiDBhqApPaQnNcpPCiSsqQIHiqQTsLnNlWKkNnwtWwAaThHFfGuUgSLsRrSliItFfDduQqSstTwcCKkWUhHLlSoGrbBOoRgWCcwgVvGtKkhPpBbHSsKkTFfUZEekKfcCWwHhYyFbBaAzuFrRAHvrReEVlLFfhaisVvSHvVXxlLjEeJJjgGjdDcCJhWwKkmMSXPpxsKzZwAaWkttTTaSapPXKkkrRhkgzZGCcKxXHuUKZWwzZzSsxdbBDXKkxfTtIiAaFhHmxXMnNJjUuxeEXuGgUuUzuUZjJvbBVtTpUuYykKPnNfFGGKkgoOxXggFfGrJjRoOaAOodHhxnNXcPtQqAaTmMZbBzpXeEdmzZmMkTtpPKFeEedDdDEhHqubBUQYQqykKcrRCfMSsAnPzZTtpuUNWwIiuURrdDaeECgGcyYzMIimXQqqaAQnJjwWaAeEKqQBCDdeEfeEGgaPpbBAhHKKkbmMBkOouCcrlcCdDsSLRmYyNnSRgGiFfIrcOHhUugGzZTdDtVPGgpvGgXxouLlNnlLUGgwZzHWwhPptTWfiFWwfoOsSIvsZzSVsSuSsUFGgETTkKzZtteJdIiDlLlLugjTiItFfJNnwWGiIlLKkTtnNDsSdpPUeEeEJjgGPSspzZbcjJCBAaeVPpLfSsFTXxtlBbhkFkKfuUQqKNnHkKMSshQqVvOpPrRXxZzSzZsZzHhNnWWwwqQUuBLlyYrRgGfTtFrxXUuEeYyUuKvVdDkqURFfFlLfxfFXmkKMCZAaYyTgGAatzcrNOoIntTNisSnrJjUuRHTthwWwByYmMDhHqQWzOjJoZwdhHFfboOdVvNdFDdOjJoeEOoIihHfqCcQaAmMcoJjZsDAadSeEzOSsCGeEUAcCaFaAtTnNYvVUuyZzLoiIcCOlhHfVvUuIicCeEDsSdDdrREeESsejWNnWwGgOdDuUfFcClLMEHhZzemtTEvVeXxGpPgSOUudDNfFPpnyrROoYEMmeyiIYoqVvuUJNnDdjQGgofFAaOuXKklfFdDmMLAauUSwWrXxRhHBWQqwbseEeExXbnNCcBEgGVCXQqxcwWvPPHhpraARICcQqwQPpqsStTWAaDdQxDdBbXlZzLbBdtsCcOoSOoaAEeHTthlcdDCLuUTDksSKktTqQvWOowhHCkKbxVvwWXCOoDdYycPpcPpNnCIIiiulIieELCcPrRCUujJGNMmngfFTcCvVdUuDtjJtTfNniwmMmMVvNnosSVvLlOWmMHXxWpPwXxgGhaAJjvpPlLigGBbCMmHhcIkKDuUdDeOoqaAQEJKkjrRyYzZIifFkKKRruVvNneTtpPuUEkKYIiyqCpPfFpPLlFfTtnahjJHANUuhNnIidoOpPycZHhznSsYytTUujJhHNCqzZBwKkWEejJCcHDdSshRrOwWohHbCcmabBAmMMXdDcJjCtlLTUuZztBNnbxXTuUSxwWjJXsYyLlHhMmhyYKsSkBjCcJHhMZzUuvSVvZzCcehHEFEeftnIiRrNTqVvmIiugGUTSstSsVNnDdhVkKveEHwWzZvAagGXxipPaAIvVhHhDjJBbdtTWbBFfwdDQqVHhtTtkvrptTrRPRzWgGwrRjJxtbYyqQhHBePpFfELVXxeEvNnlXjJgGxGKkgoDYypPpNnPdlwCcWzNnsSZLwcCoOrvVKkJjdDdTtDiyYyYItqQTyYmMwWSYHhrDdufkJjhHWvVwpwWylPMmzZpLESsmjJMeBbaAWwJjuQqMJjXeEaAaFffFFhnNCcZdDYyzeGgESTtoKkBbmhHedDFfHhcCdDWAawlEVvXDdxlVvioOIOYyogKkbBGLHWwhWwpPWwxRrXflLPWCciTtCcNnNmMNnnSsYyqyYlpPIiBbLrfFRmMVvQIFfZzduwtJjyMmbCNnsScCmMmptSOoEeoXuUxOsKkEWuVyYuUPpQpcCPtRrcCtFfKcCfZRrzdDFkSFYyfMmsftTlEeLECMRrmcTtQGKkgqCMNnLlxYyXaPuUcCaAqQtTAEeaMmpZznvWwVTtUkKuRrIiUuJjtTwfFjJWsSjJttTTNjJqQtIiTkMKIikmyxwWXYPLgGRccCCrPpTEetNniINnpPBzZbFFffBBbaAbOFrRfXxpRZzrFfPxyWwYUVjJvuMmPpXxxXBODdoPpGmMbSIisBgejJEwWbgGXXxxoOtTJjcHsShgGxXCzFAafsSAaZUuxTBiOooOuULlUDduDdFQqfIbdjJuUrWzZiIPFVvDdiIfpwGfFsBnBtTbvVsSNJYyXFfxbyYCPtTpKHkKzxXCcZUuuUKECcyYCcZzeIoiIMOpkKPfFdDYywWouUAjJaFtTfxXjZbBzJvFfyYjJOoMmCceBbKkEkKLlxmxXMCcCcMryYRGDdOogzQFfqHEbBtOoNOCcstTNnSoDSGgseUuLlExbdDBXkKLlJuSbBbcrRCdDBaAsWaAwtTBbVZzvqiIMmuUHtTwWfFFFfKkqQxYRWwYyeEfbBVviGzZQqCRrsSXDdxXxcvTtHOotThkKPptTpZzPCcVfFnNzIiZyIMmiVvUuYwHhuUjJdDWfQXkKxMmCtTcFfhiIDdHdsSDFEefqZzKkQROorqyZVvzRtKHWwmMjbBJUuKkRPprLlfgnNpKoOMmTtaALlbBHWdDGgwhQqOqxXiIIiYyDdzZrGcaAFfhHxEeNnpqqQQTMmqmMrlLTIeGgEmGgMZzWwATtavnNsaPpGgASZzVhHOLLbBlwWkKYyiVlFfLoOtlLTFfCOoVvjJcYkKXxpJjPHhmMZzyUaAuNNnvVtTzSsbpaAPBDwWGgbBFarzZRAfBwSRrkaACcrRizZIKkiuUQqWwIXxKQqpPzzfFZZnNnNyDdVvCmbpPYkKAZzaDuUdXQdDqzJuUTVvoOteERrdDoQqcCcbBwGgdDvcCKkVEZkKzeRrdhHCcDHhkYyATtagGVvbBFBqQBbQSsUuAjTjJvGzZpGgPCbTXnNwWJjbBhtjJmMPpQqqQuUBbEWweYKkyTXxxJIivRrvhHXxRriIIqQijJVlLIOfZzlsSLQqdyYvVJIijHTBBbbmIimMlLNnMxgGXYypPTwWteUvFGgfpPVHhoOOjJohCKkcAawPpWsSeBfFJjyYbAYyKdDbJjBPJjZzUjJTtuzLeEgjJIsSiGiIbBRrMJjCcbgGJjxRrXmMgGinNfgGFxuUkKCceEMPpmXIdDBuBbUKoOkuUXgGxEexrRxQqXXodDdDWeebBEPpxXxoOXboOqQDdBhHJRPpuUQqrjJiIXxsSjaALlSsuyYUXhHHJhbBzZPplLdFfyYDwWbauYySSssUaAASBbsJjUtTulRgVvGJjeEmFYypPZzPpqTtzSuxXBbUmMVKkvRroOwVUuiIfpPVvXxbBYAaHhGIMmjJdQqqQDisVSsvUugGSyYsSPiIpsWwhHSHhciICujJUJBbyQEhHeafFWwooOOFIimMXrRxyWFfBbQqqQwNnZaAzRrwmHYmMyxXhzAaZvVbBTEetMQGgqXxWZmMZzzRrNnXzZOoxfFJjgGgGTPpgddDYyDSsIixDdXSGgsguUMiImGymMCcyYoOPCcwNnWpiIYyjEerXxAadDKkNuUQqnQuUOoqSswDdEeXeExWoOjIGCcOolqbBQEeMmmMLFHhAJjWwvVcCnNqQaqQunNrRUXxrRQOIiuBbkEecCLREenNrjDdRrDnNwWTtzlLMmuaAIqeLKcmHCsSBbFfchQqfTtFMIijDdCKXxHPvVRrWweMmLlrREqvxXVQSsSprRPPpsyYjKdkKDNzFfZnkwWlRrLnNYBbyeEjJmMvITtiAaVuUUuJFfjMePpECcepXxPGaARrdyYDiIMmgnSsIAnbBZIioODdSszNEeFBbYaAyfFiIvVvmMfjaeEcCAhHsSQqFfJFVFAaQqfCuUPpPMmBbbnNGgjfFJqTgcCqIWMmVvoOliVvIFeEzZBqkKQbQqcCfxszZpPMmYyvIiVWwSsYkKHgGGFfLlgZzKkvVOoLgGiIRrgBsSbqqZjbBXxvVaGgAJoMPpsSmOjJaAOJjIIiizuUZYylLdKxXkgrXbBLlgGKkxnNBbWwldmMuFfULlGgFfmKkQqfLlJjFuMmPpUIiHYyIcCTtYyigGdDhnNRroOkKgGMJiIMmzfFsfbBFSXdDwACJEejcnpNniIIjJicuUCnNmMWwpPPsSRrLlPpFlMmqizsSZQqiIqQRTzZtTUuRrdDJIcCcCnVJmMjvzZAagGjoMmxXSaAsiIiIOeELlNnoPpUlVvLkKuYyOoOeQeEuaANRrxXnDDiIddUXxqWXFfuSsOoUIixzSsZYyYyYaAXxNLlXxnZzKkupPfFaEeCzZABboOaQqjkKfFJvMmVvUuVPpZzMSyYPpsOoNBySsYbktTOKGgzMKksSmMacTtCSsrRAxXPwPVUuWwlvbBBbxUkKaNngiIkBbFfJIiGgjChHcMmIiXxxXKkHKlLkeMmEkOoKdDAoOoOahKBbhSfAahJhHjJwjSsJjJmbBYenNEqQUxXykKNnXxbBrRwGgWXBbjJnRhHnNOyYoOCeEmTtFfMJjeEcsSFfeEvVnNEVlrRLjmNXWPpsSeEwtTKkbmRkKsSHhrRrRgGrUMMmmzZyvVYocCOSWwVvsfFdrdCcgGDRQAaqbfrRFBwpPMmWGgdNnJjvVDKYyPpxGKkgzDmMdZPnNpWVTtvFmKkELqQtTleTtwWclLcwWUuCTtCOnNaDdMmRrAiIgdLlDaAYyGBcOZzolaEeaZmqQbpPUuBgGdDcCgGhfVvvVFGgoOsSrRxoKkOXYXxMmCpPhHlLVvcIiEefFOodDlUVuUGgQMQqHPphmOMmolLCuUASssUuVUuvdwWDaAEeTaDdVmMvCcDdjBbZnNznNMyYRrmcCnNJVvrxXtTiXxiVSsvIvVBbxDPpdPpoVvSqDdQZkKzsOXffaAYmMGgZzguUpaTxxvVWzZWwwBRhHrSoOFhHEeyYTtfoOIEeisSsZoiGPrLIimpqQzZPMhEtTeqJjGQqyFfYgEejJvGlLbBgqQVxDXxwWdVjJlaALjJjnoONmdUfFVvuTtDmMNnmMPluULSszrRLXtTOoxSNCbBCccngnNrRbBGYhHyqQibFfJSvVsTMmtzmMZZsNXxnSzugGjXxJWwjJlVvnNAIrRAavViiIUytOCXxcnNCEeckKTtjJonXxNnYyJjMmhHqQMmFmBxGWkJszMPrkSspPJrRkzZKjQnBbWQqjGTtgoOTsLlSHhDzNnJhHPpQYygkccCCPpKGjJMmDvVCGcxXTtEUwFfkKWlLurRRrESKJreVvZrMeyYNnEDdDgGnGgNdDokKOnNiCVvxXcIzEoOemvVMOoXKkbNnvVBcYvVbBgGWwmMtTNKkGiIgOoOooOHhCqQsMmSnNJsSfQWCCcGlLeEuUgZztIiTqzZQIxZzXkMThybBEAaOgnNUDdiIilLgLlGjJIuUPArJEcCoKLlkOuUbBBTrYyEeiImMSNnlBuUbwWAueEgbBZhHgdDlLOoGocCwWfEXCcAKQqkSzZegGKktTlLCCdDIiPpcuuvsSVUXxfflDdLtmuUMqQTpYyPdDVMmvXVvxJjuUxXuUmMOClYyFuRvVcpPqBPpboJjaVvADbBdfFFilWaOoAwPpLfKkvGBbKZzcCHhwBbFfmMWUbBuKkrbAaSsCclDqbBAaYDCIiEwXxWejNYEXudCcCUudalWwgGLpWwPVvWjICcZzidDxXhHzZJTtYyeEoyUurjJRYdDTtyPhkKnNHOPpJTtjELlNdxEerRHhgGiIXMmJjDJLlDqQHFrRrRmMqQotTOEevVrRWwCkGgKJRrAkqQyJPXkKxEhTtfgGFHEDdcCcCzZYNDqQdsiIMGkKvaAsCcWwSrNnPXxwqbBQHhWrsBXxgPQqpDdUGIUuwpPcCFptTtJKkNqQnolLZcCkKRsSpvVGaKkAnpPLPKkKkoJjOxXRrUukKxbBefgGAYylRrtTLbBaxXniNFbVvBeOoPpEEdDYynMOXxopjJPuUeEoOpPLlemMYEeGEegeEQqXTtDxXcCdMmnrCcRqQhEefFHiIZHBxXbdOoDuVvUpPuYwUtdDTluUxTtXRrLLzcCZAUnMmNWZzbBnNAGgbBxXpXFRrZlLeGgXxEeJQqxOGgKkMSsyxXTVvtwWAaHhyYHhsSAoOOofFfChHsScinNcCIFupPCYTtyceEprRPewWbGJjgcMBCcCBbZzcbmGjYyhTtzUuxXZHcCMUumAaYyRjUaQqAuJrLlPpKkuODdWwoGgcCUUDduzTtZwWKYyQqQqGggsIXxiSOmdDMognUuxgGHNndDwWtTOHhoLllrRrRfvVbIvVXDdooFWwfFfOnrcCUXxBbuRQqHxLWmUuxXJjxTtzZVfFXtTwWoSDdcCshzZHPpVvTtDkjYkKrWwRUukKwWyUuOzZopPQqRqvlLVQbTtqQiIYVpPEWjjJJmbBjJMEnNelLgzCcJDdAaOoJjdDdDjyYTtRwdDAaaNMmOoGCkKcWpVvPXkKqQeExwgnHhVtkdDKCcTGYlLNnRrRETlIiNdDzrGgOonpPOlLJjsGvVgtLlLlaAzaAaAZiIYZzyVvTmuUGEeizZIDLlRrtDTtdfFcCowWOdUuyYEeDgSuUKAfkKNvdDVnGaAgFaAauonNOUQqwDdHhbTtBWgGBJjtTwqQpBbFfwWPKkZBbzyiHCchRrDdWLlwEePpZzleEJjpPgGLsStHhiIiIWwPpWwTLqNpsSPQqHyYhbBVHMXxmzXJjwWRUuZzkKJAajgGNxXYsOoSAayiiOCcouUtTlLIiyAaDdXxGgYoOTtjJgGlTNnXhHBbxVvnnNpsSPNjJIyduUwnNWWwJjKkWwYFIiRPVMmHGgNrmMJZzEeHJWMqDdQeEFfySPpklLKIvVDeztTfSFfsuUFrRTwWuOHhVvoeEVvbBkKDAwWJrRwWWfFUukWORWbBEewaAnlLLSslIJXxjUuUzeEeEZwWOoujSsHpHtThOoTtlLHJOdDSJjQIigFxqHhQYyOoYNnyXWkXZzUxBznOoNnWwlgGgsSTtocPpAaEXbBGMCcmcFftTrhHunyYlzmMnzZsSNekKEsZzuUeiIpPsSlLJjRUumMrbcCVdIiHLldDtTqKkAziIZHhEOoMmCXxcVvSswWAaCMmlGTtgpPLQOQFfqzAaVvEHhzEevVnNnQqNqTtnNpPTNpfFGnNzZZpXamoODdygDqQmMdDdyIkKiSiXxSsIiRgDdGhNnHgGlTdnNDYWwyeEvVCcXxJeEpPqQoCcOPEEelLjJoOEJjeDdqQWwyIIiLEelUuyYfFQqcshHheEHSCvVOonEeNnAaAALIilpxGnOoNOjJoDoMmruURKklLOKigGuUBnNbGgbBgGFsDYydIXkKHhNnhHToOhKkeNnEzJmMhHjmpmMPdDaAEeRZTFYyyMmeEtTMXxmUuBuUbQqQnNTeEtqCcvLlVQSMBZzYyAlbFzZdDTtRZzgEeaxXAgGLcpPHhUuCghyYKkckoFuUfOKyYOoCrdDegGpcwQqJjCcVvMmPpjeENnJfZzdDozZiIALqQlAbgGGvVgfNnMmZzFoOfiIHOvINpQSvdeECtWwbBrDdQqGgRfiXxKkYyBIibIphHUoOurYQUuqyLlTjuZSszDPpULludVFQPjJlLBbIGgiCGguhIiRDdqLlQuUsSPcCpnZzNsEefoOlLoOFDdqQzmMZSsqQhHSGgTNNgGnnZejkfFbBhrRHRrniOoIrRNeEQQqqUNnitBbTfwbgGBWwkLlOmnNgGCcDdhOhHZJjzxXodDvMjJmCcrCcgcCGRashiIHSubcCiPQqrRiIimbEHhtTlLeBaAeEjJMQqcCJqQApPENeEBvVuKSskjrTtvVRTyYCcjJxcCXGYMPpmowpPjJIaAjeLlEJSqQPUSnakKlWUnNuNNpPLlnnBbhGoOCcErPIipgGcCoOQAqQGgflnNVvFjJfLfFolLVvsSiozNnPpZjkKkBkkKKbKJQqcssSxBbuUEeOobBdXxRaArCFfMbkQqCcAaNbLdQqqQDlLvRKRisSInNnjJvMmYhurrrRtTxOHaAhorJwWWwBIBoODgGMGbBgmyNaZDfFwWJjCcuUpZMEeFfRRrhHmFfsKkDdSMdDmuUFfjJWBbwrRurRXEFUuRYyroSsOiHXSyVEeeEoOqQTtkCcVHSKWwlAxzPKoOzQWCyNnYcwKruQgGuUeEcCqUuURVvkKvVuwWGVKchvoOzZyZzJRrjYjJjJVHMmOoeELlCJjoErRPsbbFyYYDdpPdDKkZGgzhnNOnNWeGgEMmWLltwWyxXGwWganNjZZzUgGCzZyYqQZgGMmzhHaAkqQKdSsIiDfFuUIiwWRrDdlljURrVviLwWNmYyMfFKkMWsSwnNEeQDjJggGmEeWJGksSlLxbBAxxeolXxLOdDEHhyyrRYYRrZvaAVzSsSsospcCYPpyCcPLlkKxjJfFkKkEKkBXxbeKCbBDdcSvfrMmFfbBNNKgGknxXyiIYaQqAnLGgEezJTtNnlLVbWwbnlLNGAEfNndDFiITgMmEegEeGMswWAaUuBOgGBboQdYOdjJJrRbBfFIieEGgwWjCcbxXnZhEepmMXQqxgGPAanoOPmOoGhHZOrCeNmMnBiKkRghHHhGfKGgIaAiPkZHhzkKiQIiFfqIKpPpdvVOoDrzpPZjJFfNSFuaASjJNkKGKkxXKPpSskKkaABaKkyYFfAwuUWREebJjnjYyInRrNdUuDUhHuMgoOGcjJCQRLlkUuKYyxTtXQqrlLqQpPLxXsSUbFSqkKNnQTtsfmSRruRWwriJjKkKkJBbdDAtbBTagWwjZzVmMSRrsHDABbXxuBbUCJjcpSsXxMTtQqmPbBqQWofUuFZOozOTpwWnygHgGOfFSsTRrtLGTBbtcCTtvsEcCiIoOeBbJjfjJFLKkrRYjJzElEeLwWhHnNYyCrTwWtWpNCcNnNnpPFfyJjKWwlJCVDdvcOojWwLEkOoIiKEeQyYCcmwWMfpWEaaaAaAAJjAsOStNybBYsZzSAaVvmIipPMmpPcCCcAtJxaAxXXOojdDyOoYqQrWSMZQqYydDzsSmpSsiSuUsIRrjkKJhtTZzMmZzIicJjQxGgbBsZWwzSUiIbQqUlbBtRraAzZTVLpaAkyhHbOohNnHrRaAizywWIsTiIteyYtTESzsDbBERakJjKArCPdEeKkhbBYyHIsSqqQVvjfFJjJezmoBDrRfFdbvVVRrRrBbGgxAaGgjJXSKSrRpwWBbPDdhHidDQqIwAanRFfgGliDdtTzZvbRwWrGlneENLgaAvqgvCWwcVqzZBJAaEuEJjNgGneUlLzZzlqkMmjPpJaIilqHhWwXxEOogGGIPJjCoOJByYYydSsVUuxslmMLKkWwQqwzZHPphTtPLlhuHhMqQdcSEYcCrRyVvVUuvgOoGLYosSORdmMWivmMyYGgEEymMYZzezZiIBzZFXWwmEVvsSYyeBbEbpPBVvEaeVvIinNEYcFnoOFfkzpPZnNKvYySsRrpsSSLlMbBqtTdDQtTYYJjkGgKLlhJjUVZELLlUnXGgxjdDgEiNNnnSFdDdDZAasSzuYyWwhsQSsXUYFflLEGZzFfnBcaZzUbGgNvlCcMmuUBTtbLVeEUhmvVCfFcoFfcCOMHuiIXbBxHQtOWDNndwDNQcXQqKlpItsXxjJcCSzyWRtTrwOwWeEJjlLIWwKBnNrxXkKVNWCcwcCNnnbBvgGbBeECcxEeNJjTTtlLtrjmMJEekKafNnxfFLQqTmMxXNnaexhHbjJPpKkwGgLmtTMiIYdDgGygrRxXGxqQXKcCLHhlAODdoaAfgPOlNpPPXrnLqQlzynWHhSJZzWLgQqjZzvVJchHNnNbNQsSuaAtTWJDdtMRbBMSLlomMZetSsSaNnCcAaptTkKSTcPpbBCcCOkKotIiwWAiILgxAaXlLWtTuwciOWwhBQuhrRuUHwWijIiTtvoOVNNnnDaouUEnNDuUnuPYSlVvHhLhRriIYgGyHmMUrRusoUaXaACgGDXxAjckKQwWKkwWzZBGvVWwhHcCWCcwWgPxgGhEeTVvRrgGKDdkBbLMmDOUuNcbBcCMmqQVZpOoxXVBbnvVgGMmCcxuGgUVviIBMeSscCEkKeWwEpmswnNcCYydQqDkKWkKjEeJijwWVvJCngGOorgyKUuktdLagGzZFfnAakKtsYfFHhXxsSIiNdDiQnNOohCvPpVoOHZFWwUumMPetTXuRrCcUNneEGgdeDBbdYyiqQIlLlLNtTpHsSttTTBbgGcADdfdDFLlSuUeBbDAadRwWvSYysZzrcMmnNCVGgFYgqibBhZzHYyIQNUhbhcvVlLCAknXceEaYyafSzZseQqEEheeMnNStTNhDdHnCceiNKkMmbOoHhYXjJJjYFOWwIiofBbZzoOpzZXxgbpfwndDVvgieESsqPhQBcCVdNnJYyAahHjPYPpyEhtHhBLjJrXxZhHfFIiQthHqQSdcbEepEeNnPRryWwhHYvVphHHyYysSdYyYyhHDgJjcNnxRrgGNndDgGXWwTnArRaQqFfVvPpLlNeEofXxiGgIRYyrSiIGgdDwDDdKlLtTyXcCnNaqBbpTtMFbvjJQhHlLEckKZzYyiIbBZUuTtIQeEqhHAtTHBbhxXnNpPcwlLgGYeAaSNZILufFbljJiILBSCPpcAabxIiLWNKUuQqHbPpAaYQqOopPwWGtKkSsTnIhqPpQuUsuUAaSHRmMrQqhPxXSsvBtAqQZxXsRrSEDdqfFPpLTtQGgjJqfAnYRYAxokKFIfFDdPpqsNLdDBHhJPpMmjSgGsYoOQqyusSUhaSNEhgGWmXXxhHdDxMhdDeESsTtYYANpSsPTfKkTGgtjRhHrJAnNasSTtaAsSdGrRrfFXxCmMIDBbDlVKkvyrRtToOzZOXkJjHGAagfFhPogLEvhZYyxXzdQhHgGTqQgjmpPMJtTRMmPVvbPyYnbBNFBbzXxhoOHoMeEUuwWtTmzGwARoIIiaXDdKkVdDeIiEdBbZAYywWIvVJjiBgGbQpwbQMgGTtmqFfBTADdqbckKCRSsHhrIzZJaOptMmTPRRrFYySssinBUubxXYNnIDdbFfTUdDqQyzClbXxTISsgXpPXwTtWAaxGlvEuUwCcPmjuUQbBqaRulLFsSVyYHIIkKihDpPxKwIibBjDdJeyGitQqQqFgGzZQqyYQqAlyMAdDabBMnNhkHPphWwkTIEeHzZhRrZZzkKZclwzZUuDVyoWwzZQqzxupPsSUWSswXxgeEuUvVsSzuUDcCVvdQqayYASxXNBbDtCcgYyJjEmMYypJjJToOtcCndDQqKkNZzOdDlLKNJpPtOeIiefFEUtTZzyYoOXhHxchSokKOsqQHCrOsSfGgFSsCRrcTaAbBtxXuYybLgoupPUSsVvojJOUdDuOQzgGDdcCZTcjjJJaWwfFmMFnNzZqZzmUuLeWlSUTfHaCUuiRriIlaAScCBaFDQFZzrRhHAjJQQCEecoOjeEkKJiDAadTttIiSwciCcIKEArUiWKBbkKXhkPpIyYrRDkjfFwWfnNFfaAehEgGeHKDeEHtTzYyiYXxMuUNvkfFXKZzkvVxMvVRkKrCibSErRLlYtFfMmKkvpPVWwmMZGgEKkJjKFfkxXBboOcjJfGgFkTtmEOUsSIVFGQqIDdTttlLTTWzZgpPrqJxXYyPnLlNpjaASwWPqwyYfagOYAhMOcBxYdDrsSRSsRrJjOLloPpmCvVUuDdrROoRrgFFflHvVxtkKTusuUYyXmMaAxSeNYyCvVcnEYcjJPuiamMgfyzQcCPpmpTxDdZatTVLeXBbAnMzqGkWKtfFfFBRUnNuLlAMmaQMkYMmPpyanADHlFfAZzGWwVMmvDxXJAajKPpkUuPoiIOmMhIEeeNKkyEGlKEekAaxXuAGXxnGgNBrVvUlzZAaFXQqBBbbDcCdsSxbBjzdDDOxQqdkKQqQqxnxiFfHrMmlWUNnuHhnWfFgGoOepHhNnaAuUtasGRIiyYAixaAXVvSsbMEemAaaFNhHvViIiZzIIipEQqcCTtNmMGRrgNiVvIgmyYoOxGNExmCcMXtKbHlrGKxXkeLlulLYbBLsSlBbCcSyYIiwmaGGEVvZzkKStTXxsZvZZmMyJjqnwYyxFAafEllGfFNngmMscCnjJbaAVnVqQvNnfRrzGIbBiQqpPThuyYUuUhHxXjJcCOoNVvEenBZzNEqQemMpuUuPpQqrmMxXhlLSMIbbBpkKPTtpPBKjjJIqQqIYyIKsScAaAabBJoKmknNerLlGpovxXhPpHzofhdpgNnxsSsYNnBbHdDhaGwWIBRrbEeixXzJjZfRrFaAAajNnjjJowWWuIiTXIJGgjWWwfLhHlFIiwJcCCcjAqjJIkKIigAaXxJhLQqUQqrREJjRrFfeHIEePpkKiplLsPphHUwaAIpPwaaAAEQgGRruHFfmpPwWsSfKswTtWVvRrkBsSXxNnuaAfdsSgLhUuHlGtTtIiTyYKWwTiIUureTlLtEmKKBboOsgCTQrZyYtiIeEUfcCcQEeRTVvkGglOttTxoKwWksCgZzYyJjXVlLsTtgGXUxQdPoOHhMVmmhHknmMkYyaHxSsXnNhtTeqwWQPpnRXuZEezEeWJjpeEEPpVvnNtOoTtKkNrReAaAlLaFfJXxSfFCciIfkVGUuvVHnqIizOlarqnNTfFtQnNuRrLEelURkBSYysbOoEeVYyvLRrXxNnxXnzeEkxuzZbBCYSoJOqBPXxpUugttTTVSyxAWhITRViIvhHeEPfpiFSsRYytDdXNiiIqQLMtTNnEeaqlUuhHHvrnNtTSVMmhHTKkzZtRNmMcCPHcQqChqVHgovVrgGRHMBbwWHZzLliIhNmMncCNnwWPpoBAabplAaUuLiiIIhhHHeEjUuTmoyfiIFYoTtvVxUuXqVPpyYJjwWlLvbBTtaAUKmMSLlskHEpmMjYXPiyJjLboNURrwYyfFgkKGldDpPLGoOKNnfFDAadGgNpPWwHCxTtOqNQqnQeEQqzepOojFUluXxUCVvgJrRjKoWJjFfwWGgGgwEVWRrwsCcMrppPNJlLQGgzNncCqTcsSCwDdvgOIiaAbPplLBKJTtEhEVvamJjpPcCLLTJgGjtYWauUAXxdDgiBbIGBcTPMwYXPMrCmepTtZbBNEeXAIibpPSFfHwWoOOoYnNMEeQKkdDYCaAcygcnBKkDoOcMmCrBnArzGldMxanlzNuUZSsHhclLgVTgdDkEAeGIBrRVvuyYdoZVvEeqQfFbBfxXeEXjJxExtzHMpcCPMLBAaUuUlwWVqQaAYaAyVvIuunNUUPptTQwBxXBbQsuUXOoxuonNOUqQEzfJdDUeEjJBbuYyjUxZTtHFfbjJCcAaKjJUuAakBesSzZScKkwWCcCsRrrVvhHUmMMoJjLlqQTVvTvexXdWIARBbGbBcBbMzogXxGOCUkPoAotTOktyYMqnNQbNqxXZzLmLNaVvhlLEeGgIwWPpAEmyYUNnqQTtuNXBbxNBbMmsSdDnFpPNnFvVcCncqQSsYykKCUsLlxxRNItGgRUurTqpwWPumwWwFTtqUctTVPpzZHVvInAadDNojJrZzRDUQqxXTtlLGlLkKRrghqQHzaASsJNvjaAoORrTjJaObBHhMmMmgQTUwWKNnoOkvVoqXeEyYaftTFlhHGrobeEdDvVvVsfrRFcAPpXtxXTxVujJvZzIielLESaKhxEtyYCcTLlQqGgeEecVvEeIRXbJjKHhpXsYUuVvRWQjrRJqfSsFNhHqQnHRRlLCcIkKooDiqCrRDbhDdsgGGJjKDgGdkRHGgXxPMmQNnwWlaHhAlRrLhHftTyDQnLbBJwWjMmoFpdDPXuUEWQjFfCcyYYzZvRWuUfFwrPpUOoufFbBAahHMMoVbFUYyCWoOLZjJXxZGqQwWypbsSwWcoMmOCnnVvNQnbahsSUKkAaJQfkvVOoiIrRvOKkpPCVbYyAkKecaACtTnGEAJaRHhjJOeEoaSvkKVxXYpPvMNniINnztTkZzMhjPpaAqQkiuvVSwWHsACckZzualLVWwoGPpgOxIigGRrlCYUtTuxmMcCXtkAFmuUBuXQqQqAUrkqQpAjWzZliCJtHhArdDRQqGOoZdBziIyfFYGhtTEeHVvflCrRqPrRkKZiDpPyYhHKkCcduJTtxPpYyTMeEnTtGgkKNixbjJIPpSGfMiImBbFbBnysSYnLDqQjJdXxlLwWrROjJVKxoOaJjBbADKkUuRmMrnPpKTfFityYyaxJtTkuMHzJHhtTFKkBiWiIqNcoYhHUutXXjJBYysSbKkFfoORTtuAaPFYyfpidyYDsSFGaAmMgSjJiaAdCkKjvVHdDhjJDJuUjdOofBbFjlkSpPsGYeEEeuNOHKknCOdcCPpUuTtDeEEegGTrlAnTtYkMhpPHqVXxNnIiMpniLhHpPYRPpMoOLJcpPeMJjDQqAomMOaEetWTmJkrDaAVvdCcSsqUOjJouQgkKGNnllGMmRNJjfTtAErsVJUulLxXEBYyIibExXqdDiuUjZxXzvVRlcCLgCctTCINmMLlmQDdSsEeRGgrRsSlbDZIiXtuUzZTeESnNxKkXsJjxzpPWRrYqSiPpfIgAOpHwWPlLpswwWWwDvVdVvLzFKkNXxwlLWnzmJjQqqhNnMWxXGmMgwnNdXLlHOgGZziUuWFfXLlIHhGcCqQgcBbbqQGaATtgBKkEJjHuUeyYVXQDdxshaAdDWsSfFQAqIbBRddDVGgqgGQclRrjnCcNLmLlNlGDdHhZcCmVZAazvtwnbBdXKkzsSlznfiZETdDMdDlKkJjLMGgmZcTjtTgGJEkKeWyYwPpxXtTjqQJWwvSsWtTwGgiLvEeVZznNlIPFfpcBbbBCAPRTcCsEehHqMxRQqNnaAaALbysaQOGOoaAOoZxXdYydDpPdpjmMPBgGbEYzZhHGFfKkDpPHhdEetuUhHYWKjOImPnAaeEITpPFffFZztNEgTetNfgHhHhGTFfPTtlLDChnZzNFdQUYqKFfZiITIfiTCInNjyrRDNWhHDriIKkyYsXXbBOoWjJrfyYUuFIeEXxhkKHiSsgGRwdcCKkXOoNnXaEeuOIiogGSNfpRUkKFVhouUOQCNnIuUXrTQNnnRrRcCWdRyFfkjpPJRMfYyKkvBcCJWcCwjsAasSwmMmVOoviFfUuoFfqQlLLgMTPzQGgqAaiIZkANWUvVwtqQYyTWEkYnRUGXWFfIijlaArRoYUHhzZGSsSLlsZaADbBfFzMmZKbBkgrRGwWVUSeEYsaWwOKkHdFfoTflvVEeyYxXoOMzQHsIYLDdZWSsVvXxgGQUkKcCEHExATBukAaKkNaeffFFcMiIYSWEewdqQqXRrnmDIxPplLJEUqQmhAVTcmMRIhARrpXyuWQdDnNwWqzZdzWEirRydVILocnNWoOtJjnCczyYlYuCNnFqQCxXJsSTvjagJgdvVtTyYcSAaeDvnNVKkQquUsAaRfgJjGFrkGFqQfmMoLFMmMAahwIIiJjnNitTfFUucRWOvVvrRpgGPreERcIiCGIiiIKOGggFfFfxqwNTjJHFosqipJqQMoSsOmfGgFIihcUuyaOoXFfKknNxhHIVoORWIYCULbKqjNjJnyYnNWwHhZzkrzQqZewXgGEeiVvImsmvVmJjjokKMuUpbuqoOQUTtdDvVyqjwWBCccCULlsSuMAyOAajJdlHSsyEwWykgGKwWNnssqnoOOlnDiIhxZzVrRvGtewxyYjJZRbLkKmqIAavTuUAMmxOoXaCWwWwcCctTPVvpwqfoOFQWPogGvVSBhEpPXxjyYbVvRrdMmNnWcxlFkKfLHzDdZqXWSsLXxlYwVCQLlyOQrRqaAuLUufFluirLmVyVvhHKwqqQQtrRZvKkNFfKeEGnOhWzXxZwWmChHEeIbOohHBQjJkKqsRrSZzYOQCcqwBTpZzxgGXrSzZsNeEaJrRYyxppKVvkOJjoqbEeNKBbvVwqZzdgGnSiIscCUvhYyUutXHaFsEuKSsHhheMAaGgsSzZhBbJMmNxCqdgGgGHfSlLsGgYysSRrYsVFftTtVvoiPpbzRpFYyezHmMwYjrdSyYfGlqRrncxihHIEeIqTQqycokyiYxZvNnxjJGgMmXeECchpXxPzZQzxNWvlLSnNKksVwjJqhHQnGpgTtGZVUjJuvzPnFEGgXxVRrNbOyYoBCwvxCONrRnNImMinoRZtTAhzQqQOoPkibBVxPpXaAadBcCbGBZzcCWdiILPuUTdYyubTSNRkhbXxBPTNntXKvApPatTMamVvMAUWGEvVWLAaiAfFUupEKZrRYRrRrdDyJCcoOLVvdjJDlLlRrmMjJjrRxNnioPCcWwRrpNnHETadDbpxTyasBoOVqECcMaiImzZSBcjPAapSsODiKiZnAKkwNncWhHPImTtVSAayYsdrnVPpZvWIioOzZfCcqNfPeorROoOOIiXuUustWpvxXUuUmxLlAaGbyteExDdQmMqIiIBGkdxfBHukiVvbQMutIiTbEeMzxXLUulMfFmQqfTtFcAtxbypPDPpdZBZzXxwpPBbqLBbaAjJfzZKkrWiNnIwRplbtXAEtSXxVOctmuoGgOHdDhlZXunQRWOIlYDSrRyYOobJiwWLliIZzIWqowriCnxXuMmUyEnCEzZyYNGysQqbBIiAEeXGPpAvVaGzZCSMMhZzHAPDdqlCcLpjnNUnMKynNJnNjvVepPaAEJjOtFfDdkKEYlLBHhbsSgaAgDdGUCvVcuPBKkVTtajJcCAznlLCSsSntTXkOaHoIAqQeEHNZFSBbMbhmcItTmMphOuxbzjJZhlIiRsfCuUHiwpPQqWAtTerEVsSvVRrYzZnvNqtFfmMTPptNKUutrHFfhjJlaACnnNBbYGgQqypgbEeZgHhwWyYZFFBubBUuUrRNQzZJtTuUDLqFJFOoqwfFJjWuUBbfbBOEGgDdvVXxeoFQRgGohDdHkKBAabMyTtjDdfxXwBbmSsDqntxXTlUDArRtgAOuiLPVBqFLuzZEeUEesKiXtdVvxXGOxlJwWBQqJjOPnNBIODdoURrtYyLUuNnTtdyYMjoOIXyYJRMmevVBYddkqQEewFnHhSvVqQMqQeEgGFfESsYmcsSCkEMfsSFzZmsOaRTtqpPQrtTMIeMdfpzUSsHFBbfhBbBbZzUnNxvAaVXFMVvhTtUXAaxnmkWwgBxzVHRrAaUCFgGpiUSORHQXYtHEfFbXRIBPgHhRrVvAEeEHUuheDdqQStzZxJVlLYOoYyLsrRXtTxwqPpHiaFlLsSsgIiVGgvyTehzyYTsjJJhLsMRrqQmkSsXnNMmfRqsSHhcgRLlVvnNIiYLOkcuUCKXIXbuwWUAKkaftucQmZMmzMIIUWwuHhiiqPpPamgCcGACQAGjbkKZzZpcEfeGbbBwtTCcnNCcBbWLXOrDhgGBahjYymuhHQJjdWnNxXmuUJcAXxamMXiIkbhXaSToOonJNnFfPOHhnNEfdutRjOHhlHhLAUuYqoQCUuWwhHxcPXxAMBQyYGgqilDplpwgGFKFQqfTtEBNqRXWbfONnoFnNMIyLxUINexRrXPiwvVmDdksrRTtaAFGjUOEyAzEJbtuYyQDdvVqTroOrgGRNmsSOovryWwYGejJEcsuUtTsLmIgGtMLlRVvXwWxAaQqddnJjZnaANwgUusqCOvMNnnNAGgaAcvjnnNnOAaUHZzwxwwktZzdDAaTKGgyYTZDcCdjGgJoOEenkimCHldkCcSDmMgmMWRXtTxQqxGpYzZVOovCpJnUufiIlgcrqQfvTDaJjUAfFaQAkQnwWcCUMSiwSJAuLloFfQUfPpZapSFdDgmfFHHfdrJcIYFfGHhUQqzPplLeHCczrcBzZjZhuDmEBqlLBfCeGgQqMqJognNVvMPpNnPGgNYyDdIiRqHhhHurRUmDjYypPBeWuUmqxahHCcAgANrRWmMoiIdaLlAiIlLsGuUgGnNgSWiILNHhnTxXmMtoqmoMlXghIlLOolYKkjvVGbBwWZzAgGdDOaKkAMmQkDHGxLlPSRrvVsHBoOEeaMmAsSctaUNuUGgxxpPaNSwIiIcCsSgYdDyVgLlXKyhYCcLOoIiKgnNhHYuCCLGVnkgGLbAaEcCfSAHhahZelYyTzPpZAatLUJdDdWwOyYoDrrsBiIbwYyroOqQlHMmhBEUqQKMtTmlArkByYyYoOiJPmMQOoqYyYwWnUugFfNcVVyfFjNXNnxRrRrMmMAZSszKYytYwAYQhJqQoOlDEemewxLtTKFfbyYsbBJjCcLJpMmjJrVYyWqBDFfdOoEeGcvGKkFfLKyYkewNnfFZCnsjJSBiIbYMboEEcCeyYAadDXhHUKIikbFUoWwqQOuvdgDmMeUoOOouvVdDtkXTsSACocOoGhHgGjYysSuQGUuGQqgGGzWwKTlLtSdvVuUoOgGfRLDtUdDVtTvuYxXuCIsSYyCKkyaMbBmuTdDnWvrDCbBYDqxSseEpcTiKyYkyFMHhDlfjJlTHnzNnZNIihjMBbguBbfwvNnOoVlKvdptTwWlLjJAwUKkzeEKStTtJKGxeyYXNJOonNWtBbXxxjTqsSKkrGjvVBbBqQGrqQmVvfiCckxiIXYAVjaeMmTLHhsIiIJRdDskKxXxYykKEqjWqQEeZTtxxWwlpPDdLXQduFzVvZyYltTfFsGOhcCHogSbBjbBobBOJaEbqvfllAUsSuZlLuUzGopPOgGgpPAKkFOcCzZBUubEeNnWwTBuUzvVBXpByobmJjGgsMmMmpDEhHAaQAEeayYPNELlIghjJHJLWcMmCIigllsSyuwHALsSlpPJxvTDdSstVbBQqGfFNnrnAaNogYyyYGDwogGdmMQqFAoncCNgoOXaaAAXkKMBMmbhEePpBnNlLffYoTNJjXVvKkPhCUurcyLVvlzrGgIgNdvwJeEjWVSsYGgqjnsShHxPpXueEwlZzHhHhLWRrmNnRrrzEsSeNHhhfdLfOoRluUwWmDazZAJvLlVeERrgGNVKtmbBMZzHuUMmbBVMmJuHYycChUjRrDbzlLguUYvzixMmxXFfFfXFmiIMWwKhGChHZehxqwWIWwYHXalVRrPpcZTqgGJzZjjQztTZBsKkRrSjNBBbPptTsSbncGgCyYTmhkaUKknNXxuAOtFRDnNzZlUKXNfKSjcvJlLmuUJjOZzBptTPCszZQqxXjYyJkYyKoAYyYvVzfFIvrRxXJZTPpUmbBXxKkFfEewqlfFgvVGtjsSEezZBbjxXeDyfFUuDrqINIieEWwAaEtOxxOSsAazrXxownNWoRPAQIiMmJdJLTtnPScCspexmMXqtOehkkeEefLlAauNnuULlNBHhjGoziIrIRrHscPpCbTtmMUPpeEtPIfFZzVvGgVIiFfNbVUubRApLWqnlaAWwMaeiRDAMmeGgEaIidumDHhKVVgGiIizDdZIvrRXxKkCcvCiIckMhHmsVvACrtjpWwfqQUgKqQyJHlmxXMAaTnNtvVbdAgLlzZrjTewyxXYGjUxXqMQeEgXHhwWxGjGgxnLYZzyWHhcBbWkKBNnbnWfvfyYnNdVIeEiWwOLzKeLlWwgdtTDGVvdYXxAMqQqbeEFHVblxoACcJLibuyYSQAxrOoVJRbBZQEetbZzBTJIdgxXGDrKXTAYyZzrRaAHhgKFarRkmMvmAWyYwrRWPAyYSDKyYfNPYyfmMXGgxudDeEGgWRkZzGghKvVYuVxYjHhXxJYKucaQBsSLYIYyEWwLEerRlLVoSsmacksSKqTZhHuUDMZODdNYHpWRGMzZgbBgYDdzcCjFsSUyDxhKYcgHhGzaaUSpPfVvqQzZbrRcCEeEuJjULFfGIypPyYPIimkMfFIRBbQLxhGAXzamyfFdDWUQwWwWPnNpDcCdvXhieEoAaOnTtRzSGCtTNaAHpdxXDyKkVQsbAaOXZCnrbGsSyyYodDyYQjgnNYyiHsXIiJvVrRuouwWKdmZPpUwNnzjJPWpPwPuUQMmquMeETtXBbBMahpPHgGCWJjFSMmBAjJPyYpavVWOMImuUMosUzqQZrRMmuiISCqQDEedKJoJEkhvVvVXMzGsiXLZhnEeNHzSYyHhWrvEeEeTKzZNzwykHdDMPpmhMSmwWoJdIUdZezZbohLlgVqZPJmYSMLlPCYXfAoVIPpCciNBbnIyPpRrNHhAXxOoTLltPhYycgqppTtKkQqJOvVoPdAHhaUvXvwLlJlLLlzLIilZzWwpaDHIitRxXkEFfZnNdHhioHeiPhwcebnNCxMmAerIiIoOezqQWHTthodDPCcXBUuTYyQXSseExqauUoOiEeIMcCmmMkKGxFJhijJIJsBwWfFRYyfmrHPyRQCcdTtJExXiPDjEfZNiAHNUuYHnXhWwTvaAHhOGgoCZzccfstbLlYfFyzmqjqQFXKKkXWIiyPPpkocFhhuveCczBRaJRpzFfZmzZgRrWyYwDdETtJvWCDdmiRKkgGtTqUuNnKkwWkKUkKecWGjaAyYyYqFxSsXfbBQieeEdDECFfSxXWwExUuEtTjJUuYETtMYlYWwrRzxGDSJjwomQqaChHbBvVSZOonYmMjJYyHzJmpdsSDuMvVmCXTvsKfPVvKlzKYyoRKTtpdRrPPamMeEcnGbLisSTtgEJjfgzZNnbBMmXxtTXgkiSlLsiIjnFhgNnVkKseEtaoOYyoTKmfFcpKPBDcLDdBVOoCFDNMmtbSwqiIlyYfFZZVCcTSpPwWhHNndDdwWiaYZgDrRHhZPEYTtXOomMrxXQaAMMfziIKMgLlpPkaAcCqhHKyYvGgXbBxKuuUaAvuUtFKkjIDXFHpBbuUmFfMPipKbshYeEyYzeWBbwjvVJYxXpmMBbqcCSCGgRmOgvSsyjQotyYHwjRPuDItNTtnkPEepfTtFkKsSkKPpkBuMkKmjJFfVTSSZzsyRxZFNfNniRrFjJJlLQwJjXxzzjUgObHfFFpxXWwPMnKkVjQqjrbHUfPpIdXJHkCrRDdsSczZKZzwuUqQfufosBbWWgGwwSOIilmzZifsLbjJKXcVvuUyYDafnyYfFNFHvBbbusEeuUSUhGZzgTPurWjMxraUGHgGqyhhyRowJtkFfeEfmMcCYFFfIvRVPBbjGgxXXxJpaNJXxaLlxhopRvqhgFPgJgKCTtBAabnMmkKbTVvOZBCQqTxDwccCCvamMQMmuMmoOUzZjdflEzyCGgRcfFCCcsSTWeEQMmuYnjFyYHgukoOUiwWWeEmtqVvtThwWkKtkKTFdDfwMmQmXxMMeEyAatTUIalXSsxbSsIbvVMSSsYRrsxQXxTSwWyYKTtvCtTTPkdIHhlLnVvlGghdSXxCTjscnmMqcCmMsSFfPHFoOgTKwCdeiHotQqgELMHgkeNKkmMnzZhHNnddGgDDUSCoCySssuUSYcOFWwfpPJrSsKPkKkKkKNOonmeEYOTtoAahGeEgHdYZzBkKkaAKwRUurAEPpueEVvVqndEHhKkinVvaAKkIsdJiInNyXMaAmxqQtaASVqTUMoSsRnfFIZyYMmqQXbBSlxVvRIPjUSTxXvVnfFJjDdOoDKkdeENJVvqYLPprRWdqUyYueEnoOuUEeNEFlXbBxPfhtTCWweEnGgokqQkKGgKBlSsdzCtTcOSmiqxFpWuLXxBRSsHuEEemLwYyGdTJjtDIiDhTtFfHdhHGGRTfFGgCeEcgCetsVxTUiiHNvXxVJgJXjJZZNBNnVounXicRrCIRnoLDjXxEcCwWMmeJmmMyHRPpqdOoRzUZzTxRpzZhUZzuFdUEsHLRUVgVvVRrCzBbcyYaNwiIaBdWwLXlqQLEexrhmhlDZUPoAFfXOUoOakKUuiEFxkZzvVHhkAaYMmSqQUpsymBbwLlqOuWKRJjXDdMmFfxUumMaArHhnlnkvmujJRrwWUDcIsSodVvvJoOjBbebBoROorKkFfMmRkoDvRDANnkKpPdQqExLzZlBbxiIQqaPphowxyJMmWeqzgGZFfystTSgRrSzzZCcRXpPRJjGgyYlsZqQuIoOWIilxYyYHgZJuTtUjTtjJbtDmgCmMcgGgydXkKJxBvYltQDdAHQqDOEYvkivVxjjuNxXBbEbBtSUlScNdNiKeECckoOoEgRAYcCmMyswWaASbqWpPRrakBtvpMwAXMdZotAsXpPAaxXEhDdHwafqQjpNniZkKzLcjkkIeQCPKtJseFDFYyNIEqEeQIiVjtYpPDfpYPOKktTEVYpPhkNwtTdNpPawXVvttUIiuZsdONtaytVvrVYyqFeeQgrRZRcCrAtkKAZdTbBtvbXlRrcXxAfrmzBbJjZrwIQqtTUuiOoWsckbKvVkBKbbXxBBuUCbRDZKREkoOJFjeKUqQKIiOoFvsBSRrGBbbvVAHdRVQcCatVvVbzpfXXVYmJmTVaCckWwKspPZHhySTjICwgGmCcMaFhHSUmSsVtTRrKoOkMEexEACdDXxsoKbBoSCrROMSsmeEyCInAaOeoOovVZZPlLBJnLlTNWvMmmuqExXebmkuIXxReDNGwssSSYUMNvsJjSKCNaUuAWUpPuqqQzqMmLlBeEkDXffpfXEdDFGHZDTTBbeGgAfmxXxHfImMdGUtTbhHBGpLlPlLgugDiFhXxcCHhwZzSsWXMFaEtkKtdzhgGgfexFEiIePFFxdKNnbMmSsQZQxXwFfnckVnpPmuyWgoOFfndErFfiUKMBaAQUMVwntyYNjbpzzOrNqQnRkKEoNiFfcSQkKqsYoWwcsOkOkKEeScaUueXSsmqQmMRrvMusNnIifAnNNnWGgciJtsYzSAvtMjMyZzqemgGMEQvGgxaAxFwaTtzZAWPZBvTAqAaQqvrDhaBgsbSVfbBkuSskETtJfjKGgerRrkzNndrBcCiIxXSRSsYyMTrEeRtRFajJCLZzxBVgMmGDoOzaTaYyzAaGqEEfQvRvVUuTYFfATnoDSzTTxWAnDuUWnKHuUyveyYtToMmpyPFrYyRXxdEbaABeyTTtUuJveiQqnrMmRfdfEswmMWSWwkKSjTkpfFcqEiJjKKJClIUuPyYXTtxJFbCcBAKkWeiIxSiIaTOLlzholLOHZzDmxaWmPVTbKAImMiwQBartTGeHnNhOoOInDxXnCsMmLusTaAexXnUJJXcCIvVKVoVJXxjvOyFhHfeodhVXxvaBIibqUvVueEJjTLSszZyHhVbXjxXoOxDYRcCtgGTrGGMdTBYyKkdbBDzGhyXLwoOiUzSdDLzZrxrZsGYMfFmQqQqQEwjYXWOnNBbHAFhHfXXeDiIaAadaArVBbdOKrOPpEMmVDODdiCLldMVKNLMmWwXxNkwUoQGgWMaAYSPusyYKkyKvVKXfeIAPpuoxiDdIaOpuzdLHMTQTtTtqBbtPpHRlxXDbAWFsSfnEpHhPeAowWdDOMmCZcvGvurlhSeuDfHiIPrXtuZoOrDQOorhMmbBbBYMRPpbBDdKkuUrdlOHhmMNrxNUOUuvbnzzdDxiIjGjNndDnSshIIsSutXgGlvVLvSEeTEcGOoQFfyYqtrggIiGggWlMeUhHhrblWwUwPfXQIMsoZNJvVjWwnDLbONEecvVtTHFprRLfeOoQDxXwlyQmMqQAajtsBbRruJpicCrXLsuUxZzziNrHhOmuKAapPkWwtQvsTYkKodDOjpPDSiYyNjJMmJxXjIBbeDNQvEyYDdeUeaWbyZzQpPqbPcCpWwBDoOeEOVvyYoyMWQqwpkRjcsuEKoeEOGhmtUuTleGTOhHhxXIEDcWlLktGfrRhpQqAapPQNNnCSJqQtcsDHLNiDKptcVkstqXSysmBimMxXBLGkKCcCcgAiLluVvYmqiImMWuUWwHQZtTzeETMwIWwuKUGhfIiDdTtJNyhHUqwtzXxSYyAasZKkhHuUcCrcYUuZeLFDJzZafFAkhSsHKqAaorRpPOAViINnnNWBbpPdXtcbzooHhOkKtDdBkKNckGnNjGpfGkKyYyYHQVrPOHXAjnLlAvQqPprVZziyYoOfAayYytTPHhpFlLKTjWOrYHHYQhgWwuARpPgGXmJyYwRUptGvVguUHBVFTLBbltfhWcCwveEVAdtTCxkBlSFIMvVLUuFUFUuWAaiqQiIIhjxNnDiFuhBRJJOovNNnmfhBoGuJZZWqjfIFnfzXrBbYstvmMUbKwWBbQqBbeEOonNKBbePpSshHETidUprzZJWEepPkKhTOqkKZyYzJYrXxRVGoMrcsLlQPydDEZycCIiYymMjJHSBkPIhfCcmMtTKkxdiJfTVqQupPUUhHkMmSDdsVkQPpKJjWwTtBbGmkPpZFmHhXxiImfFqRxHhyeHzZhMOPpojJMmHvVhmMmNGgnXxpyYwGrRYygWzZzdGzyAIrRDVvqNnQstzZvzzNnlLLcCQWsBrOoRTyYrRkKfFLlnBbdfMmhHcvxeEXblCdbgDdGpkYyYyPwWCaAMkdaADtOYCcyATSvGyYHRrfoONJvVbBiIIxXKGzZxGFBbeEesSGBbICclBgNHhCApRrPppDPkeErOkZLkdDpFkaASVtxcUrRsSPMjZheMmElLyNzscAnNMOWsdUuhHgXZySQaAqsLymCccCeybBeXekKgGscIJgwCQqECNncupPjJQrcCIbBMsScwJjVjeGvVMPrjArbqQKkZEVDaAdUHHfCOKpWwYwxkxfbPSspfFBJQMoOZBTSFhFfHCTiMmQqHhITttVtHxNhSsdDynhrRaItTnBbzFeJIiPpdpAaIHhejDqHhQqrYRPpIirphRsSFfMmMFrDdbSnNEFfeDdlLjHjfXgaRrSsJjAAtbxpTtOwTtZEiRGgEalLlrRjJHaAhaApPbBzZLhHufvVaAFCcUXcRiIgGrBECfFWHIipIEhOTtFfIaAKkEeuoOUDzeKyYrCcQqsSThdAPZjNnWwWGgVZzvVxVuDpjeEaAPPQGCHpaAanfFYivOaFxycJjvVpmEesyMoOgTtGjpzQvGHOBZYLlUJjuyzEnNzDuWwiDjOThwWwWHtJQqjMsmKYaIiAWZnktEeEeVRwslxoOiIIPpWwSgZmxwWfFHKeQqjOHhjkUuaKkAgGqVuUvQcOmYcCyMJjimmMowbsfNsSnwhHcAmbxGgqiIXxQzZmMmGgUZmMzqQppTtZvVLlWrxXpPRukKzMhHkKIiBbDkUOUWTtDdwjxqQSXxhIGJqQqOYgBnNRGgNcoEeOFfzxyYoWwBSqOovYfhHqQFyYAaPhsSncgsZrvVGgNwWWRrwQqqQIHxVkKcQqCeEquwYMALlZxaKBbkgzZSCkSsKLuUlcyYCcsHIiwWXlqrimKMpjJYigzZDdlecCBqQGoOgFsuAAZKkgGCykHvVXuUdYufJZvVMmyaAGzZlLmMVvGmgrwOoPhynoHhhHzqHhQdqzZQeEDmdoOOWwonNztQCAMUuOtTXxvleiylbqACLEeTtKklUkWaAoOcCwUuyyXvUycmMCUuXxvVkHKrwFfWwUFpnFmhHMkhlLHdsMmapXxwKkaMVDdKXxSsGghHAfkGatxkHhKkRiVvjqzrjvRXaWwqsBbPpUBIljaOXyYLBvhfBQmaGdDgyIiDtTLlEkZlTtorUuRvFVFwNsLlSuUwZzCCcTtwlNndDVvNwWXJqmQuIiJgMmaAAXxaxXWEtJRGXIixaDBXxLeESshjYqQkGQquFPJVvTRcaSYFfyuDnNdqAcCyYjJaQUFFUuffQqdDdMUDdrFkKfIVvEAmTTttZhlLHzbBWwXxekKBbELNNnQwlpVaUuAvPPUuarBvBnvwWfFipDdTuCcgGKPpkKkBHhxXSsSZcCzHhaAhijdyYDJRrRaAZOgJbnRrUFEKKHEoTQEyYNljDjMOomUuqFfaxXNnprbBOcCQqORZoXXoTeniRrNnQaARdBbYdEJPpJiITBbLQTtkKWTcCFfOoVvtJjMupPsStzjtTViZyaYyOScdDknNKboMjVCJsXxkIcCiFnxkufFLcCdrfToKHIiXxMtLlJbqJQtdDzCvLVvApPwWxSYyEeshmMyOoiBbaAQXHEzcgHkfIZVbBYNnyyDdGZzZBdRrvhTkvRrnyYLKklFfWwsSjdMLyYrFlDFVvHIikKnZRfFMnNkKUNCZzcqFfQqQJQyXxvVDduUDnGlLiNnRSZzsZYCRKkcHwWpxXxntOMmyFFbHmOoCcxlLxGOafDdnNnNJYyjolLODBbIiOWdOrRAaRguqqQGgQUXjQPpfQqFqahzZWUYLYyLGAawMjJmljlIWwiLGienpbBquUedPSxXNnPpMBOYbgGkKPNnXxxbqQZbqQtMmBbBRjJrVeEveNnEbofatTGSsgaLLFVQBeAnNsSLRrfmMpPUNnTtDHhUucCuUqXzwiIJMmMmQBbeWwXSrjiSltEAJvayKSsIgGFOomMMRgbYIZziyyYJgRQtJXUuTwjnxEXgkjTskZrRunNWajJPDdSrRsDVkLGgWFMmUiIGmqQJVZzfFvtGgLsyYoOSFLrRdmfYItCnNYygGPNnXyYQdycdKkRVMiImwNGgFfdDpvVPtUsSngGNcCnNYyHFfhAYcicUyaATdBblrFDsTtkZggDdgCcqUJgCOxXcatxQqWwKWwYyTEdGDkKVLlfBXxRGgruxXLKklOoxeOBFfmysSNcYyVvzWmMWHfFhwLlElRrglLVCiSsIgbQwvzZRPVvjSslPpkKNyYWwnSBOoklXWpPaAEMdtTLjHqyYyhHaWPpyTkLljdDJamnJYTmMtBbvvCRrhHXxndDLYylYymMGUTtuNymMVvxXrRpjIZzFfbKRaLRgGbKkBrkuHhebEUueZzmUuMLRWAaSOoWwRRjuVmMvEzHsFeBlWwqQOoKNvgMCcmlcbSsBcUydDqQGklyHYTtkxGvtTzZGidDWshHnAXpNnPXGgGgnuSmMsArRMmTCSjKkYyJjJsjJbhVvQqpXZzghdfFIiKCcqQfFOoqoagZzJyTmMtLiHGIBrRbivVxLmOEeQqMQOlLlyYwpPjJDOwiIJjnIiaGXQMwEeWwXxxXkKEFfbJcCrRdMAaNSsvEeVnvpPVQXKkxaAroOnAWwapPpmqQGOjQfFmpPUyYxXuEcFbVvUuUuQbeMdrRUuXxUHzJYyBwTtqQuUWbbCRZhEZuFfHhCcgyiCWwjRDFhhMGPpfAasPAzOoFuqOpPUaRrjswWWITtsmmMuNBbKkfFMmqKdDaquxXAdtVtTFRMmnNCGjJUuLFUUuuNjPiIcUuybBPgXsSrwGdeEsjJKvVYyDLwuUWhcMIuUKpPNpPqQsNnSztIiJfFgGQqjWILliWGgXyYLlWhwWuoSsiaAIcSsCNvVNCcJVoOCqQrRcCxXwWaXxYyTtGOogmVocQKkhHRYyrSRrGWzGgJjNDDfFrmTiMlSqQSCgIirRDqwWQdygGvGgVXxwWwWgGwJxXjWYutTURVMaAnRVtTvtUTBeLlEjeuUZeEaYqEeQeEeLlgGDdouJlLNnFfgVvfGgSKMbBWwWbxXBIpEniuXlYmMimOoBwxrdDZzQnbekXxfWOoPLlLlLPdZzDddDLIbmapCXcpPqyYOQyCVvcaPpoJrHhfnNFTNnUDFPpoKknBbNONEenQqeopHyYtbBThjyYNUuOtsAMmxHeEBHhKQqxGgZzEeCjuUMwDaAqLlUMJTtHRrUukKAbrvVRHdRoxlBpPgEFeCPpdDPMmHhzlLBJgDyYdaqcaMApCUTFBxiiIxmMolJjyrGuuUUCABbacCjJQrFmMxOhHoKiOoISHhlHNnjStUurRZHmMEtYpgGPGKkpPSfVvAIhfFQWNnKkKkSlyVXxvmMvjPpXTsaHhGpbirxAaBehQqkKKkTyxqhrostToOufFIVvVEevPiYyItTfcuOoxXJjhvZXbMmGKMNufFHtTmfuuZUaRrAuPFogGnNODyYmEiIAakPpKiejJOoEmhHhHAoSRreEeqQgGKMHhBbyYcCOKkoyemsazZAwRuUrWhHNeEfWKlLIiDkKDAmMagRrGybhHEroOjxifFJmrRDsSlTufFWwibpobjLiIXogIlLiDTxIsSAaIikOyWWwwYoSlfyYQbvplIUosSDdaGTitfFTEeYGgySsIadfFRrCcCcuLaAlLNQZzLlFfdAaSsFfsSMXxMmBbWVvFJoOjJwWYmdDOWtTPpwbBrfjjJLlmVvMfdceECDQldjkZzKqnbqQffhHzGzPpBGPNtwWTfFcbBLRTknTQIiOoaAnNkXaABbxKnugdDZTtnNzGUVNnNZzyveREaZzzZIhcFHeEhSrLHtTBgGzZXUoHRrPnNUuiCJjMHgGmMBJjuUmsfzmuUMnVvhMmHhRraixXOhAoKxsiIfFSNjcCJqQVvsclLNZUvVjJulLWwuCcUNQIiqnvwWCcSsbRroOpAaGyMmeToIiYwWkmNrRuJEePQpapPkKmmscgSHhskKgxaSYSsgnecNeYYyNcdDlLIRiIWOUuQwjBsdSsAayLiQqowrqNUxzLUMGgmMrRlLTCQqovzZsTeaxuUTBSssSLPatTuUAuUFlAaQxXWbHhzYBXDnNdWwTiRrIXxaCLdZzfFDCcdDlZmBUmMmqBKkIiIKXtTxUhbpPFXDKwWgdDbhHiXTeEYBrRVbBvpPgXMuVnNPwTSIiUxIioELlpnNBbFSslLSsNQqnnQeEkKFdDwVzvdDiINvVRDSsEevTtMiTMmZztpwCWaNiIzIkIdRroTySsYtJTOonNtCZzbsMAmEyYedDenNQvbwWSAYtXPBAtehOIrJjRXGgqQzrvVaqRrQAhBbHbBexXvVERhHcCVvkezZPfHhFGgaIljJwegwumAarRVkbBxpHKrnNnstOoBUDJjtwWpBblDwxQBbdDQBbqTDdtqXbAasSgEsSYyeDAJjxXvIuUKxwWXpqZHazrnNcXVfZzFWcoOnvefvVNgXZqHVzXxXyIqQYKOCYZzsStQiXCUfFgGuOodDNWUuwLlQLgtTNnFsDRJyQqWyYhUuWwZEfPrZBbBIOTvSyRKkrRrSsFhDQcXEjJxXenXxMmjHQqwCcWmEHovVnNOJjkAbBqQAaaUDdtTeSdDIifqQAVFfvhKWIiwkxTHuNfsSSsLYzZylFiIDRrpPPpQWknBrRQPPXjAnRPtboOaAZcCzmMrRWTtoLlkKylLiLlLlcMDdlLwHohTtmJjMHiINCcgknrRSslLFfVmMzUuTqQWpPkYvMlRfFIUUoYOcGgCoqvJjNnVnNcSsvWTtymTtMwxQAahXCwHhDYyBJeXxnNHbsXuUxOptViQMlBrzMjOgxXGoJmXphHoOgGPWEmMTgpPXHdxXkKNbBLgGtToNQUunNoOSSYSseYhLfVvFxXDoYaYbOoBXxymbJRrYyQYBPmpPDdqcCQEeOJxdVvDGgXpXxxXPpooOOPoOMPpMSMseEbBQqSrNnYyCcRxWERKicCIcCJQkdDBgGlTtucyiwPpWXxwIAadDirviAqQYCdDwWzZHBqNnbBeEQbNnjPIQSOcCfhtnWKkQXRrGJBbjokganFfNrRcCAxXMVvmVowrKxXkCnNQqWHmflDdEXxeOgKSvVaAGgdEsClLDGjOoGAJVlVvLtjcokSmMgGVvaAsKqqQQOfcUyLSsnUoOuNZNTwhHGdDgmMsSCOalDdLqQDzZdADdliFtTfvDaAYRrkKxXIeMmwZEeDwUYxPzZaHaAirCtvxXxKkXayYHMmMuejXidMdDNxQqQDcCsEeymCEAAaraRrARnhcCHKUbLlJjaAtabBXehcCeoOuqwDdEeXxzlQqyilLSDdbBhqZmUuwWLFtxLlcuUCXOqQDhoASyshHuvdpPzmpPMgGguKkkKkKyOhHdDLJyYbBwxgsSurNyXxKesJjOonRrNSXxuwnagGtTtMmTKptmbBGlOWwIcCIieEoOMOoWSscCSJjFfbmMVFPpmFfrzZKYlLrDwrNdDNnjJqtRRUurxwWicWwqHvwWfurOoPFnsnfFEejoOJNZzVvUAtvVTxlLxDBbxqQxSUuSsSeCciIEFfBbsRZEeBbzdwsQJjqSjQqWyYwJniIdRbBrYuUJiEeoOctIGqQGggFivVtGgzQqCHnNhfhHQqFdDcWwkQyuqDGgWfFwfTtHcKkSssSdAapLlElLetFnTEtGeLlTtGCceEeEgnicCNpMioJkAaXxwyvlDdLVTgyeBbpJNIinPdDDDwGgxsEegGSXKkFjJeEvnNVjJOofWzgXxoirRISsqAHhSbBYBlrXkKGgmLlUuQStrplLazZVdDTWwttCzmvVtKkeNnzIFNZJkKjDdqSdDsQxXBbuiUuIULlZzLZxDNkKWTcCNnlSsLlLuUMlIiLzgLnMlJLCnNwQqWoOvDzSkWwdDybBYKsEeZrHhiQaqaCtTcAwdWwDYKkyHSXDTtdJjqxvEhefFeElLbbBBHhClTDdtLiqsStTQxwISsohxDFfCcmXxHQMWwLlkKZfQcCuUqZlsSWShPofFBREexXSsrbaGiFIsQQqVNnvydDwBbdBEepPNnLVMmvHhsSrqMnVvicAEeaGrJsSuUIQOoeehHjTtJjNKkdDnsSrRmMvhHDOmModSReaFnrgLaAGgNnLGgQqDdRKjMtmMwTzZdmEpPYoOkKylLwWCjNnlQqmTtvRkKEeDdMmrVeErylINPZzecCEmvQpPmKyeENaUuMmuUoOLqQGgRtSsUuUXxuocNhDdonUNnxXWwdzZeyYiIEDygyYKDnNdVvLJJYycDjJIsaAbBsSeZzEfIUrxBbtTxSsTUuyOFfCFfnAnNaCxXCcHhcTtQQqQMmqpPwIbfeRrtcCrRTEjrRMmZhbfFQJQqrRXxjNgGnqBmUKsSsSjXwMmtTZzDdWApPdDLlPuUpYWwTItEekMmEKkkKeNHhoOpPdaBbVvPpYhHyAXaAkqQvolNtTdDNqQHyYhtTgWwsEeiBXRrImtXjntTNUIzpKkQqQcvVBbLFdDjJgZbDzgaTjckKILwBbJQqaKkPoOKYyRuNnaxUbMfaKJjnNDduUTrRycCcLXvQqcCAUKaShwWsUMmInNKJuxXUHmKRrhlLHZsoIiOSUTtuRrrRmVykpPMmKsAwWIiyYWwrAjEeaeXxgNMmEQZzqNnaBvyYcBboObBoVBTmGgMtbjJCcJjAaKFqjuHABNqNjTtJtHhBbTlLwWgYyGBfFtTbBPYgzzNnlbBwcujaAJFffFQqfBgjJGvOmmPpcCVJjyJJjqwLMmlextTfOlNgGqdYuUFnNJjRrbBeEjJLqxXpeRrEETtrRelLeEhrYygSHBdcbeEBQIdOOirrheEwryfFSKkKkxMmPkJiIzLlZjUiIuBAaxriCtTqQXrRHlLkAXxsmMflCcLHSshFVqCcQULWwlvyNnRrSsNnoOQFfqkKYMmaCSBZzvNnVORgLAqQxMmUAauQOWwutGHhgqxHKkFfhXGKkoAtmpPHDdhlFvVfLMJeEuUVnjZQqueETtdanLlNoUuiIzZOAOCLlcUuiiKkIHVvhhvCdDCcfBbnEeNTtCcUuSswWbBFAaupPQfWIiMUQinrIiXXeESuNfVvfJjnMeaiHcCAnynNYlMltTuUIiQntFfTBmTuURdUuDrUufFGggGQqKaOpKucZuUKkDdPpmCgrNnaiKkWwwXxDuUxXEVaMmAtBbtOmuTtRtTdDEhzKkXuJjDdFZeriOoIRuZzUoOgGHhWVvwSqiIbWqiMBbIimRrvkXxAaKhHsGgjJSsSEeLubyYYfFylzZmjJwoOWmXqQBbLlxhZRrTXxXCcewKkyYCcWFzODHhyYxXSsUbigEaeKGtvGCANnalLkQqKzKknrRPpZLuUNAXmDLckKCxXgZWwROoaNtTMmbQqRdbNPpCGwaAlLWqmgGyJjhWwsBaACcavVxnzPEMcRmFfQMmqHhckKCpxrbBdDtTrRVvkKRyWmSsptCHhbwyBbTtlAaLllgGMAeHeoOjkBbIioGDdVWDDddKDdkVvJjtQNnkKZJjnNqjsYySPdDXxhHpzZnPtTRmSxXveFfOkGcLnNufJPEZoXvZzVchnkKxXkOogWulnNLnOBlzyYZYIpxvVBbyPpJkKoOPehaAoOuQlLOdDEeORrMXxtJpoOPmMiInNfFuUTtPTtObBLlsiIFfSCcyYltTLmjJhOoOGhvQpnrIiTtNnVvcCvsAaRVhtTLQUIiuAlLmlItTnjOoJPpLljJxTraAHhLluUrRfIPFppBbPNFfnWgGwDQGgRrqzZhHdDdrlLtbBcCEeiHUuwcCaDdXYsvGDcCdbGvVfFvVMmgIiwWeHhEQLlotSbBsTkKjHhOsjJycnTtNTtUuQjJqUXKZNryYRXWwxiIlVzZvDFfpPdKrRrRANneEKkVdDvLoZNZzVvnxXtTQNhBbgGgvKMmFIcCiIiTtXxTTttsJjjoaAORrHhEnTePyYwZwWiIzlJjLpPxXcCUxcCxXrNEAKWwNSsKMMvEGgejJmGgVvpDqXcCuxlLUUuOXxoWwvVuSvxTtpMmPGcSOXYyZgMmGpPzuedDEUToLKtIiuUrqCFuwWTIiXxVfdDFvzZrRXxzRrRjUuSsJqtxXJBbGgaAjcGBPYypbSkkGgiIMhHRtkDFUbqQKSkFMhUBbqesSgGyhHYWieEWQqXxuSPhulHjGiuUpxXPQGgaAaPpTtoONEenUuixtUwOJJyFfYrRiIgrRAKCcRrkySXGPDIivFftSsTMmjJWwXxWwVEeDdAaHFOlLZVOtcWwCTPgcCREGgKMOorRbBGDdgkAarRvVOuMmUjeECpPVlLvkiiQiKkCcJkimsHoORQqUMRDvVdrmYyOhHoPFfKlLrRkiIyYzZnTtbPpHrRtgcCgAlLaGZRrPpcCFvVHhNLlXxXYyxXKuUkxvBNSLLeXWkKNRrQYzzVTWwtzepHhPgeEuUhHgAMWWhHwsybBULlEgRxXLhBkYyTengXMGnbBGgmMvVKknejgGJGgJjyYPnhGgfFHoOfjJFfEeQqfFXxAfBbFBKkIaXwBJjbgGWxuUAargNPpnSAAvVgGaTPGgEoOnNEewGgNtOoYyTwshHSrUuRzwWdDZUuqQfFDdoOsmMSQqLRhIPoeEOAapPoXBbEetTxOpXhHNXDXEeoIidDdrtTRQAaqbBZJfLuRbXxgaUIiLgeBbYqQnEiHjvxXVJbBkTtKpdBbgaeEGMmmMgLhtTdiIaoSsoOONaAGgAKmqrbsSmDdMfFdDTkwfFKlLaAgQcCZmNQqnNaxEVvlBbvvSsVjJAzXtPMqZYVvFGAifDdFIAaRrIUpGgNnCAayUqQXdDgGhpYyPLfHRGgKAakrhGnKkbBNcMObBPpopPvkbgGsSBjJKdDGgVKkyhHXbComgGHaUuyjJoFfGAFUuWryYbIiQqBRQpcCsQRGdDTtIiGgwAaNnNntigfpMmPDdviMmZfFzMmjJKkupDVvdcXxZzkKCPooOePpMKjJCzYyZHhfFQqeWwzTyMmlAaLOoeMmsUIigGMmuLlBIaAoOcCcmiIKYyVnDdmEeyeEqQIuUCcMmZgRrGhdkEMmnNXxFJKdiHFfNnhKHxTtkwWwIZzuJJjjRaeQqxuUXktTRrCWsTAaIBbqqoOafZNnzqdtTwWSsfAaAzZbsZzFKeEkfLuUIcpPAJjhFtchHCJjwmMgGxXFfWusQFfqDLXsSxwFfZzfFWwElPpMQCccCjJnNfAOoCtqGlBzZUwWIHhwWiuUCGgcsSRroRuEoTjnkMmhaAuUHlLokKTtKkjPRrOoXxSspNwWXxniIPRrPpeBbOoGTlXxLdvVUDduZznsnNlPRrbqQBSsPplLpLgGZzZmMliEeILquAajJEnNeWwUZzdDVvGgQGunPpNUwWCvVcUgGuXZOSsNTtnYvdDdWLuUFfCzMmoOaAzZvVzeHWwhEiiICctKMDdmpPHhKHmIimcCYLBbvXxVafqQjJTCcIrRgnNbBtWwZFnNjNnBbqQJfzTYEWkXdHihRnNiIrCOocXxvfUrrRAftTtTFDdaAsSPpwWJYyVoORrvbBNnMJjpmMWlsSOBboLiIeVzZAaLLwWlzZSsgxGNnitBiCcILqQccfFCZYsShyXxYIwWiHutBiyMuUOocCJIijwWmyYNIfnNOoFSLlfrpPrRQqVvoFfAgGuUjiBPpqQQawWtceEcCBbCcbBCPpqyYQlvVLWPYCcyBkgLlGFfKbziIZqLlRrYyeELlcCaiIaAzDbBvwWxAzZRrNiInOoiOraWgZwWOZBqQbNnfwWpBprNnpTtPIiGtyYqDMlLmQqHVWwqrFfRQelCcDdGNnOpXxdDKDdcVvCxopPYLdfrRFuUpHhCcPjJjJiIeEdijhVvHJcRODdogGDdgcLUnNSslLulCDXxTXxtFdDtnbVvByYaykKyHwHensAFfpvVPHBbQqRrbvrRZoOyYzTtfwWFUuVlcChHnSQpPrRifOaAXayryNEeaFYylQfFeQqukKUzaiIOoTbVpGgHiNUugyGPpgBgeEGUuhknwlnMmKkNLlvpcCPXbBxVXIiBsUlizFXxfnlLoOtTsEyWCIiGgkKhUbBuHaDdeHhEizNXxnCDdeqVBfjJYyFiaAIfsSofFOmPQAxYkdjJWsFHhOMmIitpPRrqQRrJjxXfFCNnOowOocCWGkiIKYhaAPBoOCDsTqzRlbhHTHepGgPpKkJjnNpPDviBbIrRbqHpdDQgbBJjfFrGgRGrRrRIGNvVWFpPPRrBGkKGgUupjJPkKPyCcEgGeRrCcOdDoxyBCAacTtWwHhnIqZzQLlwuUWEsmEEHeicCIFMIimlLAFfAnNCxNCcsSyYTtkKKaoPpOHPpfFfFBHuvVnGyzZkeEKtTfvRVoOrXxERrRrDdiIsDdfFaGgKkzvVQgGJjhHqZCjJhPnoOEDTtuifFhHIURrxpPxXEsSbBpsloOLeESgGfzvVhkKoOcHhXxfFHDdiIqAaISsnrRyZzSTyYyYKwWkNFGOogRrVvfsSAXxlgGDbBTqQzTtNwWnZsSIiPwWpYEeGRNcIxnNOOeMmEpPPpooXSMiIWwdDgUueEGyTtYjJvwWtTmMRnoONrTtVfFiwWnNLlIuUPBeDoOdEpPbmbXXxxXwmMWXxNvPzlLvyYkKCmeEMtTZxSGgskKwbQbBqBFkKXxmhHMpPfWXBbpPEezzZnJjLRrlmMtTXxodlOxXTZztoUKkutJjRrHlLXpbBGJjwDhHdgbyYjzZPRrpJvVqFrRjJvVfjJCJaYyddxXDcpPsSxXxAKkuHhOdDzZIIiypMuUmUNGgGgdegGOAdeENnaAWwJcCIYyUqYycCbCcHooOICkKfFQIiqsSWUwlJjLGZzYyEelGLMmlgEeaKkTUuZzbxXWwBfFtlvVMmLlLKzZkaqCcvVvqQVQMtTrRmvVFfuULlOohHAzZsPAsLlTELlzOsyYmrmkMmJjKTjZzwpPUSsDfaAsSFdUtOoTuqMmnBnpPCnNGlHhwjsAjJHInNihawNHhYZaAdDNRdXxYyDxpndKkDQqLsSaOowWMmtTAyYKkiIKkooOUupUBYyVgGvUplLPfFAaubuGFxXaFfDdLlkmMbBlWIojJOiaAJjltTLBXSsSsEGgbsTtStTliILrRBpCfFJjMmULlbnNBucPAtlXFoOLlALlRdKkCcAaDUuFfFfnvVaAXVlLvRbmMNnklLqQUuigGIiorRYZUuThvVXFfxHiPLkQvVqxaAnNqQCqkmMKgBbGnkKVUuvdBHhboTqEJjehgYyhHGOonBZzoOgGkKuKkQqACMmFiIfbIijJyAaCcEeyYYmHhMpPNgIieyeEuxsSqSHUfsIeGJNmHhMsSuleFnNfMmhHzyrcCRYvuUsSzZuYyvjaAjJJVYyFfHyqvdDVlLIiQytMmXxTmsPeEVNfgnNGCYyyAPpeFfeiOoZzJjIDdMJjxrRtTfbezmXgGxGVvgqQMZXxGgVIwDrylNnesCDmFYyfwWUHzZaAwWpgGHOohPpWqBGgbqBbQipCchHnNPIQhHSGgyHhYUuXvDSsyYbHSwWsKmMkhqQjcuUpiIiJmMDqQCcuUjJdjoOgenMbBmEevVfFxXNnNQVvLATiItKGyYgGgbmMNVvoOCMmcnBpBbPpWwPPYypQLZCczZaAqQejbQGQbBVBXxVDdIHhsSsSLgGrNeEtTjJXAaXuUFfxpSsPJMXxmjJjxWsfmMFksIivOTtpPMofFNlLnAaZzOPrHhRWwpZEapPxXAQIiiDpceaAdSiIOoeQqEhHiICcJjYyZiYZIBGgdXqQxPpDgGEeYqQWQXxqbBwgVvGgGZoOXxEezZjJkKuDdAasbBSUsSzNnKPSsTtOofFIilvjJLuBuwoOWSlLHhsEeXqCvgGlLVbuUpDdPAcCAaajJBmMHgGeELjJOolTtPswRbBAdDaTaMnTgGszZoXxSaeRrEeiIEAeEuUewWwPFiItkKTqmZzMfFeljJEeQqIElLeiLaDPpdAoOAIiaLlkYeEGguUvVKjMmJlLwvVIiWYyknPhHwRceKkPpDQqdeEjJZMIimyvVmOKkPiIpoMuKkUpPlSVcCglohGYNjJPtWwwhHwWadhxXCoOcqQzLlQDmMdqZvmSsMZzrRJrRGjzZyYIEeURruUTtBbsMpPVrRvsSBulqmyYiJNBrPAeGgEaxXpYysSNxXGgnbsSIikNnKgnsUUutTfMmsnRIikFQqXxlLrhHInNbEEecRoYyeEzcCgeEjJzZdDBSoOsbMEerRpqPphHQSsNHYyzNBDiIOooyDqeXxEGgbTtSHSshxXmGaAtipPIecCpPahHgBOoBvjvVZJRrjjJBbCclMyxXYmRUugqQGFeEVAaLlkKCcskKXSlkKqQWwVvLObGgNrRnLlzZwWdoODBHhXwWXaqQaAoyYhHzZOXKgdRruUDjwWwyYMmMGdqmOoZzmMnlQqIuJRrLLcLlSshHuBbkKzvVmMZzVvnNJxXAdyYDDdLlWIiwYfFzZTwmMOowoHUuZgGzXxYBboOyyyUjJuueElbBLSsUYfWwSsNnCcmMBBoOSpeOkvgoPpOUTWwtbBkqQErRejJdDWCcwmBbmMMQqkKqZrROokpZXaLkJjshvJXxvVjKCcvYsKkxbhHBhZzkKBbeEIeEnIUuBbiNVvOofeEexUFwWDdfMrqQmzeEPmfFMdbNnBMjJzZvVtCtTuUcEeTNnpGgMnNeEkKmPmPpxXGgzmTtGgoOMJjJjmVvpPMmMAnuUNnZAazYeEdaWwAbibjRoODdXYyRpPRIiEeUgGIVvijJHypPVqQNZzrYyxXkbBrmWwyYYyRrbBMSswWMmVQyKkDdYqLllBnDSsdpYyTtDuUvVdDdiIPfFhHSyYsKsSBpPBbmcRrDtPlHhBbLaApOoTXKkSaLljeDdGgEJrRACjJDBbdOIOFMmaqRaAlpPhHXxLeXxCcixXOoRrYybBIgHTHhtwjJLAUuNsupsiWGgqQOGgxXyQJjqgFfeEtTPptJCcsSUbneaikKIwWOojuUIpIBOoXxTtcCVvUArRtTVHFfJjMooHhOKWFmMIYyuKJQqEzUuZDdbqQBztrxXHHpPhAaUYQqnNDdpPylxXoPpOdDFdDfIiMmLcIipqfvUJHhtBeETQqtNnbEXUuLlxsSeeERPFsSTcmPEepMnXxNbWwmMPpvVBDvVGgVsjJyYqPRruUTtSsFfMmZgGzDdniVSsoPpDdhBbZznrRNFBAaaaOaAFcAaCWtThHCPjGgEeJtTvwWVURruiIERHnNGlGrfYyWGgtTwPLVvMmlpBLFfHhCcsadDAScCtTabMmbBmMmOobBXxNnskKyYXhHBbHhoOxqYfLlbBDdyYRrkKtzrVvMIimMZHMmlLHiIhtBbZzMmxnPpNzZpPiSWwfndDNVvIkHhPpbBdEegNnlxXLXPJuUjoOaUCcuoOaNZWwzJVvjYyjJXxQoOINvVnNnimMdDzZqyYiYWwegFfFfGpjtLrIBbsYnNGYMAxZUuqQzPzwWgPnLltEeDdQZeZOoOooqceuUbqQLlBaWwJjWwQhXkKiITtxDvBywWYPpESnNZKkLdeEhHDNURtTCJjiIgxVvzZRrzZuUPAapeCQpPqIigxXGOoOGLBxXbNWwrRaAZpMuUmPbXuxDdiIasSEejJAKCDdvVcwqQqpsSPNnKkaAIiQpPhHfGqskmZzMKoWHbBhwtTjDzZdhrRwWPfFhJiNeEroyYBbwKRsSRrXxroOLlxXPpwjvVaoOdUVWwvStTbBstZCcEOovVdTtirRsSsCcYjnNJgrRgGjJGpeETtPmwjNnXxmMUuJjGghjtwWYyTRJjnvVhSslLvprrwWRfQqrRykKCGgTfFXxpPtcxXDOtToYnNPMmpizAauUGlLgZATtaeEtLINndDInfFrAaQqRXxruUxZhvlLmIiDGgdMUunQlMPpmKkaUuAiwWxXIZzxXfnNFeEDdIXxYWVWwvIibksGHhgeqQEGqQGDdVvgeEXzmTtMSoOhHsZxdZwxXWzxXDTtiIHhTiOoIdsSEPXxpejJgMSorIilLpPRWUuwExXeCckKNSszZRYSsyfFZnmMcCgGiILqQyYtkKenNFmxXMrRsSRrQSsROorqzZfHhrvJjMmvVVrRygvACcWruIiwWIiiIUZGwevMKyYkmYkKaACQqceEaAyCcpXxPVvymMkKBpPNnrubBUJuUiIKBYybdOoEenNDkKVvJgGjdoOCcOxvXvHhVMFxXflXxpPLeIiJjEUzZVvFfuLoOaGgFfFlLfAjJhHlwxXyYNnlQqUuBbXiIhdDPpYEevVyNSsFfKknNOfFxiBFLZxXzsShXPcpMmPCRrpNnhHNGGkaAiIKGgkKMuUvzZVzZmNnkJYHhJjyfFfFgCBTtJjgGEDdUarRhhHEeMcmMCmGgHYmuNmgGMqQnnNuUUPpPdDpddDDodDXjdGgAaDlLxXOoaFfAEzfxPbHhCcBAuUwWLeElmMaVUuvyYEeawdDueeWwEEatTljTtJaAWwMmaAuWcCyYyGgpPMmPpuUzZCcUhtTQqUuzNtTxfFyEvVmbBEexXnRrwWNNXZzCeETtcmMKksSwWRruVvUyrRYDSsdpluUNgeElLZzBbPvVrzOlLDdLlcCRrjfFIiFfmMTdDPfTtWibBguyDdYxXdDAaGxXQoObBqbtTZzSdDRzZpRrRVIDditOoKcCkTgUumSnyzZeeDmMaAdphLlHyYjYKuuUfqQFUgGSsaxXDTtdqQjrRJjtTcDdBbfOoFfhdjzZnuUxXjJejJoTtjJTtpSslzZLYkwRrWVvSsKEeVvGgOSsoOKkfFKkwyYAuyYMmUDEexqQXgGDdeEtnNTCoOccOoDUbBjJTtiIKddDDsSZzkxqQrRZzepPynoJjPpytTIinNhHasRrmMSAOloOfFLoqQYOHEEbBeehBbmMxiIXXhKkYYyyHzeyYEZYLlvVyxmMrRJFNlEeLsSlLagGAnKkgLaAlGfghHGhkKHUDduTtcdyNFfnhHQddDaALSWwsrRBxXgGRkgiIVDwWdFIPptTfIigGOQCrJjUfLQqcyYqQoOxXwWoNnTtITtrRiDYZzydzZvVHfkKFhOSsoDdFHsSeELmMQmMqHUuhcyYCuTtUuUTtiIqpPdDQldDipPIhqQFnNVwWjJvJjvVMcLBblFfZzfHhFQqCCsScmkJGgYyAuUajKUMmFfhHcHRrhTtECcgGsaSsxeAaQyYgkAaKuUjhHJbBXxQqQqTtIyYiGqjJFOXxZzzGcCuUcCUBbBbgGXeExJjTtKiIUukMmaBbLsNnjJXxMKkEemnNBlLbRtxXGgsSbWwHBbhejRwWCcabBpZzURrmMzZuqQuGWNnaAtTzZwTtEeodlLDvVdDwWeYHtpeEPeEmidsSpPDzoOZrROMWwmoUutoOTITtmMDdKickKuKkUQeEGgqwKkqFrRjcCkKcMmeMmElLnyZaBbAzCxVwWnNvOocCgGuUOooOLlnIicCZzdpPDeENhHLlZGgIiZmMzdfFHjJgGaAhjJmRHiIrRhzgGVvECcQqvVIiHhFfLlYOqQaAoyRRrjIisSksfFlLCcKrRkqQqQehHeCjBbiPpmMIJgRrtTqQtTnNcwwWWdiSsIuUoOfMmFqgGIsSaxXFfFfUsSIiHdDhuAijrIiWhHwWGgZzSsWwkKtTMmwBbPpRZNnzZFeEaAfgGVvzZIixXdpPGqQgbBtzwWlLZeEIirRfFJvzZPpVwNiIqcCKKkRJjpmZzrRlLZHhSbBAajKqQNnwVvCcgXupPULlhHrRDdMmbMGgPZzpfeLlXxEqQNFfOnNKkvVoTYulLaLUOoHhjBCmMcIrqQoOKkRCcslZMESsegGmMmZzzZpXxaAqSsQKVvkkKZzhHCcMhbBuUHIiujJrxXRWwUgyYGJvXlLjpPQqJHhdDMcCaAIimXxbBZzKksSQnNsSqQbBRrlOoIiLHAaxXBblQdDqsfFSRUuctTCpAajgGJgSsXgkKGxINjJnBhHbrRlLMmoOOzbowWOhHxXXXnKkNtAQqPmMJjGUStTsLlQqEeEeuyFLlFjJZzIFfRAtAaJeqQEwWMmjSaVvnNoOoOGgcNndyYbBFfDaAqjJsSjJvIiEehDdHcCuLsSFfYyXxXVeEvTtuUxXxNnytwWTevcCTtVEHeyYEMzejJEAxXaKkWwAAPpLVvbBCboMPpfXxSUuswFxHhXKkSsjJfvLlCcKzZkVXwEMmnNexXWkQPplLgGXxiIgPpGqQMmahHAqDliILxXdDUuKCclpPLkPbBvVuXzZNnxhHdDUpVcCrRvuSSstTZhHzjJjfOouUVvvVwWrRFRTtrJsMQqZzIisSfFBxnMbMmVvBJhKksSaAGgHDdvKktTrCcReiAafFIhHzrRZeEHhosSrNxYuDdYySYyaAsZzySssStuUTOaAoMcCWgMmGhBZzSseLyYlrREKkbHgGDdQrRUuMmqtTjYyHuAaYjXxJyUAaFCccCBbsmMrRHYykrRDiIdgGvRrVWWbBwPpwqQeqQEkzZwWKYyJUujDlCcgGOovwWVLWwdhHpPFfKGAnNZzusSXhHoOvVGFfgVuIiOZzoZPpWwzOKkoULYTtYyVxJjXHhyGgVvUuvTtpCcsSWmMpVQqvmCcZkWwSsFfoXxKnXIixmlLLwzZLlHhLlVvIiWZzlbBeEKkYlLWwLlhHfFMmycAUpPnHhnNNeRTtrEEeFfygGwdkKDtTSMmsEBsSbNnJNijsSuUtruURAWwarIQNnTtqQPpTpPCctRrAaLxBbaAiIXfNoOwLlWZzaWOFfbBAatTBbozZxZKKGgkhHdDgGkxJjXuxXUBbVuUvtTjKwWyVcCvPkKprRYqQkCcfFJjDlLLRGZzDEIienmMcCRrNGDcCWwdgiIuUKsSkozJjtTQQsSFfXxQPpVvqGlzXxZhUueEMmMpXrxXRxGgPIibBwWOUaAuomsSSsyOdNSsnQqDoKzTxXtfFZkiISXxkKavVmMAXZzyYvvVCcMmVLmMwiQGVhHpvVvUuVPLKklUuvHhtIiqvVQzZQKkRrBEQqevVpcTtGEMmMHhmrRegkGgKWwpaBbAPiTtIfxXFNnxXDdeEfadDGgaAihHSYyzZsbZbhHBZzzBNJjUupPEsDcCRrdSJjmZzvVpPJMmyYGvVgnVvUuNpftEeTFUuhqQBbSsrRkZzVkKvcJnNjJPphYyHCkzYGgDdyuUZdCcdDgGDxsSXBblEQiqQqQUlLKkZdnNOcCMmopPEeTHhtJBbllLAanoONpPKcCeOonnNNEBbSsAaUIcCiotTqUJjuAaCcflrRLBbgiJkKPOoYypRJYGOosDhHMHhnNmdeEsRrSNnbwHhWkKlsSLBFfScGfFPpgCtAvuUVaXNnxLJHhyYjlYEefuUAqJFfvVjQqOoUuWwmMoOYabBAjxrRXBiIbgyFQPpucCUqvlLWFfsKkZQkKkYTtaAycqXxQCYOoSsxXdDpPytTKMmfMrLBxoOEeXgJLljGNnHcCmMsSjAIiaXxPpaADbBMmZzRryYJeEjdKcCkhHhiIxEwzZAaOjJodsSDjbQMmqpPBQqJOmmBbMhHlaAjcCWvVwJqQZUyYTtWKkwPptyYiITsSHnNcQqCjJhxXuHhwWpmMyYdDkmMIaAiaMpPqQmMeEmvVhHGgBbBrRBbibgGBIbEkKFlLFfPpHhyYmMfgGLlWwHuEthDFSntTfLlFNWwsoiVFfbBEevVIxXXAarRylLYjJxMlLNnPpmoOPpijXIigGjJqQCkKOopPCVvmMhYyYiIfFyeEHcctLlTHNnMmNnAapBbPNnMmxtmMmnfFNjJbBMAaYykKEeBqyYQcguUUuFwWfhHmSsSngGNsMkKVhHtjJJKkChHcaqsSIiwWAabfqyYQKWLlxXxXCOkkKfFKEtUuTejZxyLNnQqoOcCleEBfFNnlLGgMcYEeTtshIiHWtTBbbFfEedZumlLMUnXxvEeIUKnNkuyYUuloiFfiiIfFIAXCcPtTpxXvmMKkVwWxwMmWaAaADdQquCzXxZTtyYidDfFIcSsUapPFfxXbBhHfFqQWtToOIiwnNjYylLgGcCOoHhCcJeEAaKkRrtQqPpRiIjJfAaFOoMmQtPiIPNnwWVvuUpXCgRQdoOCcDYFfyEeuUeEuhHmcVUuvCMmMUobBvbBcCqVvQVGYygDaAdkMZzmOoPGIiMmpPkKFaAUuhkTWwoZzPSsAxXapUBAabudDOYyfFgGSsIiGgWwreeWwEEAzZgGaYoOLCgkKGtTQqKkGgVvclwgDdGWyYpPiRrZjJzaAfFeEmMneVvbBrVvREKkRrlFfLqAaQjJaANSsSXxsoBbOLrRlsgGSYpPyPpLzsSZZzlICcJjmMFgSrRsdDvVFfJuUOojIGgFrMoOmSsCYNnbByeEccTtIilXxLUuqQKkCGgIiSJrRjxXshHkKIicCIPpifFxXyXfIiyZzGgYBKRrkmXxRrMdDgvpPVIxXiDdGgwWqLlQDdbrRBGTnNrRtbPpIihQGgZaAcCzfFvVeEvVCzZcmmMMUjDrRqtTeERrUuQddnTeaAhCcSsPpQRrqGglfKkFLZmXVqQNnmOpPSsSsiOohHJjCcXCcxkXxJjxXzZhVvkcBjXxXxbSgGpPgSsxBbdDeEpcGgCPXRRrCbjeEtTJBAaccdDfFtbQqBTAabBCHCchZzXVRraAIiLlvwWYyUupPxDiIOoxXtCcIiQqXXbBMmaArpPRogGSseRrzZcCFfEcCkKkAaBDdoOhHKkbIiyYrRLIilKOosDUudSlQqDdyYpvMmVLxXlAaiWwIWwKoOAmceTtFkKTWwcvVCTRrhHqsSPpvUgGsSwvVeTAaPMRrRdDriISUuoOsVvjJyIiYMmJjcFRrfJxXPpjdDBbKkyYBlLYaxXTjJhHtaVvAALeElgtTcCGqiIQzZMBIibIimaAcCTWbBUvVDVLlvEeWwCcTAIiJHhjKlLkatgTtxqQXQqGKkwJMWwaAmwWjIipDdmMHhpCcufFoOUwWPqQiIPuUzZpiITttTPpXxNjdDEeAaQqJDFfdQqnaAduUZzDFOdDHNnhoeLHhrmMnNDdRcTNntHTtYyPpeEWwjOoqQJhCKmMkzbBZENzZnuBbUFfcCMwWOaIiTQqNntpPTtAeEiILIirRbKyYkzZBZvhHVzsSduUxXxXzmeEwWMZPJjQqpTtXxTtpvVuUPfFHDEedhDWwIilZvVXxzcCLlsHCeEcLlGgVvgvVGsSfAxBeEbtTmUTtUuXxeEnNmMYbfQqFBlTtLuOoOoUhHghHGdDPVvKFlLURoJjOZzZzyTteEsZzOLllLoRUubBVKkvvKkJjVrRPpVDdnNvYyzZuUrRekKEWvUuLlVOTkPpPpKXNnkKyZuUzYwWZOoxXVKHLlTtWwhXxqcYyUuCaAFfBAabQbBpReyAaYEzZrQqPgGToOxXCkXHhqQxkRrKKcbAaBTtdAaNnDvHjJdDQdDUuqnNkQqlLKNnWwMVcCmMIdDigvVGwSsTtWvfPpgGFDdKkwMmzZxZzTbaASszZvhHVBmMUutDdXsUGgygGMmYuHhSWQCfBbFcRrmMNnhoOHsSAaskKGgfFAaFlLffhHFbBVXxRrhHvuUVxXDwWTtdlLDOKkoneElLNANnhdDNKknuUNeEnJjjJDuUdRrPpHadDWwDdSsFsSfdDVvTTtTxXtbnNBgGqQtdmKkPpbeEZzAscCSaHsSxPpdaADDdoIiOqQHhYyQDdYDWwvwwgGWLnNlkiKpPkIiIKOoLlWyYVMmTWwthHEerVvRsJjSrRfZzFHGgMmzfFHhZAauURMJjmrkKcXzsrRSnVvNZxiIKcCkQekKlLEHOoLlhdDCcUkwWkKdGLlaAgJYykKjVxyYXIJjBbFaAccioOMmICpTtqPpIiaAZzQqlKkLIiYGgylLQjJssSNnSCDlLdcCcUTtBcbBVUuJwWjZAhHKkaXxBbzeEKZzWwAGPpffFUTFftuFWKkwSlLsOogjJauUvVEbBefFrRFffFnKknNNqzZcCzZRrvVAaipeEekKiIEuCuUyYcUexyYZTtzcCfhHFIiDddDeEUzxXZAfFfIiFrxXRatTYyIiaAvAavVVhHMmlLWwhHIiEvGgtTcCVTtesdgXtTRWwrJjGgxuUhyYHMmqWcfzZFEeCeOosSEVvQqwgPpGnNvSUusVjJEeQXxGOoVvgGAaeMUumESEegGTtstTYyFfDotTbBAaKbBkiIwJbBuUpPZaALlvFfEedzvVZDtTmMVtFFffyFfJjmJjMYgGTzgGhHxqQXfIiFuOogDnDWLlwWdDTFftzZBbBbJHhjOocCsjOLloJSuMmNHhnsShHQNnBhHbRQwWqEePpXprRHiIVviIAMmaEefFhQqnNAaPlLRrxbjJgGaSsAtTjROzZouUKkSgGWDdwNGgnSssQqBbdDdHMJjAOoamhKkiIDBbrfFOoPpJPjJxXsSZzGgVzZvOolLpbBxXNOoHhMmnBfFbLlHDdyYhIiNbeEBXxhRrHhHnsSoEeoORrnqQNXxcvVcCCRlLrQmMYyqHpPgNnkKgGOfFiImMoGIiMWwZtTzKuUkFfmmcCvcXxCEbKkBXxuUgGjdDCwkKWeEuUuUTtVjJVvDdvnNCcPplLqQsGXxaArRZSszuYytTUsSkKHhgEkKeJOoxXeEiIxGcCgXGgFfcCGgjMaApPQqZzBfkKKkFDdgGonNrRDdEeOMmRrLlYyqQacCuUJjAePpEuUbGgBuUdDWwUfFReErSsubGgBbtTGgcCUFfFcbjUurRJrRkMMiIZzmZzmOoNSCcKkRrsRrxZmUEeDduMbBmMoBiIsMmSOoWwMmDdyYxWkfZzFoOKwxXXbAaCXVvxcsSsStBbTRzZKkzZCrsSTjJtRcekKkKErrIiRzmFfMCzZcCcZfFtTOsUuSDRrtTxXeExEeCTcCtsSGlkKVvLkcCKgIiDKZzdDkDdQqXxXmMPqQpxnNAgGGFfrRsSeEAagUrRRhHrMmuhHkKdCcNUuKknYkAaKGhHgaAyzZslLSDMmCcLCchHhHlsQYykKqAICcNnuUffFuUMGgbBbBdDVvjJmyYOsCndLlwWDNciIhHvVlDdKlLkXhHaAMmKkFfKkkMmLlKxwgGWvVLlLIbdLlFfxXmVvBbFyYfRrAiIaMrRrCoOcrOoIinNEuUiIyYhHeRUuxXrYwWRrjJbBAakVvJjKpHOohPuUyEedDKwWMOlLoFfKknNsSBbmeEAdDakhXxeEHRXUaaPHKGgreKkEReEWwzZkhpAvyUuYDdeEVxppPCqQdDULVvtGgmMeETlPpGoeEWdDyYcCmMwTtNnxQqXEeOzZwGgWTtqQKkgUAaiVyYvuUwWIrRuuTrRtyUOouxYyXIidKkNnKnoONCoOcvVnNrbBRNVvxTYytXnRroOsSFfyYwWAayUMmeXxEueUuEKknNYEZSkuaAeExXUKoOxEHhekmOQqWrRwojjYTtTjJgGPptOoGgzZlLBbywWYyvVJJjJjJgGWwsAFfaSMGgNneEehHkKEmVvbqQrZmFfSsMVvzHhkKoOIaABbCnNefFMmEcAaiZzhqQdDbJjrRYytvVLlTCKkcLleEwQqWqQmMSrRTtEeQuURrxXQxaPpAyYAaXkKTtqIHEehmMlLqQrLlROoNoJjEJjeXxOGgnfFIxXimMKkLliXBwQqWKkpYBbyPfGgFUuzpPZjNWwnJiIOoDdbdDNnKZzkmMpvoOVbBbBPlbBLxQSsqAbjJBZxlLCcjVIiaAvJXEeCcSBfFbszAFfbrFVvfNnRGgjdDImpPMfFiuZzUJvQqSsluBbUkKCJjcpPLrRiIVcCveEVlLUulZzLOowWgxXZzGqOoQWVveEIiKkwnNnNhHoOCcAoaAOEeaLlnNcCCsScFlLkaAKEMmNnaAvPiFfIpVnExXetqQTKkNlFftTXxuUUuLLlefDzZdSsqQlLTxXSstmMYCcPpeEyPaALXxRrTMmtrXpgGPvVxcCNnQqDBbdRlNJcCjFfRrIiCcOojJRrzZutpjJRwWAaZzrlLiGgKkIeEPTUgGprrouUORYySsGgRBbVvUYsAaSJqQjdDjJrRPgGxXpCZzcFtxXTzZFDUudKXxkHhftTKkxXTVvwWtWenNEIiemZzMZxXzEDdbBuUqZzuUQvVsLwiIWlSeVvwWEktTabBAKqTtjJQaLDdlAVRruIBbTtiURrvdDCbBTcCTtSbBsEeLlRrtOpPYypPohNeEnZfFzHvmMViIMmOoQqmMqmMDJjdjPpIiRrCpPcJHznNZcIiDWwdlLpPzfFZFfNulLUpdDPpPeEsSxXgGniIHhoOmMoObBKLlkAajJlFokKOfOoLGxXIiDdgqkyYuUKxXYywWooxXpGYygwWPOtTWzZwXxLNzZOonlpEeOoGgPDdlLZzmTtCfFcZwWFfUuDnNdbNnBRqeECcEenNQrKkNnzVaABbaALhFfHDdwWlvxCcXBOouUbvTtggGGVHhrRxUudCcDUgVnNqQaAvhzZHjBbywWYIirRJhXxHLuUJjlZzUuwWrRlEQqeLQqqQlTtWwveEVLaeEAmMfbGgBFWwHhzbGgBWHhwxfxXFXZNWwdDnuUvVmMGOoTDdRrBrRbNnteGRrgcCgGWwEiIZZsSzRrCvVDdcaewWEAiIBfFbzwWjuUJUvtTLlBYybBbTQqPptTtGNnQqgMUumSstsSnNtTCcfFvBbWwXxVVvGWweUuEKkCdFfTtiIDcHhcCCcOPpAaogoOJjJoOjcCRaAIiNLTtlnpPInNircCHhloOLuUvvVVqQYxiIXyMtTsSWsSJjHhWoJjUovEeVZzOuPNjJgGnIipcCkwWKOUNUunxXvVMmRyoRrOjJYrOZzmvVrRXxMPdHhbBoOxXDEeOoKknNpHyYhcCHKkrRUlLOoupPvVuUyYhAaxXoMXxgGmuTxXtGgxXsSGgdDwyYQPpKkqwXsSxmMIiRryYFfYycCJjCcOoYyzZYQGIiPpaAGggqyYgUjRrGgJbBuPpLly'\n</code></pre>"},{"location":"T1_Structures_de_donnees/1.2_Listes/Structures_ListesChainees/","title":"\u26d3\ufe0f Les listes chain\u00e9es \u26d3\ufe0f","text":"<p>Cr\u00e9dits</p> <p>@cr\u00e9dit de la page Pierre-Alain Sallard sous licence CC BY-SA </p> <p>Attention au vocabulaire</p> <p>Ne pas confondre la structure de donn\u00e9es abstraites Liste chain\u00e9e (ou simplement liste dans certains manuels) avec le type <code>list</code> de Python.</p> <p>Le type <code>list</code> de Python s'apparente \u00e0 une impl\u00e9mentation de la structure de tableau dynamique (hors-programme).</p>"},{"location":"T1_Structures_de_donnees/1.2_Listes/Structures_ListesChainees/#1-notion-de-liste-chainee","title":"1. Notion de liste chain\u00e9e","text":"<p>La structure liste chain\u00e9e fait partie, comme les files (d'attente) et les piles, des structures de donn\u00e9es lin\u00e9aires : les donn\u00e9es sont \"align\u00e9es\" les unes apr\u00e8s les autres. </p> <p>Ce qui caract\u00e9rise une liste chain\u00e9e, ce n'est pas le mode de gestion des entr\u00e9es et sorties des donn\u00e9es (FIFO pour les files, LIFO pour les piles) mais c'est qu'elle offre un moyen de passer d'une donn\u00e9e \u00e0 la suivante.</p> <p>L'id\u00e9e de base de la notion de structure de liste chain\u00e9e est :</p> <ul> <li>on forme une \"chaine\" avec des \"maillons\" ;</li> <li>un maillon de la chaine contient <ul> <li>la donn\u00e9e elle-m\u00eame</li> <li>et un lien ou \"pointeur\" vers le maillon suivant ;</li> </ul> </li> <li>et on \"tient\" la chaine par son premier maillon.</li> </ul> <p>Exemple : liste chain\u00e9e des rois de France</p> <p>La dynastie des Bourbons, rois de France qui ont r\u00e9gn\u00e9 de 1589 \u00e0 1792, peut \u00eatre repr\u00e9sent\u00e9e par la liste chain\u00e9e suivante :</p> <p></p> <p>D\u00e9finition r\u00e9cursive d'une liste en informatique </p> <p>L'id\u00e9e de base expos\u00e9e plus haut laisse entrevoir qu'une liste, c'est :</p> <ul> <li>soit une liste vide, </li> <li>soit un \u00e9l\u00e9ment suivi d'une autre liste (\u00e9ventuellement vide).</li> </ul> <p>On est donc devant une d\u00e9finition r\u00e9cursive d'une liste !</p> <p>Exercice : utiliser la d\u00e9finition r\u00e9cursive d'une liste chain\u00e9e</p> <p>On donne la construction suivante :</p> <ul> <li>L est la liste dont le maillon vaut \"Alice\" et dont la liste suivante est vide ;</li> <li>M est la liste dont le maillon vaut \"Bob\" et dont  la liste suivante est L ;</li> <li>N est la liste dont le maillon vaut \"Gaston\" et dont  la liste suivante est M ;</li> <li>P est la liste dont le maillon vaut \"Jeanne\" et dont  la liste suivante est N.</li> </ul> <p>Dessiner la liste chain\u00e9e P.</p> Solution <p>La liste chain\u00e9e P est  \"Jeanne\" \u2192 \"Gaston\" \u2192 \"Bob\" \u2192 \"Alice\" \u2192 \u27c2.</p> <p>Remarque : le symbole \"\u27c2\" repr\u00e9sente une liste vide, ce qui marque la fin de la liste chain\u00e9e.</p> <p>Ceci illustre bien le principe : on \"tient\" la chaine par son premier maillon.</p>"},{"location":"T1_Structures_de_donnees/1.2_Listes/Structures_ListesChainees/#2-interface-dune-liste-chainee","title":"2. Interface d'une liste chain\u00e9e","text":"<p>L'interface minimale d'une liste chain\u00e9e comporte les op\u00e9rations  (les primitives) suivantes :</p> Fonction Description <code>cr\u00e9er_liste_vide()</code> renvoyer une nouvelle liste chain\u00e9e vide <code>inserer_en_tete(lst, donn\u00e9e)</code> ajouter la valeur <code>donn\u00e9e</code> en t\u00eate de la liste chain\u00e9e <code>lst</code> <code>tete(lst)</code> ou <code>head(lst)</code> renvoyer la valeur du maillon qui est en t\u00eate de la liste chain\u00e9e <code>lst</code> <code>queue(lst)</code> ou <code>tail(lst)</code> renvoyer la liste chain\u00e9e <code>lst</code> sans son premier maillon <code>est_vide(lst)</code> renvoyer <code>True</code> si <code>lst</code> est vide et <code>False</code> sinon <p>Exemple d'utilisation avec la liste chain\u00e9e des rois de France</p> <p>Si on note <code>Bourbons</code> la liste chain\u00e9e de l'exemple pr\u00e9c\u00e9dent, alors :</p> <ul> <li><code>t\u00eate(Bourbons)</code> renvoie la valeur <code>\"Henri IV\"</code></li> <li><code>queue(Bourbons)</code> renvoie la liste chain\u00e9e \"Louis XIII\" \u2192 \"Louis XIV\" \u2192 \"Louis XV\" \u2192 \"Louis XVI\" \u2192 \u27c2, c'est-\u00e0-dire tout ce qui vient apr\u00e8s la \"t\u00eate\" de la liste <code>Bourbons</code>.</li> </ul>"},{"location":"T1_Structures_de_donnees/1.2_Listes/Structures_ListesChainees/#3-longueur-dune-liste-chainee","title":"3. Longueur d'une liste chain\u00e9e","text":"<p>Supposez que l'on vous demande la longueur d'une liste chain\u00e9e <code>maListeChain\u00e9e</code> qui a une queue (<code>tail(maListeChain\u00e9e)</code>) de longueur 7 : vous r\u00e9pondrez sans h\u00e9sitation que la longueur vaut 1+7= 8.</p> <p></p> <p>Cette \"structure imbriqu\u00e9e\", cette disposition en \"poup\u00e9e russe\" d'une liste chain\u00e9e permet de d\u00e9finir une fonction r\u00e9cursive de calcul de longueur d'une liste chain\u00e9e :</p> \ud83d\udccb Texte<pre><code>FONCTION LongueurListeChain\u00e9e(lst)\n\n    SI est_vide(lst) ALORS\n        RENVOYER 0 # cas de base\n    SINON\n        RENVOYER 1 + LongueurListeChain\u00e9e(tail(lst))\n</code></pre> <p>En exercice, vous devrez coder en Python cette fonction pour chacun des deux modes de repr\u00e9sentation (pour chaque impl\u00e9mentation) d'une liste chain\u00e9e que l'on va proposer ci-dessous.</p>"},{"location":"T1_Structures_de_donnees/1.2_Listes/Structures_ListesChainees/#4-implementation-dune-liste-chainee-version-imperative-a-laide-de-tuples","title":"4. Impl\u00e9mentation d'une liste chain\u00e9e : version imp\u00e9rative, \u00e0 l'aide de tuples","text":"<p>On peut choisir de repr\u00e9senter un maillon par un couple (type <code>tuple</code>) de la forme : <code>maillon = (valeur, maillon_suivant)</code>.</p> <p>Quand il n'y a pas de maillon suivant, on indique le couple vide <code>()</code> \u00e0 la place. </p> <p>La variable qui d\u00e9signe la liste chain\u00e9e est alors simplement celle du premier maillon : souvenez-vous de l'id\u00e9e de base \"on tient toute la chaine gr\u00e2ce au premier maillon\" !</p> <p>Une impl\u00e9mentation de la liste chain\u00e9e des rois de France</p> <p>Avec cette impl\u00e9mentation d'une liste chain\u00e9e sous forme de couples, on pourra donc \u00e9crire :</p> \ud83d\udc0d Script Python<pre><code>roi5 = (\"Louis XVI\", ()) # on commence par la fin de la liste chain\u00e9e\nroi4 = (\"Louis XV\", roi5)\nroi3 = (\"Louis XIV\", roi4)\nroi2 = (\"Louis XIII\", roi3)\nroi1 = (\"Henri IV\", roi2)\nBourbons = roi1 # on tient la liste chain\u00e9e par son premier maillon\n</code></pre> <p>ou bien de fa\u00e7on plus condens\u00e9e, mais moins lisible :</p> \ud83d\udc0d Script Python<pre><code>Bourbons = ('Henri IV', ('Louis XIII', ('Louis XIV', ('Louis XV', ('Louis XVI', ())))))\n</code></pre> <p>Voici le contenu visuel du tuple <code>Bourbons</code> (le <code>0</code> indique le contenu de la case d'indice 0 du tuple et le <code>1</code> le contenu de la case d'indice 1).</p> <p></p> <p>Avec ce choix d'impl\u00e9mentation d'une liste chain\u00e9e \u00e0 l'aide de tuples, voici des codes possibles pour les fonctions  <code>creer_liste_vide()</code>, <code>inserer_en_tete(lst, donn\u00e9e)</code>,  <code>head(lst)</code>,  <code>tail(lst)</code> et <code>est_vide(lst)</code> sp\u00e9cifi\u00e9es par l'interface :</p> \ud83d\udc0d Script Python<pre><code>def creer_liste_vide() :\n    return () # tuple vide\n\ndef inserer_en_tete( lst, donn\u00e9e ) :\n    return (donn\u00e9e, lst) # c'est le nouveau premier maillon de la chaine\n\ndef head( lst ) :\n    return lst[0] # c'est ce qu'il y a en position 0 du couple L\n\ndef tail( lst ) :\n    return lst[1] # c'est ce qu'il y a en position 1 du couple L\n\ndef est_vide( lst ) :\n    return len( lst ) == 0\n</code></pre> <p>Une fa\u00e7on d'utiliser cette impl\u00e9mentation est alors : \ud83d\udc0d Script Python<pre><code># exemple d'utilisation\nBourbons = ('Henri IV', ('Louis XIII', ('Louis XIV', ('Louis XV', ('Louis XVI', ())))))\nroi = head(Bourbons)\nprint(\"La t\u00eate de la liste chaine : \", roi)\nqueLesLouis = tail(Bourbons)\nprint(\"Apr\u00e8s la t\u00eate de la liste chain\u00e9e, il y a \", queLesLouis)\nBourbons = inserer_en_tete(Bourbons, \"Henri III\")\nprint(\"On a rajout\u00e9 un roi en t\u00eate de la chaine  : \", Bourbons)\n</code></pre></p> <p>Exercice  : une chaine alimentaire</p> <p>On veut cr\u00e9er en Python la liste chain\u00e9e qui repr\u00e9sente la chaine alimentaire suivante :</p> <p></p> <p>1. On pourrait simplement saisir <code>chaineAlimentaire = (\"corn\", (\"mouse\",(\"snake\",(\"owl\",()))))</code> mais, dans un but p\u00e9dagogique, on vous demande de cr\u00e9er cette liste en utilisant les fonctions <code>creer_liste_vide()</code> et <code>inserer_en_tete(L, donn\u00e9e)</code>.</p> <p>2. Quelle est la valeur renvoy\u00e9e par l'appel de la fonction <code>head(tail(chaineAlimentaire))</code> ?</p> Solution <ol> <li> <p>R\u00e9ponse : \ud83d\udc0d Script Python<pre><code>chaineAlimentaire = creer_liste_vide()\ninserer_en_tete(chaineAlimentaire, \"owl\")\ninserer_en_tete(chaineAlimentaire, \"snake\")\ninserer_en_tete(chaineAlimentaire, \"mouse\")\ninserer_en_tete(chaineAlimentaire, \"corn\")\n</code></pre></p> </li> <li> <p>Cela renvoie <code>mouse</code>.</p> </li> </ol> <p>Exercice  : protection des fonctions head et tail</p> <p>Une liste chain\u00e9e vide n'a \"ni queue ni t\u00eate\" !  Cela signifie que l'ex\u00e9cution des fonctions <code>head</code> et <code>tail</code> sur une liste chain\u00e9e vide va provoquer une erreur.</p> <p>Ajouter une instruction de type <code>assert</code> au d\u00e9but de ces fonctions afin de les \"prot\u00e9ger\". </p> Solution <p>On ajoute \u00e0 ces fonctions l'instruction <code>assert not est_vide(lst), \"impossible sur une chaine vide\"</code>.</p>"},{"location":"T1_Structures_de_donnees/1.2_Listes/Structures_ListesChainees/#5-implementation-dune-liste-chainee-version-programmation-orientee-objet","title":"5. Impl\u00e9mentation d'une liste chain\u00e9e : version Programmation Orient\u00e9e Objet","text":"<p>Une autre fa\u00e7on d'impl\u00e9menter une liste chain\u00e9e est de cr\u00e9er un objet \"Maillon\", c'est-\u00e0-dire en Python de cr\u00e9er une classe Maillon qui a deux attributs :</p> <ul> <li>la donn\u00e9e \u00e0 stocker,</li> <li>et le maillon suivant, qui est lui-m\u00eame un objet de la classe <code>Maillon</code> (\u00e9ventuellement vide).</li> </ul> <p>Un maillon vide est repr\u00e9sent\u00e9 par la valeur <code>None</code>.</p> \ud83d\udc0d Script Python<pre><code>class Maillon :\n    def __init__(self, data = None, suivant = None)  :\n        self.head= data\n        self.tail = suivant\n</code></pre> <p>On a mis <code>None</code> en valeur par d\u00e9faut \u00e0 la fois pour la donn\u00e9e et pour le maillon suivant, ce qui permet de cr\u00e9er un maillon vide en \u00e9crivant <code>maillonVide = Maillon()</code>.</p> <p>On peut noter que cette classe <code>Maillon</code> n'a pas de m\u00e9thodes d\u00e9di\u00e9es. </p> <p>Exemple avec la liste chain\u00e9e des rois de France</p> <p>On peut alors cr\u00e9er (\"instancier\") les objets suivants : \ud83d\udc0d Script Python<pre><code>roi5 = Maillon(\"Louis XVI\") # pas besoin de pr\u00e9ciser le 2\u00e8me argument, c'est None par d\u00e9faut\nroi4 = Maillon(\"Louis XV\", roi5)\nroi3 = Maillon(\"Louis XIV\", roi4)\nroi2 = Maillon(\"Louis XIII\", roi3)\nroi1 = Maillon(\"Henri IV\", roi2)\nBourbons = roi1 # on tient la liste par son premier maillon\n</code></pre></p> <p>Puis on peut utiliser ainsi la liste chain\u00e9e :</p> \ud83d\udc0d Script Python<pre><code>class Maillon :\ndef __init__(self, data = None, suivant = None)  :\n    self.head= data\n    self.tail = suivant\n\nroi5 = Maillon(\"Louis XVI\") # pas besoin de pr\u00e9ciser le 2\u00e8me argument, c'est None par d\u00e9faut\nroi4 = Maillon(\"Louis XV\", roi5)\nroi3 = Maillon(\"Louis XIV\", roi4)\nroi2 = Maillon(\"Louis XIII\", roi3)\nroi1 = Maillon(\"Henri IV\", roi2)\nBourbons = roi1 # on tient la liste par son premier maillon\n# exemple d'utilisation\nprint(\"La t\u00eate de la liste chain\u00e9e : \", Bourbons.head )\nqueLesLouis = Bourbons.tail\nprint(\"Apr\u00e8s la t\u00eate de la liste chain\u00e9e, on trouve \", queLesLouis.head )\nBourbons = Maillon(\"Henri III\", Bourbons) # insertion en t\u00eate de la liste chain\u00e9e\nprint(\"On rajoute un roi \u00e0 notre chaine : en t\u00eate, on a maintenant \", Bourbons.head )\n</code></pre> <p>Remarque : impl\u00e9mentation simpliste</p> <p>Le choix est fait ici de rester avec une version simple de l'impl\u00e9mentation en POO d'une liste chain\u00e9e. L'interface d'une liste chain\u00e9e n'est, \u00e0 ce stade, pas compl\u00e8tement respect\u00e9e : par exemple, la fonction <code>est_vide</code> de l'interface n'a pas \u00e9t\u00e9 \u00e9crite. Et les fonctions <code>creer_liste_vide</code> et <code>inserer_en_tete</code> n'ont pas \u00e9t\u00e9 explicit\u00e9es m\u00eame si on peut faire la m\u00eame chose en cr\u00e9ant un objet de la classe <code>Maillon</code> : par exemple l'instruction <code>Bourbons = Maillon(\"Henri III\", Bourbons)</code> a remplac\u00e9 l'instruction <code>Bourbons = inserer_en_tete(Bourbons, \"Henri III\")</code>.</p> <p>On verra en exercice comment se conformer rigoureusement \u00e0 l'interface demand\u00e9e.</p> <p>Exercice  : la chaine alimentaire en version POO</p> <p>Reprendre les questions de l'exercice \"une chaine alimentaire\" en utilisant cette fois l'impl\u00e9mentation en version POO.</p> Solution <p>On \u00e9crit le code suivant :</p> \ud83d\udc0d Script Python<pre><code>hibou = Maillon(\"owl\")\nserpent = Maillon(\"snake\", hibou)\nsouris = Maillon(\"mouse\", serpent)\nchaineAlimentaire = Maillon(\"corn\",souris)\n</code></pre> <p>Exploration d'une liste chain\u00e9e </p> <p>En appuyant sur le bouton \"Lancer\", vous allez ex\u00e9cuter un code masqu\u00e9 qui cr\u00e9e (qui instancie) un objet <code>maListeMystere</code> de la classe <code>Maillon</code>. </p> <p>En vous servant des attributs de cet objet, explorer cette liste chain\u00e9e puis la repr\u00e9senter.</p> \ud83d\udc0d Script Python<pre><code>class Maillon :\n    def __init__(self, data = None, suivant = None)  :\n        self.head= data\n        self.tail = suivant\n\nC = Maillon(\"Chocolat\")\nB = Maillon(\"Bronze\", C)\nA = Maillon(\"Argent\", B)\nmaListeMystere = Maillon(\"Or\",A)\nprint(\"Merci d'avoir execut\u00e9 le code : \u00e0 vous de d\u00e9couvrir la liste chain\u00e9e maListeMystere\")\n</code></pre> Solution <p>La liste chain\u00e9e est : Or \u2192 Argent \u2192 Bronze \u2192 Chocolat \u2192 \u27c2. On l'obtient en saisissant <code>maListeMystere.head</code>, puis <code>maListeMystere.tail.head</code>, etc.</p>"},{"location":"T1_Structures_de_donnees/1.2_Listes/Structures_ListesChainees/#6-exercices-et-tp","title":"6. Exercices et TP","text":"<ul> <li> <p>G\u00e9n\u00e9ralit\u00e9s : t\u00e9l\u00e9charger le carnet Jupyter, \u00e0 ouvrir sous Basthon.</p> </li> <li> <p>Exercice type Bac :</p> <ul> <li>\u00e9nonc\u00e9 \u00e0 faire d'abord sur feuille,</li> <li>puis codage dans un carnet Jupyter.</li> <li>en cas de blocage : \u00e9l\u00e9ments de correction ici (ann\u00e9e 2022, sujet 5).</li> </ul> </li> </ul>"},{"location":"T1_Structures_de_donnees/1.2_Listes/exercices/","title":"\u26d3\ufe0f Exercices et TP sur les Listes Chain\u00e9es \u26d3\ufe0f","text":""},{"location":"T1_Structures_de_donnees/1.2_Listes/exercices/#exercice-utilisation-de-linterface-dune-liste-chainee","title":"\ud83d\udd8a\ufe0f Exercice : utilisation de l'interface d'une liste chain\u00e9e","text":"<p>Dans cet exercice, on consid\u00e8re que l'on dispose d'une liste chain\u00e9e nomm\u00e9e <code>chaineGrades</code> qui repr\u00e9sente diff\u00e9rents grades militaires dans l'arm\u00e9e fran\u00e7aise (la chaine de commandement), en partant du grade le plus bas (simple Soldat) et en allant vers le plus \u00e9lev\u00e9 (G\u00e9n\u00e9ral) :</p> <p>chaineGrades : Soldat \u2192 Sergent \u2192 Lieutenant \u2192 Capitaine \u2192 Colonel \u2192 G\u00e9neral</p> <p></p> <ol> <li>Indiquer quel est le contenu des variables <code>g1</code> et <code>c1</code> d\u00e9finies par  \ud83d\udc0d Script Python<pre><code>g1 = head(chaineGrades)\nc1 = tail(chaineGrades)\n</code></pre></li> </ol> <p>\ud83d\ude4b R\u00e9ponse : 2. M\u00eame question avec les variables <code>g2</code> et <code>c2</code>, avec  \ud83d\udc0d Script Python<pre><code>g2 = head(tail(chaineGrades))\nc2 = tail(tail(chaineGrades))\n</code></pre> \ud83d\ude4b R\u00e9ponse : 3. On d\u00e9finit la fonction <code>mystere</code> ainsi :</p> \ud83d\udc0d Script Python<pre><code>def mystere(maListeChain\u00e9e, n) :\n    \"\"\" Entr\u00e9e : n est un entier sup\u00e9rieur ou \u00e9gal \u00e0 1 \"\"\"\n    compteur = 1\n    listeProvisoire = maListeChain\u00e9e\n    while compteur &lt; n and not est_vide(listeProvisoire) :\n        listeProvisoire = tail(listeProvisoire)\n        compteur += 1\n    if not est_vide(listeProvisoire):\n        return head(listeProvisoire)\n    else :\n        return None\n</code></pre> <p>Quelle est la valeur retourn\u00e9e par l'appel <code>mystere(chaineGrades, 3)</code> ? Et par l'appel <code>mystere(chaineGrades, 7)</code> ? </p> <p>Quel est le r\u00f4le de cette fonction ? \ud83d\ude4b R\u00e9ponse :</p>"},{"location":"T1_Structures_de_donnees/1.2_Listes/exercices/#exercice-visualisation-dune-liste-chainee","title":"\ud83d\udd8a\ufe0f Exercice : Visualisation d'une liste chain\u00e9e","text":"<p>Remarque : pour que la visualisation fonctionne, il faut installer le module <code>lolviz</code> de Python.</p> <p>Sous Linux  Bash<pre><code>$ sudo apt-get install graphviz \n</code></pre> puis</p> Bash<pre><code>$ pip3 install lolviz\n</code></pre> <p>Dans le cours, nous avons d\u00e9fini une classe <code>Maillon</code> et, \u00e0 titre d'exemple, nous l'avons utilis\u00e9e pour d\u00e9finir la liste chain\u00e9ee des rois de France. Voici une visualisation graphique de cette structure :</p> \ud83d\udc0d Script Python<pre><code>from lolviz import *\n\nclass Maillon :\n    def __init__(self, data = None, suivant = None)  :\n        self.head= data\n        self.tail = suivant\n\nroi5 = Maillon(\"Louis XVI\") # pas besoin de pr\u00e9ciser le 2\u00e8me argument, c'est None par d\u00e9faut\nroi4 = Maillon(\"Louis XV\", roi5)\nroi3 = Maillon(\"Louis XIV\", roi4)\nroi2 = Maillon(\"Louis XIII\", roi3)\nroi1 = Maillon(\"Henri IV\", roi2)\n\nobjviz(roi1)\n</code></pre>"},{"location":"T1_Structures_de_donnees/1.2_Listes/exercices/#exercice-renverser-une-liste-chainee","title":"\ud83d\udd8a\ufe0f Exercice : Renverser une liste chain\u00e9e","text":"<p>L'objectif de l'exercice est d'\u00e9crire le code d'une fonction <code>renverserListeChain\u00e9e(maListe)</code> qui prend en param\u00e8tre une liste chain\u00e9e et qui renvoie une autre liste chain\u00e9e correspondant au parcours dans le sens inverse de <code>maListe</code>.</p> <p>Par exemple, en reprenant la liste chain\u00e9e des grades de l'arm\u00e9e de l'exercice pr\u00e9c\u00e9dent, on veut que l'appel <code>renverserListeChain\u00e9e(chaineGrades)</code> renvoie la liste chain\u00e9e repr\u00e9sentant <code>G\u00e9n\u00e9ral \u2192 Colonel \u2192 Capitaine \u2192 Lieutenant \u2192 Sergent \u2192 Soldat</code>.</p> <p>Le code de la fonction utilisera les primitives de l'interface des listes chain\u00e9es (<code>creer_liste_vide</code>, <code>inserer_en_tete</code>, etc) dans la version imp\u00e9rative de l'impl\u00e9mentation vue en cours (\u00e0 l'aide de tuples) et redonn\u00e9e ici.</p> \ud83d\udc0d Script Python<pre><code>def creer_liste_vide() :\n    return () # tuple vide\n\ndef inserer_en_tete(lst, donn\u00e9e) :\n    return (donn\u00e9e, lst) # c'est le nouveau premier maillon de la chaine\n\ndef head(lst) :\n    assert not est_vide(lst), \"Pas de t\u00eate \u00e0 une liste chain\u00e9e vide !\"\n    return lst[0] # c'est ce qu'il y a en position 0 du couple L\n\ndef tail(lst) :\n    assert not est_vide(lst), \"Pas de queue \u00e0 une liste chain\u00e9e vide !\"\n    return lst[1] # c'est ce qu'il y a en position 1 du couple L\n\ndef est_vide(lst) :\n    return len(lst) == 0\n\n# un test\nchaineGrades = creer_liste_vide()\nchaineGrades = inserer_en_tete(chaineGrades, \"G\u00e9n\u00e9ral\") ; chaineGrades = inserer_en_tete(chaineGrades, \"Colonel\") ; chaineGrades = inserer_en_tete(chaineGrades, \"Capitaine\")\nchaineGrades = inserer_en_tete(chaineGrades, \"Lieutenant\") ; chaineGrades = inserer_en_tete(chaineGrades, \"Sergent\") ; chaineGrades = inserer_en_tete(chaineGrades, \"Soldat\")\nobjviz(chaineGrades)\n</code></pre> \ud83d\udc0d Script Python<pre><code>def renverserListeChain\u00e9e(maListe) :\n    \"\"\" Renvoie la liste chain\u00e9e parcourue dans l'autre sens\n    Entr\u00e9e : une liste chain\u00e9e\n    Sortie : une liste chain\u00e9e\"\"\"\n    # compl\u00e9ter votre code\n    newChaine = creer_liste_vide()\n    ... # plusieurs lignes \u00e0 compl\u00e9ter\n    return newChaine\n</code></pre> \ud83d\udc0d Script Python<pre><code># un test\ngradesInvers\u00e9s = renverserListeChain\u00e9e(chaineGrades)\nobjviz(gradesInvers\u00e9s)\n</code></pre>"},{"location":"T1_Structures_de_donnees/1.2_Listes/exercices/#exercice-longueur-dune-liste-chainee","title":"\ud83d\udd8a\ufe0f Exercice : longueur d'une liste chain\u00e9e","text":"<p>Il peut \u00eatre utile de conna\u00eetre la longueur d'une liste chain\u00e9e.</p> <p>1. Avec l'impl\u00e9mentation d'une liste chain\u00e9e \u00e0 l'aide de tuples, l'appel <code>len(maListeChain\u00e9e)</code> ne va pas renvoyer la bonne valeur : essayez pour voir ! </p> \ud83d\udc0d Script Python<pre><code>print(len(chaineGrades))\n</code></pre> <p>En effet, si la liste chain\u00e9e n'est pas vide, alors elle est cod\u00e9e par un couple de deux \u00e9l\u00e9ments : la valeur du premier maillon et le tuple repr\u00e9sentant le maillon suivant.</p> <p>Par contre, la d\u00e9finition r\u00e9cursive (\"en poup\u00e9e russe\") d'une liste chain\u00e9e permet d'envisager un code r\u00e9cursif pour la fonction <code>longueurListeChain\u00e9e(lst)</code>.</p> <p>Compl\u00e9ter le code de cette fonction, dans le cas o\u00f9 la liste chain\u00e9e pass\u00e9e en argument est cod\u00e9e par un tuple .</p> \ud83d\udc0d Script Python<pre><code>def longueurListeChain\u00e9e(lst) :\n    \"\"\" renvoie la longueur d'une liste chain\u00e9e, avec une impl\u00e9mentation \u00e0 l'aide de tuples\"\"\"\n    if est_vide(lst): # cas de base\n        return ...\n    else :\n        return ... + longueurListeChain\u00e9e(...)\n\n# un test\nchaineGrades = (\"Soldat\",(\"Sergent\", (\"Lieutenant\",(\"Capitaine\", (\"Colonel\", (\"G\u00e9n\u00e9ral\",() ))))))\nL = longueurListeChain\u00e9e(chaineGrades)\nprint(\"Longueur de cette liste chain\u00e9e =\", L)\nassert L == 6 , \"probl\u00e8me avec le code\"\n</code></pre> <p>2. On choisit maintenant d'utiliser la version Orient\u00e9e Objet pour manipuler des listes chain\u00e9es (on donne ci-dessous le code vu en cours).</p> <p>Compl\u00e9ter le code de la fonction <code>longueur_recur_POO</code>.</p> \ud83d\udc0d Script Python<pre><code>class Maillon :\n    def __init__(self, data = None, suivant = None) :\n        self.head = data\n        self.tail = suivant\n\ndef longueur_recur_POO(lst) :\n    if ... is None : # cas de base\n        return ...\n    else :\n        return ... + longueur_recur_POO(...)\n\n# un test\nm6 = Maillon(\"G\u00e9n\u00e9ral\")  # pas besoin de pr\u00e9ciser le 2\u00e8me argument, c'est None par d\u00e9faut\nm5 = Maillon(\"Colonel\", m6) \nm4 = Maillon(\"Capitaine\", m5)\nm3 = Maillon(\"Lieutenant\", m4)\nm2 = Maillon(\"Sergent\", m3)\nm1 = Maillon(\"Soldat\", m2)\n\nchaineGradesPOO = m1 # on tient la chaine par son premier maillon\nobjviz(chaineGradesPOO) # visualisation\n\nL = longueur_recur_POO(chaineGradesPOO)\nprint(\"La longueur de cette liste chain\u00e9e est \", L)\nassert  L == 6 , \"probl\u00e8me de code\"\n</code></pre>"},{"location":"T1_Structures_de_donnees/1.2_Listes/exercices/#exercice-inserer-une-donnee-dans-une-liste-chainee","title":"\ud83d\udd8a\ufe0f Exercice : ins\u00e9rer une donn\u00e9e dans une liste chain\u00e9e","text":"<p>On veut \u00e9crire une fonction <code>inserer(val, chaine, n)</code> qui va ins\u00e9rer la valeur <code>val</code> dans la liste chain\u00e9e <code>chaine</code> apr\u00e8s le <code>n</code>-i\u00e8me maillon, o\u00f9 <code>n</code> est un entier sup\u00e9rieur ou \u00e9gal \u00e0 1.</p> <p>Par exemple, en reprenant la liste chaine <code>m1</code> des grades de l'exercice pr\u00e9c\u00e9dent, on veut que <code>inserer(\"Adjudant\", m1, 2)</code> ins\u00e8re le grade d'adjudant apr\u00e8s le 2\u00e8me maillon, c'est-\u00e0-dire entre <code>Sergent</code> et <code>Lieutenant</code>.</p> <p>Compl\u00e9ter le code de cette fonction r\u00e9cursive.</p> \ud83d\udc0d Script Python<pre><code>class Maillon :\n    def __init__(self, data = None, suivant = None) :\n        self.head = data\n        self.tail = suivant\n\ndef inserer(val, chaine, n) :\n    \"\"\" ins\u00e9re la donn\u00e9e dans la chaine apr\u00e8s le n-i\u00e8me maillon\"\"\"\n    if n == 1 :\n        newMaillon = Maillon(...) # compl\u00e9ter ici\n        chaine.tail = newMaillon\n    else :\n        inserer(..., chaine.tail, ...)  # compl\u00e9ter ici\n\n# un test\nm6 = Maillon(\"G\u00e9n\u00e9ral\")  # pas besoin de pr\u00e9ciser le 2\u00e8me argument, c'est None par d\u00e9faut\nm5 = Maillon(\"Colonel\", m6) \nm4 = Maillon(\"Capitaine\", m5)\nm3 = Maillon(\"Lieutenant\", m4)\nm2 = Maillon(\"Sergent\", m3)\nm1 = Maillon(\"Soldat\", m2)\n\nobjviz(m1)\n</code></pre> \ud83d\udc0d Script Python<pre><code>inserer(\"Adjudant\", m1, 2)\nprint(\"Apr\u00e8s insertion de l'adjudant\")\nobjviz(m1)\n</code></pre>"},{"location":"T1_Structures_de_donnees/1.2_Listes/exercices/#exercice-chaine-de-desintegration","title":"\ud83d\udd8a\ufe0f Exercice : Chaine de d\u00e9sint\u00e9gration \u269b\ufe0f","text":"<p>En Enseignement Scientifique de Premi\u00e8re, vous avez \u00e9tudi\u00e9 la d\u00e9sint\u00e9gration par radioactivit\u00e9 du noyau des atomes. </p> <p>La demi-vie d'un noyau correspond \u00e0 la dur\u00e9e n\u00e9cessaire, en nombre d'ann\u00e9es, pour que la moiti\u00e9 des noyaux initialement pr\u00e9sents dans un \u00e9chantillon se soit d\u00e9sint\u00e9gr\u00e9e.</p> <p>Par exemple, le Radium 226 (\\({}^{226}Ra\\)) se d\u00e9sint\u00e8gre en Radon 222 (\\({}^{222}Rn\\)) avec une demi-vie de 1600 ans.</p> <p>Le Radon 222 peut lui-m\u00eame se d\u00e9sint\u00e9grer en Polonium 218, et ainsi de suite jusqu'\u00e0 aboutir au Plomb 206 qui est stable.</p> <p>On a donc une chaine de d\u00e9sint\u00e9gration :</p> <p></p> <p>Pour manipuler en Python une chaine de d\u00e9sint\u00e9gration, on utilise une classe <code>Chaine</code> qui impl\u00e9mente la structure de donn\u00e9es abstraite de liste chain\u00e9e dans une version moins simpliste que celle utilis\u00e9e pr\u00e9c\u00e9demment.</p> <p>Chaque maillon est un triplet de la forme <code>(nom_atome, masse_atomique, demi_vie)</code>, comme par exemple <code>radium = ('Ra',226, 1600)</code>.</p> <p>La classe <code>Chaine</code> est munie de m\u00e9thodes qui mod\u00e9lisent l'interface usuelle des listes chain\u00e9es : <code>est_vide()</code>, <code>tete()</code>, <code>queue()</code> et <code>ajout_en_tete(donn\u00e9e)</code>.</p> \ud83d\udc0d Script Python<pre><code>class Maillon :\n    def __init__(self, data = None, suivant = None)  :\n        self.head = data\n        self.tail = suivant\n\nclass Chaine :\n    def __init__(self, first = None) :\n        self.premier_maillon = first\n\n    def est_vide(self) :\n        return self.premier_maillon == None\n\n    def tete(self) :\n        return self.premier_maillon.head\n\n    def queue(self) :\n        if not (self.est_vide()):\n            return Chaine(self.premier_maillon.tail)\n\n    def ajout_en_tete(self, data) :\n        nouveau_maillon = Maillon(data, self.premier_maillon)\n        self.premier_maillon = nouveau_maillon\n</code></pre> <p>La chaine de d\u00e9sint\u00e9gration du Radon est donc instanci\u00e9e par le code suivant :</p> \ud83d\udc0d Script Python<pre><code>desintegrationRa = Chaine()\ndesintegrationRa.ajout_en_tete(('Pb', 206, 1e100))\ndesintegrationRa.ajout_en_tete(('Po', 210, 0.4))\ndesintegrationRa.ajout_en_tete(('Bi', 210, 0.014))\ndesintegrationRa.ajout_en_tete(('Pb', 210, 22.2))\ndesintegrationRa.ajout_en_tete(('Po', 214, 5.2e-12))\ndesintegrationRa.ajout_en_tete(('Bi', 214, 3.8e-2))\ndesintegrationRa.ajout_en_tete(('Pb', 214, 5.7e-5))\ndesintegrationRa.ajout_en_tete(('Po', 218, 5.7e-6))\ndesintegrationRa.ajout_en_tete(('Rn', 222, 0.01))\ndesintegrationRa.ajout_en_tete(('Ra', 226, 1600))\n\nobjviz(desintegrationRa)\n</code></pre> <p>La chaine de d\u00e9sint\u00e9gration du C\u00e9sium est plus courte et elle est instanci\u00e9e par le code suivant :</p> \ud83d\udc0d Script Python<pre><code>desintegrationCs = Chaine()\ndesintegrationCs.ajout_en_tete(('Ba', 137, 1e100))\ndesintegrationCs.ajout_en_tete(('Cs', 137, 30.2))\n\nobjviz(desintegrationCs)\n</code></pre> <p>1. Un \u00e9l\u00e9ment stable est un \u00e9l\u00e9ment qui se situe en bout de chaine de desint\u00e9gration.</p> <p>Par exemple, le Plomb 206 est un \u00e9l\u00e9ment stable car il est en bout de la chaine <code>desintegrationRa</code>.</p> <p>\u00c9crire le code de la fonction <code>estStable(chaine)</code> qui prend en param\u00e8tre une liste chain\u00e9e <code>chaine</code> non vide et qui renvoie <code>True</code> si le maillon de t\u00eate est un \u00e9l\u00e9ment stable.</p> \ud83d\udc0d Script Python<pre><code>def estStable(chaine) :\n    ...\n\n# test 1\nestStable(desintegrationRa)\n</code></pre> \ud83d\udc0d Script Python<pre><code># test 2\ndesintegrationPb = Chaine()\ndesintegrationPb.ajout_en_tete(('Pb', 206, 1e100))\nestStable(desintegrationPb)\n</code></pre> <p>2. L'\u00e9l\u00e9ment le plus instable d'une chaine de desint\u00e9gration est celui qui a la demi-vie la plus faible.</p> <p>La fonction <code>lePlusInstable(chaine)</code> qui prend en param\u00e8tre une liste chain\u00e9e non vide <code>chaine</code> doit renvoyer le nom et la masse atomique de l'atome le plus instable de <code>chaine</code>. </p> <p>Par exemple, on veut que l'appel <code>lePlusInstable(desintegrationRa)</code> renvoie <code>(Po, 214)</code>.</p> <p>Compl\u00e9ter le code de cette fonction :</p> \ud83d\udc0d Script Python<pre><code>def lePlusInstable(chaine) :\n    dur\u00e9e_mini = chaine.tete()[2]\n    atome_instable = (..., ...)\n    chaine = chaine.queue()\n    while not chaine.est_vide() :\n        ...\n    return atome_instable\n\n# test\nlePlusInstable(desintegrationRa)\n</code></pre> <p>3) Dans la chaine de d\u00e9sint\u00e9gration du radon, on trouve trois fois l'isotope <code>Po</code> (\\({}^{218}Po\\), \\({}^{214}Po\\) et \\({}^{210}Po\\)) et une seule fois l'isotope <code>Rn</code>.</p> <p>On veut \u00e9crire une fonction r\u00e9cursive <code>nbIsotopes(chaine, nom_atome)</code> qui renvoie le nombre de fois o\u00f9 <code>nom_atome</code>appara\u00eet dans la chaine de d\u00e9sint\u00e9gration <code>chaine</code>.</p> <p>Par exemple, on veut que l'appel <code>nbIsotopes(desintegrationRa, 'Po')</code> renvoie le nombre 3 et que l'appel <code>nbIsotopes(desintegrationRa, 'Rn')</code>renvoie le nombre 1.</p> <p>Compl\u00e9ter le code suivant :</p> \ud83d\udc0d Script Python<pre><code>def nbIsotopes(chaine, nom_atome) :\n    if chaine.est_vide() :\n        return ...\n    else :\n        occurence = int(chaine.tete()[0] == nom_atome) # conversion d'un bool\u00e9en en entier avec la r\u00e9gle : True -&gt; 1 et False -&gt; 0\n        return occurence + nbIsotopes(...)\n\n# quelques tests\nnbIsotopes(desintegrationRa, 'Po')\n</code></pre> \ud83d\udc0d Script Python<pre><code>nbIsotopes(desintegrationRa, 'Rn')\n</code></pre> <p>4. La masse atomique d'un atome correspond au nombre de protons et de neutrons qui composent le noyau de l'atome. On constate que, au cours d'une suite de d\u00e9sint\u00e9gration, il y a une baisse de la masse atomique.</p> <p>On veut \u00e9crire une fonction r\u00e9cursive <code>perte_atomique(chaine)</code> qui prend en param\u00e8tre une liste chain\u00e9e non vide  <code>chaine</code> et qui renvoie la baisse totale de la masse atomique.</p> <p>Par exemple, on veut que l'appel <code>perte_atomique(desintegrationRa)</code> renvoie le nombre 20 (car 226 - 206 = 20).</p> <p>Compl\u00e9ter le code suivant :</p> \ud83d\udc0d Script Python<pre><code>def perte_atomique(chaine) :\n    if chaine.queue() is None : \n        return ...\n    else :\n        masse1 = chaine.tete()[1]\n        masse2 = chaine.queue().tete()[1]\n        return ... + perte_atomique(...)\n\n# test\nperte_atomique(desintegrationRa)\n</code></pre> <p>5. On veut comparer la perte atomique de diff\u00e9rentes chaines de d\u00e9sint\u00e9gration et identifier celle qui a la perte atomique la plus importante.</p> <p>\u00c9crire le code d'une fonction <code>maxi_perte_atomique(tab_chaine)</code> qui prend en argument un tableau <code>tab_chaine</code> de listes chain\u00e9es et qui renvoie la valeur de la perte atomique la plus importante.</p> <p>Par exemple, l'appel <code>maxi_perte_atomique([desintegrationRa, desintegrationCs, desintegrationPb])</code> doit renvoyer la valeur 20.</p> \ud83d\udc0d Script Python<pre><code>def maxi_perte_atomique(tab_chaine) :\n    tab_perte_atomique = [perte_atomique(chaine) for chaine in ...]\n    maxi_perte = ...\n    ... # plusieurs lignes \u00e0 compl\u00e9ter\n    return maxi_perte\n\n# un test\nmaxi_perte_atomique([desintegrationRa, desintegrationCs, desintegrationPb])\n</code></pre> \ud83d\udc0d Script Python<pre><code>\n</code></pre>"},{"location":"T1_Structures_de_donnees/1.2_Listes/data/Structures_ListesChainees_SujetBac_22NSIJ2AN1/","title":"D'apr\u00e8s le sujet 22-NSIJ2AN1","text":"<p>Le code Python incomplet de la classe <code>Concurrent</code> est donn\u00e9 ci-dessous.</p> In\u00a0[\u00a0]: Copied! <pre>class Concurrent :\n    def __init__(self, pseudo, temps, penalite) :\n        self.nom = pseudo\n        self.temps = temps\n        self.penalite = ...\n        self.temps_tot = ...\n</pre> class Concurrent :     def __init__(self, pseudo, temps, penalite) :         self.nom = pseudo         self.temps = temps         self.penalite = ...         self.temps_tot = ... In\u00a0[\u00a0]: Copied! <pre>c1 = Concurrent(\"Mosquito\", 87.67, 12)\n</pre> c1 = Concurrent(\"Mosquito\", 87.67, 12) <ul> <li>Donner la valeur de l'attribut <code>temps_tot</code> de <code>c1</code></li> <li>\u00c9crire l'instruction qui permet d'acc\u00e9der \u00e0 la valeur <code>temps_tot</code> de <code>c1</code></li> </ul> In\u00a0[\u00a0]: Copied! <pre># \u00e9crire ici l'instruction\n</pre> # \u00e9crire ici l'instruction  In\u00a0[\u00a0]: Copied! <pre>class Maillon :\n    def __init__(self, data = None, suivant = None)  :\n        self.head = data\n        self.tail = suivant\n\nclass Liste :\n    def __init__(self, first = None) :\n        self.premier_maillon = first\n    \n    def est_vide(self) :\n        return self.premier_maillon == None\n    \n    def tete(self) :\n        return self.premier_maillon.head\n    \n    def queue(self) :\n        if not (self.est_vide()):\n            return Liste(self.premier_maillon.tail)\n    \n    def ajout(self, data) :\n        nouveau_maillon = Maillon(data, self.premier_maillon)\n        self.premier_maillon = nouveau_maillon\n</pre> class Maillon :     def __init__(self, data = None, suivant = None)  :         self.head = data         self.tail = suivant  class Liste :     def __init__(self, first = None) :         self.premier_maillon = first          def est_vide(self) :         return self.premier_maillon == None          def tete(self) :         return self.premier_maillon.head          def queue(self) :         if not (self.est_vide()):             return Liste(self.premier_maillon.tail)          def ajout(self, data) :         nouveau_maillon = Maillon(data, self.premier_maillon)         self.premier_maillon = nouveau_maillon      <p>Pour reprendre l'exemple de l'\u00e9nonc\u00e9 :</p> In\u00a0[\u00a0]: Copied! <pre>c1 = Concurrent(\"Mosquito\", 87.67, 12)\nc2 = Concurrent(\"Python Fute\", 89.73, 4)\nc3 = Concurrent(\"Piranha Vorace\", 90.54, 0)\nc4 = Concurrent(\"Truite Agile\", 84.32, 52)\nc5 = Concurrent(\"Tortue Rapide\", 92.12, 2)\nc6 = Concurrent(\"Lievre Tranquille\", 93.45, 0)\n\nresultats = Liste()\nresultats.ajout(c1)\nresultats.ajout(c2)\nresultats.ajout(c3)\nresultats.ajout(c4)\nresultats.ajout(c5)\nresultats.ajout(c6)\n</pre> c1 = Concurrent(\"Mosquito\", 87.67, 12) c2 = Concurrent(\"Python Fute\", 89.73, 4) c3 = Concurrent(\"Piranha Vorace\", 90.54, 0) c4 = Concurrent(\"Truite Agile\", 84.32, 52) c5 = Concurrent(\"Tortue Rapide\", 92.12, 2) c6 = Concurrent(\"Lievre Tranquille\", 93.45, 0)  resultats = Liste() resultats.ajout(c1) resultats.ajout(c2) resultats.ajout(c3) resultats.ajout(c4) resultats.ajout(c5) resultats.ajout(c6) <p>Apr\u00e8s ex\u00e9cution, ce script g\u00e9n\u00e8re une liste que l'on peut repr\u00e9senter par : <code>&lt;c6, c5, c4, c3, c2, c1&gt;</code></p> <p>2.a \u00c9crire la (ou les) instruction(s) qui permet(tent) d'acc\u00e9der \u00e0 <code>c4</code> uniquement avec les m\u00e9thodes de la classe <code>Liste</code> :</p> In\u00a0[\u00a0]: Copied! <pre># \u00e9crire ici\n</pre> # \u00e9crire ici <p>2.b \u00c9crire la (ou les) instruction(s) qui permet(tent) d'acc\u00e9der au temps total du concurrent stock\u00e9 en t\u00eate de la liste <code>resultats</code> :</p> In\u00a0[\u00a0]: Copied! <pre># compl\u00e9ter ici\nval = ...\nassert val == 93.45, \"probl\u00e8me de code\"\n</pre> # compl\u00e9ter ici val = ... assert val == 93.45, \"probl\u00e8me de code\" In\u00a0[\u00a0]: Copied! <pre>def meilleur_concurrent(L) :\n    conc_mini = L. ... \n    mini = conc_mini.temps_tot\n    Q = L.queue()\n    while not(Q.est_vide()) :\n        elt = Q.tete()\n        if elt.temps_tot ... mini :\n            conc_mini = elt\n            mini = elt.temps_tot\n        Q = Q. ...\n    return ...\n\n# un test\nassert meilleur_concurrent(resultats).nom == 'Piranha Vorace', \"probl\u00e8me de code\"\n</pre> def meilleur_concurrent(L) :     conc_mini = L. ...      mini = conc_mini.temps_tot     Q = L.queue()     while not(Q.est_vide()) :         elt = Q.tete()         if elt.temps_tot ... mini :             conc_mini = elt             mini = elt.temps_tot         Q = Q. ...     return ...  # un test assert meilleur_concurrent(resultats).nom == 'Piranha Vorace', \"probl\u00e8me de code\" In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"T1_Structures_de_donnees/1.2_Listes/data/Structures_ListesChainees_SujetBac_22NSIJ2AN1/#dapres-le-sujet-22-nsij2an1","title":"D'apr\u00e8s le sujet 22-NSIJ2AN1\u00b6","text":"<p>Rappel de l'\u00e9nonc\u00e9:</p> <p>Une classe <code>Concurrent</code> est d\u00e9finie avec les attributs suivants :</p> <ul> <li><code>nom</code> de type <code>str</code> qui repr\u00e9sente le pseudonyme du comp\u00e9titeur ;</li> <li><code>temps</code> de type <code>float</code> qui est le temps mis pour r\u00e9aliser le parcours (en secondes) ;</li> <li><code>penalite</code> de type <code>int</code> qui est le nombre de secondes de p\u00e9nalit\u00e9 cumul\u00e9es octroy\u00e9es au comp\u00e9titeur ;</li> <li><code>temps_tot</code> de type <code>float</code> qui correspond au temps total, c'est-\u00e0-dire au temps mis pour r\u00e9aliser le parcours auquel on a ajout\u00e9 les secondes de p\u00e9nalit\u00e9.</li> </ul>"},{"location":"T1_Structures_de_donnees/1.2_Listes/data/Structures_ListesChainees_SujetBac_22NSIJ2AN1/#question-1","title":"Question 1\u00b6","text":"<p>a. Compl\u00e9ter le code du constructeur de la classe <code>Concurrent</code>.</p> <p>b. On ex\u00e9cute l'instruction suivante :</p>"},{"location":"T1_Structures_de_donnees/1.2_Listes/data/Structures_ListesChainees_SujetBac_22NSIJ2AN1/#question-2","title":"Question 2\u00b6","text":"<p>Le code ci-dessous permet de cr\u00e9er la classe <code>Liste</code> d\u00e9crite par l'\u00e9nonc\u00e9 : ceci impl\u00e9mente la structure de donn\u00e9es abstraite de liste chain\u00e9e, avec l'interface d\u00e9crite dans l'\u00e9nonc\u00e9.</p>"},{"location":"T1_Structures_de_donnees/1.2_Listes/data/Structures_ListesChainees_SujetBac_22NSIJ2AN1/#question-3","title":"Question 3\u00b6","text":"<p>On veut cr\u00e9er une fonction <code>meilleur_concurrent</code></p> <ul> <li>qui prend en param\u00e8tre une liste <code>L</code> de concurrents (de la classe <code>Liste</code> ci-dessus)</li> <li>et qui renvoie l'objet <code>Concurrent</code> correspondant au concurrent le plus rapide.</li> </ul> <p>On suppose que la liste est non vide.</p> <p>Compl\u00e9ter le code de cette fonction :</p>"},{"location":"T1_Structures_de_donnees/1.2_Listes/data/TP_Exos_ListesChainees/","title":"\u26d3\ufe0f Exercices et TP sur les Listes Chain\u00e9es \u26d3\ufe0f","text":"\ud83d\ude4b R\u00e9ponse :  <ol> <li>Dans la liste chain\u00e9e de la question 1, on remplace chaque <code>a</code> par un <code>1</code> et chaque <code>b</code> par un <code>0</code> : les maillons portent alors des valeurs qui correspondent \u00e0 des nombres \u00e9crits en binaire.</li> </ol> <p>Pour la liste chain\u00e9e de longueur 8, convertir chacun des maillons en nombre d\u00e9cimal et dessiner la liste chain\u00e9e correspondante.</p> \ud83d\ude4b R\u00e9ponse :  <ol> <li>Indiquer quel est le contenu des variables <code>g1</code> et <code>c1</code> d\u00e9finies par</li> </ol> <pre>g1 = head(chaineGrades)\nc1 = tail(chaineGrades)\n</pre> \ud83d\ude4b R\u00e9ponse :  <ol> <li>M\u00eame question avec les variables <code>g2</code> et <code>c2</code>, avec</li> </ol> <pre>g2 = head(tail(chaineGrades))\nc2 = tail(tail(chaineGrades))\n</pre> \ud83d\ude4b R\u00e9ponse :  <ol> <li>On d\u00e9finit la fonction <code>mystere</code> ainsi :</li> </ol> <pre>def mystere(maListeChain\u00e9e, n) :\n    \"\"\" Entr\u00e9e : n est un entier sup\u00e9rieur ou \u00e9gal \u00e0 1 \"\"\"\n    compteur = 1\n    listeProvisoire = maListeChain\u00e9e\n    while compteur &lt; n and not est_vide(listeProvisoire) :\n        listeProvisoire = tail(listeProvisoire)\n        compteur += 1\n    if not est_vide(listeProvisoire):\n        return head(listeProvisoire)\n    else :\n        return None\n</pre> <p>Quelle est la valeur retourn\u00e9e par l'appel <code>mystere(chaineGrades, 3)</code> ? Et par l'appel <code>mystere(chaineGrades, 7)</code> ?</p> <p>Quel est le r\u00f4le de cette fonction ?</p> \ud83d\ude4b R\u00e9ponse :  In\u00a0[\u00a0]: Copied! <pre>from lolviz import *\n\nclass Maillon :\n    def __init__(self, data = None, suivant = None)  :\n        self.head= data\n        self.tail = suivant\n        \nroi5 = Maillon(\"Louis XVI\") # pas besoin de pr\u00e9ciser le 2\u00e8me argument, c'est None par d\u00e9faut\nroi4 = Maillon(\"Louis XV\", roi5)\nroi3 = Maillon(\"Louis XIV\", roi4)\nroi2 = Maillon(\"Louis XIII\", roi3)\nroi1 = Maillon(\"Henri IV\", roi2)\n\nobjviz(roi1)\n</pre> from lolviz import *  class Maillon :     def __init__(self, data = None, suivant = None)  :         self.head= data         self.tail = suivant          roi5 = Maillon(\"Louis XVI\") # pas besoin de pr\u00e9ciser le 2\u00e8me argument, c'est None par d\u00e9faut roi4 = Maillon(\"Louis XV\", roi5) roi3 = Maillon(\"Louis XIV\", roi4) roi2 = Maillon(\"Louis XIII\", roi3) roi1 = Maillon(\"Henri IV\", roi2)  objviz(roi1) <p>Le code de la fonction utilisera les primitives de l'interface des listes chain\u00e9es (<code>creer_liste_vide</code>, <code>inserer_en_tete</code>, etc) dans la version imp\u00e9rative de l'impl\u00e9mentation vue en cours (\u00e0 l'aide de tuples) et redonn\u00e9e ici.</p> In\u00a0[\u00a0]: Copied! <pre>def creer_liste_vide() :\n    return () # tuple vide\n\ndef inserer_en_tete(lst, donn\u00e9e) :\n    return (donn\u00e9e, lst) # c'est le nouveau premier maillon de la chaine\n\ndef head(lst) :\n    assert not est_vide(lst), \"Pas de t\u00eate \u00e0 une liste chain\u00e9e vide !\"\n    return lst[0] # c'est ce qu'il y a en position 0 du couple L\n\ndef tail(lst) :\n    assert not est_vide(lst), \"Pas de queue \u00e0 une liste chain\u00e9e vide !\"\n    return lst[1] # c'est ce qu'il y a en position 1 du couple L\n\ndef est_vide(lst) :\n    return len(lst) == 0\n\n# un test\nchaineGrades = creer_liste_vide()\nchaineGrades = inserer_en_tete(chaineGrades, \"G\u00e9n\u00e9ral\") ; chaineGrades = inserer_en_tete(chaineGrades, \"Colonel\") ; chaineGrades = inserer_en_tete(chaineGrades, \"Capitaine\")\nchaineGrades = inserer_en_tete(chaineGrades, \"Lieutenant\") ; chaineGrades = inserer_en_tete(chaineGrades, \"Sergent\") ; chaineGrades = inserer_en_tete(chaineGrades, \"Soldat\")\nobjviz(chaineGrades)\n</pre> def creer_liste_vide() :     return () # tuple vide  def inserer_en_tete(lst, donn\u00e9e) :     return (donn\u00e9e, lst) # c'est le nouveau premier maillon de la chaine  def head(lst) :     assert not est_vide(lst), \"Pas de t\u00eate \u00e0 une liste chain\u00e9e vide !\"     return lst[0] # c'est ce qu'il y a en position 0 du couple L  def tail(lst) :     assert not est_vide(lst), \"Pas de queue \u00e0 une liste chain\u00e9e vide !\"     return lst[1] # c'est ce qu'il y a en position 1 du couple L  def est_vide(lst) :     return len(lst) == 0  # un test chaineGrades = creer_liste_vide() chaineGrades = inserer_en_tete(chaineGrades, \"G\u00e9n\u00e9ral\") ; chaineGrades = inserer_en_tete(chaineGrades, \"Colonel\") ; chaineGrades = inserer_en_tete(chaineGrades, \"Capitaine\") chaineGrades = inserer_en_tete(chaineGrades, \"Lieutenant\") ; chaineGrades = inserer_en_tete(chaineGrades, \"Sergent\") ; chaineGrades = inserer_en_tete(chaineGrades, \"Soldat\") objviz(chaineGrades) In\u00a0[\u00a0]: Copied! <pre>def renverserListeChain\u00e9e(maListe) :\n    \"\"\" Renvoie la liste chain\u00e9e parcourue dans l'autre sens\n    Entr\u00e9e : une liste chain\u00e9e\n    Sortie : une liste chain\u00e9e\"\"\"\n    # compl\u00e9ter votre code\n    newChaine = creer_liste_vide()\n    ... # plusieurs lignes \u00e0 compl\u00e9ter\n    return newChaine\n</pre> def renverserListeChain\u00e9e(maListe) :     \"\"\" Renvoie la liste chain\u00e9e parcourue dans l'autre sens     Entr\u00e9e : une liste chain\u00e9e     Sortie : une liste chain\u00e9e\"\"\"     # compl\u00e9ter votre code     newChaine = creer_liste_vide()     ... # plusieurs lignes \u00e0 compl\u00e9ter     return newChaine  In\u00a0[\u00a0]: Copied! <pre># un test\ngradesInvers\u00e9s = renverserListeChain\u00e9e(chaineGrades)\nobjviz(gradesInvers\u00e9s)\n</pre> # un test gradesInvers\u00e9s = renverserListeChain\u00e9e(chaineGrades) objviz(gradesInvers\u00e9s) In\u00a0[\u00a0]: Copied! <pre>print(len(chaineGrades))\n</pre> print(len(chaineGrades)) <p>En effet, si la liste chain\u00e9e n'est pas vide, alors elle est cod\u00e9e par un couple de deux \u00e9l\u00e9ments : la valeur du premier maillon et le tuple repr\u00e9sentant le maillon suivant.</p> <p>Par contre, la d\u00e9finition r\u00e9cursive (\"en poup\u00e9e russe\") d'une liste chain\u00e9e permet d'envisager un code r\u00e9cursif pour la fonction <code>longueurListeChain\u00e9e(lst)</code>.</p> <p>Compl\u00e9ter le code de cette fonction, dans le cas o\u00f9 la liste chain\u00e9e pass\u00e9e en argument est cod\u00e9e par un tuple .</p> In\u00a0[\u00a0]: Copied! <pre>def longueurListeChain\u00e9e(lst) :\n    \"\"\" renvoie la longueur d'une liste chain\u00e9e, avec une impl\u00e9mentation \u00e0 l'aide de tuples\"\"\"\n    if est_vide(lst): # cas de base\n        return ...\n    else :\n        return ... + longueurListeChain\u00e9e(...)\n    \n# un test\nchaineGrades = (\"Soldat\",(\"Sergent\", (\"Lieutenant\",(\"Capitaine\", (\"Colonel\", (\"G\u00e9n\u00e9ral\",() ))))))\nL = longueurListeChain\u00e9e(chaineGrades)\nprint(\"Longueur de cette liste chain\u00e9e =\", L)\nassert L == 6 , \"probl\u00e8me avec le code\"\n</pre> def longueurListeChain\u00e9e(lst) :     \"\"\" renvoie la longueur d'une liste chain\u00e9e, avec une impl\u00e9mentation \u00e0 l'aide de tuples\"\"\"     if est_vide(lst): # cas de base         return ...     else :         return ... + longueurListeChain\u00e9e(...)      # un test chaineGrades = (\"Soldat\",(\"Sergent\", (\"Lieutenant\",(\"Capitaine\", (\"Colonel\", (\"G\u00e9n\u00e9ral\",() )))))) L = longueurListeChain\u00e9e(chaineGrades) print(\"Longueur de cette liste chain\u00e9e =\", L) assert L == 6 , \"probl\u00e8me avec le code\" <p>2. On choisit maintenant d'utiliser la version Orient\u00e9e Objet pour manipuler des listes chain\u00e9es (on donne ci-dessous le code vu en cours).</p> <p>Compl\u00e9ter le code de la fonction <code>longueur_recur_POO</code>.</p> In\u00a0[\u00a0]: Copied! <pre>class Maillon :\n    def __init__(self, data = None, suivant = None) :\n        self.head = data\n        self.tail = suivant\n\ndef longueur_recur_POO(lst) :\n    if ... is None : # cas de base\n        return ...\n    else :\n        return ... + longueur_recur_POO(...)\n        \n# un test\nm6 = Maillon(\"G\u00e9n\u00e9ral\")  # pas besoin de pr\u00e9ciser le 2\u00e8me argument, c'est None par d\u00e9faut\nm5 = Maillon(\"Colonel\", m6) \nm4 = Maillon(\"Capitaine\", m5)\nm3 = Maillon(\"Lieutenant\", m4)\nm2 = Maillon(\"Sergent\", m3)\nm1 = Maillon(\"Soldat\", m2)\n\nchaineGradesPOO = m1 # on tient la chaine par son premier maillon\nobjviz(chaineGradesPOO) # visualisation\n\nL = longueur_recur_POO(chaineGradesPOO)\nprint(\"La longueur de cette liste chain\u00e9e est \", L)\nassert  L == 6 , \"probl\u00e8me de code\"\n</pre> class Maillon :     def __init__(self, data = None, suivant = None) :         self.head = data         self.tail = suivant  def longueur_recur_POO(lst) :     if ... is None : # cas de base         return ...     else :         return ... + longueur_recur_POO(...)          # un test m6 = Maillon(\"G\u00e9n\u00e9ral\")  # pas besoin de pr\u00e9ciser le 2\u00e8me argument, c'est None par d\u00e9faut m5 = Maillon(\"Colonel\", m6)  m4 = Maillon(\"Capitaine\", m5) m3 = Maillon(\"Lieutenant\", m4) m2 = Maillon(\"Sergent\", m3) m1 = Maillon(\"Soldat\", m2)  chaineGradesPOO = m1 # on tient la chaine par son premier maillon objviz(chaineGradesPOO) # visualisation  L = longueur_recur_POO(chaineGradesPOO) print(\"La longueur de cette liste chain\u00e9e est \", L) assert  L == 6 , \"probl\u00e8me de code\"  In\u00a0[\u00a0]: Copied! <pre>class Maillon :\n    def __init__(self, data = None, suivant = None) :\n        self.head = data\n        self.tail = suivant\n        \ndef inserer(val, chaine, n) :\n    \"\"\" ins\u00e9re la donn\u00e9e dans la chaine apr\u00e8s le n-i\u00e8me maillon\"\"\"\n    if n == 1 :\n        newMaillon = Maillon(...) # compl\u00e9ter ici\n        chaine.tail = newMaillon\n    else :\n        inserer(..., chaine.tail, ...)  # compl\u00e9ter ici\n        \n# un test\nm6 = Maillon(\"G\u00e9n\u00e9ral\")  # pas besoin de pr\u00e9ciser le 2\u00e8me argument, c'est None par d\u00e9faut\nm5 = Maillon(\"Colonel\", m6) \nm4 = Maillon(\"Capitaine\", m5)\nm3 = Maillon(\"Lieutenant\", m4)\nm2 = Maillon(\"Sergent\", m3)\nm1 = Maillon(\"Soldat\", m2)\n\nobjviz(m1)\n</pre> class Maillon :     def __init__(self, data = None, suivant = None) :         self.head = data         self.tail = suivant          def inserer(val, chaine, n) :     \"\"\" ins\u00e9re la donn\u00e9e dans la chaine apr\u00e8s le n-i\u00e8me maillon\"\"\"     if n == 1 :         newMaillon = Maillon(...) # compl\u00e9ter ici         chaine.tail = newMaillon     else :         inserer(..., chaine.tail, ...)  # compl\u00e9ter ici          # un test m6 = Maillon(\"G\u00e9n\u00e9ral\")  # pas besoin de pr\u00e9ciser le 2\u00e8me argument, c'est None par d\u00e9faut m5 = Maillon(\"Colonel\", m6)  m4 = Maillon(\"Capitaine\", m5) m3 = Maillon(\"Lieutenant\", m4) m2 = Maillon(\"Sergent\", m3) m1 = Maillon(\"Soldat\", m2)  objviz(m1) In\u00a0[\u00a0]: Copied! <pre>inserer(\"Adjudant\", m1, 2)\nprint(\"Apr\u00e8s insertion de l'adjudant\")\nobjviz(m1)\n</pre> inserer(\"Adjudant\", m1, 2) print(\"Apr\u00e8s insertion de l'adjudant\") objviz(m1) In\u00a0[\u00a0]: Copied! <pre>class Maillon :\n    def __init__(self, data = None, suivant = None)  :\n        self.head = data\n        self.tail = suivant\n\nclass Chaine :\n    def __init__(self, first = None) :\n        self.premier_maillon = first\n    \n    def est_vide(self) :\n        return self.premier_maillon == None\n    \n    def tete(self) :\n        return self.premier_maillon.head\n    \n    def queue(self) :\n        if not (self.est_vide()):\n            return Chaine(self.premier_maillon.tail)\n    \n    def ajout_en_tete(self, data) :\n        nouveau_maillon = Maillon(data, self.premier_maillon)\n        self.premier_maillon = nouveau_maillon\n</pre> class Maillon :     def __init__(self, data = None, suivant = None)  :         self.head = data         self.tail = suivant  class Chaine :     def __init__(self, first = None) :         self.premier_maillon = first          def est_vide(self) :         return self.premier_maillon == None          def tete(self) :         return self.premier_maillon.head          def queue(self) :         if not (self.est_vide()):             return Chaine(self.premier_maillon.tail)          def ajout_en_tete(self, data) :         nouveau_maillon = Maillon(data, self.premier_maillon)         self.premier_maillon = nouveau_maillon <p>La chaine de d\u00e9sint\u00e9gration du Radon est donc instanci\u00e9e par le code suivant :</p> In\u00a0[\u00a0]: Copied! <pre>desintegrationRa = Chaine()\ndesintegrationRa.ajout_en_tete(('Pb', 206, 1e100))\ndesintegrationRa.ajout_en_tete(('Po', 210, 0.4))\ndesintegrationRa.ajout_en_tete(('Bi', 210, 0.014))\ndesintegrationRa.ajout_en_tete(('Pb', 210, 22.2))\ndesintegrationRa.ajout_en_tete(('Po', 214, 5.2e-12))\ndesintegrationRa.ajout_en_tete(('Bi', 214, 3.8e-2))\ndesintegrationRa.ajout_en_tete(('Pb', 214, 5.7e-5))\ndesintegrationRa.ajout_en_tete(('Po', 218, 5.7e-6))\ndesintegrationRa.ajout_en_tete(('Rn', 222, 0.01))\ndesintegrationRa.ajout_en_tete(('Ra', 226, 1600))\n\nobjviz(desintegrationRa)\n</pre> desintegrationRa = Chaine() desintegrationRa.ajout_en_tete(('Pb', 206, 1e100)) desintegrationRa.ajout_en_tete(('Po', 210, 0.4)) desintegrationRa.ajout_en_tete(('Bi', 210, 0.014)) desintegrationRa.ajout_en_tete(('Pb', 210, 22.2)) desintegrationRa.ajout_en_tete(('Po', 214, 5.2e-12)) desintegrationRa.ajout_en_tete(('Bi', 214, 3.8e-2)) desintegrationRa.ajout_en_tete(('Pb', 214, 5.7e-5)) desintegrationRa.ajout_en_tete(('Po', 218, 5.7e-6)) desintegrationRa.ajout_en_tete(('Rn', 222, 0.01)) desintegrationRa.ajout_en_tete(('Ra', 226, 1600))  objviz(desintegrationRa) <p>La chaine de d\u00e9sint\u00e9gration du C\u00e9sium est plus courte et elle est instanci\u00e9e par le code suivant :</p> In\u00a0[\u00a0]: Copied! <pre>desintegrationCs = Chaine()\ndesintegrationCs.ajout_en_tete(('Ba', 137, 1e100))\ndesintegrationCs.ajout_en_tete(('Cs', 137, 30.2))\n\nobjviz(desintegrationCs)\n</pre> desintegrationCs = Chaine() desintegrationCs.ajout_en_tete(('Ba', 137, 1e100)) desintegrationCs.ajout_en_tete(('Cs', 137, 30.2))  objviz(desintegrationCs) <p>1. Un \u00e9l\u00e9ment stable est un \u00e9l\u00e9ment qui se situe en bout de chaine de desint\u00e9gration.</p> <p>Par exemple, le Plomb 206 est un \u00e9l\u00e9ment stable car il est en bout de la chaine <code>desintegrationRa</code>.</p> <p>\u00c9crire le code de la fonction <code>estStable(chaine)</code> qui prend en param\u00e8tre une liste chain\u00e9e <code>chaine</code> non vide et qui renvoie <code>True</code> si le maillon de t\u00eate est un \u00e9l\u00e9ment stable.</p> In\u00a0[\u00a0]: Copied! <pre>def estStable(chaine) :\n    ...\n\n# test 1\nestStable(desintegrationRa)\n</pre> def estStable(chaine) :     ...  # test 1 estStable(desintegrationRa) In\u00a0[\u00a0]: Copied! <pre># test 2\ndesintegrationPb = Chaine()\ndesintegrationPb.ajout_en_tete(('Pb', 206, 1e100))\nestStable(desintegrationPb)\n</pre> # test 2 desintegrationPb = Chaine() desintegrationPb.ajout_en_tete(('Pb', 206, 1e100)) estStable(desintegrationPb) <p>2. L'\u00e9l\u00e9ment le plus instable d'une chaine de desint\u00e9gration est celui qui a la demi-vie la plus faible.</p> <p>La fonction <code>lePlusInstable(chaine)</code> qui prend en param\u00e8tre une liste chain\u00e9e non vide <code>chaine</code> doit renvoyer le nom et la masse atomique de l'atome le plus instable de <code>chaine</code>.</p> <p>Par exemple, on veut que l'appel <code>lePlusInstable(desintegrationRa)</code> renvoie <code>(Po, 214)</code>.</p> <p>Compl\u00e9ter le code de cette fonction :</p> In\u00a0[\u00a0]: Copied! <pre>def lePlusInstable(chaine) :\n    dur\u00e9e_mini = chaine.tete()[2]\n    atome_instable = (..., ...)\n    chaine = chaine.queue()\n    while not chaine.est_vide() :\n        ...\n    return atome_instable\n\n# test\nlePlusInstable(desintegrationRa)\n</pre> def lePlusInstable(chaine) :     dur\u00e9e_mini = chaine.tete()[2]     atome_instable = (..., ...)     chaine = chaine.queue()     while not chaine.est_vide() :         ...     return atome_instable  # test lePlusInstable(desintegrationRa) <p>3) Dans la chaine de d\u00e9sint\u00e9gration du radon, on trouve trois fois l'isotope <code>Po</code> (${}^{218}Po$, ${}^{214}Po$ et ${}^{210}Po$) et une seule fois l'isotope <code>Rn</code>.</p> <p>On veut \u00e9crire une fonction r\u00e9cursive <code>nbIsotopes(chaine, nom_atome)</code> qui renvoie le nombre de fois o\u00f9 <code>nom_atome</code>appara\u00eet dans la chaine de d\u00e9sint\u00e9gration <code>chaine</code>.</p> <p>Par exemple, on veut que l'appel <code>nbIsotopes(desintegrationRa, 'Po')</code> renvoie le nombre 3 et que l'appel <code>nbIsotopes(desintegrationRa, 'Rn')</code>renvoie le nombre 1.</p> <p>Compl\u00e9ter le code suivant :</p> In\u00a0[\u00a0]: Copied! <pre>def nbIsotopes(chaine, nom_atome) :\n    if chaine.est_vide() :\n        return ...\n    else :\n        occurence = int(chaine.tete()[0] == nom_atome) # conversion d'un bool\u00e9en en entier avec la r\u00e9gle : True -&gt; 1 et False -&gt; 0\n        return occurence + nbIsotopes(...)\n    \n# quelques tests\nnbIsotopes(desintegrationRa, 'Po')\n</pre> def nbIsotopes(chaine, nom_atome) :     if chaine.est_vide() :         return ...     else :         occurence = int(chaine.tete()[0] == nom_atome) # conversion d'un bool\u00e9en en entier avec la r\u00e9gle : True -&gt; 1 et False -&gt; 0         return occurence + nbIsotopes(...)      # quelques tests nbIsotopes(desintegrationRa, 'Po') In\u00a0[\u00a0]: Copied! <pre>nbIsotopes(desintegrationRa, 'Rn')\n</pre> nbIsotopes(desintegrationRa, 'Rn') <p>4. La masse atomique d'un atome correspond au nombre de protons et de neutrons qui composent le noyau de l'atome. On constate que, au cours d'une suite de d\u00e9sint\u00e9gration, il y a une baisse de la masse atomique.</p> <p>On veut \u00e9crire une fonction r\u00e9cursive <code>perte_atomique(chaine)</code> qui prend en param\u00e8tre une liste chain\u00e9e non vide  <code>chaine</code> et qui renvoie la baisse totale de la masse atomique.</p> <p>Par exemple, on veut que l'appel <code>perte_atomique(desintegrationRa)</code> renvoie le nombre 20 (car 226 - 206 = 20).</p> <p>Compl\u00e9ter le code suivant :</p> In\u00a0[\u00a0]: Copied! <pre>def perte_atomique(chaine) :\n    if chaine.queue() is None : \n        return ...\n    else :\n        masse1 = chaine.tete()[1]\n        masse2 = chaine.queue().tete()[1]\n        return ... + perte_atomique(...)\n    \n# test\nperte_atomique(desintegrationRa)\n</pre> def perte_atomique(chaine) :     if chaine.queue() is None :          return ...     else :         masse1 = chaine.tete()[1]         masse2 = chaine.queue().tete()[1]         return ... + perte_atomique(...)      # test perte_atomique(desintegrationRa) <p>5. On veut comparer la perte atomique de diff\u00e9rentes chaines de d\u00e9sint\u00e9gration et identifier celle qui a la perte atomique la plus importante.</p> <p>\u00c9crire le code d'une fonction <code>maxi_perte_atomique(tab_chaine)</code> qui prend en argument un tableau <code>tab_chaine</code> de listes chain\u00e9es et qui renvoie la valeur de la perte atomique la plus importante.</p> <p>Par exemple, l'appel <code>maxi_perte_atomique([desintegrationRa, desintegrationCs, desintegrationPb])</code> doit renvoyer la valeur 20.</p> In\u00a0[\u00a0]: Copied! <pre>def maxi_perte_atomique(tab_chaine) :\n    tab_perte_atomique = [perte_atomique(chaine) for chaine in ...]\n    maxi_perte = ...\n    ... # plusieurs lignes \u00e0 compl\u00e9ter\n    return maxi_perte\n\n# un test\nmaxi_perte_atomique([desintegrationRa, desintegrationCs, desintegrationPb])\n</pre> def maxi_perte_atomique(tab_chaine) :     tab_perte_atomique = [perte_atomique(chaine) for chaine in ...]     maxi_perte = ...     ... # plusieurs lignes \u00e0 compl\u00e9ter     return maxi_perte  # un test maxi_perte_atomique([desintegrationRa, desintegrationCs, desintegrationPb]) In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"T1_Structures_de_donnees/1.2_Listes/data/TP_Exos_ListesChainees/#exercices-et-tp-sur-les-listes-chainees","title":"\u26d3\ufe0f Exercices et TP sur les Listes Chain\u00e9es \u26d3\ufe0f\u00b6","text":""},{"location":"T1_Structures_de_donnees/1.2_Listes/data/TP_Exos_ListesChainees/#exercice-liste-chainee-chaines-de-caracteres-et-nombres-binaires","title":"\ud83d\udd8a\ufe0f Exercice : liste chain\u00e9e, chaines de caract\u00e8res et nombres binaires.\u00b6","text":"<ol> <li>On veut construire une liste chain\u00e9e dont les maillons contiennent des chaines de caract\u00e8res compos\u00e9es uniquement des lettres <code>a</code> et <code>b</code>, selon le principe suivant :</li> </ol> <ul> <li>le premier maillon porte la valeur <code>\"a\"</code></li> <li>si un maillon porte une chaine de caract\u00e8res <code>X</code> (o\u00f9 <code>X</code> d\u00e9signe n'importe quelle chaine de caract\u00e8res) qui termine par <code>a</code>, alors le maillon suivant devient <code>Xb</code> ; et sinon le maillon suivant devient <code>Xa</code>.</li> </ul> <p>Construire selon cette r\u00e8gle la liste chain\u00e9e de longueur 8.</p>"},{"location":"T1_Structures_de_donnees/1.2_Listes/data/TP_Exos_ListesChainees/#exercice-utilisation-de-linterface-dune-liste-chainee","title":"\ud83d\udd8a\ufe0f Exercice : utilisation de l'interface d'une liste chain\u00e9e\u00b6","text":"<p>Dans cet exercice, on consid\u00e8re que l'on dispose d'une liste chain\u00e9e nomm\u00e9e <code>chaineGrades</code> qui repr\u00e9sente diff\u00e9rents grades militaires dans l'arm\u00e9e fran\u00e7aise (la chaine de commandement), en partant du grade le plus bas (simple Soldat) et en allant vers le plus \u00e9lev\u00e9 (G\u00e9n\u00e9ral) :</p> <p>chaineGrades : Soldat \u2192 Sergent \u2192 Lieutenant \u2192 Capitaine \u2192 Colonel \u2192 G\u00e9neral</p> <p></p>"},{"location":"T1_Structures_de_donnees/1.2_Listes/data/TP_Exos_ListesChainees/#exercice-visualisation-dune-liste-chainee","title":"\ud83d\udd8a\ufe0f Exercice : Visualisation d'une liste chain\u00e9e\u00b6","text":"<p>Remarque : pour que la visualisation fonctionne, il faut installer le module <code>lolviz</code> de Python.</p> <p>Sous Linux</p> <pre>$ sudo apt-get install graphviz\n</pre> <p>puis</p> <pre>$ pip3 install lolviz\n</pre> <p>Dans le cours, nous avons d\u00e9fini une classe <code>Maillon</code> et, \u00e0 titre d'exemple, nous l'avons utilis\u00e9e pour d\u00e9finir la liste chain\u00e9ee des rois de France. Voici une visualisation graphique de cette structure :</p>"},{"location":"T1_Structures_de_donnees/1.2_Listes/data/TP_Exos_ListesChainees/#exercice-renverser-une-liste-chainee","title":"\ud83d\udd8a\ufe0f Exercice : Renverser une liste chain\u00e9e\u00b6","text":"<p>L'objectif de l'exercice est d'\u00e9crire le code d'une fonction <code>renverserListeChain\u00e9e(maListe)</code> qui prend en param\u00e8tre une liste chain\u00e9e et qui renvoie une autre liste chain\u00e9e correspondant au parcours dans le sens inverse de <code>maListe</code>.</p> <p>Par exemple, en reprenant la liste chain\u00e9e des grades de l'arm\u00e9e de l'exercice pr\u00e9c\u00e9dent, on veut que l'appel <code>renverserListeChain\u00e9e(chaineGrades)</code> renvoie la liste chain\u00e9e repr\u00e9sentant <code>G\u00e9n\u00e9ral \u2192 Colonel \u2192 Capitaine \u2192 Lieutenant \u2192 Sergent \u2192 Soldat</code>.</p>"},{"location":"T1_Structures_de_donnees/1.2_Listes/data/TP_Exos_ListesChainees/#exercice-longueur-dune-liste-chainee","title":"\ud83d\udd8a\ufe0f Exercice : longueur d'une liste chain\u00e9e\u00b6","text":"<p>Il peut \u00eatre utile de conna\u00eetre la longueur d'une liste chain\u00e9e.</p> <p>1. Avec l'impl\u00e9mentation d'une liste chain\u00e9e \u00e0 l'aide de tuples, l'appel <code>len(maListeChain\u00e9e)</code> ne va pas renvoyer la bonne valeur : essayez pour voir !</p>"},{"location":"T1_Structures_de_donnees/1.2_Listes/data/TP_Exos_ListesChainees/#exercice-inserer-une-donnee-dans-une-liste-chainee","title":"\ud83d\udd8a\ufe0f Exercice : ins\u00e9rer une donn\u00e9e dans une liste chain\u00e9e\u00b6","text":"<p>On veut \u00e9crire une fonction <code>inserer(val, chaine, n)</code> qui va ins\u00e9rer la valeur <code>val</code> dans la liste chain\u00e9e <code>chaine</code> apr\u00e8s le <code>n</code>-i\u00e8me maillon, o\u00f9 <code>n</code> est un entier sup\u00e9rieur ou \u00e9gal \u00e0 1.</p> <p>Par exemple, en reprenant la liste chaine <code>m1</code> des grades de l'exercice pr\u00e9c\u00e9dent, on veut que <code>inserer(\"Adjudant\", m1, 2)</code> ins\u00e8re le grade d'adjudant apr\u00e8s le 2\u00e8me maillon, c'est-\u00e0-dire entre <code>Sergent</code> et <code>Lieutenant</code>.</p> <p>Compl\u00e9ter le code de cette fonction r\u00e9cursive.</p>"},{"location":"T1_Structures_de_donnees/1.2_Listes/data/TP_Exos_ListesChainees/#exercice-chaine-de-desintegration","title":"\ud83d\udd8a\ufe0f Exercice : Chaine de d\u00e9sint\u00e9gration \u269b\ufe0f\u00b6","text":"<p>En Enseignement Scientifique de Premi\u00e8re, vous avez \u00e9tudi\u00e9 la d\u00e9sint\u00e9gration par radioactivit\u00e9 du noyau des atomes.</p> <p>La demi-vie d'un noyau correspond \u00e0 la dur\u00e9e n\u00e9cessaire, en nombre d'ann\u00e9es, pour que la moiti\u00e9 des noyaux initialement pr\u00e9sents dans un \u00e9chantillon se soit d\u00e9sint\u00e9gr\u00e9e.</p> <p>Par exemple, le Radium 226 (${}^{226}Ra$) se d\u00e9sint\u00e8gre en Radon 222 (${}^{222}Rn$) avec une demi-vie de 1600 ans.</p> <p>Le Radon 222 peut lui-m\u00eame se d\u00e9sint\u00e9grer en Polonium 218, et ainsi de suite jusqu'\u00e0 aboutir au Plomb 206 qui est stable.</p> <p>On a donc une chaine de d\u00e9sint\u00e9gration :</p> <p></p> <p>Pour manipuler en Python une chaine de d\u00e9sint\u00e9gration, on utilise une classe <code>Chaine</code> qui impl\u00e9mente la structure de donn\u00e9es abstraite de liste chain\u00e9e dans une version moins simpliste que celle utilis\u00e9e pr\u00e9c\u00e9demment.</p> <p>Chaque maillon est un triplet de la forme <code>(nom_atome, masse_atomique, demi_vie)</code>, comme par exemple <code>radium = ('Ra',226, 1600)</code>.</p> <p>La classe <code>Chaine</code> est munie de m\u00e9thodes qui mod\u00e9lisent l'interface usuelle des listes chain\u00e9es : <code>est_vide()</code>, <code>tete()</code>, <code>queue()</code> et <code>ajout_en_tete(donn\u00e9e)</code>.</p>"},{"location":"T1_Structures_de_donnees/1.4_Arbres/Exercices/","title":"Exercices","text":"<p>Pour chacun des exercices, on consid\u00e9rera que la hauteur de la racine vaut 1.</p> <p>Exercice 1</p> <p>Dessinez chacun des arbres ci-dessous. Donner pour chaque arbre, sa taille, sa hauteur et son nombre de feuilles. \\(\\Delta\\) repr\u00e9sente l'arbre vide.  On rappelle que la hauteur d'un arbre est d\u00e9finie comme la profondeur maximale des noeuds de l'arbre. 1. \\((1, \\Delta, \\Delta)\\)</p> Correction <p>Taille : 1 Hauteur : 1 Feuilles : 1 <code>graphviz dot      digraph G1 {     rankdir=LR     1 }</code></p> <p>2. \\((2, (4,\\Delta,(1, (5, \\Delta, (3, \\Delta, (2, \\Delta, \\Delta))), \\Delta)), \\Delta)\\)</p> Correction <p>Taille : 6 Hauteur : 6 Feuilles : 1</p> <p> class=\"graphviz dot\"&gt; expression Arbre peigne gauche de hauteur 4 <p> 0 </p> <p> 1 </p> <p> 0:-&gt;1: </p> <p> 1d </p> <p> 0:-&gt;1d: </p> <p> 2 </p> <p> 1:-&gt;2: </p> <p> 2d </p> <p> 1:-&gt;2d: </p> <p> 3 </p> <p> 2:-&gt;3: </p> <p> 3d </p> <p> 2:-&gt;3d: </p> <p> 4 </p> <p> 3:-&gt;4: </p> <p> 4d </p> <p> 3:-&gt;4d: </p>"},{"location":"T1_Structures_de_donnees/1.4_Arbres/cours/","title":"Structures de donn\u00e9es r\u00e9cursive :  les arbres","text":""},{"location":"T1_Structures_de_donnees/1.4_Arbres/cours/#introduction","title":"Introduction","text":"<p>Un organisateur de tournoi de rugby recherche la meilleure solution pour afficher les potentiels quarts de final, demi-finales et finale: </p> <p>Au d\u00e9part nous avons 4 poules de 4 \u00e9quipes. Les 4 \u00e9quipes d'une poule s'affrontent dans un mini championnat (3 matchs par \u00e9quipe). \u00c0 l'issue de cette phase de poule, les 2 premi\u00e8res \u00e9quipes de chaque poule sont qualifi\u00e9es pour les quarts de finale. </p> <p>On conna\u00eet les 2 qualifi\u00e9s par poule : </p> <ul> <li>Poule 1 =&gt; 1er Eq1 et 2e Eq8 </li> <li>Poule 2 =&gt; 1er Eq2 et 2e Eq7 </li> <li>Poule 3 =&gt; 1er Eq3 et 2e Eq6 </li> <li>Poule 4 =&gt; 1er Eq4 et 2e Eq5 </li> </ul> <p>En quart de final on va avoir : </p> <ul> <li>quart de finale 1 =&gt; Eq1 contre Eq5 </li> <li>quart de finale 2 =&gt; Eq2 contre Eq6 </li> <li>quart de finale 3 =&gt; Eq3 contre Eq7 </li> <li>quart de finale 4 =&gt; Eq4 contre Eq8 </li> </ul> <p>Pour les demi-finales on aura : </p> <ul> <li>demi-finale 1 =&gt; vainqueur quart de finale 1 contre vainqueur quart de finale 3 </li> <li>demi-finale 2 =&gt; vainqueur quart de finale 2 contre vainqueur quart de finale 4 </li> </ul> <p>L'organisateur du tournoi affiche les informations ci-dessus le jour du tournoi. Malheureusement, la plupart des spectateurs se perdent quand ils cherchent \u00e0 d\u00e9terminer les potentielles demi-finales (et ne parlons pas de la finale !) </p> <p>Comment faire ? naturellement, comment auriez-vous envie de repr\u00e9senter cette masse d\u2019informations ?</p> exemple de structure possible <p></p> <p> </p>"},{"location":"T1_Structures_de_donnees/1.4_Arbres/cours/#1-definitions","title":"1.    D\u00e9finitions","text":"<p>Un arbre en informatique est un type particulier de graphe. Comme nous n'avons pas encore vu \u00e0 ce stade de l'ann\u00e9e les graphes, cette d\u00e9finition n'est pas d'une grande utilit\u00e9...</p> <p> On dira donc qu'un arbre est constitu\u00e9 :</p> <ul> <li>D\u2019une racine, sommet de \"d\u00e9part\" de l'arbre </li> <li>De n\u0153uds, sommets interm\u00e9diaires de l'arbre </li> <li>De feuilles, sommets \"finaux\" de l'arbre </li> <li>Et de branches, qui relient les \u00e9l\u00e9ments pr\u00e9c\u00e9dents entre eux</li> </ul> <p>Les arbres informatiques ont ceci de particulier qu'ils poussent t\u00eate en bas. Les arbres sont des structures de donn\u00e9es hi\u00e9rarchiques, tr\u00e8s utilis\u00e9es en informatique. Ils sont orient\u00e9s : la repr\u00e9sentation standardis\u00e9e, racine en haut, indique la relation \"p\u00e8re-enfant\" entre les sommets. Lorsque deux sommets sont reli\u00e9s par une branche, celui du haut est le p\u00e8re, et celui du bas est l\u2019enfant. Un p\u00e8re peut avoir plusieurs enfants, mais un enfant ne peut pas avoir plusieurs p\u00e8res (faites un dessin, on obtiendrait alors ce qu\u2019on appelle un cycle dans le vocabulaire des graphes).</p> <p>Question : Citez des exemples de repr\u00e9sentation arborescente que vous connaissez.</p> R\u00e9ponses possibles <p>un arbre g\u00e9n\u00e9alogique, Une arborescence de fichiers, Un document HTML  </p>"},{"location":"T1_Structures_de_donnees/1.4_Arbres/cours/#definitions-complementaires","title":"D\u00e9finitions compl\u00e9mentaires","text":"<ul> <li>Les n\u0153uds sont en g\u00e9n\u00e9ral \u00e9tiquet\u00e9s, ci-contre les \u00e9tiquettes sont les lettres a, b, c, etc\u2026</li> <li>La taille d\u2019un arbre est le nombre de ses n\u0153uds. Dans l\u2019exemple ci-dessus, la taille de l\u2019arbre est 7.</li> <li>La hauteur (ou profondeur ou niveau) d\u2019un n\u0153ud X est d\u00e9finie comme le nombre de n\u0153ud \u00e0 parcourir pour aller de la racine au n\u0153ud X. La hauteur de la racine est arbitrairement fix\u00e9e \u00e0 1, ou 0 suivant les d\u00e9finitions. Pour la suite du cours, nous choisirons la hauteur de la racine \u00e9gale \u00e0 1.</li> <li>La hauteur de l\u2019arbre est la plus grande des hauteurs de ses noeuds</li> </ul> <p>Exemple : </p> <ul> <li>le n\u0153ud \u24d2 a pour hauteur 2 </li> <li>le n\u0153ud \u24d5 a pour hauteur 3</li> <li>le n\u0153ud \u24d6 a pour hauteur 3 (avec 1 comme hauteur pour a)</li> <li>la hauteur de l\u2019arbre est \u00e9gale \u00e0 la hauteur du n\u0153ud \u24d6, soit 3.</li> </ul> Un arbre peut \u00eatre d\u00e9fini de mani\u00e8re r\u00e9cursive :  <p> un arbre est soit un arbre vide</p> <p> une racine et une liste de sous-arbres (\u00e9ventuellement vide, auquel cas c\u2019est une feuille).  C\u2019est la d\u00e9finition qui est probablement la plus pertinente pour la vision \u00ab informatique \u00bb des arbres.</p> <p>En terminale, nous \u00e9tudierons principalement les arbres binaires : </p> <p>un arbre binaire est un arbre dont tous les n\u0153uds sont d\u2019arit\u00e9 au maximum 2.</p> <p>Autrement dit, chaque p\u00e8re a aux plus deux enfants, appel\u00e9s sous-arbre gauche et sous-arbre droit. Un arbre binaire est soit un arbre vide, soit une racine, un sous-arbre Gauche et un sous-arbre Droit. Il est essentiel de comprendre qu'un sous-arbre est un arbre. D'o\u00f9 la d\u00e9finition r\u00e9cursive ci dessus.  Les arbres binaires se rencontrent par exemple dans les comp\u00e9titions sportives comme un tournoi de tennis.</p>"},{"location":"T1_Structures_de_donnees/1.4_Arbres/cours/#trois-cas-particuliers","title":"Trois cas particuliers :","text":"Arbre d\u00e9g\u00e9n\u00e9r\u00e9 ou filiforme  ou arbre peigne <p>Un arbre binaire peigne est un cas particulier extr\u00eame d'arbre binaire, tous les n\u0153uds int\u00e9rieurs ont un seul enfant qui est non vide, et toujours du m\u00eame c\u00f4t\u00e9. Techniquement c'est une liste chain\u00e9e. </p> Arbre parfait <p>Un arbre binaire parfait poss\u00e8de des n\u0153uds int\u00e9rieurs qui ont tous exactement deux enfants non vides. C'est l'arbre id\u00e9al pour certains algorithmes... Une taille maximale pour une hauteur minimale.  </p> Arbre complet ou presque complet <p>c\u2019est un arbre dont tous les niveaux sont compl\u00e8tement remplis, sauf \u00e9ventuellement le dernier. Les feuilles du dernier niveau sont le plus \u00e0 gauche possible </p> Attention <p>A noter que ces d\u00e9finitions varient suivant les auteurs et les livres ! notamment \u00abparfait\u00bb et \u00abcomplet\u00bb peuvent \u00eatre intervertis !</p>"},{"location":"T1_Structures_de_donnees/1.4_Arbres/cours/#lien-entre-taille-et-hauteur","title":"Lien entre taille et hauteur.","text":"<p>Si un arbre binaire est de taille <code>n</code> et de hauteur <code>h</code>, alors : </p> <ul> <li>le nombre de sommets est au moins \u00e9gal \u00e0 la hauteur, et strictement inf\u00e9rieur \u00e0 \\(2^h\\) :     \\(h &lt;= n &lt; 2^h\\)</li> <li>De mani\u00e8re \u00e9quivalente, la hauteur est strictement plus grande que le logarithme en base deux de la taille, et inf\u00e9rieur ou \u00e9gal \u00e0 la taille : \\(\\log _{2} n &lt; h &lt;= n\\)</li> </ul> <p>Question : Dessiner tous les arbres binaires ayant respectivement 3 et 4 n\u0153uds</p> R\u00e9ponse <p>Il y a 5 arbres binaires poss\u00e9dant 3 noeuds  Il y a 14 arbres binaires poss\u00e9dant 5 noeuds </p> <p>Question :  calculer le nombre de d\u2019arbres binaires contenant 5 n\u0153uds. Sachant qu\u2019il y a </p> <ul> <li>1 arbre binaire vide</li> <li>1 arbre binaire contenant 1 n\u0153ud</li> <li>2 arbres binaires contenant 2 n\u0153uds</li> <li>5 arbres binaires contenant 3 n\u0153uds</li> <li>14 arbres binaires contenant 4 n\u0153uds</li> </ul> <p>On ne cherchera pas \u00e0 les construire tous, mais seulement \u00e0 les d\u00e9nombrer</p> <p>??? check \"R\u00e9ponse\"     Pour les d\u00e9nombrer, on consid\u00e8re le noeud \u00e0 la racine puis on r\u00e9partit les quatres noeuds restants entre le sous-arbre gauche et le sous-arbre droit. Par exemple, on peut mettre un noeud dans le sous-arbre gauche et 3 dans le sous-arbre droit.     Au total, il y a 5 fa\u00e7ons diff\u00e9rentes de r\u00e9partir les noeuds \\((0+4, 1+3, 2+2, 3+1, 4+0)\\).     Pour chacune, on conna\u00eet le nombre de sous-arbres possibles, ce qui donne la somme :     \\(1*14 + 1*5 + 2*2 + 5*1 + 14*1\\)     Soit un total de 42 arbres binaires poss\u00e9dant 5 noeuds</p>"},{"location":"T1_Structures_de_donnees/1.4_Arbres/cours/#mise-en-application-debranche","title":"Mise en application d\u00e9branch\u00e9","text":"<p>Lien vers les exercices</p> <ol> <li>Une classe arbre binaire en Python</li> </ol> <p>Lien vers le notebook  ici :fontawesome-solid-download: </p> <p>Le but est de cr\u00e9er une structure de donn\u00e9es pour repr\u00e9senter un arbre binaire en Python. Les op\u00e9rations sur les arbres binaires sont au minimum : \u2022   Construction d\u2019arbre vide \u2022   Construction d\u2019un arbre \u00e0 partir d\u2019un entier et de deux sous-arbres gauche et droit \u2022   Test de vacuit\u00e9 \u2022   Acc\u00e8s \u00e0 la racine d\u2019un arbre \u2022   Acc\u00e8s au sous-arbre gauche \u2022   Acc\u00e8s au sous-arbre droit</p> <p>a.  Premi\u00e8re impl\u00e9mentation On cr\u00e9e une classe n\u0153ud, puis on utilise ce n\u0153ud pour construire un arbre class Noeud:     def init(self,valeur,gauche,droit):         self.n = valeur         self.g = gauche         self.d = droit</p> <p>class ArbreBinaire:     def init(self,c):         self.r = c</p> \ud83d\udccb Texte<pre><code>def creeVide():\n    return ArbreBinaire(None)\n\ndef creeNGD(valeur, gauche = None, droit = None):\n    return ArbreBinaire(Noeud(valeur, gauche, droit))\n\ndef estVide(self):\n    return self.r is None\n\ndef racine(self):\n    assert not(self.r is None),'Arbre vide'\n    # Deuxi\u00e8me version\n    # if self.estVide():\n</code></pre> <p>#     Raise index error('Arbre vide')         # else :          return self.r.n</p> \ud83d\udccb Texte<pre><code>def filsGauche(self):\n    assert not(self.r is None),'Arbre vide'\n    return self.r.g\n\ndef filsDroit(self):\n    assert not(self.r is None),'Arbre vide'\n    return self.r.d\n</code></pre> <p>b.  Deuxi\u00e8me impl\u00e9mentation Comme vu dans le notebook, la classe n\u0153ud suffit \u00e0 cr\u00e9er un arbre, qui n\u2019est rien d\u2019autre qu\u2019une suite r\u00e9cursive de n\u0153uds. La classe ArbreBinaire du paragraphe pr\u00e9c\u00e9dent n\u2019est donc pas obligatoire.</p> <ol> <li>Algorithmes sur les arbres Ces algorithmes sont \u00e0 comprendre plus qu\u2019\u00e0 retenir a.  Taille et hauteur Calcul de la taille : retourne le nombre de sommets de l\u2019arbre (racine + n\u0153uds + feuilles) Fonction r\u00e9cursive taille(arbre) : Si arbre est vide Retourner 0 Sinon Retourner 1 + taille (fils gauche) + taille (fils droit)</li> </ol> <p>Calcul de la hauteur : retourne la hauteur de l\u2019arbre Fonction r\u00e9cursive hauteur(arbre) : Si arbre est vide Retourner 0 Sinon Retourner 1 + max( hauteur (fils gauche), hauteur(fils droit)) b.  Parcours en profondeur Dans le parcours en profondeur, on parcourt d\u2019abord la racine de l\u2019arbre, puis r\u00e9cursivement les enfants gauche et droit. L\u2019ordre dans lequel est fait ce traitement donne les trois parcours possibles :</p> <p>i.  Parcours pr\u00e9fixe : racine \u2013 gauche \u2013 droit (la racine avant les enfants, la racine pr\u00e9c\u00e8dent) ii. Parcours infixe : gauche \u2013 racine \u2013 droit (la racine est au milieu, \u00ab in \u00bb) iii.    Parcours suffixe : gauche \u2013 droit \u2013 racine (la racine est en dernier, la racine succ\u00e8de)</p> <p>Pr\u00e9fixe Infixe  Suffixe (postfixe) Fonction visitePr\u00e9fixe(arbre) :     Si arbre n\u2019est pas vide :          visiter racine          visitePr\u00e9fixe (fils gauche)           visitePr\u00e9fixe (fils droit) Fonction visiteInfixe(arbre) :     Si arbre n\u2019est pas vide :          visiteInfixe (fils gauche)           visiter racine          visiteInfixe (fils droit)  Fonction visiteSuffixe(arbre) :     Si arbre n\u2019est pas vide :          visiteSuffixe (fils gauche)           visiteSuffixe (fils droit)          visiter racine</p> <p>c.  Parcours en largeur Principe : on parcourt tous les n\u0153uds de hauteur 1 (la racine), puis tous les n\u0153uds de hauteur 2, ceux de hauteur 3 etc. Le parcours se fait en g\u00e9n\u00e9ral de gauche \u00e0 droite. On utilise pour cela une file \u00c9tapes de l'algorithme :  1 . Mettre le n\u0153ud source dans la file. 2.  Retirer le n\u0153ud du d\u00e9but de la file pour le traiter. 3.  Mettre le fils gauche et le fils droits lorsqu\u2019ils sont non vides, non explor\u00e9s, \u00e0 la fin de la file. 4.  Si la file n'est pas vide reprendre \u00e0 l'\u00e9tape 2.</p> <ol> <li>Arbres binaires de recherche (ABR) a.  D\u00e9finition Un arbre binaire de recherche, ou ABR, est un arbre binaire \u00e9tiquet\u00e9 poss\u00e9dant la propri\u00e9t\u00e9 suivante : Pour tout n\u0153ud x, tous les n\u0153uds situ\u00e9s dans le sous-arbre gauche de x ont une valeur inf\u00e9rieure ou \u00e9gale \u00e0 celle de x, et tous les n\u0153uds situ\u00e9s dans le sous-arbre droit ont une valeur sup\u00e9rieure ou \u00e9gale \u00e0 celle de x.</li> </ol> <p>Les arbres binaires de recherche servent, comme leur nom l\u2019indique, \u00e0 rechercher rapidement des \u00e9l\u00e9ments ordonn\u00e9s. Exemples :</p> <p>Est un arbre binaire de recherche   N\u2019est pas un arbre binaire de recherche</p> <p>b.  Algorithmes sur les ABR i.  Recherche dans un ABR Principe : suivant la valeur \u00e0 rechercher, et la valeur du n\u0153ud sur lequel on est, on cherche soit dans le sous-arbre gauche, soit dans le sous-arbre droit</p> <p>Fonction r\u00e9cursive recherche(ABR, valeur) : Si ABR est vide Retourner None          # variante : retourner Faux Sinon valeur(x)  = \u00e9tiquette(ABR)     # valeur de la racine Si valeur &lt; valeur(x) : Retourner recherche(fils_gauche , valeur) Sinon si valeur &gt; valeur(x) : Retourner recherche(fils_droit , valeur) Sinon  Retourner ABR       # variante : retourner Vrai</p> <p>Pseudo-d\u00e9finition (peu rigoureuse et incompl\u00e8te) : un arbre est \u00e9quilibr\u00e9 si les hauteurs entre les sous-arbres gauche et droit sont diff\u00e9rentes de 1 au maximum. Les arbres complets ou parfaits sont \u00e9quilibr\u00e9s.</p> <p>Arbre binaire de recherche \u00e9quilibr\u00e9 (tout en \u00e9tant ni parfait, ni complet) Arbre binaire de recherche d\u00e9s\u00e9quilibr\u00e9. Cet arbre contient les m\u00eames donn\u00e9es que celui de gauche.</p> <p>Complexit\u00e9 : Si l\u2019arbre binaire de recherche est \u00e9quilibr\u00e9, alors le co\u00fbt en temps de la recherche est en  , o\u00f9 n est le nombre de n\u0153uds de l\u2019arbre. Dans le cas ou l\u2019arbre binaire de recherche n\u2019est pas \u00e9quilibr\u00e9, la recherche est en   . Le cas le pire \u00e9tant le cas ou l\u2019ABR est filiforme. Remarque : on peut \u00e9crire une version it\u00e9rative de cet algorithme (exercice int\u00e9ressant)</p> <p>ii. Insertion dans un ABR Le probl\u00e8me de l\u2019insertion dans un ABR correspond \u00e0 celui de la construction de l\u2019ABR. L\u2019insertion dans un ABR commence par la recherche de l\u2019endroit o\u00f9 l\u2019on doit ins\u00e9rer la valeur. Si la valeur \u00e0 ins\u00e9rer est plus petite \u2013ou \u00e9gale\u2013 que la valeur du n\u0153ud, on va \u00e0 gauche, si elle est plus grande on va \u00e0 droite. On arrive \u00e0 un moment \u00e0 un arbre vide : c\u2019est l\u00e0 o\u00f9 on ajoute la nouvelle valeur. La gestion des arbres vides n\u2019est cependant pas si simple dans cette approche.</p> <p>Fonction r\u00e9cursive ajoute(ABR, valeur) :</p> <p>Si ABR est vide ABR = Arbre(valeur, None, None) Sinon si valeur &lt;= \u00e9tiquette_noeud(ABR)  ajoute(fils_gauche , valeur) Sinon  ajoute(fils_droit , valeur)</p> <p>Complexit\u00e9 : la complexit\u00e9 est identique \u00e0 celle de la fonction de recherche. Dans le cas d\u2019un arbre \u00e9quilibr\u00e9, elle est en  . Remarque : cette m\u00e9thode ne donne pas forc\u00e9ment des arbres \u00e9quilibr\u00e9s. Pour avoir un arbre \u00e9quilibr\u00e9, une m\u00e9thode efficace est d\u2019ins\u00e9rer les \u00e9l\u00e9ments dans un ordre al\u00e9atoire.</p> <p>iii.    Suppression dans un ABR  Cette partie n\u2019est pas au programme du bac. Elle constitue un compl\u00e9ment enrichissant en vitamines pour les neurones. Le probl\u00e8me se d\u00e9compose en trois cas, suivant le nombre de fils du n\u0153ud \u00e0 supprimer. Si le n\u0153ud est une feuille (pas de fils), alors on supprime simplement le lien du p\u00e8re vers ce n\u0153ud (on d\u00e9croche le n\u0153ud). Si ce lien n\u2019existe pas, l\u2019arbre devient l\u2019arbre vide.</p> <p>Si le n\u0153ud a un seul fils, alors on d\u00e9croche le n\u0153ud comme pr\u00e9c\u00e9demment, et on remplace son fils dans le n\u0153ud p\u00e8re. Si le p\u00e8re n\u2019existe pas, le n\u0153ud fils devient la racine de l\u2019arbre.</p> <p>Si le n\u0153ud a deux fils, on cherche dans le sous-arbre gauche le n\u0153ud MaxLocal de valeur la plus grande (ou le n\u0153ud de valeur la plus petite dans le sous-arbre droit). La valeur de ce n\u0153ud va remplacer la valeur supprim\u00e9e. Comme ce n\u0153ud MaxLocal a la valeur maximale dans le sous-arbre gauche, il n\u2019a pas de fils droit. On peut donc le d\u00e9crocher, comme on l\u2019a fait dans le cas pr\u00e9c\u00e9dent.</p>"},{"location":"T1_Structures_de_donnees/1.4_Arbres/cours/#bibliographie","title":"Bibliographie","text":"<ul> <li>Cours de Fr\u00e9d\u00e9ric Mandon </li> <li>Gilles Lassus \u2013 Enseignant NSI  Lyc\u00e9e Fran\u00e7ois Mauriac --  Bordeaux </li> <li>NSI 24 Le\u00e7ons avec exercices corrig\u00e9s \u2013 Edition Ellipses</li> <li>Pr\u00e9pabac NSI, Terminale, G.CONNAN, V.PETROV, G.ROZSAVOLGYI, L.SIGNAC, \u00e9ditions HATIER.</li> <li>Num\u00e9rique et Sciences Informatiques, Terminale, T. BALABONSKI, S. CONCHON, J.-C. FILLIATRE, K. NGUYEN, \u00e9ditions ELLIPSES.</li> </ul>"},{"location":"T1_Structures_de_donnees/1.4_Arbres/tnsi_arbres/","title":"Les arbres","text":"In\u00a0[4]: Copied! <pre>class ArbreB:\n    def __init__(self, valeur, gauche = None, droit = None):\n        self.noeud = valeur\n        self.gauche = gauche\n        self.droit = droit\n        \n    \n    def __repr__(self):\n        return str(self.noeud) +str(self.gauche).replace('None','.')+str(self.droit).replace('None','.')\n    \n        \narbre_f = ArbreB('f')\narbre_g = ArbreB('g')\narbre_c = ArbreB('c',arbre_f,arbre_g)\nprint(arbre_c)\n</pre> class ArbreB:     def __init__(self, valeur, gauche = None, droit = None):         self.noeud = valeur         self.gauche = gauche         self.droit = droit                   def __repr__(self):         return str(self.noeud) +str(self.gauche).replace('None','.')+str(self.droit).replace('None','.')               arbre_f = ArbreB('f') arbre_g = ArbreB('g') arbre_c = ArbreB('c',arbre_f,arbre_g) print(arbre_c) <pre>cf..g..\n</pre> <ol> <li>Ecrire une m\u00e9thode estVide() renvoyant vrai si l'arbre est vide</li> </ol> In\u00a0[\u00a0]: Copied! <pre>def est_Vide(self) :\n    pass\n</pre> def est_Vide(self) :     pass In\u00a0[\u00a0]: Copied! <pre>arbre_vide = ArbreB(None)\nassert arbre_vide.est_Vide() == True\nassert arbre.est_Vide() == False\n</pre> arbre_vide = ArbreB(None) assert arbre_vide.est_Vide() == True assert arbre.est_Vide() == False <ol> <li>Ecrire une m\u00e9thode estFeuille() renvoyant un bool\u00e9en Vrai si l'arbre est une feuille</li> </ol> In\u00a0[\u00a0]: Copied! <pre>def estFeuille (self) :\n    pass\n</pre> def estFeuille (self) :     pass In\u00a0[\u00a0]: Copied! <pre>assert arbre_vide.estFeuille() == False\nassert arbre_f.estFeuille() == True\nassert arbre_d.estFeuille() == False\n</pre> assert arbre_vide.estFeuille() == False assert arbre_f.estFeuille() == True assert arbre_d.estFeuille() == False <ol> <li>Ecrire une fonction donnant la taille de l'arbre, et une autre fonction donnant la hauteur de l'arbre (on peut faire une m\u00e9thode, c'est un peu plus besogneux)</li> </ol> In\u00a0[\u00a0]: Copied! <pre>def taille(self):\n    pass\n</pre> def taille(self):     pass In\u00a0[\u00a0]: Copied! <pre>assert arbre_f.taille() == 1\nassert arbre_vide.taille() == 0\nassert arbre_d.taille() == 3\nassert arbre.taille() == 10\n</pre> assert arbre_f.taille() == 1 assert arbre_vide.taille() == 0 assert arbre_d.taille() == 3 assert arbre.taille() == 10 In\u00a0[1]: Copied! <pre>p = [2]+[3]\nprint(p)\n</pre> p = [2]+[3] print(p) <pre>[2, 3]\n</pre> In\u00a0[\u00a0]: Copied! <pre>def parcoursPrefixe(self):\n    # Condition d'arr\u00eat\n    if self.noeud is None:\n        return []\n    parcours_gauche =[]\n    parcours_droit =[]\n    if not self.gauche is None :\n        parcours_gauche = self.gauche.parcoursPrefixe()\n    if not self.droit is None : \n        parcours_droit = self.droit.parcoursPrefixe()\n    return [self.noeud]+ parcours_gauche + parcours_droit\n\ndef parcoursInfixe(self):\n\n    return parcours\n\ndef parcoursSuffixe(self):\n\n    return parcours\n</pre> def parcoursPrefixe(self):     # Condition d'arr\u00eat     if self.noeud is None:         return []     parcours_gauche =[]     parcours_droit =[]     if not self.gauche is None :         parcours_gauche = self.gauche.parcoursPrefixe()     if not self.droit is None :          parcours_droit = self.droit.parcoursPrefixe()     return [self.noeud]+ parcours_gauche + parcours_droit  def parcoursInfixe(self):      return parcours  def parcoursSuffixe(self):      return parcours In\u00a0[\u00a0]: Copied! <pre>prefixe = arbre.parcoursPrefixe()\nprint(\"prefixe : \", prefixe)\n</pre> prefixe = arbre.parcoursPrefixe() print(\"prefixe : \", prefixe) In\u00a0[\u00a0]: Copied! <pre>infixe = arbre.parcoursInfixe()\nprint(\"infixe : \", infixe)\n</pre> infixe = arbre.parcoursInfixe() print(\"infixe : \", infixe) In\u00a0[\u00a0]: Copied! <pre>suffixe = arbre.parcoursSuffixe()\nprint(\"suffixe : \", suffixe)\n</pre> suffixe = arbre.parcoursSuffixe() print(\"suffixe : \", suffixe) In\u00a0[\u00a0]: Copied! <pre>from collections import deque\n\ndef parcoursLargeur(arbre):\n    file = deque()\n    parcours = []\n\n    return parcours\n\nlargeur = parcoursLargeur(arbre_a)\nprint(largeur)\n</pre> from collections import deque  def parcoursLargeur(arbre):     file = deque()     parcours = []      return parcours  largeur = parcoursLargeur(arbre_a) print(largeur)               In\u00a0[5]: Copied! <pre># utilitaire pour repr\u00e9senter les arbres binaires\n%matplotlib inline\nimport networkx as nx\nimport matplotlib.pyplot as plt\n\ndef hauteur(arbre):\n    if arbre is None:\n        return 0\n    else:\n        return 1 + max(hauteur(arbre.gauche), hauteur(arbre.droit))\n    \ndef parkour(arbre, noeuds, branches, position, profondeur, pos_courante):\n    if arbre is not None:\n        noeuds.append(arbre.noeud)            # on compl\u00e8te la liste des noeuds\n        position[arbre.noeud] = (pos_courante,profondeur)     # ... et la liste des positions\n        profondeur -= 1 \n        if arbre.gauche is not None:\n            branches.append((arbre.noeud, arbre.gauche.noeud))  #... et la liste des branches\n            parkour(arbre.gauche, noeuds, branches, position, profondeur, \n                    pos_courante - 2**(profondeur - 1))\n        if arbre.droit is not None:\n            branches.append((arbre.noeud, arbre.droit.noeud))\n            parkour(arbre.droit, noeuds, branches, position, profondeur, \n                    pos_courante + 2**(profondeur - 1))\n    return noeuds, branches, position \n\n\ndef repr_graph(arbre):\n    noeuds = []             #liste des noeuds, racines et feuilles de l'arbre\n    branches =[]            # liste des branches de l'arbre\n    profond = hauteur(arbre)        #hauteur de l'arbre\n    pos_courante = 2**(profond - 1)   # position de la racine (en abscisse)\n    position = {}                # dictionnaire des positions des noeuds sur la figure\n     \n    # appel d'une fonction r\u00e9cursive de parcours, ici prefixe mais \u00e7a n'a pas d'importance\n    # on r\u00e9cup\u00e8re : la liste des noeuds, la liste des branches,\n    # le dictionnaire des positions des noeuds\n    noeuds, branche, position  = parkour(arbre, noeuds, branches, position, profond, pos_courante)    \n    #print(position)\n\n    mon_arbre = nx.Graph()          # objet Graphe de la biblioth\u00e8que Networkxx\n    mon_arbre.add_nodes_from(noeuds)\n    mon_arbre.add_edges_from(branches)\n    #print(list(arbre.nodes))\n    #print(list(arbre.edges))\n    #Si vous voulez changer des couleurs, amusez-vous ci-dessous\n    #Plein de noms de couleurs l\u00e0 : http://www.letoileauxsecrets.fr/couleurs/couleurs-gris.html\n    options = {\n        \"font_size\": 12,\n        \"node_size\": 300,\n        \"node_color\": \"white\",\n        \"edge_color\" : \"green\",\n        \"edgecolors\": \"blue\",\n        \"linewidths\": 1,\n        \"width\": 2,\n    }\n    # plt.figure(figsize=(12,8))     # pour changer la taille de la figure\n    nx.draw_networkx(mon_arbre, pos = position, **options)\n    ax = plt.gca()\n    ax.margins(0.20)\n    plt.axis(\"off\")\n    plt.show()\n    return(mon_arbre)      #on renvoie l'objet graphe networkxx au cas o\u00f9\n</pre> # utilitaire pour repr\u00e9senter les arbres binaires %matplotlib inline import networkx as nx import matplotlib.pyplot as plt  def hauteur(arbre):     if arbre is None:         return 0     else:         return 1 + max(hauteur(arbre.gauche), hauteur(arbre.droit))      def parkour(arbre, noeuds, branches, position, profondeur, pos_courante):     if arbre is not None:         noeuds.append(arbre.noeud)            # on compl\u00e8te la liste des noeuds         position[arbre.noeud] = (pos_courante,profondeur)     # ... et la liste des positions         profondeur -= 1          if arbre.gauche is not None:             branches.append((arbre.noeud, arbre.gauche.noeud))  #... et la liste des branches             parkour(arbre.gauche, noeuds, branches, position, profondeur,                      pos_courante - 2**(profondeur - 1))         if arbre.droit is not None:             branches.append((arbre.noeud, arbre.droit.noeud))             parkour(arbre.droit, noeuds, branches, position, profondeur,                      pos_courante + 2**(profondeur - 1))     return noeuds, branches, position    def repr_graph(arbre):     noeuds = []             #liste des noeuds, racines et feuilles de l'arbre     branches =[]            # liste des branches de l'arbre     profond = hauteur(arbre)        #hauteur de l'arbre     pos_courante = 2**(profond - 1)   # position de la racine (en abscisse)     position = {}                # dictionnaire des positions des noeuds sur la figure           # appel d'une fonction r\u00e9cursive de parcours, ici prefixe mais \u00e7a n'a pas d'importance     # on r\u00e9cup\u00e8re : la liste des noeuds, la liste des branches,     # le dictionnaire des positions des noeuds     noeuds, branche, position  = parkour(arbre, noeuds, branches, position, profond, pos_courante)         #print(position)      mon_arbre = nx.Graph()          # objet Graphe de la biblioth\u00e8que Networkxx     mon_arbre.add_nodes_from(noeuds)     mon_arbre.add_edges_from(branches)     #print(list(arbre.nodes))     #print(list(arbre.edges))     #Si vous voulez changer des couleurs, amusez-vous ci-dessous     #Plein de noms de couleurs l\u00e0 : http://www.letoileauxsecrets.fr/couleurs/couleurs-gris.html     options = {         \"font_size\": 12,         \"node_size\": 300,         \"node_color\": \"white\",         \"edge_color\" : \"green\",         \"edgecolors\": \"blue\",         \"linewidths\": 1,         \"width\": 2,     }     # plt.figure(figsize=(12,8))     # pour changer la taille de la figure     nx.draw_networkx(mon_arbre, pos = position, **options)     ax = plt.gca()     ax.margins(0.20)     plt.axis(\"off\")     plt.show()     return(mon_arbre)      #on renvoie l'objet graphe networkxx au cas o\u00f9  In\u00a0[8]: Copied! <pre>arbre = repr_graph(arbre_c)\n</pre> arbre = repr_graph(arbre_c) In\u00a0[\u00a0]: Copied! <pre>class ArbreB:\n    def __init__(self, valeur, gauche = None, droit = None):\n        self.noeud = valeur\n        self.gauche = gauche\n        self.droit = droit\n    def __repr__(self):\n        return str(self.noeud) +str(self.gauche).replace('None','.')+str(self.droit).replace('None','.')\n\ndef indexRacineSufx(infx, sufx, debut_infx, fin_infx):\n    \"\"\"\n    Renvoie l'index de la racine d'un sous-arbre, dont le parcours infixe est donn\u00e9 par infx[ind_debut, ind_fin]\n    Le parcours suffixe du sous_arbre n'est pas donn\u00e9 mais peut s'extraire de sufx\n    l'index est celui de la racine dans le parcours suffixe sfx\n    @param infx : liste du parcours infixe de l'arbre \n    @param sufx : liste du parcours suffixe de l'arbre \n    @param debut_infx, fin_infx : indices de d\u00e9but et de fin du sous-arbre dans le parcours infixe\n    @return ind_racine : indice de la racine du sous-arbre dans le parcours suffixe\n    \"\"\"\n    ind_racine = 0\n\n    return ind_racine\n\ndef constrArbre(infx, sufx, debut_infx, fin_infx):\n    \"\"\"\n    Construit un arbre \u00e0 partir des parcours infixe et suffixe\n    @param infx : liste des sommets de l'arbre dans le parcours infixe \n    @param sufx : liste des sommets de l'arbre dans le parcours suffixe \n    @param arbre : objet de la classe Arbre en cours de construction \n    @return arbre : arbre construit \n    \"\"\"\n    if debut_infx &gt;= fin_infx :\n        return None\n    else:\n        arbre = ArbreB(None)\n        \n        return arbre\n\ninfixe = [4, 8, 2, 5, 1, 6, 3, 7]\nsuffixe = [8, 4, 5, 2, 6, 7, 3, 1]\n\narbre = constrArbre(infixe, suffixe, 0, len(infixe))\nprint(arbre)\narbrenx = repr_graph(arbre)\n</pre> class ArbreB:     def __init__(self, valeur, gauche = None, droit = None):         self.noeud = valeur         self.gauche = gauche         self.droit = droit     def __repr__(self):         return str(self.noeud) +str(self.gauche).replace('None','.')+str(self.droit).replace('None','.')  def indexRacineSufx(infx, sufx, debut_infx, fin_infx):     \"\"\"     Renvoie l'index de la racine d'un sous-arbre, dont le parcours infixe est donn\u00e9 par infx[ind_debut, ind_fin]     Le parcours suffixe du sous_arbre n'est pas donn\u00e9 mais peut s'extraire de sufx     l'index est celui de la racine dans le parcours suffixe sfx     @param infx : liste du parcours infixe de l'arbre      @param sufx : liste du parcours suffixe de l'arbre      @param debut_infx, fin_infx : indices de d\u00e9but et de fin du sous-arbre dans le parcours infixe     @return ind_racine : indice de la racine du sous-arbre dans le parcours suffixe     \"\"\"     ind_racine = 0      return ind_racine  def constrArbre(infx, sufx, debut_infx, fin_infx):     \"\"\"     Construit un arbre \u00e0 partir des parcours infixe et suffixe     @param infx : liste des sommets de l'arbre dans le parcours infixe      @param sufx : liste des sommets de l'arbre dans le parcours suffixe      @param arbre : objet de la classe Arbre en cours de construction      @return arbre : arbre construit      \"\"\"     if debut_infx &gt;= fin_infx :         return None     else:         arbre = ArbreB(None)                  return arbre  infixe = [4, 8, 2, 5, 1, 6, 3, 7] suffixe = [8, 4, 5, 2, 6, 7, 3, 1]  arbre = constrArbre(infixe, suffixe, 0, len(infixe)) print(arbre) arbrenx = repr_graph(arbre) In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"T1_Structures_de_donnees/1.4_Arbres/tnsi_arbres/#les-arbres","title":"Les arbres\u00b6","text":""},{"location":"T1_Structures_de_donnees/1.4_Arbres/tnsi_arbres/#pour-rappel","title":"Pour rappel  :\u00b6","text":"<p>Un arbre est constitu\u00e9 :</p> <ul> <li>d'une racine, sommet de \"d\u00e9part\" de l'arbre ;</li> <li>de noeuds, sommets interm\u00e9diaires de l'arbre ;</li> <li>de feuilles, sommets \"finaux\" de l'arbre ;</li> <li>et de branches, qui relient les \u00e9l\u00e9ments pr\u00e9c\u00e9dents entre eux.</li> </ul> <p></p>"},{"location":"T1_Structures_de_donnees/1.4_Arbres/tnsi_arbres/#algorithmes-sur-les-arbres-binaires","title":"Algorithmes sur les arbres binaires\u00b6","text":"<p>On donne l'impl\u00e9mentation suivante de la structure de donn\u00e9es \"arbre\".</p>"},{"location":"T1_Structures_de_donnees/1.4_Arbres/tnsi_arbres/#methodes-et-fonctions-de-base","title":"M\u00e9thodes et fonctions de base\u00b6","text":"<ol> <li>Construire l'arbre donn\u00e9 : </li> </ol>"},{"location":"T1_Structures_de_donnees/1.4_Arbres/tnsi_arbres/#parcours","title":"Parcours\u00b6","text":""},{"location":"T1_Structures_de_donnees/1.4_Arbres/tnsi_arbres/#en-profondeur","title":"En profondeur\u00b6","text":"<p>Prenez le temps de comprendre la fonction de parcours pr\u00e9fixe puis ecrire les deux fonctions de parcours infixe et suffixe d'un arbre. On affichera le parcours dans un premier temps. Dans un deuxi\u00e8me temps, on renverra le parcours dans un tableau dynamique Python.</p>"},{"location":"T1_Structures_de_donnees/1.4_Arbres/tnsi_arbres/#en-largeur","title":"En largeur\u00b6","text":"<p>Appliquer l'algorithme du cours pour donner le parcours en largeur d'un arbre.</p>"},{"location":"T1_Structures_de_donnees/1.4_Arbres/tnsi_arbres/#un-utilitaire-pour-la-suite-du-notebook","title":"Un utilitaire pour la suite du notebook\u00b6","text":"<p>L'utilitaire suivant permet de tracer des arbres binaires</p>"},{"location":"T1_Structures_de_donnees/1.4_Arbres/tnsi_arbres/#exercice-reconstruction-dun-arbre","title":"Exercice : reconstruction d'un arbre\u00b6","text":"<p>Avec la d\u00e9forestation massive, il est important de savoir reconstruire les arbres (d\u00e9sol\u00e9...). Le but de cet exercice est de reconstruire un arbre connaissant son parcours infixe et son parcours suffixe. Exemple : Le parcours infixe d'un arbre est <code>[4, 8, 2, 5, 1, 6, 3, 7]</code> le parcours suffixe de ce m\u00eame arbre est <code>[8, 4, 5, 2, 6, 7, 3, 1]</code> L'arbre correspondant est: M\u00e9thode :</p> <ol> <li>Que repr\u00e9sente le dernier noeud dans le parcours suffixe ?</li> <li>O\u00f9 sont situ\u00e9s dans l'arbre les noeuds pr\u00e9sents avant le noeud 1, dans le parcours infixe ? Idem avec ceux qui sont apr\u00e8s.</li> <li>It\u00e9rer le processus, v\u00e9rifier \"\u00e0 la main\" que l'on obtient bien l'arbre ci-dessus.</li> </ol> <p>Ecrire une fonction (r\u00e9cursive a priori) <code>constrArbre(infx, sufx, arbre)</code> qui impl\u00e9mente cette m\u00e9thode. La fonction renverra un objet Arbre. On supposera que les parcours infixe et suffixe sont coh\u00e9rents. On pourra s'aider des sp\u00e9cifications suivantes.</p>"},{"location":"T1_Structures_de_donnees/1.4_Dictionnaires/cours/","title":"Dictionnaires","text":"<p>Pr\u00e9ambule : retour sur le cours de Premi\u00e8re.</p>"},{"location":"T1_Structures_de_donnees/1.4_Dictionnaires/cours/#0-notion-de-tableau-associatif","title":"0. Notion de tableau associatif","text":"<p>Un tableau associatif est un type abstrait de donn\u00e9es (au m\u00eame titre que les listes, piles, files, vues pr\u00e9c\u00e9demment). Ce type abstrait de donn\u00e9es a la particularit\u00e9 de ne pas \u00eatre totalement lin\u00e9aire (ou \u00abplat\u00bb) puisqu'il associe des valeurs \u00e0 des cl\u00e9s.  </p> <p>Il est habituellement muni des op\u00e9rations suivantes :</p> <ul> <li>ajout d'une nouvelle valeur associ\u00e9e \u00e0 une nouvelle cl\u00e9 (on parlera de nouveau couple cl\u00e9-valeur)</li> <li>modification d'une valeur associ\u00e9e \u00e0 une cl\u00e9 existante</li> <li>suppression d'un couple cl\u00e9-valeur</li> <li>r\u00e9cup\u00e9ration de la valeur associ\u00e9e \u00e0 une cl\u00e9 donn\u00e9e.</li> </ul> <p>Un r\u00e9pertoire t\u00e9l\u00e9phonique est un exemple de tableau associatif :</p> <ul> <li>les cl\u00e9s sont les noms</li> <li>les valeurs sont les num\u00e9ros de t\u00e9l\u00e9phone</li> </ul> <p>En Python, le dictionnaire est une structure native de tableau associatif.</p>"},{"location":"T1_Structures_de_donnees/1.4_Dictionnaires/cours/#1-dictionnaire-et-temps-dacces-aux-donnees","title":"1. Dictionnaire et temps d'acc\u00e8s aux donn\u00e9es","text":"<p>TP : protocole de test pour comparer les temps d'acc\u00e8s aux donn\u00e9es.</p> <p>Indication : on utilisera la fonction <code>time.time()</code> (apr\u00e8s avoir import\u00e9 le module <code>time</code>) qui donne le nombre de secondes (\u00e0 \\(10^{-7}\\) pr\u00e8s) \u00e9coul\u00e9es depuis le 01 janvier 1970 \u00e0 00h00 (appel\u00e9e Heure Unix ou Temps Posix). \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; import time\n&gt;&gt;&gt; time.time()\n1639001177.0923798\n</code></pre></p>"},{"location":"T1_Structures_de_donnees/1.4_Dictionnaires/cours/#11-preparation-des-mesures","title":"1.1 Pr\u00e9paration des mesures","text":"<p>Consid\u00e9rons deux fonctions <code>fabrique_liste()</code> et <code>fabrique_dict()</code> capables de fabriquer respectivement des listes et des dictionnaires de taille donn\u00e9e en param\u00e8tre.</p> \ud83d\udc0d Script Python<pre><code>def fabrique_liste(nb):\n    lst = [k**2 for k in range(nb)]\n    return lst\n\ndef fabrique_dict(nb):\n    dct = {}\n    for k in fabrique_liste(nb):\n        dct[k] = 42\n    return dct\n</code></pre> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; lst = fabrique_liste(10)\n&gt;&gt;&gt; dct = fabrique_dict(10)\n&gt;&gt;&gt; lst\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n&gt;&gt;&gt; dct\n{0: 42, 1: 42, 4: 42, 9: 42, 16: 42, 25: 42, 36: 42, 49: 42, 64: 42, 81: 42}\n</code></pre> <p>Le contenu de ces listes ou dictionnaires n'a pas grand int\u00e9r\u00eat. Dans nos mesures, on y cherchera une valeur qui n'y figure pas : la cha\u00eene de caract\u00e8res <code>\"a\"</code>. On dit qu'on se place dans le pire des cas.</p>"},{"location":"T1_Structures_de_donnees/1.4_Dictionnaires/cours/#12-mesures-des-temps-de-recherche","title":"1.2 Mesures des temps de recherche","text":""},{"location":"T1_Structures_de_donnees/1.4_Dictionnaires/cours/#121-temps-de-recherche-pour-les-listes","title":"1.2.1 Temps de recherche pour les listes","text":"<ul> <li>avec 10 valeurs :</li> </ul> \ud83d\udc0d Script Python<pre><code>lst = fabrique_liste(10)\n</code></pre> \ud83d\udc0d Script Python<pre><code>%timeit \"a\" in lst\n</code></pre> \ud83d\udccb Texte<pre><code>138 ns \u00b1 0.054 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000000 loops each)\n</code></pre> <p>Nous sommes donc \u00e0 l'ordre de grandeur \\(100 \\times 10^{-9}\\), soit \\(10^{-7}\\) secondes.</p> <ul> <li>avec 100 valeurs :</li> </ul> \ud83d\udc0d Script Python<pre><code>lst = fabrique_liste(100)\n</code></pre> \ud83d\udc0d Script Python<pre><code>%timeit \"a\" in lst\n</code></pre> \ud83d\udccb Texte<pre><code>1.11 \u00b5s \u00b1 1.54 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n</code></pre> <p>Nous sommes donc \u00e0 l'ordre de grandeur \\(1 \\times 10^{-6}\\), soit \\(10^{-6}\\) secondes.</p> <ul> <li>avec 1000 valeurs :</li> </ul> \ud83d\udc0d Script Python<pre><code>lst = fabrique_liste(1000)\n</code></pre> \ud83d\udc0d Script Python<pre><code>%timeit \"a\" in lst\n</code></pre> \ud83d\udccb Texte<pre><code>11.2 \u00b5s \u00b1 41.8 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n</code></pre> <p>Nous sommes donc \u00e0 l'ordre de grandeur \\(10 \\times 10^{-6}\\), soit \\(10^{-5}\\) secondes.</p> <p>Conclusion : le temps de recherche d'une valeur dans une liste est directement proportionnel \u00e0 la longueur de cette liste. On dit qu'il est lin\u00e9aire, ou bien qu'il est en \\(O(n)\\).</p>"},{"location":"T1_Structures_de_donnees/1.4_Dictionnaires/cours/#122-temps-de-recherche-pour-les-dictionnaires","title":"1.2.2 Temps de recherche pour les dictionnaires","text":"<p>On va rechercher si <code>\"a\"</code> est une cl\u00e9 valide pour notre dictionnaire.</p> <ul> <li>avec 10 valeurs :</li> </ul> \ud83d\udc0d Script Python<pre><code>dct = fabrique_dict(10)\n</code></pre> \ud83d\udc0d Script Python<pre><code>%timeit \"a\" in dct\n</code></pre> \ud83d\udccb Texte<pre><code>31.2 ns \u00b1 0.221 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000000 loops each)\n</code></pre> <p>Nous sommes donc \u00e0 l'ordre de grandeur \\(10 \\times 10^{-9}\\), soit \\(10^{-8}\\) secondes.</p> <ul> <li>avec 100 valeurs :</li> </ul> \ud83d\udc0d Script Python<pre><code>dct = fabrique_dict(100)\n</code></pre> \ud83d\udc0d Script Python<pre><code>%timeit \"a\" in dct\n</code></pre> \ud83d\udccb Texte<pre><code>31.2 ns \u00b1 0.233 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000000 loops each)\n</code></pre> <p>Nous sommes donc toujours \u00e0 l'ordre de grandeur \\(10 \\times 10^{-9}\\), soit \\(10^{-8}\\) secondes.</p> <ul> <li>avec 10000 valeurs :</li> </ul> \ud83d\udc0d Script Python<pre><code>dct = fabrique_dict(10000)\n</code></pre> \ud83d\udc0d Script Python<pre><code>%timeit \"a\" in dct\n</code></pre> \ud83d\udccb Texte<pre><code>33.9 ns \u00b1 0.168 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000000 loops each)\n</code></pre> <p>On retrouve avec 10000 valeurs le m\u00eame temps de recherche qu'avec 10 valeurs.</p> <p>On remarque donc que le temps moyen est remarquablement constant. Il ne d\u00e9pend pas du nombre d'\u00e9l\u00e9ments du dictionnaire dans lequel on cherche. On dit qu'il est en \\(O(1)\\).</p> <p>Temps de recherche </p> <p>Il y a donc une diff\u00e9rence fondamentale \u00e0 conna\u00eetre entre les temps de recherche d'un \u00e9l\u00e9ments \u00e0 l'int\u00e9rieur :</p> <ul> <li>d'une liste : temps proportionnel \u00e0 la taille de la liste.</li> <li>d'un dictionnaire : temps constant, ind\u00e9pendant de la taille de la liste.</li> </ul> <p>Attention : en ce qui concerne les temps d'acc\u00e8s \u00e0 un \u00e9l\u00e9ment, la structure de tableau dynamique des listes de Python fait que ce temps d'acc\u00e8s est aussi en temps constant (comme pour les dictionnaires). On voit alors que les listes Python ne sont pas des listes cha\u00een\u00e9es, o\u00f9 le temps d'acc\u00e8s \u00e0 un \u00e9l\u00e9ment est directement proportionnel \u00e0 la position de cet \u00e9l\u00e9ment dans la liste.</p>"},{"location":"T1_Structures_de_donnees/1.4_Dictionnaires/cours/#13-fonctions-de-hachage-hors-programme","title":"1.3 Fonctions de hachage  (hors-programme)","text":"<p>Tout ce qui suit est hors-programme de Terminale, mais permet de comprendre comment Python arrive \u00e0 faire de la recherche en temps constant quelle que soit la taille du dictionnaire.</p> <p>Il est important de se rappeler qu'un dictionnaire n'est pas ordonn\u00e9 (contrairement \u00e0 l'objet \u00abdictionnaire\u00bb de la vie courante, o\u00f9 chaque mot est class\u00e9 suivant l'ordre alphab\u00e9tique). </p> <p>On n'acc\u00e8de pas \u00e0 une valeur suivant sa position, mais suivant sa cl\u00e9.</p> <p>Dans une liste, lorsqu'on veut savoir si un \u00e9l\u00e9ment appartient \u00e0 une liste (probl\u00e8me de la recherche d'\u00e9l\u00e9ment), il n'y a pas (dans le cas g\u00e9n\u00e9ral) de meilleure m\u00e9thode que le parcours exhaustif de tous les \u00e9l\u00e9ments de la liste jusqu'\u00e0 (\u00e9ventuellement) trouver la valeur cherch\u00e9e.</p> <p>Dans un dictionnaire, on pourrait s'imaginer qu'il va falloir parcourir toutes les cl\u00e9s et regarder les valeurs correspondantes. Il n'en est rien. Pour comprendre cela nous allons faire un petit d\u00e9tour par les fonctions de hachage.</p> <p>Les fonctions de hachage </p> <p>Lorsque vous t\u00e9l\u00e9chargez un fichier important et que vous souhaitez v\u00e9rifier qu'il n'a pas \u00e9t\u00e9 corrompu lors du t\u00e9l\u00e9chargement (ou avant), vous avez parfois la possibilit\u00e9 de v\u00e9rifier l'int\u00e9grit\u00e9 de votre fichier t\u00e9l\u00e9charg\u00e9, en calculant une \u00abempreinte\u00bb de votre fichier et en la comparant avec celle que vous \u00eates cens\u00e9e obtenir :</p> <p>Voil\u00e0 par exemple ce qui appara\u00eet sur la page de t\u00e9l\u00e9chargement d'une iso d'ubuntu 18.04 : </p> <p>La cl\u00e9 MD5 propos\u00e9e pour chaque fichier est le r\u00e9sultat ce que doit donner le fichier (ici une iso d'environ 1,9 Go) lorsqu'il est \u00abhach\u00e9\u00bb par la fonction MD5. Dans notre cas, si nous t\u00e9l\u00e9chargeons  <code>ubuntu-18.04.3-desktop-amd64.iso</code>, nous devons calculer l'empreinte du fichier t\u00e9l\u00e9charg\u00e9 et v\u00e9rifier que nous obtenons bien <code>72491db7ef6f3cd4b085b9fe1f232345</code> :</p> <p>Essayons :</p> <p></p> <p>La cl\u00e9 calcul\u00e9e sur l'ordinateur correspond bien \u00e0 celle indiqu\u00e9e sur le site de t\u00e9l\u00e9chargement : le fichier est int\u00e8gre.</p> <p>Que fait la fonction de hachage MD5 ?</p> <p></p> <p>Quelle que soit la taille du fichier donn\u00e9 en entr\u00e9e, la fonction MD5 va le r\u00e9duire \u00e0 un mot de 128 bits. Ce mot binaire de 128 bits est repr\u00e9sent\u00e9 par une cha\u00eene de 32 caract\u00e8res (en hexad\u00e9cimal, de 0 \u00e0 f). Il y a donc \\(2^{128}\\) (de l'ordre de \\(10^{39}\\)) empreintes MD5 diff\u00e9rentes, ce qui rend quasiment impossible le fait d'avoir un mauvais fichier qui donnerait (par un tr\u00e8s tr\u00e8s mauvais hasard) la bonne empreinte.</p> <p>Le m\u00e9canisme effectif de calcul de la fonction MD5 est tr\u00e8s complexe : une explication en est donn\u00e9e ici.</p> <p>Il est \u00e9videmment impossible de revenir en arri\u00e8re et de recr\u00e9er le fichier original \u00e0 partir de l'empreinte MD5. Dans le cas contraire, cela voudrait dire qu'on est capable de compresser sans perte un fichier de 1,9 Go en une cha\u00eene de 128 bits. Cette impossibilit\u00e9 de trouver une fonction r\u00e9ciproque \u00e0 la fonction de hachage est tr\u00e8s importante en cryptographie.</p> <p>En effet, les simples cha\u00eenes de caract\u00e8res peuvent aussi \u00eatre transform\u00e9es par une fonction de hachage : </p> <p></p> <p>Quel est l'int\u00e9r\u00eat de hacher une cha\u00eene de caract\u00e8re ? La conservation des mots de passe !</p> <p>Stockage des mots de passe sur un serveur</p> <p>Les sites qui n\u00e9cessitent une authentification par login / mot de passe ne conservent pas en clair les mots de passe sur leur serveur. La moindre compromission de leur serveur serait en effet dramatique. Ce qui est conserv\u00e9 est l'empreinte du mot de passe apr\u00e8s son passage par une fonction de hachage. Par exemple, un site o\u00f9 notre mot de passe serait <code>vive la NSI</code> conserverait dans ses bases de donn\u00e9es l'empreinte <code>e74fb2f94c052bbf16cea4a795145e35</code>. \u00c0 chaque saisie du mot de passe c\u00f4t\u00e9 client, l'empreinte est recalcul\u00e9e (toujours c\u00f4t\u00e9 client, afin de ne pas faire transiter le mot de passe en clair), puis compar\u00e9e au niveau du serveur avec l'empreinte stock\u00e9e.  De cette fa\u00e7on, si les communications entre le client et le serveur sont intercept\u00e9es, ou bien si le serveur est compromis, le non-r\u00e9versibilit\u00e9 de la fonction de hachage assure que le mot de passe ne peut pas \u00eatre retrouv\u00e9 par les attaquants.</p> <p>Non-r\u00e9versibilit\u00e9 de la fonction de hachage, vraiment ? </p> <p>Prenons l'empreinte MD5 <code>bdc87b9c894da5168059e00ebffb9077</code> et allons fureter du c\u00f4t\u00e9 de (par exemple) https://md5.gromweb.com/</p> <p>Notre empreinte ne r\u00e9siste pas bien longtemps... Re-essayons alors avec l'empreinte  <code>e74fb2f94c052bbf16cea4a795145e35</code>.</p> <p>Les empreintes des mots de passe les plus fr\u00e9quents sont stock\u00e9es dans des tables (qu'on appelle rainbow tables ou tables arc-en-ciel) qui rendent possibles le d\u00e9chiffrage de ces empreintes.</p> <p>Pour contrer cela, les cryptographes rajoutent des caract\u00e8res avant hachage (le sel), et choisissent surtout des bonnes fonctions de hachage. MD5 et SHA-1 ne sont plus utilis\u00e9es, on pr\u00e9f\u00e8re maintenant SHA-256 (voir ici).</p>"},{"location":"T1_Structures_de_donnees/1.4_Dictionnaires/cours/#14-retour-aux-dictionnaires","title":"1.4 Retour aux dictionnaires","text":"<p>En quoi les fonctions de hachage ont-elles un r\u00f4le \u00e0 jouer dans l'impl\u00e9mentation d'un dictionnaire ?  </p> <p>L'id\u00e9e essentielle est que chaque cl\u00e9 est hach\u00e9e pour donner une empreinte unique, qui est ensuite transform\u00e9e en un indice de positionnement dans un tableau.</p> <p>Le dictionnaire :</p> \ud83d\udc0d Script Python<pre><code>d = {\"pommes\":3, \"poires\":0, \"bananes\":5}\n</code></pre> <p>serait donc par exemple impl\u00e9ment\u00e9 dans un tableau comme celui-ci :</p> <p></p> <p>On peut remarquer que ce tableau laisse beaucoup de cases vides (pour plus de renseignements, voir https://www.jessicayung.com/how-python-implements-dictionaries/ )</p> <p>Si je souhaite ensuite acc\u00e9der \u00e0 l'\u00e9l\u00e9ment <code>d[\"kiwis\"]</code> :</p> <ul> <li>le hash de la cha\u00eene <code>\"kiwis\"</code> est calcul\u00e9. Par exemple, <code>4512d2202</code>.</li> <li>l'indice de la position (\u00e9ventuelle) de la cl\u00e9 <code>\"kiwis\"</code> dans mon dictionnaire est calcul\u00e9 \u00e0 partir de ce hash <code>4512d2202</code>. Dans notre exemple, cela pourrait donner l'indice 3.</li> <li>Python acc\u00e8de directement \u00e0 cet indice du tableau :<ul> <li>si la valeur de la cl\u00e9 sur cette ligne du tableau est None, cela signifie que <code>\"kiwis\"</code> n'est pas une cl\u00e9 existante du tableau. C'est notre cas ici car il n'y a rien \u00e0 la ligne 3.</li> <li>si la valeur de la cl\u00e9 sur cette ligne du tableau est bien <code>\"kiwis\"</code>, la valeur correspondante est renvoy\u00e9e.</li> </ul> </li> </ul> <p>En r\u00e9sum\u00e9, Python sait toujours o\u00f9 aller chercher un \u00e9l\u00e9ment de son dictionnaire : soit il le trouve \u00e0 l'endroit calcul\u00e9, soit il n'y a rien \u00e0 cet endroit calcul\u00e9, ce qui veut dire que l'\u00e9l\u00e9ment ne fait pas partie du dictionnaire. </p> <p>Par ce m\u00e9canisme, l'acc\u00e8s \u00e0 un \u00e9l\u00e9ment du dictionnaire se fait toujours en temps constant.</p> <p>Il existe une mani\u00e8re de \u00abvoir\u00bb que Python utilise une fonction de hachage pour impl\u00e9menter un dictionnaire :</p> \ud83d\udc0d Script Python<pre><code>mondico = {}\n\n# un nombre peut-il \u00eatre une cl\u00e9?\nmondico[4] = \"foo\"\n\n# une cha\u00eene de caract\u00e8res peut-elle \u00eatre une cl\u00e9 ?\nmondico[\"riri\"] = \"fifi\"\n\n# une liste peut-elle \u00eatre une cl\u00e9 ?\nmondico[[2,5]] = \"loulou\"\n</code></pre> \ud83d\udccb Texte<pre><code>---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\n&lt;ipython-input-1-585560b5c422&gt; in &lt;module&gt;\n      8 \n      9 # une liste peut-elle \u00eatre une cl\u00e9 ?\n- 10 mondico[[2,5]] = \"loulou\"\n\n\nTypeError: unhashable type: 'list'\n</code></pre> <p>Le message d'erreur est explicite : le type <code>list</code> que nous avons voulu utiliser comme cl\u00e9 n'est pas hachable, car c'est un type d'objet pouvant \u00eatre modifi\u00e9 a posteriori tout en gardant la m\u00eame r\u00e9f\u00e9rence (on dit que c'est un objet mutable):</p> \ud83d\udc0d Script Python<pre><code>a = [3, 6, 8]\nprint(id(a))\na.append(12)\nprint(id(a))\n</code></pre> \ud83d\udccb Texte<pre><code>139646950377032\n139646950377032\n</code></pre> <p>Ce changement de valeur tout en gardant la m\u00eame r\u00e9f\u00e9rence d\u00e9truirait le principe associant \u00e0 une cl\u00e9 unique une position unique dans le tableau impl\u00e9mentant le dictionnaire.</p> <p>Ce probl\u00e8me ne se pose pas si la variable d\u00e9signe une cha\u00eene de caract\u00e8res, ou un nombre :</p> \ud83d\udc0d Script Python<pre><code>a = 2020\nprint(id(a))\na += 1\nprint(id(a))\n</code></pre> \ud83d\udccb Texte<pre><code>139646916523440\n139646916523504\n</code></pre> <p>Un variable contenant un entier est donc un objet immuable car si on modifie la valeur de l'entier, la r\u00e9f\u00e9rence de la variable changera aussi. Comme un dictionnaire a besoin d'avoir des cl\u00e9s dont les r\u00e9f\u00e9rences soient d\u00e9finitives, seuls les objets immuables peuvent donc servir de cl\u00e9s dans les dictionnaires.</p>"},{"location":"T1_Structures_de_donnees/1.4_Dictionnaires/exercices/","title":"Exercices","text":"<p>Entrainement</p> <p>Pour s'entra\u00eener avec les dictionnaires, c'est ici</p> <p>Cr\u00e9ation d'une rainbow table </p> ObjectifCorrection <p>Cr\u00e9er une fonction <code>inverse_md5()</code> qui va chercher dans un dictionnaire (construit pr\u00e9alablement) le mot correspondant au hash donn\u00e9 en param\u00e8tre.</p> <p>Exemple :  \ud83d\udccb Texte<pre><code>&gt;&gt;&gt; inverse_md5('0571749e2ac330a7455809c6b0e7af90')\n&gt;&gt;&gt; 'sunshine'\n</code></pre></p> <p>Aide :</p> <ul> <li>liste de 1000 mots de passe fr\u00e9quents : ici</li> <li>comment lire / convertir le contenu d'un fichier dans une liste de <code>string</code> : \ud83d\udc0d Script Python<pre><code>lst = open(\"monfichier.txt\").read().splitlines()\n</code></pre></li> <li>comment calculer du MD5 en Python :  \ud83d\udc0d Script Python<pre><code>import hashlib\nresult = hashlib.md5('azerty'.encode())\nprint(result.hexdigest())\n</code></pre></li> </ul> \ud83d\udc0d Script Python<pre><code>import hashlib\n\ndef inverse_md5(h, dico) :\n    \"\"\"\n    fonction qui va chercher dans un dictionnaire pass\u00e9 en param\u00e8tre\n    le mot correspondant au hash donn\u00e9 en param\u00e8tre.\n    &gt;&gt;&gt; inverse_md5('0571749e2ac330a7455809c6b0e7af90')\n    &gt;&gt;&gt; 'sunshine'\n    @param entree : h : chaine de caract\u00e8re : hash du mdp \u00e0 rechercher\n                    dico : dictionnaire de correspondance hash/mdp\n    @param sortie : chaine de caract\u00e8re : un mot de passe\n    \"\"\"\n    return  dico[h]\n\ndef contruct_dico():\n    dico = {}\n    lst = open(\"extraitrockyou.txt\").read().splitlines()\n    for elt in lst:\n        h = hashlib.md5(elt.encode())\n        dico[h.hexdigest()] = elt\n\n    return dico\n\ndico = contruct_dico()\nprint(inverse_md5('48238b7f2aa5f76a1d1e119f8942ebe7', dico))\n</code></pre>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/TP_Labyrinthe/","title":"R\u00e9solution d'un labyrinthe","text":""},{"location":"T1_Structures_de_donnees/1.5_Graphes/TP_Labyrinthe/#1-presentation-du-probleme","title":"1. Pr\u00e9sentation du probl\u00e8me","text":"<p>Consid\u00e9rons le labyrinthe suivant : </p> <p>Affectons une lettre \u00e0 chaque case de ce labyrinthe.</p> <p></p> <p>Notre objectif est de trouver comment aller de A en P.</p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/TP_Labyrinthe/#2-modelisation-par-un-graphe","title":"2. Mod\u00e9lisation par un graphe","text":"<p>Dessiner le graphe (dont les noeuds seront des lettres) qui mod\u00e9lise ce labyrinthe.</p> <p>Proposer deux \u00abformes\u00bb possibles pour ce graphe.</p> Correction <p></p> <p></p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/TP_Labyrinthe/#3-implementation-du-graphe-en-python","title":"3. Impl\u00e9mentation du graphe en Python","text":"<p>En utilisant la classe <code>Graphe</code> cr\u00e9\u00e9e en cours, impl\u00e9menter le graphe de ce labyrinthe.</p> Correction \ud83d\udc0d Script Python<pre><code>class Graphe:\n    def __init__(self, liste_sommets):\n        self.liste_sommets = liste_sommets\n        self.adjacents = {sommet : [] for sommet in liste_sommets}\n\n    def ajoute_arete(self, sommetA, sommetB):\n        self.adjacents[sommetA].append(sommetB)\n        self.adjacents[sommetB].append(sommetA)\n\n    def voisins(self, sommet):\n        return self.adjacents[sommet]\n\n    def sont_voisins(self, sommetA, sommetB):\n        return sommetB in self.adjacents[sommetA]\n\ng = Graphe(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P'])\ng.ajoute_arete('A', 'E')\ng.ajoute_arete('E', 'F')\ng.ajoute_arete('F', 'B')\ng.ajoute_arete('B', 'C')\ng.ajoute_arete('C', 'G')\ng.ajoute_arete('G', 'H')\ng.ajoute_arete('H', 'D')\ng.ajoute_arete('G', 'K')\ng.ajoute_arete('F', 'J')\ng.ajoute_arete('J', 'I')\ng.ajoute_arete('I', 'M')\ng.ajoute_arete('M', 'N')\ng.ajoute_arete('N', 'O')\ng.ajoute_arete('O', 'K')\ng.ajoute_arete('K', 'L')\ng.ajoute_arete('L', 'P')\n</code></pre>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/TP_Labyrinthe/#4-recherche-du-plus-court-chemin","title":"4. Recherche du plus court chemin","text":"<p>En utilisant la fonction <code>recherche_chemin</code> du cours, \u00e9tablir le plus court chemin pour aller de A vers P dans ce labyrinthe.</p> Correction \ud83d\udc0d Script Python<pre><code>def recherche_chemin(g, depart, arrivee):\n    '''\n    Parcours en largeur du graphe g en partant du sommet depart,\n    qui s'arr\u00eate d\u00e8s que le sommet arrivee est atteint.\n    Renvoie alors le chemin du depart vers arrivee.\n    '''\n    traites = []\n    decouverts = [depart]\n    en_attente = [depart]\n    parent = {}\n    while en_attente != [] :\n        sommet = en_attente.pop(0)\n        voisins = g.voisins(sommet)\n        for voisin in voisins:\n            if voisin not in decouverts:\n                decouverts.append(voisin)\n                en_attente.append(voisin)\n                parent[voisin] = sommet\n                if voisin == arrivee:\n                    return remonte_chemin(depart, arrivee, parent)\n        traites.append(sommet)\n    return \"non trouv\u00e9\"  \n\n\ndef remonte_chemin(depart, arrivee, parent):\n    sommet = arrivee\n    chemin = arrivee\n    while sommet != depart:\n        sommet = parent[sommet]\n        chemin = sommet + chemin\n    return chemin\n</code></pre> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche_chemin(g, 'A', 'P')\n'AEFBCGKLP'\n</code></pre>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/TP_Labyrinthe/#5-conclusion","title":"5. Conclusion","text":"<p>Sur un labyrinthe un peu plus imposant, voici l'illustration de notre m\u00e9thode de r\u00e9solution :</p> <p> </p> <ul> <li>le parcours en largeur part d\u00e9couvrir les cases dans toutes les directions.</li> <li>lorsque la case cherch\u00e9e (ici, la rouge) est trouv\u00e9e, on remonte \u00e0 chaque case pr\u00e9c\u00e9dente gr\u00e2ce au dictionnaire <code>parent</code>, et ainsi le chemin de sortie du labyrinthe est g\u00e9n\u00e9r\u00e9. </li> </ul> <p>Code de cette animation (en Pygame)</p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/TP_Labyrinthe/#6-annexe-et-pourquoi-pas-en-dfs","title":"6. Annexe : et pourquoi pas en DFS ?","text":"<p>Les parcours BFS et DFS ont tous deux la propri\u00e9t\u00e9 de parcourir la totalit\u00e9 du graphe (ils sont m\u00eame con\u00e7us pour cela). Cela a permis au parcours BFS de nous fournir une solution au labyrinthe (dont on a d\u00e9montr\u00e9 qu'elle \u00e9tait la plus courte).</p> <p>Que penser de solution qui sera donn\u00e9e par le DFS ?</p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/TP_Labyrinthe/#61-dans-un-labyrinthe-parfait","title":"6.1 Dans un labyrinthe parfait","text":"<p>Voici un code o\u00f9 la solution est d'abord recherch\u00e9e par BFS (cases explor\u00e9es en bleu clair, chemin trouv\u00e9 marqu\u00e9 en bleu), puis en DFS (cases explor\u00e9es en rose, chemin trouv\u00e9 marqu\u00e9 en rouge).</p> <p>anim_laby_DFSvsBFS_laby_parfait.py </p> <p>Que remarquez-vous ???</p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/TP_Labyrinthe/#62-dans-un-labyrinthe-non-parfait","title":"6.2 Dans un labyrinthe non parfait","text":"<p>Changeons de code pour un labyrinthe d\u00e9g\u00e9n\u00e9r\u00e9 :</p> <p>anim_laby_DFSvsBFS_laby_degenere.py </p> <p>Que remarquez-vous ???</p> Explications <p>Notre labyrinthe con\u00e7u de mani\u00e8re al\u00e9atoire poss\u00e8de une propri\u00e9t\u00e9 remarquable (d\u00fb son algorithme de construction) : chaque case peut \u00eatre reli\u00e9e \u00e0 une autre par un chemin unique. On dit de ces labyrinthes qu'ils sont parfaits.</p> <p>Donc, dans notre code du 6.1 (labyrinthe parfait), le DFS va lui aussi trouver le chemin le plus court... puisqu'il y en a qu'un seul ! De plus, la m\u00e9thode d'exploration en profondeur va de plus rendre le DFS plus rapide que le BFS, quasiment tout le temps. Ce qui fait que pour un labyrinthe parfait, le DFS est plus int\u00e9ressant que le BFS.</p> <p>Mais si le labyrinthe n'est plus parfait (code du 6.2), le DFS va trouver une solution qui ne sera pas obligatoirement la meilleure... S'il y a plusieurs solutions possibles, absolument rien ne garantit que la premi\u00e8re solution trouv\u00e9e par le DFS (sur laquelle il s'arr\u00eatera) sera la meilleure !</p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/cours/","title":"Graphes","text":"<p>Cr\u00e9dit</p> <p>Ce cours est int\u00e9gralement inspir\u00e9 du cours de C\u00e9dric Gouygou , du lyc\u00e9e Marguerite de Valois d'Angoul\u00eame (16) puis relu et mis en page par Gilles Lassus, acad\u00e9mie de bordeaux</p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/cours/#introduction","title":"Introduction","text":"<p>selon l'id\u00e9e de Fabrice Nativel</p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/cours/#le-probleme-des-ponts-de-konigsberg","title":"Le probl\u00e8me des ponts de K\u00f6nigsberg","text":"<p>Voici une illustration du probl\u00e8me des septs points de K\u00f6nigsberg extrait de la vid\u00e9o pr\u00e9c\u00e9dente : </p> <p>On rappelle que le but du probl\u00e8me est de trouver un chemin qui permet de passer une seule et unique fois par chaque pont de la ville.</p> <ol> <li>Faire quelques essais, que penser de ce probl\u00e8me ?</li> <li>Vers les graphes</li> </ol> <p>On divise la ville en quatre zones not\u00e9es N (nord de la ville), S (sud de la ville), I (\u00eele centrale) et E (est de la ville) comme illustr\u00e9 ci-dessous. Faire un sch\u00e9ma en repr\u00e9sentant chaque zone par un rond et un pont par un lien entre ces zones.</p> <p></p> Correction <p>Vous devriez obtenir un sch\u00e9ma similaire \u00e0  :</p> <p></p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/cours/#1-notion-de-graphe-et-vocabulaire","title":"1. Notion de graphe et vocabulaire","text":"<p>Le concept de graphe permet de r\u00e9soudre de nombreux probl\u00e8mes en math\u00e9matiques comme en informatique. C'est un outil de repr\u00e9sentation tr\u00e8s courant, et nous l'avons d\u00e9j\u00e0 rencontr\u00e9 \u00e0 plusieurs reprises, en particulier lors de l'\u00e9tude de r\u00e9seaux.</p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/cours/#11-exemples-de-situations","title":"1.1 Exemples de situations","text":""},{"location":"T1_Structures_de_donnees/1.5_Graphes/cours/#111-reseau-informatique","title":"1.1.1 R\u00e9seau informatique","text":""},{"location":"T1_Structures_de_donnees/1.5_Graphes/cours/#112-reseau-de-transport","title":"1.1.2 R\u00e9seau de transport","text":""},{"location":"T1_Structures_de_donnees/1.5_Graphes/cours/#113-reseau-social","title":"1.1.3 R\u00e9seau social","text":""},{"location":"T1_Structures_de_donnees/1.5_Graphes/cours/#114-generalisation","title":"1.1.4 G\u00e9n\u00e9ralisation","text":"<p>Une multitude de probl\u00e8mes concrets d'origines tr\u00e8s diverses peuvent donner lieu \u00e0 des mod\u00e9lisations par des graphes : c'est donc une structure essentielle en sciences, qui requiert un formalisme math\u00e9matique particulier que nous allons d\u00e9couvrir.   </p> <p>L'\u00e9tude de la th\u00e9orie des graphes est un champ tr\u00e8s vaste des math\u00e9matiques : nous allons surtout nous int\u00e9resser \u00e0 l'impl\u00e9mentation en Python d'un graphe et \u00e0 diff\u00e9rents probl\u00e8mes algorithmiques qui se posent dans les graphes.</p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/cours/#12-vocabulaire","title":"1.2 Vocabulaire","text":"<p>En g\u00e9n\u00e9ral, un graphe est un ensemble d'objets, appel\u00e9s sommets ou parfois n\u0153uds (vertex or nodes en anglais) reli\u00e9s par des ar\u00eates ou arcs ((edges en anglais)). Ce graphe peut \u00eatre non-orient\u00e9 ou orient\u00e9 .</p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/cours/#121-graphe-non-oriente","title":"1.2.1 Graphe non-orient\u00e9","text":"<p>Dans un graphe non-orient\u00e9, les ar\u00eates peuvent \u00eatre emprunt\u00e9es dans les deux sens, et une cha\u00eene est une suite de sommets reli\u00e9s par des ar\u00eates, comme C - B - A - E par exemple. La longueur de cette cha\u00eene est alors 3, soit le nombre d'ar\u00eates.</p> <p>Les sommets B et E sont adjacents au sommet A, ce sont les voisins de A.</p> <p>Exemple de graphe non-orient\u00e9 : le graphe des relations d'un individu sur Facebook est non-orient\u00e9, car si on est \u00abami\u00bb avec quelqu'un la r\u00e9ciproque est vraie.</p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/cours/#122-graphe-oriente","title":"1.2.2 Graphe orient\u00e9","text":"<p>Dans un graphe orient\u00e9, les arcs ne peuvent \u00eatre emprunt\u00e9s que dans le sens de la fl\u00e8che, et un chemin est une suite de sommets reli\u00e9s par des arcs, comme B \u2192 C \u2192 D \u2192 E par exemple.</p> <p>Les sommets C et D sont adjacents au sommet B (mais pas A !), ce sont les voisins de B.</p> <p>Exemple de graphe orient\u00e9 : le graphe des relations d'un individu sur Twitter est orient\u00e9, car on peut \u00absuivre\u00bb quelqu'un sans que cela soit r\u00e9ciproque.</p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/cours/#123-graphe-pondere","title":"1.2.3 Graphe pond\u00e9r\u00e9","text":"<p>Un graphe est pond\u00e9r\u00e9 (ou valu\u00e9) si on attribue \u00e0 chaque ar\u00eate une valeur num\u00e9rique (la plupart du temps positive), qu'on appelle mesure, poids, co\u00fbt ou valuation.</p> <p>Par exemple:</p> <ul> <li>dans le protocole OSPF, on pond\u00e8re les liaisons entre routeurs par le co\u00fbt;</li> <li>dans un r\u00e9seau routier entre plusieurs villes, on pond\u00e8re par les distances.</li> </ul>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/cours/#124-connexite","title":"1.2.4 Connexit\u00e9","text":"<p>Un graphe est connexe s'il est d'un seul tenant: c'est-\u00e0-dire si n'importe quelle paire de sommets peut toujours \u00eatre reli\u00e9e par une cha\u00eene. Autrement un graphe est connexe s'il est \u00aben un seul morceau\u00bb.</p> <p>Par exemple, le graphe pr\u00e9c\u00e9dent est connexe. Mais le suivant ne l'est pas: il n'existe pas de cha\u00eene entre les sommets A et F par exemple.</p> <p> </p> <p>Il poss\u00e8de cependant deux composantes connexes : le sous-graphe compos\u00e9 des sommets A, B, C, D et E d'une part et le sous-graphe compos\u00e9 des sommets F, G et H.</p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/cours/#2-modelisations-dun-graphe","title":"2. Mod\u00e9lisations d'un graphe","text":"<p>Pour mod\u00e9liser un graphe, il faut \u00e9tablir par convention une mani\u00e8re de donner les renseignements suivants :</p> <ul> <li>qui sont les sommets ?</li> <li>pour chaque sommet, quels sont ses voisins ? (et \u00e9ventuellement quel poids porte l'ar\u00eate qui les relie)</li> </ul>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/cours/#21-representation-par-matrice-dadjacence","title":"2.1 Repr\u00e9sentation par matrice d'adjacence","text":"<p>Principe</p> <ul> <li>On classe les sommets (en les num\u00e9rotant, ou par ordre alphab\u00e9tique).</li> <li>on repr\u00e9sente les ar\u00eates (ou les arcs) dans une matrice, c'est-\u00e0-dire un tableau \u00e0 deux dimensions o\u00f9 on inscrit un 1 en ligne <code>i</code> et colonne <code>j</code> si les sommets de rang <code>i</code> et de rang <code>j</code> sont voisins (dits aussi adjacents).</li> </ul> <p>Ce tableau s'appelle une matrice d'adjacence (on aurait tr\u00e8s bien pu l'appeler aussi matrice de voisinage).</p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/cours/#211-graphe-non-oriente","title":"2.1.1 Graphe non orient\u00e9","text":"<p>Dans ce graphe non orient\u00e9, comme B est voisin de C, C est aussi voisin de B, ce qui signifie que l'ar\u00eate qui relie B et C va donner lieu \u00e0 deux \"1\" dans la matrice, situ\u00e9 de part et d'autre de la diagonale descendante (un math\u00e9maticien parlera de matrice sym\u00e9trique).</p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/cours/#212-graphe-oriente","title":"2.1.2 Graphe orient\u00e9","text":""},{"location":"T1_Structures_de_donnees/1.5_Graphes/cours/#213-graphe-pondere","title":"2.1.3 Graphe pond\u00e9r\u00e9","text":""},{"location":"T1_Structures_de_donnees/1.5_Graphes/cours/#214-exercices","title":"2.1.4 Exercices","text":"<p>Exercice 1</p> <p>Soit un ensemble d'amis connect\u00e9s sur un r\u00e9seau social quelconque. Voici les interactions qu'on a recens\u00e9es\u00a0:</p> <ul> <li>Andr\u00e9 est ami avec B\u00e9a, Charles, Estelle et Fabrice,</li> <li>B\u00e9a est amie avec Andr\u00e9, Charles, Denise et H\u00e9lo\u00efse,</li> <li>Charles est ami avec Andr\u00e9, B\u00e9a, Denise, Estelle, Fabrice et Gilbert,</li> <li>Denise est amie avec B\u00e9a, Charles et Estelle,</li> <li>Estelle est amie avec Andr\u00e9, Charles et Denise,</li> <li>Fabrice est ami avec Andr\u00e9, Charles et Gilbert,</li> <li>Gilbert est ami avec Charles et Fabrice,</li> <li>H\u00e9lo\u00efse est amie avec B\u00e9a.</li> </ul> <p>Q1. Repr\u00e9senter le graphe des relations dans ce r\u00e9seau social (on d\u00e9signera chaque individu par l'initiale de son pr\u00e9nom). Il est possible de faire en sorte que les ar\u00eates ne se croisent pas !</p> Correction Q1 <p></p> <p>Q2. Donner la matrice d'adjacence de ce graphe.</p> Correction Q2 <p>\\(\\pmatrix{ 0 &amp; 1 &amp; 1 &amp; 0 &amp; 1 &amp; 1 &amp; 0 &amp; 0 \\\\ 1 &amp; 0 &amp; 1 &amp; 1 &amp; 0 &amp; 0 &amp; 0 &amp; 1 \\\\ 1 &amp; 1 &amp; 0 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 0 \\\\ 0 &amp; 1 &amp; 1 &amp; 0 &amp; 1 &amp; 0 &amp; 0 &amp; 0 \\\\ 1 &amp; 0 &amp; 1 &amp; 1 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\\\ 1 &amp; 0 &amp; 1 &amp; 0 &amp; 0 &amp; 0 &amp; 1 &amp; 0 \\\\ 0 &amp; 0 &amp; 1 &amp; 0 &amp; 0 &amp; 1 &amp; 0 &amp; 0 \\\\ 0 &amp; 1 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\\\ }\\)</p> <p>Exercice 2</p> <p>Construire les graphes correspondants aux matrices d'adjacence suivantes:</p> <p>Q1. \\(M_1 =\\pmatrix{     0&amp;1&amp;1&amp;1&amp;1\\\\     1&amp;0&amp;1&amp;0&amp;0\\\\     1&amp;1&amp;0&amp;1&amp;0\\\\     1&amp;0&amp;1&amp;0&amp;1\\\\     1&amp;0&amp;0&amp;1&amp;0\\\\     }\\)</p> Correction <p></p> <p>Q2. \\(M_2=\\pmatrix{     0&amp;1&amp;1&amp;0&amp;1\\\\     0&amp;0&amp;1&amp;0&amp;0\\\\     0&amp;0&amp;0&amp;1&amp;0\\\\     1&amp;0&amp;0&amp;0&amp;1\\\\     0&amp;0&amp;0&amp;0&amp;0\\\\     }\\)</p> Correction <p></p> <p>Q3. \\(M_3=\\pmatrix{     0&amp;5&amp;10&amp;50&amp;12\\\\     5&amp;0&amp;10&amp;0&amp;0\\\\     10&amp;10&amp;0&amp;8&amp;0\\\\     50&amp;0&amp;8&amp;0&amp;100\\\\     12&amp;0&amp;0&amp;100&amp;0\\\\     }\\) </p> Correction <p></p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/cours/#215-implementation-python-des-matrices-dadjacence","title":"2.1.5 Impl\u00e9mentation Python des matrices d'adjacence","text":"<p>Matrices d'adjacence en Python</p> <p>Une matrice se repr\u00e9sente naturellement par une liste de listes.</p> <p>Exemple: La matrice \\(M_1 =\\pmatrix{     0&amp;1&amp;1&amp;1&amp;1\\\\     1&amp;0&amp;1&amp;0&amp;0\\\\     1&amp;1&amp;0&amp;1&amp;0\\\\     1&amp;0&amp;1&amp;0&amp;1\\\\     1&amp;0&amp;0&amp;1&amp;0\\\\     }\\), associ\u00e9e au graphe </p> <p>sera repr\u00e9sent\u00e9e par la variable <code>G</code> suivante :</p> \ud83d\udc0d Script Python<pre><code>G = [[0, 1, 1, 1, 1],\n      [1, 0, 1, 0, 0],\n      [1, 1, 0, 1, 0],\n      [1, 0, 1, 0, 1],\n      [1, 0, 0, 1, 0]]\n</code></pre> <p>Complexit\u00e9 en m\u00e9moire et temps d'acc\u00e8s :</p> <ul> <li> <p>Pour un graphe \u00e0 \\(n\\) sommets, la complexit\u00e9 en m\u00e9moire (appel\u00e9e aussi complexit\u00e9 spatiale) de la repr\u00e9sentation matricielle est en \\(O(n^2)\\).</p> </li> <li> <p>Tester si un sommet est isol\u00e9 (ou conna\u00eetre ses voisins) est en \\(O(n)\\) puisqu'il faut parcourir une ligne, mais tester si deux sommets sont adjacents (voisins) est en \\(O(1)\\), c'est un simple acc\u00e8s au tableau.</p> </li> </ul> <p>La mod\u00e9lisation d'un graphe par sa matrice d'adjacence est loin d'\u00eatre la seule mani\u00e8re de repr\u00e9senter un graphe : nous allons voir une autre mod\u00e9lisation, par liste d'adjacence.</p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/cours/#22-representation-par-listes-dadjacence","title":"2.2 Repr\u00e9sentation par listes d'adjacence","text":"<p>Principe</p> <ul> <li> <p>On associe \u00e0 chaque sommet sa liste des voisins (c'est-\u00e0-dire les sommets adjacents). On utilise pour cela un dictionnaire dont les cl\u00e9s sont les sommets et les valeurs les listes des voisins.</p> </li> <li> <p>Dans le cas d'un graphe orient\u00e9 on associe \u00e0 chaque sommet la liste des successeurs (ou bien des pr\u00e9d\u00e9cesseurs, au choix).</p> </li> </ul> <p>Par exemple, le graphe  sera repr\u00e9sent\u00e9 par le dictionnaire :</p> \ud83d\udc0d Script Python<pre><code>G = {'A': ['B', 'C', 'D', 'E'],\n     'B': ['A', 'C'],\n     'C': ['A', 'B', 'D'],\n     'D': ['A', 'C', 'E'],\n     'E': ['A', 'D']\n    }\n</code></pre> <p>Complexit\u00e9 en m\u00e9moire et temps d'acc\u00e8s :</p> <ul> <li> <p>Pour un graphe \u00e0 \\(n\\) sommets et \\(m\\) ar\u00eates, la complexit\u00e9 spatiale de la repr\u00e9sentation en liste d'adjacence est en \\(O(n+m)\\). C'est beaucoup mieux qu'une matrice d'adjacence lorsque le graphe comporte peu d'ar\u00eates (i.e. beaucoup de 0 dans la matrice, non stock\u00e9s avec des listes).</p> </li> <li> <p>Tester si un sommet est isol\u00e9 (ou conna\u00eetre ses voisins) est en \\(O(1)\\) puisqu'on y acc\u00e8de imm\u00e9diatement, mais tester si deux sommets sont adjacents (voisins) est en \\(O(n)\\) car il faut parcourir la liste.</p> </li> </ul>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/cours/#221-exercices","title":"2.2.1 Exercices","text":"<p>Exercice 3</p> <p>Construire les graphes correspondants aux listes d'adjacence suivantes.</p> <p>Q1. \ud83d\udc0d Script Python<pre><code>G1 = {\n'A': ['B', 'C'],\n'B': ['A', 'C', 'E', 'F'],\n'C': ['A', 'B', 'D'],\n'D': ['C', 'E'],\n'E': ['B', 'D', 'F'],\n'F': ['B', 'E']\n     }\n</code></pre></p> Correction Q1 <p></p> <p>Q2. \ud83d\udc0d Script Python<pre><code>G2 = {\n'A': ['B'],\n'B': ['C', 'E'],\n'C': ['B', 'D'],\n'D': [],\n'E': ['A']\n     }\n</code></pre></p> Correction Q2 <p></p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/cours/#3-creation-dune-classe-graphe","title":"3. Cr\u00e9ation d'une classe <code>Graphe</code>","text":"<p>Dans cette partie, nous ne traiterons que des graphes non-orient\u00e9s.</p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/cours/#31-interface-souhaitee","title":"3.1 Interface souhait\u00e9e","text":"<p>Nous voulons que le graphe  puisse \u00eatre cr\u00e9\u00e9 gr\u00e2ce aux instructions suivantes :</p> \ud83d\udc0d Script Python<pre><code>g = Graphe(['A', 'B', 'C', 'D', 'E'])\ng.ajoute_arete('A', 'B')\ng.ajoute_arete('A', 'C')\ng.ajoute_arete('A', 'D')\ng.ajoute_arete('A', 'E')\ng.ajoute_arete('B', 'C')\ng.ajoute_arete('C', 'D')\ng.ajoute_arete('D', 'E')\n</code></pre> <p>Nous souhaitons aussi pouvoir tester si deux sommets sont voisins avec la m\u00e9thode <code>sont_voisins</code> :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; g.sont_voisins('E', 'A')\nTrue\n&gt;&gt;&gt; g.sont_voisins('E', 'B')\nFalse\n</code></pre> <p>Enfin, nous voulons pouvoir obtenir facilement la liste de tous les voisins d'un sommet avec la m\u00e9thode <code>voisins</code>: \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; g.voisins('C')\n['A', 'B', 'D']\n</code></pre></p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/cours/#32-conseils-dimplementation","title":"3.2 Conseils d'impl\u00e9mentation","text":"<p>L'objet de type <code>Graphe</code> aura comme attributs :</p> <ul> <li>une liste <code>liste_sommets</code> (donn\u00e9e en param\u00e8tre dans la liste <code>liste_sommets</code>) </li> <li>un dictionnaire <code>adjacents</code>, o\u00f9 chaque sommet se verra attribuer une liste vide <code>[]</code>.</li> </ul>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/cours/#33-implementation","title":"3.3 Impl\u00e9mentation","text":"<p>Impl\u00e9mentation d'une classe <code>Graphe</code> </p> \ud83d\udc0d Script Python<pre><code>class Graphe:\n    def __init__(self, liste_sommets):\n        self.liste_sommets = ...\n        self.adjacents = ...\n\n    def ajoute_arete(self, sommetA, sommetB):\n        ...\n        ...\n\n    def voisins(self, sommet):\n        return ...\n\n    def sont_voisins(self, sommetA, sommetB):\n        return ...\n</code></pre> <p>Application</p> <ol> <li>Compl\u00e9ter la classe Graphe : constructeur, setter (ajoute_arete), voisins et sont voisins</li> <li>Cr\u00e9er un fichier grapheTest pour tester votre classe</li> <li>Compl\u00e9ter vos dosctring et ajouter des commentaires</li> <li>Ajouter la red\u00e9finition de la fonction print pour votre graphe</li> <li>Ajouter une m\u00e9thode de suppression d'une ar\u00eate</li> <li>Ajouter une m\u00e9thode permettant d'ajouter un sommet.</li> <li>Ajouter une m\u00e9thode permettant de supprimer un sommet.</li> <li>Ecrire la m\u00e9thode permettant de construire la matrice d'adjacence \u00e0 partir du dictionnaire des successeurs.</li> </ol> Impl\u00e9mentation d'une classe <code>Graphe</code> \ud83d\udc0d Script Python<pre><code>class Graphe:\n    def __init__(self, liste_sommets):\n        #premier attribut : la liste des sommets\n        self.liste_sommets = liste_sommets\n        #second attribut : un dictionnaire des adjacents\n        #pour chaque sommet de la liste des sommets, on cr\u00e9e une liste vide\n        self.adjacents = {sommet : [] for sommet in liste_sommets}\n\n    def autre_constructeur(self, liste_sommets):\n        '''Autre constructeur possible pour la classe Graphe'''\n        self.liste_sommets = liste_sommets\n        #initialisation du dictionnaire des adjacents\n        self.adjacents = {}\n        #pour chaque sommet de la liste des sommets, on cr\u00e9e une liste vide\n        for sommet in liste_sommets:\n            self.adjacents[sommet]=[]\n\n    def ajoute_arete(self, sommetA, sommetB):\n        ''''\n        Proc\u00e9dure permettant d'ajouter une ar\u00eate entre deux sommets\n        @param sommetA : le premier sommet\n        @param sommetB : le second sommet\n        @pas de retour\n        '''\n        self.adjacents[sommetA].append(sommetB)\n        self.adjacents[sommetB].append(sommetA)\n\n    def voisins(self, sommet):\n        ''''\n        M\u00e9thode permettant de r\u00e9cup\u00e9rer la liste des voisins d'un sommet\n        @param sommet : le sommet dont on veut conna\u00eetre les voisins\n        @return la liste des voisins du sommet\n        '''\n        return self.adjacents[sommet]\n\n    def sont_voisins(self, sommetA, sommetB):\n        ''''\n        M\u00e9thode permettant de savoir si deux sommets sont voisins\n        @param sommetA : le premier sommet\n        @param sommetB : le second sommet\n        @return True si les deux sommets sont voisins, False sinon\n        '''\n        return sommetB in self.adjacents[sommetA]\n\n    def __str__(self):\n        return str(self.adjacents)  \n\n    def supp_arete(self, sommetA, sommetB):\n        ''''\n        Proc\u00e9dure permettant de supprimer une ar\u00eate entre deux sommets\n        @param sommetA : le premier sommet\n        @param sommetB : le second sommet\n        @pas de retour\n        '''\n        self.adjacents[sommetA].remove(sommetB)\n        self.adjacents[sommetB].remove(sommetA)\n\n\n    def ajoute_sommet(self, sommet):\n        ''''\n        Proc\u00e9dure permettant d'ajouter un sommet\n        @param sommet : le sommet \u00e0 ajouter\n        @pas de retour\n        '''\n        self.liste_sommets.append(sommet)\n        self.adjacents[sommet]=[]\n\n    #Proposer une m\u00e9thode permettant de supprimer un sommet.\n    def supp_sommet(self, sommet):\n        ''''\n        Proc\u00e9dure permettant de supprimer un sommet\n        @param sommet : le sommet \u00e0 supprimer\n        @pas de retour\n        '''\n        self.liste_sommets.remove(sommet)\n        del self.adjacents[sommet]\n        for s in self.liste_sommets:\n            if sommet in self.adjacents[s]:\n                self.adjacents[s].remove(sommet)\n        return\n\n    def matriceAdjacence(self):\n        '''\n        M\u00e9thode permettant de renvoyer la matrice d'adjacence du graphe\n        @return la matrice d'adjacence\n        '''\n        n = len(self.liste_sommets)\n        #initialisation de la matrice  n x n \u00e0 0\n        matrice = [[0 for i in range(n)] for j in range(n)]\n        #pour chaque point de la matrice, on regarde si il existe une ar\u00eate entre les sommets correspondants\n        for i in range(n):\n            for j in range(n):\n                if self.sont_voisins(self.liste_sommets[i], self.liste_sommets[j]):\n                    matrice[i][j] = 1\n        return matrice\n</code></pre> <p>Entra\u00eenement</p> <p>Page d'exercice sur l'impl\u00e9mentation des graphes : ici</p>     graph TD         matrice --&gt; dictionnaire         matrice --&gt; liste         liste --&gt; matrice         dictionnaire --&gt; matrice"},{"location":"T1_Structures_de_donnees/1.5_Graphes/cours/#4-parcours-de-graphes","title":"4.    Parcours de graphes","text":"<p>Algorithme de parcours</p> <p>Un parcours de graphe est un algorithme consistant \u00e0 explorer tous les sommets d'un graphe de proche en proche \u00e0 partir d'un sommet initial. Ces parcours sont notamment utilis\u00e9s pour rechercher un plus court chemin (et donc dans les GPS) ou pour trouver la sortie d'un labyrinthe...</p> <p>outil de visualisation des parcours de graphe : lien ici</p> <p> Parcourir simplement le dictionnaire ou la matrice d\u2019un graphe n\u2019est pas consid\u00e9r\u00e9 comme un parcours de graphe. </p> <p>Tous les parcours suivent plus ou moins le m\u00eame algorithme de base :</p> <ul> <li> <p>On visite un sommet <code>A</code> . On cr\u00e9e une structure <code>S</code>  qui contiendra au d\u00e9part l\u2019ensemble des voisins de <code>A</code> .</p> </li> <li> <p>Tant que <code>S</code> n\u2019est pas vide :</p> <ul> <li>on choisit un sommet <code>s</code>  de <code>S</code></li> <li>on visite <code>s</code></li> <li>on ajoute \u00e0 <code>S</code> tous les voisins de <code>s</code> pas encore visit\u00e9s</li> </ul> </li> </ul> <p>Sommets visit\u00e9s</p> <p>Contrairement \u00e0 un parcours d'arbre, o\u00f9 les fils d'un n\u0153ud ne peuvent pas avoir \u00e9t\u00e9 visit\u00e9s avant le n\u0153ud, un voisin d'un sommet peut avoir d\u00e9j\u00e0 \u00e9t\u00e9 visit\u00e9 en tant que voisin d'un sommet pr\u00e9c\u00e9dent...</p> <p>Il est donc n\u00e9cessaire de m\u00e9moriser les sommets d\u00e9ja visit\u00e9s ou d\u00e9couverts (on dira qu'un sommet est d\u00e9couvert lorsqu'on l'ajoute \u00e0 <code>S</code>).</p> <p>Le choix de la structure de l'ensemble <code>S</code> est pr\u00e9pond\u00e9rant:</p> <ul> <li>Si on choisit une file (FIFO): on visitera les sommets dans l'ordre d'arriv\u00e9e, donc les plus proches du sommet pr\u00e9c\u00e9dent. On obtient donc un parcours en largeur BFS.</li> <li>Si on choisit une pile (LIFO): on visitera d'abord les derniers sommets arriv\u00e9s, donc on parcourt le graphe en visitant \u00e0 chaque \u00e9tape un voisin du pr\u00e9c\u00e9dent. On obtient donc un parcours en profondeur DFS.</li> </ul> <p> </p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/cours/#41-le-parcours-en-largeur-bfs-breadth-first-search","title":"4.1 Le parcours en largeur (BFS, Breadth First Search)","text":""},{"location":"T1_Structures_de_donnees/1.5_Graphes/cours/#411-principe","title":"4.1.1 Principe","text":"<p>Exemple de parcours en largeur, avec B comme sommet de d\u00e9part:</p> <p> </p> <p>Codes couleur :</p> <ul> <li>vert : les sommets non encore trait\u00e9s.</li> <li>rouge : le sommet en cours de traitement.</li> <li>orange : la file d'attente des sommets qui seront bient\u00f4t trait\u00e9s. On y rajoute \u00e0 chaque fois les voisins du sommet en cours de traitement, uniquement si ils n'ont pas encore \u00e9t\u00e9 d\u00e9couverts.</li> <li>noir : les sommets trait\u00e9s.</li> </ul>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/cours/#412-algorithme-bfs","title":"4.1.2 Algorithme BFS","text":"<p>On utilise :</p> <ul> <li>une liste <code>traites</code> qui recueille les sommets visit\u00e9s (c'est-\u00e0-dire qu'on a fini de traiter, apr\u00e8s avoir ajout\u00e9 ses voisins dans la file d'attente) et qui sera renvoy\u00e9e \u00e0 la fin de l'algorithme;</li> <li>une liste <code>decouverts</code> qui contient les sommets d\u00e9couverts au fur et \u00e0 mesure du parcours;</li> <li>une file <code>en_attente</code> qui contient les sommets d\u00e9couverts mais non encore visit\u00e9s. On utilisera au choix une classe <code>File</code> \u00e9crite plus t\u00f4t dans l'ann\u00e9e ou tout simplement une <code>list</code> en utilisant <code>pop(0)</code> (pour d\u00e9filer) et <code>append()</code> (pour enfiler).</li> </ul> <p>En d\u00e9but d'algorithme, seul le sommet de d\u00e9part <code>depart</code> donn\u00e9 en param\u00e8tre est d\u00e9couvert. La fonction <code>BFS</code> renvoie la liste des sommets dans l'ordre de visite lors du parcours en largeur.</p> <p>Parcours en largeur - BFS </p> \ud83d\udc0d Script Python<pre><code>def BFS(g, depart):\n    '''\n    Effectue un parcours en largeur du graphe g en partant du sommet depart,\n    et renvoie la liste des sommets visit\u00e9s dans l'ordre du parcours.\n    '''\n    traites = []\n    decouverts = [depart]\n    en_attente = [depart]\n    while en_attente != [] :\n        sommet = en_attente.pop(0)\n        voisins = g.voisins(sommet)\n        for voisin in voisins:\n            if voisin not in decouverts:\n                decouverts.append(voisin)\n                en_attente.append(voisin)\n        traites.append(sommet)\n    return traites\n</code></pre> <p>Int\u00e9r\u00eat de la liste <code>decouverts</code></p> <p>La liste <code>decouverts</code> contient tous les sommets qui ont \u00e9t\u00e9 :</p> <ul> <li>soit trait\u00e9s (auquel cas ils sont dans la liste <code>traites</code>)</li> <li>soit en attente (auquel cas ils sont dans la liste <code>en_attente</code>)</li> </ul> <p>Le test de la ligne 13  <code>if voisin not in decouverts:</code> permet donc de ne pas mettre en file d'attente un voisin qui est (ou a \u00e9t\u00e9) d\u00e9j\u00e0 en file d'attente. </p> <p>Que contient la file <code>en_attente</code> ?</p> <p>\u00c0 chaque instant, la file <code>en_attente</code> contient des sommets \u00e0 la distance <code>k+1</code> et \u00e0 la distance <code>k</code> du point de d\u00e9part :</p> <p></p> <p>Exercice 4</p> <p></p> <p>Gr\u00e2ce \u00e0 la classe <code>Graphe</code> du 3.3, ce graphe s'impl\u00e9mente par :</p> \ud83d\udc0d Script Python<pre><code>g = Graphe(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'])\ng.ajoute_arete('A', 'B')\ng.ajoute_arete('A', 'C')\ng.ajoute_arete('B', 'D')\ng.ajoute_arete('D', 'C')\ng.ajoute_arete('B', 'E')\ng.ajoute_arete('D', 'E')\ng.ajoute_arete('E', 'F')\ng.ajoute_arete('E', 'G')\ng.ajoute_arete('F', 'G')\ng.ajoute_arete('G', 'H')\n</code></pre> <p>Q1. Donner le parcours en largeur de <code>g</code>  gr\u00e2ce \u00e0 l'algorithme BFS, si le sommet de d\u00e9part est B. Cela correspond au parcours pr\u00e9sent\u00e9 par le gif de d\u00e9but de paragraphe.</p> correction Q1 \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; BFS(g, 'B')\n['B', 'A', 'D', 'E', 'C', 'F', 'G', 'H']\n</code></pre> <p>Q2. Deviner le parcours en largeur de d\u00e9part D, puis de d\u00e9part G. V\u00e9rifier gr\u00e2ce \u00e0 votre algorithme.</p> Correction Q2 \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; BFS(g, 'D')\n['D', 'B', 'C', 'E', 'A', 'F', 'G', 'H']\n&gt;&gt;&gt; BFS(g, 'G')\n['G', 'E', 'F', 'H', 'B', 'D', 'A', 'C']\n</code></pre>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/cours/#413-application-du-bfs-recherche-du-plus-court-chemin","title":"4.1.3 Application du BFS : recherche du plus court chemin","text":"<p>L'algorithme BFS d\u00e9couvre les sommets \u00abpar cercles concentriques\u00bb autour du point de d\u00e9part (ainsi que le montre la structure de la file d'attente). On d\u00e9couvre d'abord tous les sommets \u00e0 la distance 1 du point de d\u00e9part, puis \u00e0 la distance 2, puis 3, etc.</p> <p>Un sommet situ\u00e9 \u00e0 la distance 5 sera d\u00e9couvert en tant que voisin d'un sommet \u00e0 la distance 4, qui lui-m\u00eame aura \u00e9t\u00e9 d\u00e9couvert gr\u00e2ce \u00e0 un sommet \u00e0 la distance 3, qui lui-m\u00eame...</p> <p>On comprend donc que si on arrive \u00e0 se souvenir du sommet \u00abparent\u00bb de chaque sommet (celui qui lui a permis d'\u00eatre d\u00e9couvert), on pourra alors reconstituer un chemin permettant de remonter au point de d\u00e9part.</p> <p>Nous allons pour cela nous servir d'une structure de dictionnaire pour associer \u00e0 chaque sommet son sommet-parent.</p> <p>Il faudra ensuite une fonction pour recr\u00e9er le chemin.</p> <p>Pourquoi le plus court chemin ?</p> <ul> <li>Comment est-on s\u00fbr qu'un chemin va \u00eatre trouv\u00e9 entre deux sommets A et B ?</li> </ul> <p>Si le graphe est connexe, tout parcours BFS au d\u00e9part de A va parcourir l'int\u00e9gralit\u00e9 du graphe, et donc passera par B \u00e0 un moment. Un chemin sera donc forc\u00e9ment trouv\u00e9 entre A et B.</p> <ul> <li>Comment est-on s\u00fbr que ce chemin trouv\u00e9 est le plus court ?</li> </ul> <p>La d\u00e9couverte des sommets par cercles concentriques entre A et B nous assure qu'on ne peut pas rater le point B : s'il est \u00e0 la distance <code>k</code> de A, il sera forc\u00e9ment visit\u00e9 puisque tous les sommets \u00e0 la distance <code>k</code> vont passer par la liste d'attente, apr\u00e8s les sommets de distance <code>k-1</code> et avant les sommets de distance <code>k+1</code>.</p> <p>Lorsqu'on remontera de B vers A en passant par les sommets parents successifs, il ne peut y avoir qu'un seul sommet par \u00abcouche\u00bb : le chemin sera donc exactement de longueur <code>k</code>, il sera donc minimal. </p> <p>Recherche du plus court chemin </p> \ud83d\udc0d Script Python<pre><code>def recherche_chemin(g, depart, arrivee):\n    '''\n    Parcours en largeur du graphe g en partant du sommet depart,\n    qui s'arr\u00eate d\u00e8s que le sommet arrivee est atteint.\n    Renvoie alors le chemin du depart vers arrivee.\n    '''\n    traites = []\n    decouverts = [depart]\n    en_attente = [depart]\n    parent = {}\n    while en_attente != [] :\n        sommet = en_attente.pop(0)\n        voisins = g.voisins(sommet)\n        for voisin in voisins:\n            if voisin not in decouverts:\n                decouverts.append(voisin)\n                en_attente.append(voisin)\n                parent[voisin] = sommet\n                if voisin == arrivee:\n                    return remonte_chemin(depart, arrivee, parent)\n        traites.append(sommet)\n    return \"non trouv\u00e9\"  \n\n\ndef remonte_chemin(depart, arrivee, parent):\n    sommet = arrivee\n    chemin = arrivee\n    while sommet != depart:\n        sommet = parent[sommet]\n        chemin = sommet + chemin\n    return chemin\n</code></pre> <p>Exercice 5</p> <p> Tester le code pr\u00e9c\u00e9dent pour trouver le plus court chemin entre A et G, entre H et C, entre B et G...</p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/cours/#42-le-parcours-en-profondeur-dfs-depth-first-search","title":"4.2 Le parcours en profondeur (DFS, Depth First Search)","text":""},{"location":"T1_Structures_de_donnees/1.5_Graphes/cours/#421-parcours-dfs-recursif","title":"4.2.1 Parcours DFS r\u00e9cursif","text":"<p>Le parcours en profondeur est un parcours o\u00f9 on va aller \u00able plus loin possible\u00bb sans se pr\u00e9occuper des autres voisins non visit\u00e9s : on va visiter le premier de ses voisins non trait\u00e9s, qui va faire de m\u00eame, etc. Lorsqu'il n'y a plus de voisin, on revient en arri\u00e8re pour aller voir le dernier voisin non visit\u00e9.</p> <p>Dans un labyrinthe, ce parcours s'explique tr\u00e8s bien : on prend tous les chemins sur la droite jusqu'\u00e0 rencontrer un mur, auquel cas on revient au dernier embranchement et on prend un autre chemin, puis on repart \u00e0 droite, etc.</p> <p>C'est un parcours qui s'\u00e9crit naturellement de mani\u00e8re r\u00e9cursive :</p> <p>Parcours en profondeur - DFS  </p> \ud83d\udc0d Script Python<pre><code>def DFSrec(g, traites, actuel):\n    traites.append(actuel)\n    for voisin in g.voisins(actuel):\n        if voisin not in traites:\n            DFSrec(g, traites, voisin)\n    return traites\n</code></pre> <p>Exercice 6</p> <p></p> <p>Q1. Donner (de t\u00eate) le parcours DFS de ce graphe en partant de A. Rappel : les voisins sont donn\u00e9s par ordre alphab\u00e9tique. Le premier voisin de A est donc B.</p> <p>Q2. V\u00e9rifier avec le code pr\u00e9c\u00e9dent. </p> Correction Q2 \ud83d\udc0d Script Python<pre><code>class Graphe:\n    def __init__(self, liste_sommets):\n        self.liste_sommets = liste_sommets\n        self.adjacents = {sommet : [] for sommet in liste_sommets}\n\n    def ajoute_arete(self, sommetA, sommetB):\n        self.adjacents[sommetA].append(sommetB)\n        self.adjacents[sommetB].append(sommetA)\n\n    def voisins(self, sommet):\n        return self.adjacents[sommet]\n\n    def sont_voisins(self, sommetA, sommetB):\n        return sommetB in self.adjacents[sommetA]\n\n\ng = Graphe(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'])\ng.ajoute_arete('A', 'B')\ng.ajoute_arete('A', 'C')\ng.ajoute_arete('B', 'D')\ng.ajoute_arete('D', 'C')\ng.ajoute_arete('B', 'E')\ng.ajoute_arete('D', 'E')\ng.ajoute_arete('E', 'F')\ng.ajoute_arete('E', 'G')\ng.ajoute_arete('F', 'G')\ng.ajoute_arete('G', 'H')\n\n\ndef DFSrec(g, traites, actuel):\n    traites.append(actuel)\n    for voisin in g.voisins(actuel):\n        if voisin not in traites:\n            DFSrec(g, traites, voisin)\n    return traites\n</code></pre> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; DFSrec(g, [], 'A')\n['A', 'B', 'D', 'C', 'E', 'F', 'G', 'H']\n</code></pre> <p>Q3. Reprendre les questions pr\u00e9c\u00e9dentes en changeant le sommet de d\u00e9part.</p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/cours/#422-parcours-dfs-iteratif","title":"4.2.2 Parcours DFS it\u00e9ratif","text":"<p>Il \u00absuffit\u00bb de remplacer la file du parcours BFS par une pile. Ainsi, on partira visiter le voisin tout juste ajout\u00e9 \u00e0 la file d'attente (qui porte maintenant mal son nom, puisque c'est devenu une pile).</p> <p>Parcours en profondeur it\u00e9ratif - DFS </p> \ud83d\udc0d Script Python<pre><code>def DFS_iteratif(graphe, start):\n    traites = []\n    en_attente = [start]\n    while en_attente != []:\n        actuel = en_attente.pop()\n        if actuel not in traites:\n            voisins = g.voisins(actuel)[::-1]\n            for voisin in voisins:\n                if voisin not in traites:\n                    en_attente.append(voisin)\n            traites.append(actuel)\n    return traites\n</code></pre> <p>Remarques :</p> <ul> <li> <p>\u00c0 la ligne 7, on inverse l'ordre des voisins pour que ce code renvoie le m\u00eame parcours quele parcours r\u00e9cursif (sinon c'est le dernier voisin ajout\u00e9 qui sera d\u00e9pil\u00e9). Cela n'est pas obligatoire : il n'y a pas \u00abun seul\u00bb parcours DFS (tout comme il n'y a pas qu'un seul BFS). Ce qui les caract\u00e9rise est la m\u00e9thode de d\u00e9couverte, plus que l'impl\u00e9mentation proprement dite.</p> </li> <li> <p>Contrairement au BFS, il est possible d'empiler un sommet d\u00e9j\u00e0 d\u00e9couvert (on v\u00e9rifie juste qu'il n'ait pas d\u00e9j\u00e0 \u00e9t\u00e9 trait\u00e9). Vous pouvez vous en apercevoir en \u00e9crivant l'\u00e9tat de la pile lors du parcours DFS it\u00e9ratif du graphe de l'exercice 6.</p> </li> </ul>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/data/anim_laby/","title":"Anim laby","text":"In\u00a0[\u00a0]: Copied! <pre>%matplotlib inline\n</pre> %matplotlib inline In\u00a0[\u00a0]: Copied! <pre>import pygame, sys\nimport random\nfrom pygame.locals import *\nimport time\n</pre> import pygame, sys import random from pygame.locals import * import time In\u00a0[\u00a0]: Copied! <pre>class Graphe:\n    def __init__(self, liste_sommets):\n        self.adj = {sommet: [] for sommet in liste_sommets}\n    \n    def sommets(self):\n        return [key for key in self.adj]\n    \n    def ordre(self):\n        return len(self.sommets())\n    \n    def voisins(self, sommet):\n        '''\n        renvoie la liste des voisins de sommet\n        '''\n        return self.adj[sommet]\n    \n    def est_voisin(self, s1, s2):\n        '''\n        verifie si s2 est un voisin de s1\n        '''\n        return s2 in self.voisins(s1)\n    \n    def ajoute_sommet(self, sommet):\n        '''\n        ajoute le sommet au graphe\n        '''\n        if sommet not in self.adj:\n            self.adj[sommet] = []\n        \n    def ajoute_arete(self, s1, s2):\n        '''\n        ajoute une ar\u00eate entre les sommets s1 et s2 dans le graphe, en les cr\u00e9ant\n        au pr\u00e9alable.\n        '''\n        self.ajoute_sommet(s1)\n        self.ajoute_sommet(s2)\n        if not self.est_voisin(s1, s2):\n            self.adj[s1].append(s2)\n        if not self.est_voisin(s2, s1):\n            self.adj[s2].append(s1)\n\n\nclass Cellule:\n    def __init__(self, mur_nord, mur_est, mur_sud, mur_ouest):\n        self.murs = {'N':mur_nord, 'E':mur_est, 'S':mur_sud, 'O':mur_ouest}\n\nclass Labyrinthe:\n    def __init__(self, hauteur, largeur):\n        self.grille = self.construire_grille(hauteur, largeur)\n\n    def construire_grille(self, h, l):\n        grille = [[Cellule(True, True, True, True) for j in range(l)] for i in range(h)]\n        return grille\n    \n    def afficher(self, c):\n        '''\n        affiche le labyrinthe, avec c qui d\u00e9signe la longueur du c\u00f4t\u00e9 d'une cellule\n        '''\n        for i in range(len(self.grille)):\n            for j in range(len(self.grille[i])):\n                if self.grille[i][j].murs['S']:\n                    pygame.draw.line(screen, [0, 0, 0], [j*c, (i+1)*c], [(j+1)*c, (i+1)*c], 2)\n                if self.grille[i][j].murs['N']:\n                    pygame.draw.line(screen, [0, 0, 0], [j*c, i*c], [(j+1)*c, i*c], 2)\n                if self.grille[i][j].murs['E']:\n                    pygame.draw.line(screen, [0, 0, 0], [(j+1)*c, i*c], [(j+1)*c, (i+1)*c], 2)\n                if self.grille[i][j].murs['O']:\n                    pygame.draw.line(screen, [0, 0, 0], [j*c, i*c], [j*c, (i+1)*c], 2)\n\n\n    def creer_passage(self, i1, j1, i2, j2):\n        '''\n        cr\u00e9e une ouverture entre les cellules d'adresses (i1, j1) et (i2, j2)\n        '''\n        if i1 == i2 : #ouverture horizontale\n            if j1 &lt; j2:\n                self.grille[i1][j1].murs['E'] = False\n                self.grille[i2][j2].murs['O'] = False\n            else:\n                self.grille[i1][j1].murs['O'] = False\n                self.grille[i2][j2].murs['E'] = False\n        else:\n            if i1 &lt; i2:\n                self.grille[i1][j1].murs['S'] = False\n                self.grille[i2][j2].murs['N'] = False\n            else:\n                self.grille[i1][j1].murs['N'] = False\n                self.grille[i2][j2].murs['S'] = False\n                \n    def creer_labyrinthe(self, i, j, di, dj):\n        '''\n        g\u00e9n\u00e9r\u00e8re un labyrinthe de dimension (di, dj) \u00e0 partir de la case (i, j) en haut \u00e0 gauche.\n        '''\n        if di == 1:\n            for k in range(j, j+dj-1):\n                self.creer_passage(i, k, i, k+1)\n        elif dj == 1:\n            for k in range(i, i+di-1):\n                self.creer_passage(k, j, k+1, j)\n        else:\n            if di &gt;= dj:\n                c = random.randint(1, di-1)\n                self.creer_labyrinthe(i, j, c, dj)\n                self.creer_labyrinthe(i+c, j, di-c, dj)\n                r = random.randint(0, dj-1)\n                self.creer_passage(i+c-1, j+r, i+c, j+r)\n            else:\n                c = random.randint(1, dj-1)\n                self.creer_labyrinthe(i, j, di, c)\n                self.creer_labyrinthe(i, j+c, di, dj-c)\n                r = random.randint(0, di-1)\n                self.creer_passage(i+r, j+c-1, i+r, j+c)\n</pre> class Graphe:     def __init__(self, liste_sommets):         self.adj = {sommet: [] for sommet in liste_sommets}          def sommets(self):         return [key for key in self.adj]          def ordre(self):         return len(self.sommets())          def voisins(self, sommet):         '''         renvoie la liste des voisins de sommet         '''         return self.adj[sommet]          def est_voisin(self, s1, s2):         '''         verifie si s2 est un voisin de s1         '''         return s2 in self.voisins(s1)          def ajoute_sommet(self, sommet):         '''         ajoute le sommet au graphe         '''         if sommet not in self.adj:             self.adj[sommet] = []              def ajoute_arete(self, s1, s2):         '''         ajoute une ar\u00eate entre les sommets s1 et s2 dans le graphe, en les cr\u00e9ant         au pr\u00e9alable.         '''         self.ajoute_sommet(s1)         self.ajoute_sommet(s2)         if not self.est_voisin(s1, s2):             self.adj[s1].append(s2)         if not self.est_voisin(s2, s1):             self.adj[s2].append(s1)   class Cellule:     def __init__(self, mur_nord, mur_est, mur_sud, mur_ouest):         self.murs = {'N':mur_nord, 'E':mur_est, 'S':mur_sud, 'O':mur_ouest}  class Labyrinthe:     def __init__(self, hauteur, largeur):         self.grille = self.construire_grille(hauteur, largeur)      def construire_grille(self, h, l):         grille = [[Cellule(True, True, True, True) for j in range(l)] for i in range(h)]         return grille          def afficher(self, c):         '''         affiche le labyrinthe, avec c qui d\u00e9signe la longueur du c\u00f4t\u00e9 d'une cellule         '''         for i in range(len(self.grille)):             for j in range(len(self.grille[i])):                 if self.grille[i][j].murs['S']:                     pygame.draw.line(screen, [0, 0, 0], [j*c, (i+1)*c], [(j+1)*c, (i+1)*c], 2)                 if self.grille[i][j].murs['N']:                     pygame.draw.line(screen, [0, 0, 0], [j*c, i*c], [(j+1)*c, i*c], 2)                 if self.grille[i][j].murs['E']:                     pygame.draw.line(screen, [0, 0, 0], [(j+1)*c, i*c], [(j+1)*c, (i+1)*c], 2)                 if self.grille[i][j].murs['O']:                     pygame.draw.line(screen, [0, 0, 0], [j*c, i*c], [j*c, (i+1)*c], 2)       def creer_passage(self, i1, j1, i2, j2):         '''         cr\u00e9e une ouverture entre les cellules d'adresses (i1, j1) et (i2, j2)         '''         if i1 == i2 : #ouverture horizontale             if j1 &lt; j2:                 self.grille[i1][j1].murs['E'] = False                 self.grille[i2][j2].murs['O'] = False             else:                 self.grille[i1][j1].murs['O'] = False                 self.grille[i2][j2].murs['E'] = False         else:             if i1 &lt; i2:                 self.grille[i1][j1].murs['S'] = False                 self.grille[i2][j2].murs['N'] = False             else:                 self.grille[i1][j1].murs['N'] = False                 self.grille[i2][j2].murs['S'] = False                      def creer_labyrinthe(self, i, j, di, dj):         '''         g\u00e9n\u00e9r\u00e8re un labyrinthe de dimension (di, dj) \u00e0 partir de la case (i, j) en haut \u00e0 gauche.         '''         if di == 1:             for k in range(j, j+dj-1):                 self.creer_passage(i, k, i, k+1)         elif dj == 1:             for k in range(i, i+di-1):                 self.creer_passage(k, j, k+1, j)         else:             if di &gt;= dj:                 c = random.randint(1, di-1)                 self.creer_labyrinthe(i, j, c, dj)                 self.creer_labyrinthe(i+c, j, di-c, dj)                 r = random.randint(0, dj-1)                 self.creer_passage(i+c-1, j+r, i+c, j+r)             else:                 c = random.randint(1, dj-1)                 self.creer_labyrinthe(i, j, di, c)                 self.creer_labyrinthe(i, j+c, di, dj-c)                 r = random.randint(0, di-1)                 self.creer_passage(i+r, j+c-1, i+r, j+c) In\u00a0[\u00a0]: Copied! <pre>def trouve_chemin(g, depart, arrivee):\n    '''\n    Parcours en largeur du graphe g en partant du sommet depart,\n    qui s'arr\u00eate d\u00e8s que le sommet arrivee est atteint.\n    Renvoie alors le chemin du depart vers arrivee.\n    '''\n    traites = []\n    decouverts = [depart]\n    en_attente = [depart]\n    parent = {}\n    while en_attente != [] :\n        sommet = en_attente.pop(0)\n        voisins = g.voisins(sommet)\n        for voisin in voisins:\n            if voisin not in decouverts:\n                x = voisin[1]\n                y = voisin[0]\n                cote = cote_cellule\n                pygame.draw.rect(screen, (0,255,0), [0*cote, 0*cote, cote, cote], 0)\n                pygame.draw.rect(screen, (255,0,0), [(largeur_laby-1)*cote, (hauteur_laby-1)*cote, cote, cote], 0)\n                pygame.draw.rect(screen, (150,150,255,20), [x*cote, y*cote, cote, cote], 0)\n                laby.afficher(cote_cellule)\n                #time.sleep(0.005)\n                pygame.display.update()\n                decouverts.append(voisin)\n                en_attente.append(voisin)\n                parent[voisin] = sommet\n                if voisin == arrivee:\n                    return recupere_chemin(depart, arrivee, parent)\n        traites.append(sommet)\n    print('chemin non trouv\u00e9')\n    return None\n\n\ndef recupere_chemin(depart, arrivee, parent):\n    sommet = arrivee\n    chemin = [arrivee]\n    while sommet != depart:\n        sommet = parent[sommet]\n        chemin.append(sommet)\n    return chemin[::-1]\n\n\n\ndef affiche_chemin(chemin:list, cote:int):\n    '''\n    Dessine dans la fenetre Pygame screen des carr\u00e9s de cot\u00e9 taille avec comme\n    couleur:\n    - du vert si le sommet est la source\n    - du rouge si le sommet est la cible\n    - du bleu sinon.\n    \n    Le param\u00e8tre chemin est une liste de tuples correspondant aux adresses\n    (ligne, colonne) des cellules dans la grille du labyrinthe.\n    '''\n    source = chemin[0]\n    cible = chemin[-1]\n    chemin = chemin[::-1]\n    for cellule in chemin:\n        x = cellule[1]\n        y = cellule[0]\n        if cellule == source:\n            pygame.draw.rect(screen, (0,255,0) , [x*cote, y*cote, cote, cote], 0)\n        elif cellule == cible:\n            pygame.draw.rect(screen, (255,0,0) , [x*cote, y*cote, cote, cote], 0)\n        else:\n            pygame.draw.rect(screen, (0,0,255,20), [x*cote, y*cote, cote, cote], 0)\n        time.sleep(0.02)\n        pygame.display.update()\n</pre> def trouve_chemin(g, depart, arrivee):     '''     Parcours en largeur du graphe g en partant du sommet depart,     qui s'arr\u00eate d\u00e8s que le sommet arrivee est atteint.     Renvoie alors le chemin du depart vers arrivee.     '''     traites = []     decouverts = [depart]     en_attente = [depart]     parent = {}     while en_attente != [] :         sommet = en_attente.pop(0)         voisins = g.voisins(sommet)         for voisin in voisins:             if voisin not in decouverts:                 x = voisin[1]                 y = voisin[0]                 cote = cote_cellule                 pygame.draw.rect(screen, (0,255,0), [0*cote, 0*cote, cote, cote], 0)                 pygame.draw.rect(screen, (255,0,0), [(largeur_laby-1)*cote, (hauteur_laby-1)*cote, cote, cote], 0)                 pygame.draw.rect(screen, (150,150,255,20), [x*cote, y*cote, cote, cote], 0)                 laby.afficher(cote_cellule)                 #time.sleep(0.005)                 pygame.display.update()                 decouverts.append(voisin)                 en_attente.append(voisin)                 parent[voisin] = sommet                 if voisin == arrivee:                     return recupere_chemin(depart, arrivee, parent)         traites.append(sommet)     print('chemin non trouv\u00e9')     return None   def recupere_chemin(depart, arrivee, parent):     sommet = arrivee     chemin = [arrivee]     while sommet != depart:         sommet = parent[sommet]         chemin.append(sommet)     return chemin[::-1]    def affiche_chemin(chemin:list, cote:int):     '''     Dessine dans la fenetre Pygame screen des carr\u00e9s de cot\u00e9 taille avec comme     couleur:     - du vert si le sommet est la source     - du rouge si le sommet est la cible     - du bleu sinon.          Le param\u00e8tre chemin est une liste de tuples correspondant aux adresses     (ligne, colonne) des cellules dans la grille du labyrinthe.     '''     source = chemin[0]     cible = chemin[-1]     chemin = chemin[::-1]     for cellule in chemin:         x = cellule[1]         y = cellule[0]         if cellule == source:             pygame.draw.rect(screen, (0,255,0) , [x*cote, y*cote, cote, cote], 0)         elif cellule == cible:             pygame.draw.rect(screen, (255,0,0) , [x*cote, y*cote, cote, cote], 0)         else:             pygame.draw.rect(screen, (0,0,255,20), [x*cote, y*cote, cote, cote], 0)         time.sleep(0.02)         pygame.display.update()  In\u00a0[\u00a0]: Copied! <pre>hauteur_laby, largeur_laby, cote_cellule = 30, 60, 10\ntaille_ecran = (largeur_laby*cote_cellule, hauteur_laby*cote_cellule)\n\nlaby = Labyrinthe(hauteur_laby, largeur_laby)\nlaby.creer_labyrinthe(0, 0, hauteur_laby, largeur_laby)\n\n\ndepart, arrivee = (0,0), (hauteur_laby-1, largeur_laby-1)\n\n#depart, arrivee = (0,0), (15, 15)\n</pre> hauteur_laby, largeur_laby, cote_cellule = 30, 60, 10 taille_ecran = (largeur_laby*cote_cellule, hauteur_laby*cote_cellule)  laby = Labyrinthe(hauteur_laby, largeur_laby) laby.creer_labyrinthe(0, 0, hauteur_laby, largeur_laby)   depart, arrivee = (0,0), (hauteur_laby-1, largeur_laby-1)  #depart, arrivee = (0,0), (15, 15) In\u00a0[\u00a0]: Copied! <pre>g = Graphe([])\n\nfor i in range(hauteur_laby):\n    for j in range(largeur_laby):\n        if not laby.grille[i][j].murs['N']:\n            g.ajoute_arete((i, j), (i-1, j))\n        if not laby.grille[i][j].murs['S']:\n            g.ajoute_arete((i, j), (i+1, j))\n        if not laby.grille[i][j].murs['O']:\n            g.ajoute_arete((i, j), (i, j-1))\n        if not laby.grille[i][j].murs['E']:\n            g.ajoute_arete((i, j), (i, j+1))\n</pre> g = Graphe([])  for i in range(hauteur_laby):     for j in range(largeur_laby):         if not laby.grille[i][j].murs['N']:             g.ajoute_arete((i, j), (i-1, j))         if not laby.grille[i][j].murs['S']:             g.ajoute_arete((i, j), (i+1, j))         if not laby.grille[i][j].murs['O']:             g.ajoute_arete((i, j), (i, j-1))         if not laby.grille[i][j].murs['E']:             g.ajoute_arete((i, j), (i, j+1))                   In\u00a0[\u00a0]: Copied! <pre>pygame.init()\n\nscreen = pygame.display.set_mode(taille_ecran)\nscreen.fill([255, 255, 255])\npygame.display.set_caption(\"Chemin dans un labyrinthe\")\n\nchemin = trouve_chemin(g, depart, arrivee)\naffiche_chemin(chemin, cote_cellule)\nlaby.afficher(cote_cellule)\n\n\ncontinuer = True\nwhile continuer:\n    for evenement in pygame.event.get():\n        if evenement.type == pygame.QUIT:\n            continuer = False\n            pygame.display.quit()\n            sys.exit()\n\n    pygame.display.flip()\n\npygame.quit()\n</pre> pygame.init()  screen = pygame.display.set_mode(taille_ecran) screen.fill([255, 255, 255]) pygame.display.set_caption(\"Chemin dans un labyrinthe\")  chemin = trouve_chemin(g, depart, arrivee) affiche_chemin(chemin, cote_cellule) laby.afficher(cote_cellule)   continuer = True while continuer:     for evenement in pygame.event.get():         if evenement.type == pygame.QUIT:             continuer = False             pygame.display.quit()             sys.exit()      pygame.display.flip()  pygame.quit()"},{"location":"T1_Structures_de_donnees/1.5_Graphes/data/anim_laby/#classes","title":"Classes\u00b6","text":"<p>###############################################################################</p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/data/anim_laby/#fonctions","title":"Fonctions\u00b6","text":"<p>###############################################################################</p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/data/anim_laby/#constantes","title":"Constantes\u00b6","text":"<p>###############################################################################</p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/data/anim_laby/#graphe","title":"Graphe\u00b6","text":"<p>###############################################################################</p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/data/anim_laby/#pygame","title":"Pygame\u00b6","text":"<p>###############################################################################</p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/data/anim_laby_DFSvsBFS_laby_degenere/","title":"anim laby DFSvsBFS laby degenere","text":"In\u00a0[\u00a0]: Copied! <pre>%matplotlib inline\n</pre> %matplotlib inline In\u00a0[\u00a0]: Copied! <pre>import pygame, sys\nimport random\nfrom pygame.locals import *\nimport time\n</pre> import pygame, sys import random from pygame.locals import * import time In\u00a0[\u00a0]: Copied! <pre>class Graphe:\n    def __init__(self, liste_sommets):\n        self.adj = {sommet: [] for sommet in liste_sommets}\n    \n    def sommets(self):\n        return [key for key in self.adj]\n    \n    def ordre(self):\n        return len(self.sommets())\n    \n    def voisins(self, sommet):\n        '''\n        renvoie la liste des voisins de sommet\n        '''\n        return self.adj[sommet]\n    \n    def est_voisin(self, s1, s2):\n        '''\n        verifie si s2 est un voisin de s1\n        '''\n        return s2 in self.voisins(s1)\n    \n    def ajoute_sommet(self, sommet):\n        '''\n        ajoute le sommet au graphe\n        '''\n        if sommet not in self.adj:\n            self.adj[sommet] = []\n        \n    def ajoute_arete(self, s1, s2):\n        '''\n        ajoute une ar\u00eate entre les sommets s1 et s2 dans le graphe, en les cr\u00e9ant\n        au pr\u00e9alable.\n        '''\n        self.ajoute_sommet(s1)\n        self.ajoute_sommet(s2)\n        if not self.est_voisin(s1, s2):\n            self.adj[s1].append(s2)\n        if not self.est_voisin(s2, s1):\n            self.adj[s2].append(s1)\n\n\nclass Cellule:\n    def __init__(self, mur_nord, mur_est, mur_sud, mur_ouest):\n        self.murs = {'N':mur_nord, 'E':mur_est, 'S':mur_sud, 'O':mur_ouest}\n\nclass Labyrinthe:\n    def __init__(self, hauteur, largeur):\n        self.grille = self.construire_grille(hauteur, largeur)\n        self.haut = hauteur\n        self.larg = largeur\n\n    def construire_grille(self, h, l):\n        grille = [[Cellule(True, True, True, True) for j in range(l)] for i in range(h)]\n        return grille\n    \n    def afficher(self, c):\n        '''\n        affiche le labyrinthe, avec c qui d\u00e9signe la longueur du c\u00f4t\u00e9 d'une cellule\n        '''\n        for i in range(len(self.grille)):\n            for j in range(len(self.grille[i])):\n                if self.grille[i][j].murs['S']:\n                    pygame.draw.line(screen, [0, 0, 0], [j*c, (i+1)*c], [(j+1)*c, (i+1)*c], 2)\n                if self.grille[i][j].murs['N']:\n                    pygame.draw.line(screen, [0, 0, 0], [j*c, i*c], [(j+1)*c, i*c], 2)\n                if self.grille[i][j].murs['E']:\n                    pygame.draw.line(screen, [0, 0, 0], [(j+1)*c, i*c], [(j+1)*c, (i+1)*c], 2)\n                if self.grille[i][j].murs['O']:\n                    pygame.draw.line(screen, [0, 0, 0], [j*c, i*c], [j*c, (i+1)*c], 2)\n\n\n    def creer_passage(self, i1, j1, i2, j2):\n        '''\n        cr\u00e9e une ouverture entre les cellules d'adresses (i1, j1) et (i2, j2)\n        '''\n        if i1 == i2 : #ouverture horizontale\n            if j1 &lt; j2:\n                self.grille[i1][j1].murs['E'] = False\n                self.grille[i2][j2].murs['O'] = False\n            else:\n                self.grille[i1][j1].murs['O'] = False\n                self.grille[i2][j2].murs['E'] = False\n        else:\n            if i1 &lt; i2:\n                self.grille[i1][j1].murs['S'] = False\n                self.grille[i2][j2].murs['N'] = False\n            else:\n                self.grille[i1][j1].murs['N'] = False\n                self.grille[i2][j2].murs['S'] = False\n                \n    def creer_labyrinthe(self, i, j, di, dj):\n        '''\n        g\u00e9n\u00e9r\u00e8re un labyrinthe de dimension (di, dj) \u00e0 partir de la case (i, j) en haut \u00e0 gauche.\n        '''\n        if di == 1:\n            for k in range(j, j+dj-1):\n                self.creer_passage(i, k, i, k+1)\n        elif dj == 1:\n            for k in range(i, i+di-1):\n                self.creer_passage(k, j, k+1, j)\n        else:\n            if di &gt;= dj:\n                c = random.randint(1, di-1)\n                self.creer_labyrinthe(i, j, c, dj)\n                self.creer_labyrinthe(i+c, j, di-c, dj)\n                r = random.randint(0, dj-1)\n                self.creer_passage(i+c-1, j+r, i+c, j+r)\n            else:\n                c = random.randint(1, dj-1)\n                self.creer_labyrinthe(i, j, di, c)\n                self.creer_labyrinthe(i, j+c, di, dj-c)\n                r = random.randint(0, di-1)\n                self.creer_passage(i+r, j+c-1, i+r, j+c)\n        \n    def lab_test(self):\n        self.grille = [[Cellule(False, False, False, False) for j in range(self.larg)] for i in range(self.haut)]\n        for k in range(0, self.haut):\n            if k != 20:\n                self.grille[k][20] = Cellule(False, True, False, False)\n                self.grille[k][21] = Cellule(False, False, False, True)\n        for p in range(10):\n            self.grille[19][21+p] = Cellule(False, False, True, False)\n            self.grille[20][21+p] = Cellule(True, False, True, False)\n            self.grille[21][21+p] = Cellule(True, False, False, False)\n        self.grille[19][20] = Cellule(False, True, False, False)\n        self.grille[19][21] = Cellule(False, False, True, True)\n        self.grille[21][20] = Cellule(False, True, False, False)\n        self.grille[21][21] = Cellule(True, False, False, True)\n</pre> class Graphe:     def __init__(self, liste_sommets):         self.adj = {sommet: [] for sommet in liste_sommets}          def sommets(self):         return [key for key in self.adj]          def ordre(self):         return len(self.sommets())          def voisins(self, sommet):         '''         renvoie la liste des voisins de sommet         '''         return self.adj[sommet]          def est_voisin(self, s1, s2):         '''         verifie si s2 est un voisin de s1         '''         return s2 in self.voisins(s1)          def ajoute_sommet(self, sommet):         '''         ajoute le sommet au graphe         '''         if sommet not in self.adj:             self.adj[sommet] = []              def ajoute_arete(self, s1, s2):         '''         ajoute une ar\u00eate entre les sommets s1 et s2 dans le graphe, en les cr\u00e9ant         au pr\u00e9alable.         '''         self.ajoute_sommet(s1)         self.ajoute_sommet(s2)         if not self.est_voisin(s1, s2):             self.adj[s1].append(s2)         if not self.est_voisin(s2, s1):             self.adj[s2].append(s1)   class Cellule:     def __init__(self, mur_nord, mur_est, mur_sud, mur_ouest):         self.murs = {'N':mur_nord, 'E':mur_est, 'S':mur_sud, 'O':mur_ouest}  class Labyrinthe:     def __init__(self, hauteur, largeur):         self.grille = self.construire_grille(hauteur, largeur)         self.haut = hauteur         self.larg = largeur      def construire_grille(self, h, l):         grille = [[Cellule(True, True, True, True) for j in range(l)] for i in range(h)]         return grille          def afficher(self, c):         '''         affiche le labyrinthe, avec c qui d\u00e9signe la longueur du c\u00f4t\u00e9 d'une cellule         '''         for i in range(len(self.grille)):             for j in range(len(self.grille[i])):                 if self.grille[i][j].murs['S']:                     pygame.draw.line(screen, [0, 0, 0], [j*c, (i+1)*c], [(j+1)*c, (i+1)*c], 2)                 if self.grille[i][j].murs['N']:                     pygame.draw.line(screen, [0, 0, 0], [j*c, i*c], [(j+1)*c, i*c], 2)                 if self.grille[i][j].murs['E']:                     pygame.draw.line(screen, [0, 0, 0], [(j+1)*c, i*c], [(j+1)*c, (i+1)*c], 2)                 if self.grille[i][j].murs['O']:                     pygame.draw.line(screen, [0, 0, 0], [j*c, i*c], [j*c, (i+1)*c], 2)       def creer_passage(self, i1, j1, i2, j2):         '''         cr\u00e9e une ouverture entre les cellules d'adresses (i1, j1) et (i2, j2)         '''         if i1 == i2 : #ouverture horizontale             if j1 &lt; j2:                 self.grille[i1][j1].murs['E'] = False                 self.grille[i2][j2].murs['O'] = False             else:                 self.grille[i1][j1].murs['O'] = False                 self.grille[i2][j2].murs['E'] = False         else:             if i1 &lt; i2:                 self.grille[i1][j1].murs['S'] = False                 self.grille[i2][j2].murs['N'] = False             else:                 self.grille[i1][j1].murs['N'] = False                 self.grille[i2][j2].murs['S'] = False                      def creer_labyrinthe(self, i, j, di, dj):         '''         g\u00e9n\u00e9r\u00e8re un labyrinthe de dimension (di, dj) \u00e0 partir de la case (i, j) en haut \u00e0 gauche.         '''         if di == 1:             for k in range(j, j+dj-1):                 self.creer_passage(i, k, i, k+1)         elif dj == 1:             for k in range(i, i+di-1):                 self.creer_passage(k, j, k+1, j)         else:             if di &gt;= dj:                 c = random.randint(1, di-1)                 self.creer_labyrinthe(i, j, c, dj)                 self.creer_labyrinthe(i+c, j, di-c, dj)                 r = random.randint(0, dj-1)                 self.creer_passage(i+c-1, j+r, i+c, j+r)             else:                 c = random.randint(1, dj-1)                 self.creer_labyrinthe(i, j, di, c)                 self.creer_labyrinthe(i, j+c, di, dj-c)                 r = random.randint(0, di-1)                 self.creer_passage(i+r, j+c-1, i+r, j+c)              def lab_test(self):         self.grille = [[Cellule(False, False, False, False) for j in range(self.larg)] for i in range(self.haut)]         for k in range(0, self.haut):             if k != 20:                 self.grille[k][20] = Cellule(False, True, False, False)                 self.grille[k][21] = Cellule(False, False, False, True)         for p in range(10):             self.grille[19][21+p] = Cellule(False, False, True, False)             self.grille[20][21+p] = Cellule(True, False, True, False)             self.grille[21][21+p] = Cellule(True, False, False, False)         self.grille[19][20] = Cellule(False, True, False, False)         self.grille[19][21] = Cellule(False, False, True, True)         self.grille[21][20] = Cellule(False, True, False, False)         self.grille[21][21] = Cellule(True, False, False, True) In\u00a0[\u00a0]: Copied! <pre>def trouve_chemin_DFS(g, depart, arrivee):\n    '''\n    Parcours en largeur du graphe g en partant du sommet depart,\n    qui s'arr\u00eate d\u00e8s que le sommet arrivee est atteint.\n    Renvoie alors le chemin du depart vers arrivee.\n    '''\n    traites = []\n    en_attente = [depart]\n    parentD = {}\n    while en_attente != [] :\n        sommet = en_attente.pop()\n        x = sommet[1]\n        y = sommet[0]\n        cote = cote_cellule\n        pygame.draw.rect(screen, (0,255,0), [0*cote, 0*cote, cote, cote], 0)\n        pygame.draw.rect(screen, (255,0,0), [(largeur_laby-1)*cote, (hauteur_laby-1)*cote, cote, cote], 0)\n        pygame.draw.rect(screen, (255,150,150,20), [x*cote, y*cote, cote, cote], 0)\n        laby.afficher(cote_cellule)\n        #time.sleep(0.5)\n        pygame.display.update()\n        if sommet not in traites:\n            voisins = g.voisins(sommet)\n            for voisin in voisins:\n                if voisin not in traites:\n                    \n                    en_attente.append(voisin)\n                    parentD[voisin] = sommet\n                    if voisin == arrivee:\n                        return recupere_chemin(depart, arrivee, parentD)\n            traites.append(sommet)\n    print('chemin non trouv\u00e9')\n    return None\n\n\ndef trouve_chemin_BFS(g, depart, arrivee):\n    '''\n    Parcours en largeur du graphe g en partant du sommet depart,\n    qui s'arr\u00eate d\u00e8s que le sommet arrivee est atteint.\n    Renvoie alors le chemin du depart vers arrivee.\n    '''\n    traites = []\n    decouverts = [depart]\n    en_attente = [depart]\n    parentB = {}\n    while en_attente != [] :\n        sommet = en_attente.pop(0)\n        x = sommet[1]\n        y = sommet[0]\n        cote = cote_cellule\n        pygame.draw.rect(screen, (0,255,0), [0*cote, 0*cote, cote, cote], 0)\n        pygame.draw.rect(screen, (255,0,0), [(largeur_laby-1)*cote, (hauteur_laby-1)*cote, cote, cote], 0)\n        pygame.draw.rect(screen, (150,150,255,20), [x*cote, y*cote, cote, cote], 0)\n        laby.afficher(cote_cellule)\n        \n        pygame.display.update()\n        voisins = g.voisins(sommet)\n        for voisin in voisins:\n            if voisin not in decouverts:\n                decouverts.append(voisin)\n                en_attente.append(voisin)\n                parentB[voisin] = sommet\n                if voisin == arrivee:\n                    return recupere_chemin(depart, arrivee, parentB)\n        traites.append(sommet)\n    print('chemin non trouv\u00e9')\n    return None\n\n\n\ndef recupere_chemin(depart, arrivee, parent):\n    sommet = arrivee\n    chemin = [arrivee]\n    while sommet != depart:\n        sommet = parent[sommet]\n        chemin.append(sommet)\n    return chemin[::-1]\n\n\n\ndef affiche_chemin(chemin:list, cote:int, coul, delay):\n    '''\n    Dessine dans la fenetre Pygame screen des carr\u00e9s de cot\u00e9 taille avec comme\n    couleur:\n    - du vert si le sommet est la source\n    - du rouge si le sommet est la cible\n    - du bleu sinon.\n    \n    Le param\u00e8tre chemin est une liste de tuples correspondant aux adresses\n    (ligne, colonne) des cellules dans la grille du labyrinthe.\n    '''\n    source = chemin[0]\n    cible = chemin[-1]\n    chemin = chemin[::-1]\n    for cellule in chemin:\n        x = cellule[1]\n        y = cellule[0]\n        if cellule == source:\n            pygame.draw.rect(screen, (0,255,0) , [x*cote, y*cote, cote, cote], 0)\n        elif cellule == cible:\n            pygame.draw.rect(screen, (255,0,0) , [x*cote, y*cote, cote, cote], 0)\n        else:\n            pygame.draw.rect(screen, coul, [x*cote, y*cote, cote, cote], 0)\n        time.sleep(delay)\n        pygame.display.update()\n</pre> def trouve_chemin_DFS(g, depart, arrivee):     '''     Parcours en largeur du graphe g en partant du sommet depart,     qui s'arr\u00eate d\u00e8s que le sommet arrivee est atteint.     Renvoie alors le chemin du depart vers arrivee.     '''     traites = []     en_attente = [depart]     parentD = {}     while en_attente != [] :         sommet = en_attente.pop()         x = sommet[1]         y = sommet[0]         cote = cote_cellule         pygame.draw.rect(screen, (0,255,0), [0*cote, 0*cote, cote, cote], 0)         pygame.draw.rect(screen, (255,0,0), [(largeur_laby-1)*cote, (hauteur_laby-1)*cote, cote, cote], 0)         pygame.draw.rect(screen, (255,150,150,20), [x*cote, y*cote, cote, cote], 0)         laby.afficher(cote_cellule)         #time.sleep(0.5)         pygame.display.update()         if sommet not in traites:             voisins = g.voisins(sommet)             for voisin in voisins:                 if voisin not in traites:                                          en_attente.append(voisin)                     parentD[voisin] = sommet                     if voisin == arrivee:                         return recupere_chemin(depart, arrivee, parentD)             traites.append(sommet)     print('chemin non trouv\u00e9')     return None   def trouve_chemin_BFS(g, depart, arrivee):     '''     Parcours en largeur du graphe g en partant du sommet depart,     qui s'arr\u00eate d\u00e8s que le sommet arrivee est atteint.     Renvoie alors le chemin du depart vers arrivee.     '''     traites = []     decouverts = [depart]     en_attente = [depart]     parentB = {}     while en_attente != [] :         sommet = en_attente.pop(0)         x = sommet[1]         y = sommet[0]         cote = cote_cellule         pygame.draw.rect(screen, (0,255,0), [0*cote, 0*cote, cote, cote], 0)         pygame.draw.rect(screen, (255,0,0), [(largeur_laby-1)*cote, (hauteur_laby-1)*cote, cote, cote], 0)         pygame.draw.rect(screen, (150,150,255,20), [x*cote, y*cote, cote, cote], 0)         laby.afficher(cote_cellule)                  pygame.display.update()         voisins = g.voisins(sommet)         for voisin in voisins:             if voisin not in decouverts:                 decouverts.append(voisin)                 en_attente.append(voisin)                 parentB[voisin] = sommet                 if voisin == arrivee:                     return recupere_chemin(depart, arrivee, parentB)         traites.append(sommet)     print('chemin non trouv\u00e9')     return None    def recupere_chemin(depart, arrivee, parent):     sommet = arrivee     chemin = [arrivee]     while sommet != depart:         sommet = parent[sommet]         chemin.append(sommet)     return chemin[::-1]    def affiche_chemin(chemin:list, cote:int, coul, delay):     '''     Dessine dans la fenetre Pygame screen des carr\u00e9s de cot\u00e9 taille avec comme     couleur:     - du vert si le sommet est la source     - du rouge si le sommet est la cible     - du bleu sinon.          Le param\u00e8tre chemin est une liste de tuples correspondant aux adresses     (ligne, colonne) des cellules dans la grille du labyrinthe.     '''     source = chemin[0]     cible = chemin[-1]     chemin = chemin[::-1]     for cellule in chemin:         x = cellule[1]         y = cellule[0]         if cellule == source:             pygame.draw.rect(screen, (0,255,0) , [x*cote, y*cote, cote, cote], 0)         elif cellule == cible:             pygame.draw.rect(screen, (255,0,0) , [x*cote, y*cote, cote, cote], 0)         else:             pygame.draw.rect(screen, coul, [x*cote, y*cote, cote, cote], 0)         time.sleep(delay)         pygame.display.update()  In\u00a0[\u00a0]: Copied! <pre>hauteur_laby, largeur_laby, cote_cellule = 40, 40, 10\ntaille_ecran = (largeur_laby*cote_cellule, hauteur_laby*cote_cellule)\n\nlaby = Labyrinthe(hauteur_laby, largeur_laby)\n#laby.creer_labyrinthe(0, 0, hauteur_laby, largeur_laby)\nlaby.lab_test()\n\ndepart, arrivee = (0,0), (hauteur_laby-1, largeur_laby-1)\n\n#depart, arrivee = (0,0), (15, 15)\n</pre> hauteur_laby, largeur_laby, cote_cellule = 40, 40, 10 taille_ecran = (largeur_laby*cote_cellule, hauteur_laby*cote_cellule)  laby = Labyrinthe(hauteur_laby, largeur_laby) #laby.creer_labyrinthe(0, 0, hauteur_laby, largeur_laby) laby.lab_test()  depart, arrivee = (0,0), (hauteur_laby-1, largeur_laby-1)  #depart, arrivee = (0,0), (15, 15) In\u00a0[\u00a0]: Copied! <pre>g = Graphe([])\n\nfor i in range(hauteur_laby):\n    for j in range(largeur_laby):\n        if not laby.grille[i][j].murs['E']:\n            g.ajoute_arete((i, j), (i, j+1))\n        if not laby.grille[i][j].murs['O']:\n            g.ajoute_arete((i, j), (i, j-1))\n        if not laby.grille[i][j].murs['S']:\n            g.ajoute_arete((i, j), (i+1, j))\n        if not laby.grille[i][j].murs['N']:\n            g.ajoute_arete((i, j), (i-1, j))\n</pre> g = Graphe([])  for i in range(hauteur_laby):     for j in range(largeur_laby):         if not laby.grille[i][j].murs['E']:             g.ajoute_arete((i, j), (i, j+1))         if not laby.grille[i][j].murs['O']:             g.ajoute_arete((i, j), (i, j-1))         if not laby.grille[i][j].murs['S']:             g.ajoute_arete((i, j), (i+1, j))         if not laby.grille[i][j].murs['N']:             g.ajoute_arete((i, j), (i-1, j))                    In\u00a0[\u00a0]: Copied! <pre>pygame.init()\n\nscreen = pygame.display.set_mode(taille_ecran)\nscreen.fill([255, 255, 255])\npygame.display.set_caption(\"Chemin dans un labyrinthe\")\n\n\ncheminBFS = trouve_chemin_BFS(g, depart, arrivee)\naffiche_chemin(cheminBFS, cote_cellule, (0,0,255), 0.02)\n\ncheminDFS = trouve_chemin_DFS(g, depart, arrivee)\naffiche_chemin(cheminDFS, cote_cellule, (255,0,0), 0.02)\naffiche_chemin(cheminBFS, cote_cellule, (0,0,255), 0)\n\nlaby.afficher(cote_cellule)\n\n\ncontinuer = True\nwhile continuer:\n    for evenement in pygame.event.get():\n        if evenement.type == pygame.QUIT:\n            continuer = False\n            pygame.display.quit()\n            sys.exit()\n\n    pygame.display.flip()\n\npygame.quit()\n</pre> pygame.init()  screen = pygame.display.set_mode(taille_ecran) screen.fill([255, 255, 255]) pygame.display.set_caption(\"Chemin dans un labyrinthe\")   cheminBFS = trouve_chemin_BFS(g, depart, arrivee) affiche_chemin(cheminBFS, cote_cellule, (0,0,255), 0.02)  cheminDFS = trouve_chemin_DFS(g, depart, arrivee) affiche_chemin(cheminDFS, cote_cellule, (255,0,0), 0.02) affiche_chemin(cheminBFS, cote_cellule, (0,0,255), 0)  laby.afficher(cote_cellule)   continuer = True while continuer:     for evenement in pygame.event.get():         if evenement.type == pygame.QUIT:             continuer = False             pygame.display.quit()             sys.exit()      pygame.display.flip()  pygame.quit()"},{"location":"T1_Structures_de_donnees/1.5_Graphes/data/anim_laby_DFSvsBFS_laby_degenere/#classes","title":"Classes\u00b6","text":"<p>###############################################################################</p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/data/anim_laby_DFSvsBFS_laby_degenere/#fonctions","title":"Fonctions\u00b6","text":"<p>###############################################################################</p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/data/anim_laby_DFSvsBFS_laby_degenere/#constantes","title":"Constantes\u00b6","text":"<p>###############################################################################</p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/data/anim_laby_DFSvsBFS_laby_degenere/#graphe","title":"Graphe\u00b6","text":"<p>###############################################################################</p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/data/anim_laby_DFSvsBFS_laby_degenere/#pygame","title":"Pygame\u00b6","text":"<p>###############################################################################</p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/data/anim_laby_DFSvsBFS_laby_parfait/","title":"anim laby DFSvsBFS laby parfait","text":"In\u00a0[\u00a0]: Copied! <pre>%matplotlib inline\n</pre> %matplotlib inline In\u00a0[\u00a0]: Copied! <pre>import pygame, sys\nimport random\nfrom pygame.locals import *\nimport time\n</pre> import pygame, sys import random from pygame.locals import * import time In\u00a0[\u00a0]: Copied! <pre>class Graphe:\n    def __init__(self, liste_sommets):\n        self.adj = {sommet: [] for sommet in liste_sommets}\n    \n    def sommets(self):\n        return [key for key in self.adj]\n    \n    def ordre(self):\n        return len(self.sommets())\n    \n    def voisins(self, sommet):\n        '''\n        renvoie la liste des voisins de sommet\n        '''\n        return self.adj[sommet]\n    \n    def est_voisin(self, s1, s2):\n        '''\n        verifie si s2 est un voisin de s1\n        '''\n        return s2 in self.voisins(s1)\n    \n    def ajoute_sommet(self, sommet):\n        '''\n        ajoute le sommet au graphe\n        '''\n        if sommet not in self.adj:\n            self.adj[sommet] = []\n        \n    def ajoute_arete(self, s1, s2):\n        '''\n        ajoute une ar\u00eate entre les sommets s1 et s2 dans le graphe, en les cr\u00e9ant\n        au pr\u00e9alable.\n        '''\n        self.ajoute_sommet(s1)\n        self.ajoute_sommet(s2)\n        if not self.est_voisin(s1, s2):\n            self.adj[s1].append(s2)\n        if not self.est_voisin(s2, s1):\n            self.adj[s2].append(s1)\n\n\nclass Cellule:\n    def __init__(self, mur_nord, mur_est, mur_sud, mur_ouest):\n        self.murs = {'N':mur_nord, 'E':mur_est, 'S':mur_sud, 'O':mur_ouest}\n\nclass Labyrinthe:\n    def __init__(self, hauteur, largeur):\n        self.grille = self.construire_grille(hauteur, largeur)\n        self.haut = hauteur\n        self.larg = largeur\n\n    def construire_grille(self, h, l):\n        grille = [[Cellule(True, True, True, True) for j in range(l)] for i in range(h)]\n        return grille\n    \n    def afficher(self, c):\n        '''\n        affiche le labyrinthe, avec c qui d\u00e9signe la longueur du c\u00f4t\u00e9 d'une cellule\n        '''\n        for i in range(len(self.grille)):\n            for j in range(len(self.grille[i])):\n                if self.grille[i][j].murs['S']:\n                    pygame.draw.line(screen, [0, 0, 0], [j*c, (i+1)*c], [(j+1)*c, (i+1)*c], 2)\n                if self.grille[i][j].murs['N']:\n                    pygame.draw.line(screen, [0, 0, 0], [j*c, i*c], [(j+1)*c, i*c], 2)\n                if self.grille[i][j].murs['E']:\n                    pygame.draw.line(screen, [0, 0, 0], [(j+1)*c, i*c], [(j+1)*c, (i+1)*c], 2)\n                if self.grille[i][j].murs['O']:\n                    pygame.draw.line(screen, [0, 0, 0], [j*c, i*c], [j*c, (i+1)*c], 2)\n\n\n    def creer_passage(self, i1, j1, i2, j2):\n        '''\n        cr\u00e9e une ouverture entre les cellules d'adresses (i1, j1) et (i2, j2)\n        '''\n        if i1 == i2 : #ouverture horizontale\n            if j1 &lt; j2:\n                self.grille[i1][j1].murs['E'] = False\n                self.grille[i2][j2].murs['O'] = False\n            else:\n                self.grille[i1][j1].murs['O'] = False\n                self.grille[i2][j2].murs['E'] = False\n        else:\n            if i1 &lt; i2:\n                self.grille[i1][j1].murs['S'] = False\n                self.grille[i2][j2].murs['N'] = False\n            else:\n                self.grille[i1][j1].murs['N'] = False\n                self.grille[i2][j2].murs['S'] = False\n                \n    def creer_labyrinthe(self, i, j, di, dj):\n        '''\n        g\u00e9n\u00e9r\u00e8re un labyrinthe de dimension (di, dj) \u00e0 partir de la case (i, j) en haut \u00e0 gauche.\n        '''\n        if di == 1:\n            for k in range(j, j+dj-1):\n                self.creer_passage(i, k, i, k+1)\n        elif dj == 1:\n            for k in range(i, i+di-1):\n                self.creer_passage(k, j, k+1, j)\n        else:\n            if di &gt;= dj:\n                c = random.randint(1, di-1)\n                self.creer_labyrinthe(i, j, c, dj)\n                self.creer_labyrinthe(i+c, j, di-c, dj)\n                r = random.randint(0, dj-1)\n                self.creer_passage(i+c-1, j+r, i+c, j+r)\n            else:\n                c = random.randint(1, dj-1)\n                self.creer_labyrinthe(i, j, di, c)\n                self.creer_labyrinthe(i, j+c, di, dj-c)\n                r = random.randint(0, di-1)\n                self.creer_passage(i+r, j+c-1, i+r, j+c)\n        \n    def lab_test(self):\n        self.grille = [[Cellule(False, False, False, False) for j in range(self.larg)] for i in range(self.haut)]\n        for k in range(0, self.haut):\n            if k != 20:\n                self.grille[k][20] = Cellule(False, True, False, False)\n                self.grille[k][21] = Cellule(False, False, False, True)\n        for p in range(10):\n            self.grille[19][21+p] = Cellule(False, False, True, False)\n            self.grille[20][21+p] = Cellule(True, False, True, False)\n            self.grille[21][21+p] = Cellule(True, False, False, False)\n        self.grille[19][20] = Cellule(False, True, False, False)\n        self.grille[19][21] = Cellule(False, False, True, True)\n        self.grille[21][20] = Cellule(False, True, False, False)\n        self.grille[21][21] = Cellule(True, False, False, True)\n</pre> class Graphe:     def __init__(self, liste_sommets):         self.adj = {sommet: [] for sommet in liste_sommets}          def sommets(self):         return [key for key in self.adj]          def ordre(self):         return len(self.sommets())          def voisins(self, sommet):         '''         renvoie la liste des voisins de sommet         '''         return self.adj[sommet]          def est_voisin(self, s1, s2):         '''         verifie si s2 est un voisin de s1         '''         return s2 in self.voisins(s1)          def ajoute_sommet(self, sommet):         '''         ajoute le sommet au graphe         '''         if sommet not in self.adj:             self.adj[sommet] = []              def ajoute_arete(self, s1, s2):         '''         ajoute une ar\u00eate entre les sommets s1 et s2 dans le graphe, en les cr\u00e9ant         au pr\u00e9alable.         '''         self.ajoute_sommet(s1)         self.ajoute_sommet(s2)         if not self.est_voisin(s1, s2):             self.adj[s1].append(s2)         if not self.est_voisin(s2, s1):             self.adj[s2].append(s1)   class Cellule:     def __init__(self, mur_nord, mur_est, mur_sud, mur_ouest):         self.murs = {'N':mur_nord, 'E':mur_est, 'S':mur_sud, 'O':mur_ouest}  class Labyrinthe:     def __init__(self, hauteur, largeur):         self.grille = self.construire_grille(hauteur, largeur)         self.haut = hauteur         self.larg = largeur      def construire_grille(self, h, l):         grille = [[Cellule(True, True, True, True) for j in range(l)] for i in range(h)]         return grille          def afficher(self, c):         '''         affiche le labyrinthe, avec c qui d\u00e9signe la longueur du c\u00f4t\u00e9 d'une cellule         '''         for i in range(len(self.grille)):             for j in range(len(self.grille[i])):                 if self.grille[i][j].murs['S']:                     pygame.draw.line(screen, [0, 0, 0], [j*c, (i+1)*c], [(j+1)*c, (i+1)*c], 2)                 if self.grille[i][j].murs['N']:                     pygame.draw.line(screen, [0, 0, 0], [j*c, i*c], [(j+1)*c, i*c], 2)                 if self.grille[i][j].murs['E']:                     pygame.draw.line(screen, [0, 0, 0], [(j+1)*c, i*c], [(j+1)*c, (i+1)*c], 2)                 if self.grille[i][j].murs['O']:                     pygame.draw.line(screen, [0, 0, 0], [j*c, i*c], [j*c, (i+1)*c], 2)       def creer_passage(self, i1, j1, i2, j2):         '''         cr\u00e9e une ouverture entre les cellules d'adresses (i1, j1) et (i2, j2)         '''         if i1 == i2 : #ouverture horizontale             if j1 &lt; j2:                 self.grille[i1][j1].murs['E'] = False                 self.grille[i2][j2].murs['O'] = False             else:                 self.grille[i1][j1].murs['O'] = False                 self.grille[i2][j2].murs['E'] = False         else:             if i1 &lt; i2:                 self.grille[i1][j1].murs['S'] = False                 self.grille[i2][j2].murs['N'] = False             else:                 self.grille[i1][j1].murs['N'] = False                 self.grille[i2][j2].murs['S'] = False                      def creer_labyrinthe(self, i, j, di, dj):         '''         g\u00e9n\u00e9r\u00e8re un labyrinthe de dimension (di, dj) \u00e0 partir de la case (i, j) en haut \u00e0 gauche.         '''         if di == 1:             for k in range(j, j+dj-1):                 self.creer_passage(i, k, i, k+1)         elif dj == 1:             for k in range(i, i+di-1):                 self.creer_passage(k, j, k+1, j)         else:             if di &gt;= dj:                 c = random.randint(1, di-1)                 self.creer_labyrinthe(i, j, c, dj)                 self.creer_labyrinthe(i+c, j, di-c, dj)                 r = random.randint(0, dj-1)                 self.creer_passage(i+c-1, j+r, i+c, j+r)             else:                 c = random.randint(1, dj-1)                 self.creer_labyrinthe(i, j, di, c)                 self.creer_labyrinthe(i, j+c, di, dj-c)                 r = random.randint(0, di-1)                 self.creer_passage(i+r, j+c-1, i+r, j+c)              def lab_test(self):         self.grille = [[Cellule(False, False, False, False) for j in range(self.larg)] for i in range(self.haut)]         for k in range(0, self.haut):             if k != 20:                 self.grille[k][20] = Cellule(False, True, False, False)                 self.grille[k][21] = Cellule(False, False, False, True)         for p in range(10):             self.grille[19][21+p] = Cellule(False, False, True, False)             self.grille[20][21+p] = Cellule(True, False, True, False)             self.grille[21][21+p] = Cellule(True, False, False, False)         self.grille[19][20] = Cellule(False, True, False, False)         self.grille[19][21] = Cellule(False, False, True, True)         self.grille[21][20] = Cellule(False, True, False, False)         self.grille[21][21] = Cellule(True, False, False, True) In\u00a0[\u00a0]: Copied! <pre>def trouve_chemin_DFS(g, depart, arrivee):\n    '''\n    Parcours en largeur du graphe g en partant du sommet depart,\n    qui s'arr\u00eate d\u00e8s que le sommet arrivee est atteint.\n    Renvoie alors le chemin du depart vers arrivee.\n    '''\n    traites = []\n    en_attente = [depart]\n    parentD = {}\n    while en_attente != [] :\n        sommet = en_attente.pop()\n        x = sommet[1]\n        y = sommet[0]\n        cote = cote_cellule\n        pygame.draw.rect(screen, (0,255,0), [0*cote, 0*cote, cote, cote], 0)\n        pygame.draw.rect(screen, (255,0,0), [(largeur_laby-1)*cote, (hauteur_laby-1)*cote, cote, cote], 0)\n        pygame.draw.rect(screen, (255,150,150,20), [x*cote, y*cote, cote, cote], 0)\n        laby.afficher(cote_cellule)\n        #time.sleep(0.5)\n        pygame.display.update()\n        if sommet not in traites:\n            voisins = g.voisins(sommet)\n            for voisin in voisins:\n                if voisin not in traites:\n                    \n                    en_attente.append(voisin)\n                    parentD[voisin] = sommet\n                    if voisin == arrivee:\n                        return recupere_chemin(depart, arrivee, parentD)\n            traites.append(sommet)\n    print('chemin non trouv\u00e9')\n    return None\n\n\ndef trouve_chemin_BFS(g, depart, arrivee):\n    '''\n    Parcours en largeur du graphe g en partant du sommet depart,\n    qui s'arr\u00eate d\u00e8s que le sommet arrivee est atteint.\n    Renvoie alors le chemin du depart vers arrivee.\n    '''\n    traites = []\n    decouverts = [depart]\n    en_attente = [depart]\n    parentB = {}\n    while en_attente != [] :\n        sommet = en_attente.pop(0)\n        x = sommet[1]\n        y = sommet[0]\n        cote = cote_cellule\n        pygame.draw.rect(screen, (0,255,0), [0*cote, 0*cote, cote, cote], 0)\n        pygame.draw.rect(screen, (255,0,0), [(largeur_laby-1)*cote, (hauteur_laby-1)*cote, cote, cote], 0)\n        pygame.draw.rect(screen, (150,150,255,20), [x*cote, y*cote, cote, cote], 0)\n        laby.afficher(cote_cellule)\n        \n        pygame.display.update()\n        voisins = g.voisins(sommet)\n        for voisin in voisins:\n            if voisin not in decouverts:\n                decouverts.append(voisin)\n                en_attente.append(voisin)\n                parentB[voisin] = sommet\n                if voisin == arrivee:\n                    return recupere_chemin(depart, arrivee, parentB)\n        traites.append(sommet)\n    print('chemin non trouv\u00e9')\n    return None\n\n\n\ndef recupere_chemin(depart, arrivee, parent):\n    sommet = arrivee\n    chemin = [arrivee]\n    while sommet != depart:\n        sommet = parent[sommet]\n        chemin.append(sommet)\n    return chemin[::-1]\n\n\n\ndef affiche_chemin(chemin:list, cote:int, coul, delay):\n    '''\n    Dessine dans la fenetre Pygame screen des carr\u00e9s de cot\u00e9 taille avec comme\n    couleur:\n    - du vert si le sommet est la source\n    - du rouge si le sommet est la cible\n    - du bleu sinon.\n    \n    Le param\u00e8tre chemin est une liste de tuples correspondant aux adresses\n    (ligne, colonne) des cellules dans la grille du labyrinthe.\n    '''\n    source = chemin[0]\n    cible = chemin[-1]\n    chemin = chemin[::-1]\n    for cellule in chemin:\n        x = cellule[1]\n        y = cellule[0]\n        if cellule == source:\n            pygame.draw.rect(screen, (0,255,0) , [x*cote, y*cote, cote, cote], 0)\n        elif cellule == cible:\n            pygame.draw.rect(screen, (255,0,0) , [x*cote, y*cote, cote, cote], 0)\n        else:\n            pygame.draw.rect(screen, coul, [x*cote, y*cote, cote, cote], 0)\n        time.sleep(delay)\n        pygame.display.update()\n</pre> def trouve_chemin_DFS(g, depart, arrivee):     '''     Parcours en largeur du graphe g en partant du sommet depart,     qui s'arr\u00eate d\u00e8s que le sommet arrivee est atteint.     Renvoie alors le chemin du depart vers arrivee.     '''     traites = []     en_attente = [depart]     parentD = {}     while en_attente != [] :         sommet = en_attente.pop()         x = sommet[1]         y = sommet[0]         cote = cote_cellule         pygame.draw.rect(screen, (0,255,0), [0*cote, 0*cote, cote, cote], 0)         pygame.draw.rect(screen, (255,0,0), [(largeur_laby-1)*cote, (hauteur_laby-1)*cote, cote, cote], 0)         pygame.draw.rect(screen, (255,150,150,20), [x*cote, y*cote, cote, cote], 0)         laby.afficher(cote_cellule)         #time.sleep(0.5)         pygame.display.update()         if sommet not in traites:             voisins = g.voisins(sommet)             for voisin in voisins:                 if voisin not in traites:                                          en_attente.append(voisin)                     parentD[voisin] = sommet                     if voisin == arrivee:                         return recupere_chemin(depart, arrivee, parentD)             traites.append(sommet)     print('chemin non trouv\u00e9')     return None   def trouve_chemin_BFS(g, depart, arrivee):     '''     Parcours en largeur du graphe g en partant du sommet depart,     qui s'arr\u00eate d\u00e8s que le sommet arrivee est atteint.     Renvoie alors le chemin du depart vers arrivee.     '''     traites = []     decouverts = [depart]     en_attente = [depart]     parentB = {}     while en_attente != [] :         sommet = en_attente.pop(0)         x = sommet[1]         y = sommet[0]         cote = cote_cellule         pygame.draw.rect(screen, (0,255,0), [0*cote, 0*cote, cote, cote], 0)         pygame.draw.rect(screen, (255,0,0), [(largeur_laby-1)*cote, (hauteur_laby-1)*cote, cote, cote], 0)         pygame.draw.rect(screen, (150,150,255,20), [x*cote, y*cote, cote, cote], 0)         laby.afficher(cote_cellule)                  pygame.display.update()         voisins = g.voisins(sommet)         for voisin in voisins:             if voisin not in decouverts:                 decouverts.append(voisin)                 en_attente.append(voisin)                 parentB[voisin] = sommet                 if voisin == arrivee:                     return recupere_chemin(depart, arrivee, parentB)         traites.append(sommet)     print('chemin non trouv\u00e9')     return None    def recupere_chemin(depart, arrivee, parent):     sommet = arrivee     chemin = [arrivee]     while sommet != depart:         sommet = parent[sommet]         chemin.append(sommet)     return chemin[::-1]    def affiche_chemin(chemin:list, cote:int, coul, delay):     '''     Dessine dans la fenetre Pygame screen des carr\u00e9s de cot\u00e9 taille avec comme     couleur:     - du vert si le sommet est la source     - du rouge si le sommet est la cible     - du bleu sinon.          Le param\u00e8tre chemin est une liste de tuples correspondant aux adresses     (ligne, colonne) des cellules dans la grille du labyrinthe.     '''     source = chemin[0]     cible = chemin[-1]     chemin = chemin[::-1]     for cellule in chemin:         x = cellule[1]         y = cellule[0]         if cellule == source:             pygame.draw.rect(screen, (0,255,0) , [x*cote, y*cote, cote, cote], 0)         elif cellule == cible:             pygame.draw.rect(screen, (255,0,0) , [x*cote, y*cote, cote, cote], 0)         else:             pygame.draw.rect(screen, coul, [x*cote, y*cote, cote, cote], 0)         time.sleep(delay)         pygame.display.update()  In\u00a0[\u00a0]: Copied! <pre>hauteur_laby, largeur_laby, cote_cellule = 40, 40, 10\ntaille_ecran = (largeur_laby*cote_cellule, hauteur_laby*cote_cellule)\n\nlaby = Labyrinthe(hauteur_laby, largeur_laby)\nlaby.creer_labyrinthe(0, 0, hauteur_laby, largeur_laby)\n#laby.lab_test()\n\ndepart, arrivee = (0,0), (hauteur_laby-1, largeur_laby-1)\n\n#depart, arrivee = (0,0), (15, 15)\n</pre> hauteur_laby, largeur_laby, cote_cellule = 40, 40, 10 taille_ecran = (largeur_laby*cote_cellule, hauteur_laby*cote_cellule)  laby = Labyrinthe(hauteur_laby, largeur_laby) laby.creer_labyrinthe(0, 0, hauteur_laby, largeur_laby) #laby.lab_test()  depart, arrivee = (0,0), (hauteur_laby-1, largeur_laby-1)  #depart, arrivee = (0,0), (15, 15) In\u00a0[\u00a0]: Copied! <pre>g = Graphe([])\n\nfor i in range(hauteur_laby):\n    for j in range(largeur_laby):\n        if not laby.grille[i][j].murs['E']:\n            g.ajoute_arete((i, j), (i, j+1))\n        if not laby.grille[i][j].murs['O']:\n            g.ajoute_arete((i, j), (i, j-1))\n        if not laby.grille[i][j].murs['S']:\n            g.ajoute_arete((i, j), (i+1, j))\n        if not laby.grille[i][j].murs['N']:\n            g.ajoute_arete((i, j), (i-1, j))\n</pre> g = Graphe([])  for i in range(hauteur_laby):     for j in range(largeur_laby):         if not laby.grille[i][j].murs['E']:             g.ajoute_arete((i, j), (i, j+1))         if not laby.grille[i][j].murs['O']:             g.ajoute_arete((i, j), (i, j-1))         if not laby.grille[i][j].murs['S']:             g.ajoute_arete((i, j), (i+1, j))         if not laby.grille[i][j].murs['N']:             g.ajoute_arete((i, j), (i-1, j))                    In\u00a0[\u00a0]: Copied! <pre>pygame.init()\n\nscreen = pygame.display.set_mode(taille_ecran)\nscreen.fill([255, 255, 255])\npygame.display.set_caption(\"Chemin dans un labyrinthe\")\n\n\ncheminBFS = trouve_chemin_BFS(g, depart, arrivee)\naffiche_chemin(cheminBFS, cote_cellule, (0,0,255), 0.02)\n\ncheminDFS = trouve_chemin_DFS(g, depart, arrivee)\naffiche_chemin(cheminDFS, cote_cellule, (255,0,0), 0.02)\naffiche_chemin(cheminBFS, cote_cellule, (0,0,255), 0)\n\nlaby.afficher(cote_cellule)\n\n\ncontinuer = True\nwhile continuer:\n    for evenement in pygame.event.get():\n        if evenement.type == pygame.QUIT:\n            continuer = False\n            pygame.display.quit()\n            sys.exit()\n\n    pygame.display.flip()\n\npygame.quit()\n</pre> pygame.init()  screen = pygame.display.set_mode(taille_ecran) screen.fill([255, 255, 255]) pygame.display.set_caption(\"Chemin dans un labyrinthe\")   cheminBFS = trouve_chemin_BFS(g, depart, arrivee) affiche_chemin(cheminBFS, cote_cellule, (0,0,255), 0.02)  cheminDFS = trouve_chemin_DFS(g, depart, arrivee) affiche_chemin(cheminDFS, cote_cellule, (255,0,0), 0.02) affiche_chemin(cheminBFS, cote_cellule, (0,0,255), 0)  laby.afficher(cote_cellule)   continuer = True while continuer:     for evenement in pygame.event.get():         if evenement.type == pygame.QUIT:             continuer = False             pygame.display.quit()             sys.exit()      pygame.display.flip()  pygame.quit()"},{"location":"T1_Structures_de_donnees/1.5_Graphes/data/anim_laby_DFSvsBFS_laby_parfait/#classes","title":"Classes\u00b6","text":"<p>###############################################################################</p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/data/anim_laby_DFSvsBFS_laby_parfait/#fonctions","title":"Fonctions\u00b6","text":"<p>###############################################################################</p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/data/anim_laby_DFSvsBFS_laby_parfait/#constantes","title":"Constantes\u00b6","text":"<p>###############################################################################</p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/data/anim_laby_DFSvsBFS_laby_parfait/#graphe","title":"Graphe\u00b6","text":"<p>###############################################################################</p>"},{"location":"T1_Structures_de_donnees/1.5_Graphes/data/anim_laby_DFSvsBFS_laby_parfait/#pygame","title":"Pygame\u00b6","text":"<p>###############################################################################</p>"},{"location":"T2_Programmation/sommaire/","title":"Sommaire","text":"<ol> <li>R\u00e9cursivit\u00e9</li> <li>Programmation Orient\u00e9e Objet </li> <li>Calculabilit\u00e9 et D\u00e9cidabilit\u00e9</li> <li>Mise au point de programme</li> </ol>"},{"location":"T2_Programmation/2.1_Recursivite/cours/","title":"La r\u00e9cursivit\u00e9","text":""},{"location":"T2_Programmation/2.1_Recursivite/cours/#1-premiere-approche","title":"1. Premi\u00e8re approche","text":""},{"location":"T2_Programmation/2.1_Recursivite/cours/#approche-mathematique","title":"Approche math\u00e9matique","text":"<p>En math\u00e9matiques, vous \u00eates nombreux \u00e0 avoir vu les suites en sp\u00e9cialit\u00e9 de 1\u00e8re. Une suite d\u00e9finie par r\u00e9currence simple  s'\u00e9crit sous la forme \\(u_{n + 1} = f(u_n)\\). Si on \"descend\" d'un rang, on obtient \\(u_{n + 1} = f(f(u_{n-1}))\\) , et plus g\u00e9n\u00e9ralement  \\(u_{n + 1} = \\underbrace{f(f(f(\\dots f(u_0))))}_{\\text{\\)n$ fois.}}$.  </p>"},{"location":"T2_Programmation/2.1_Recursivite/cours/#11-definition-informatique","title":"1.1. D\u00e9finition informatique","text":"<p>Fonction r\u00e9cursive </p> <p>Une m\u00e9thode est dite r\u00e9cursive lorsqu'elle fait appel \u00e0 elle-m\u00eame dans sa propre d\u00e9finition. </p>"},{"location":"T2_Programmation/2.1_Recursivite/cours/#12-un-tres-tres-mauvais-exemple","title":"1.2 Un tr\u00e8s tr\u00e8s mauvais exemple","text":"<p>C'est d\u00e9j\u00e0 une premi\u00e8re chose \u00e0 comprendre : un programme peut \u00eatre appel\u00e9 par lui-m\u00eame, \u00e0 l'int\u00e9rieur de sa propre d\u00e9finition.</p> \ud83d\udc0d Script Python<pre><code>def prems():\n    print(\"un tr\u00e8s mauvais exemple\")\n    prems()\n\nprems()\n</code></pre> <p>\ud83d\udccb Texte<pre><code>un tr\u00e8s mauvais exemple\nun tr\u00e8s mauvais exemple\nun tr\u00e8s mauvais exemple\nun tr\u00e8s mauvais exemple\nun tr\u00e8s mauvais exemple\nun tr\u00e8s mauvais exemple\nun tr\u00e8s mauvais exemple\nun tr\u00e8s mauvais exemple\nun tr\u00e8s mauvais exemple\nun tr\u00e8s mauvais exemple\nun tr\u00e8s mauvais exemple\nun tr\u00e8s mauvais exemple\nun tr\u00e8s mauvais exemple\nun tr\u00e8s mauvais exemple\n</code></pre> \u00c9videmment, comme pr\u00e9vu, ce programme ne s'arr\u00eate pas. Nous sommes oblig\u00e9s de l'arr\u00eater manuellement. Nous sommes (volontairement) tomb\u00e9s dans un pi\u00e8ge qui sera syst\u00e9matiquement pr\u00e9sent lors d'une programmation r\u00e9cursive : le pi\u00e8ge de la boucle infinie.  </p>"},{"location":"T2_Programmation/2.1_Recursivite/cours/#13-la-mauvaise-reputation","title":"1.3 La mauvaise r\u00e9putation","text":"<p>Dans la culture informatique, la r\u00e9cursivit\u00e9 est (trop) souvent abord\u00e9e par le biais de l'auto-r\u00e9f\u00e9rence, le puits sans fin de la boucle infinie.</p> <p>On trouve d'ailleurs fr\u00e9quemment cette d\u00e9finition de la r\u00e9cursivit\u00e9 :</p> <p>Fonction r\u00e9cursive : fonction qui fait appel \u00e0 la r\u00e9cursivit\u00e9. Voir fonction r\u00e9cursive.</p> <p>Google fait aussi (dans toutes les langues) la m\u00eame blague lors d'une recherche sur le terme \u00abr\u00e9cursivit\u00e9\u00bb :</p> <p></p> <p>Les acronymes r\u00e9cursifs sont aussi tr\u00e8s fr\u00e9quents... et v\u00e9hiculent avec eux le m\u00eame pi\u00e8ge : une fonction r\u00e9cursive ne serait jamais vraiment d\u00e9finie (c'est faux, nous le verrons)</p> <p>Par exemple :</p> <ul> <li>GNU (dans GNU/Linux) signifie GNU is Not Unix. On ne sait jamais vraiment ce que signifie GNU...  </li> <li>PHP (le langage serveur) sigifie PHP: Hypertext Preprocessor</li> <li>VISA (les cartes bancaires) signifie VISA International Service Association.</li> </ul>"},{"location":"T2_Programmation/2.1_Recursivite/cours/#2-la-recursivite-ca-marche","title":"2. La r\u00e9cursivit\u00e9, \u00e7a marche !","text":"<p>Disons-le clairement : au-del\u00e0 de la blague pour initi\u00e9s (dont vous faites partie maintenant) la r\u00e9cursivit\u00e9 ne DOIT PAS \u00eatre associ\u00e9e \u00e0 une auto-r\u00e9f\u00e9rence vertigineuse : c'est en algorithmique une m\u00e9thode (parfois) tr\u00e8s efficace, \u00e0 condition de respecter une r\u00e8gle cruciale :   l'existence d'un CAS DE BASE  .  </p> <p>Ce \u00abcas de base\u00bb sera aussi appel\u00e9 \u00abcondition d'arr\u00eat\u00bb, puisque la tr\u00e8s grande majorit\u00e9 des algorithmes r\u00e9cursifs peuvent \u00eatre per\u00e7us comme des escaliers qu'on descend marche par marche, jusqu'au sol qui assure notre arr\u00eat.</p>"},{"location":"T2_Programmation/2.1_Recursivite/cours/#21-la-recursivite-en-bd","title":"2.1 La r\u00e9cursivit\u00e9 en BD :","text":"<p>Observez bien la descente puis la remont\u00e9e de notre vendeur de livre.  Le cas de base est ici l'\u00e9tage 0. Il emp\u00eache une descente infinie.</p> <p>Nous coderons bient\u00f4t la fonction donnant le prix du livre en fonction de l'\u00e9tage.</p> <p>Pour l'instant, d\u00e9couvrons enfin \u00e0 quoi ressemble une fonction r\u00e9cursive \u00abbien \u00e9crite\u00bb :</p>"},{"location":"T2_Programmation/2.1_Recursivite/cours/#22-enfin-un-bon-exemple","title":"2.2 Enfin un bon exemple","text":"<p>Exemple fondateur n\u00b01 </p> \ud83d\udc0d Script Python<pre><code>def mystere(n):\n    if n == 0 :\n        return 0\n    else : \n        return n + mystere(n-1)\n</code></pre> <p>Trois choses sont essentielles et doivent se retrouver dans tout programme r\u00e9cursif :</p> <ul> <li><code>lignes 2 et 3</code> :  le cas de base (si <code>n</code> vaut 0 on renvoie vraiment une valeur, en l'occurence 0)</li> <li><code>ligne 5</code> : l'appel r\u00e9cursif</li> <li><code>ligne 5</code> : la d\u00e9cr\u00e9mentation du param\u00e8tre d'appel</li> </ul> <p>Utilisation de la fonction <code>mystere</code> </p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; mystere(0)\n0\n&gt;&gt;&gt; mystere(4)\n10\n</code></pre> <p>Analyse gr\u00e2ce \u00e0 PythonTutor</p> <p> </p> <p>Que se passe-t-il lorsqu'on appelle <code>mystere(4)</code> ?</p> \\[\\begin{align}   \\rm{mystere(4)} &amp;= 4+ \\rm{mystere(3)}\\\\    &amp;= 4+ (3+\\rm{mystere(2)}) \\\\    &amp;= 4+ (3+(2+\\rm{mystere(1)} )) \\\\    &amp;= 4+ (3+(2+(1+\\rm{mystere(0)} ))) \\\\       &amp;= 4+ (3+(2+(1+0 ))) \\\\   \\end{align}\\] <p>On voit que l'existence du cas de base pour \\(n=0\\) est primordiale pour \u00e9viter la r\u00e9cursion infinie.</p> <p></p> <p>Cette fonction <code>mystere(n)</code> calcule donc la somme des entiers positifs inf\u00e9rieurs ou \u00e9gaux \u00e0 \\(n\\).</p> Remarque historique <p><code>mystere(100)</code> est \u00e9gal \u00e0 5050.  Une anecdote raconte que Carl Friedrich Gauss trouva cette valeur de 5050 en quelques secondes, devant son instituteur \u00e9bahi. Il venait pour cela d'inventer la formule :  \\(1+2+3+\\dots+n=\\frac{n(n+1)}{2}\\)</p> <p>Ici, \\(1+2+3+\\dots+100=\\frac{100\\times 101)}{2}=50 \\times 101=5050\\)</p> <p>Exercice 1</p> \u00c9nonc\u00e9Correction <p>Coder la fonction <code>prix(etage)</code> de la BD pr\u00e9sent\u00e9e plus haut. </p> \ud83d\udc0d Script Python<pre><code>def prix(etage):\n    if etage == 0:\n        return 3\n    else:\n        return 2 * prix(etage - 1)\n</code></pre> <p>Exercice 2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re la fonction <code>factorielle(n)</code> (not\u00e9e \\(n!\\) en math\u00e9matiques), qui calcule le produit d'un entier \\(n\\) par les entiers positifs qui lui sont inf\u00e9rieurs:</p> \\[ n! = n \\times (n-1) \\times (n-2) \\times  \\dots \\times 3 \\times 2 \\times 1\\] <p>Exemple : \\(5!=5\\times4\\times3\\times2\\times1=120\\)</p> <p>Par convention, \\(1!=1\\)</p> <ol> <li>Programmer de mani\u00e8re imp\u00e9rative (mani\u00e8re classique) la fonction factorielle. On l'appelera <code>fact_imp()</code>. </li> <li>Programmer de fa\u00e7on r\u00e9cursive la fonction factorielle. On l'appelera <code>fact_rec()</code>.</li> </ol> <p>Quelle paradigme de programmation vous a sembl\u00e9 le plus naturel ?</p> \ud83d\udc0d Script Python<pre><code>def fact_imp(n):\n    p = 1\n    for k in range(1, n + 1):\n        p = p * k\n    return p\n\ndef fact_rec(n):\n    if n == 1:\n        return 1\n    else:\n        return n * fact_rec(n - 1)\n</code></pre>"},{"location":"T2_Programmation/2.1_Recursivite/cours/#3-le-mecanisme-interne-de-la-recursivite","title":"3. Le m\u00e9canisme interne de la r\u00e9cursivit\u00e9","text":""},{"location":"T2_Programmation/2.1_Recursivite/cours/#31-notion-de-pile","title":"3.1 Notion de pile","text":"<p>Lors d'un appel \u00e0 une fonction r\u00e9cursive, le processeur utilise une structure de pile pour stocker les contextes d'ex\u00e9cution de chaque appel. Dans la notion de pile (voir ici), seule l'instruction \u00aben haut de la pile\u00bb peut \u00eatre trait\u00e9e et enlev\u00e9e (on dit \u00abd\u00e9pil\u00e9e\u00bb).</p> <p>La pile d'appels de notre fonction <code>mystere(5)</code> peut donc \u00eatre sch\u00e9matis\u00e9e comme ceci :</p> <p> </p>"},{"location":"T2_Programmation/2.1_Recursivite/cours/#32-limitation-de-la-taille-de-la-pile","title":"3.2 Limitation de la taille de la pile","text":"<p>Nous venons de voir que notre appel \u00e0 <code>mystere(5)</code> g\u00e9n\u00e9rait une pile de hauteur 6 (on parlera plut\u00f4t de profondeur 6). Cette profondeur est-elle limit\u00e9e ?</p> \ud83d\udc0d Script Python<pre><code>mystere(2962)\n</code></pre> \ud83d\udccb Texte<pre><code>---------------------------------------------------------------------------\n\nRecursionError                            Traceback (most recent call last)\n\n&lt;ipython-input-32-a97c4dde4ef8&gt; in &lt;module&gt;\n----&gt; 1 mystere(2962)\n\n\n&lt;ipython-input-1-386660a434f2&gt; in mystere(n)\n      3         return 0\n      4     else :\n----&gt; 5         return n + mystere(n-1)\n\n\n... last 1 frames repeated, from the frame below ...\n\n\n&lt;ipython-input-1-386660a434f2&gt; in mystere(n)\n      3         return 0\n      4     else :\n----&gt; 5         return n + mystere(n-1)\n\n\nRecursionError: maximum recursion depth exceeded in comparison\n</code></pre> <p>Vous venons de provoquer un \u00abd\u00e9bordement de pile\u00bb, le c\u00e9l\u00e8bre stack overflow. </p> <p>De mani\u00e8re g\u00e9n\u00e9rale, les programmes r\u00e9cursifs sont souvent susceptibles de g\u00e9n\u00e9rer un trop grand nombre d'appels \u00e0 eux-m\u00eames. Il est parfois possible de les optimiser, comme nous le verrons dans le cours concernant la programmation dynamique.  </p> <p>Nous reparlerons aussi de r\u00e9cursivit\u00e9 lorsque nous l'inscrirons dans un paradigme plus global de programmation, qui est \u00ab diviser pour r\u00e9gner \u00bb (en anglais divide and conquer).</p>"},{"location":"T2_Programmation/2.1_Recursivite/cours/#4-exemples-de-recursivite-double","title":"4. Exemples de r\u00e9cursivit\u00e9 double","text":""},{"location":"T2_Programmation/2.1_Recursivite/cours/#41-la-suite-de-fibonnaci","title":"4.1 La suite de Fibonnaci","text":"<p>Consid\u00e9rons la suite num\u00e9rique ainsi d\u00e9finie :</p> <ul> <li>\\(F_0 = 0\\)</li> <li>\\(F_1 = 1\\)</li> <li>\\(\\forall n \\in \\mathbb{N}, F_{n+2} = F_{n+1}+F_n\\)</li> </ul> <p>On a donc \\(F_2=0+1=1, F_3=F_2+F_1=1+1=2, F_4=F_3+F_2=2+1=3, F_5=F_4+F_3=3+2=5\\) ...</p> <p>Exercice 3</p> \u00c9nonc\u00e9Correction <p>Impl\u00e9menter de fa\u00e7on r\u00e9cursive la suite de Fibonnaci.</p> \ud83d\udc0d Script Python<pre><code>def fibo(n):\n    if n == 0 :\n        return 0   \n    elif n == 1 :\n        return 1\n    else :\n        return fibo(n-1) + fibo(n-2)\n</code></pre> <p>Observation de la pile d'ex\u00e9cution</p> <p>Appelons <code>F(n)</code> la fonction calculant de mani\u00e8re r\u00e9cursive le n-i\u00e8me terme de la suite. Observons en d\u00e9tail la pile d'ex\u00e9cution lors du calcul de <code>F(4)</code>.</p> <p> </p> <p>Analyse gr\u00e2ce \u00e0 PythonTutor</p> <p> </p> <p>On s'aper\u00e7oit notamment que :</p> <ul> <li>les appels r\u00e9cursifs ne sont PAS simultan\u00e9s (rappelons que la simultan\u00e9it\u00e9 n'existe th\u00e9oriquement pas en informatique). On pourrait s'imaginer que la relation \\(F_4=F_3+F_2\\) allait d\u00e9clencher deux \u00abfils\u00bb r\u00e9cursifs calculant respectivement \\(F_3\\) et \\(F_2\\). Il n'en est rien, on va jusqu'au bout du calcul de \\(F_3\\) avant de s'int\u00e9resser \u00e0 \\(F_2\\).</li> <li>cons\u00e9quence de la remarque pr\u00e9c\u00e9dente : le calcul de \\(F_2\\) s'effectue 2 fois. Une am\u00e9lioration future (appel\u00e9e m\u00e9mo\u00efsation, voir le cours de programmation dynamique) sera de conserver cette valeur de \\(F_2\\) afin d'am\u00e9liorer les calculs.</li> </ul> <p>On peut y construire par exemple l'arbre d'appel de <code>fibo(6)</code> :</p> <p></p> <p>On y remarque (par exemple) que <code>fibo(2)</code> est calcul\u00e9 5 fois... </p>"},{"location":"T2_Programmation/2.1_Recursivite/cours/#42-comparaison-des-performances","title":"4.2 Comparaison des performances","text":"<p>Exercice 4</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>fibo_imperatif(n)</code> qui calcule de fa\u00e7on directe (imp\u00e9rative) le n-i\u00e8me terme de la suite de Fibonnaci.</p> \ud83d\udc0d Script Python<pre><code>def fibo_imperatif(n):\n    a = 0\n    b = 1\n    for k in range(n-1):\n        t = b\n        b = a + b\n        a = t\n    return b\n</code></pre> <p>Observons gr\u00e2ce au module <code>timeit</code> le temps moyen pris pour calculer \\(F(20)\\) avec les deux fonctions <code>fibo_imperatif()</code> et <code>fibo_recursif()</code>.</p> \ud83d\udc0d Script Python<pre><code>%timeit fibo_imperatif(20)\n</code></pre> \ud83d\udccb Texte<pre><code>1.02 \u00b5s \u00b1 14 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n</code></pre> \ud83d\udc0d Script Python<pre><code>%timeit fibo_recursif(20)\n</code></pre> \ud83d\udccb Texte<pre><code>2.35 ms \u00b1 10.8 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n</code></pre> <p>La programmation r\u00e9cursive apparait donc comme quasiment 1000 fois plus lente que l'imp\u00e9rative.</p> <p> Attention : cette comparaison des vitesses d'\u00e9x\u00e9cution peut \u00eatre critiqu\u00e9e car les deux programmes n'ont pas la m\u00eame complexit\u00e9. Nous \u00e9tudierons la complexit\u00e9 au moment des algorithmes de tri. </p> <p></p> <p>Peut-on r\u00e9sumer la r\u00e9cursivit\u00e9 \u00e0 une m\u00e9thode \u00e9l\u00e9gante mais inefficace ? Ce serait r\u00e9ducteur : l'efficacit\u00e9 c'est aussi avoir un code lisible et intuitif. Nous en reparlerons lors du parcours des arbres et des graphes. (cf aussi l'exercice sur les Tours de Hano\u00ef)</p>"},{"location":"T2_Programmation/2.1_Recursivite/cours/#5-annexe-dessins-recursifs-grace-au-module-turtle","title":"5. Annexe : dessins r\u00e9cursifs gr\u00e2ce au module <code>turtle</code>","text":"<p>Le module <code>turtle</code> permet de faire des trac\u00e9s basiques. Mais d\u00e8s l'instant o\u00f9 on met de la r\u00e9cursivit\u00e9 dans le code, les r\u00e9sultats peuvent devenir tr\u00e8s surprenants, et aboutir \u00e0 des structures fractales.</p> \ud83d\udc0d Script Python<pre><code>from turtle import *\n\nang = 40\n\ndef trace(n,l):\n\n    if n == 0 :\n        return None\n    else :\n        forward(l)\n        left(ang)\n        trace(n-1,0.7*l)\n        right(2*ang)\n        trace(n-1,0.7*l)\n        left(ang)\n        forward(-l)\n\n\npenup()        \ngoto(0,-80)\npendown()\nleft(90)\nspeed(0)\n\ntrace(5,100)\n</code></pre> <p> </p>"},{"location":"T2_Programmation/2.1_Recursivite/cours/#source","title":"Source :","text":"<ul> <li>Site Gilles Glassus - licennce CC BY-SA</li> <li>\"NSI : 24 le\u00e7ons avec exercices corrig\u00e9s\" Edition Ellipses - licence Creative Commons NC BY SA</li> <li>Frederic Mandon, Lyc\u00e9e Jean Jaur\u00e8s - Saint Cl\u00e9ment de Rivi\u00e8re</li> <li>Fr\u00e9d\u00e9ric Mandon - licence Creative Commons BY NC SA </li> <li>David Roche</li> <li>Cours tr\u00e8s bien fait ENIB</li> </ul>"},{"location":"T2_Programmation/2.1_Recursivite/exercices/","title":"Exercices","text":""},{"location":"T2_Programmation/2.1_Recursivite/exercices/#ex-1-en-serie","title":"Ex. 1 :  En s\u00e9rie","text":"<p>Exercice 1</p> Enonc\u00e9Correction <p>Quelles r\u00e9flexions vous inspirent les fonctions r\u00e9cursives suivantes ? </p> <p></p> <ol> <li>Ne se termine pas. \\(n\\)  ne tend pas vers 0. </li> <li>Ne se termine pas dans le cas ou \\(n\\) est impair.</li> <li>La d\u00e9finition est incompl\u00e8te. Il manque le cas ou \\(n=1\\). </li> </ol>"},{"location":"T2_Programmation/2.1_Recursivite/exercices/#ex-2-nb-chiffres","title":"Ex. 2  : Nb chiffres","text":"<p>Exercice 2</p> Enonc\u00e9Correction <p>Ecrire une fonction r\u00e9cursive <code>nombreDeChiffre(n)</code> qui prend un entier positif ou nul n en argument et renvoie son nombre de chiffre. Par exemple, <code>nombreDeChiffre(34126)</code> doit renvoyer 5.</p> \ud83d\udc0d Script Python<pre><code>def nombreDeChiffre(n):\n    if n&lt;=9 : \n        return 1\n    else : \n        return 1 + nombreDeChiffre(n//10)\nprint(nombreDeChiffre(34126))\n</code></pre>"},{"location":"T2_Programmation/2.1_Recursivite/exercices/#ex-3-palindrome","title":"Ex. 3: Palindrome","text":"<p>Exercice 3</p> Enonc\u00e9Correction <ol> <li> <p>D\u00e9finir une fonction r\u00e9cursive qui d\u00e9termine l'inverse d'une cha\u00eene de caract\u00e8res <code>inverse(s)</code>.</p> </li> <li> <p>En utilisant la fonction r\u00e9cursive pr\u00e9c\u00e9dente, d\u00e9finir une fonction qui teste si une cha\u00eene de caract\u00e8res est un palindrome.</p> </li> </ol> <p>Exemples de palindromes : \"kayak\", \"laval\", \"mon nom\", \"non\", \"ressasser\", \"serres\"</p> \ud83d\udc0d Script Python<pre><code>'''\nLa premi\u00e8re \u00e9tape est de d\u00e9finir notre sc\u00e9nario de base, qui v\u00e9rifiera si la cha\u00eene est \u00e9gale \u00e0 0 et, \nsi oui, retourne la cha\u00eene elle-m\u00eame.\n\nLa deuxi\u00e8me \u00e9tape est d'appeler de mani\u00e8re r\u00e9cursif la fonction d'inversion \nafin d'extraire le premier caract\u00e8re et ensuite l'ajouter \u00e0 la fin de la cha\u00eene.\n'''\n\ndef inverse(s):\n    if len(s)==1 :\n        return s\n    else :\n        return inverse(s[1:]) + s[0]\n\nprint(inverse('toto'))\n\ndef isPalin(s) :\n    return (s == inverse(s))\n\nprint(isPalin('kayak'))\n\ndef palindrome(s) : \n    if len(s) &lt; 2 :\n        return True\n    return (s[0] == s[len(s)-1]) and palindrome(s[1:-1])\n\nprint(palindrome('kayak'))\n</code></pre>"},{"location":"T2_Programmation/2.1_Recursivite/exercices/#ex-4-puissance","title":"Ex. 4 : puissance","text":"<p>Exercice 4</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction r\u00e9cursive <code>puissance(x,n)</code> qui calcule le nombre \\(x^n\\).</p> \ud83d\udc0d Script Python<pre><code>def puissance(x, n):\n    if n == 0:\n        return 1\n    else:\n        return x * puissance(x, n-1)\n</code></pre>"},{"location":"T2_Programmation/2.1_Recursivite/exercices/#ex-5-pgcd","title":"Ex. 5 : PGCD","text":"<p>Exercice 5  </p> \u00c9nonc\u00e9Correction <p>On rappelle que le PGCD (plus grand diviseur commun de deux nombres) v\u00e9rifie la propri\u00e9t\u00e9 suivante : si la division euclidienne de \\(a\\) par \\(b\\) s'\u00e9crit \\(a = b \\times q + r\\), alors \\(pgcd(a,b)=pgcd(b,r)\\). </p> <p>Cette propri\u00e9t\u00e9 est \u00e0 la base de l'algorithme d'Euclide</p> <p>Exemple : \\(pgcd(24,18)=pgcd(18,6)=pgcd(6,0)\\), donc \\(pgcd(24,18)=6\\)</p> <p>\u00c9crire un algorithme r\u00e9cursif <code>pgcd(a,b)</code>.</p> \ud83d\udc0d Script Python<pre><code>def pgcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return pgcd(b, a%b)\n</code></pre>"},{"location":"T2_Programmation/2.1_Recursivite/exercices/#ex-6-syracuse","title":"Ex. 6 : Syracuse","text":"<p>Exercice 6</p> \u00c9nonc\u00e9Correction <p>La conjecture de Syracuse (ou de Collatz) postule ceci :  </p> <p>Prenons un nombre \\(n\\) : si \\(n\\) est pair, on le divise par 2, sinon on le multiplie par 3 puis on ajoute 1. On recommence cette op\u00e9ration tant que possible. Au bout d'un certain temps, on finira toujours par tomber sur le nombre 1.</p> <ol> <li>Proposer un programme r\u00e9cursif <code>syracuse(n)</code> \u00e9crivant tous les termes de la suite de Syracuse, s'arr\u00eatant (on l'esp\u00e8re) \u00e0 la valeur 1.</li> <li>On appelle \u00abtemps de vol\u00bb le nombre d'\u00e9tapes n\u00e9cessaires avant de retomber sur 1. Modifier la fonction pr\u00e9c\u00e9dente afin qu'elle affiche le temps de vol pour tout nombre <code>n</code>.</li> </ol> <p>1.</p> <p>\ud83d\udc0d Script Python<pre><code>def syracuse(n):\n    print(n)\n    if n == 1:\n        return None\n    if n % 2 == 0:\n        syracuse(n // 2)\n    else:\n        syracuse(3*n + 1)\n</code></pre> 2.</p> \ud83d\udc0d Script Python<pre><code>def syracuse(n, t=0):\n    print(n)\n    t += 1\n    if n == 1:\n        print('temps de vol :', t)\n        return None\n    if n % 2 == 0:\n        syracuse(n // 2, t)\n    else:\n        syracuse(3*n + 1, t)\n</code></pre>"},{"location":"T2_Programmation/2.1_Recursivite/exercices/#ex-7-dessin","title":"Ex. 7 : dessin","text":"<p>Exercice 7</p> \u00c9nonc\u00e9Correction <p>Reproduire le dessin suivant, \u00e0 l'aide du module <code>turtle</code>.  </p> <p><code>turtle</code> est un hommage au langage LOGO invent\u00e9 par Seymour Papert au MIT \u00e0 la fin des ann\u00e9es 60.</p> <p></p> \ud83d\udc0d Script Python<pre><code>from turtle import *\ndef carre(c):\n    for k in range(4):\n        forward(c)\n        right(90)\n\ndef base(c):\n    carre(c)\n    forward(c/2)\n    right(45)\n\ndef trace(c, n):\n    if n == 0 :\n        return None\n    else :\n        base(c)\n        c = c/(2**0.5)\n        return trace(c, n-1)\n\ntrace(200, 5)\n</code></pre>"},{"location":"T2_Programmation/2.1_Recursivite/exercices/#ex-8-puissance-v2","title":"Ex. 8 : Puissance v2","text":"<p>Exercice 8</p> \u00c9nonc\u00e9Correction <p>Proposer une nouvelle fonction r\u00e9cursive <code>puissance_mod(x,n)</code> qui calcule le nombre \\(x^n\\). Pour optimiser la fonction d\u00e9j\u00e0 construite \u00e0 l'exercice 4, utiliser le fait que :</p> <ul> <li>si \\(n\\) est pair, \\(a^n=(a \\times a)^{n/2}\\)</li> <li>sinon \\(a^n=a \\times (a \\times a)^{(n-1)/2}\\)</li> </ul> <p>```python linenums='1' def puissance_mod(x,n):     if n == 0 :         return 1     else :         if n % 2 == 0:             return puissance_mod(x*x,n//2)         else :             return x*puissance_mod(x*x,(n-1)//2)  </p>"},{"location":"T2_Programmation/2.1_Recursivite/exercices/#ex-9-recherche","title":"Ex. 9 : Recherche","text":"<p>Exercice 9</p> \u00c9nonc\u00e9Correction <p>\u00c9crire un algorithme r\u00e9cursif <code>recherche(lst,m)</code> qui recherche la pr\u00e9sence de la valeur <code>m</code> dans une liste tri\u00e9e (par ordre croissant) <code>lst</code>. </p> <p>Cette fonction doit renvoyer un bool\u00e9en.</p> <p>Aide :</p> <p>Les techniques de slicing (hors-programme) permettent de couper une liste en deux :  \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; lst = [10, 12, 15, 17, 18, 20, 22]\n&gt;&gt;&gt; lst[:3]\n[10, 12, 15]\n&gt;&gt;&gt; lst[3:]\n[17, 18, 20, 22]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(lst,m):\n    print(lst) # pour voir la taille de la liste diminuer\n    if len(lst) == 1 :  #cas de base\n        if lst[0] == m :\n            return True\n        else :\n            return False\n    else :              #cas r\u00e9cursif\n        mid = len(lst)//2\n        if lst[mid] &gt; m :\n            return recherche(lst[:mid],m)\n        else :\n            return recherche(lst[mid:],m)\n</code></pre>"},{"location":"T2_Programmation/2.1_Recursivite/exercices/#ex-10-hanoi","title":"Ex. 10 : Hano\u00ef","text":"<p>Exercice 10</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re le jeu des Tours de Hano\u00ef. Le but est de faire passer toutes les assiettes de A vers C, sachant qu'une assiette ne peut \u00eatre d\u00e9pos\u00e9e que sur une assiette de diam\u00e8tre inf\u00e9rieur. </p> <p>Une version jouable en ligne peut \u00eatre trouv\u00e9e ici.</p> <ol> <li>S'entra\u00eener et essayer d'\u00e9tablir une strat\u00e9gie de victoire.</li> <li>Observer les images ci-dessous :  </li> </ol> <p>\u00c9crire une fonction r\u00e9cursive <code>hanoi(n, A, B, C)</code> qui donnera la suite d'instructions (sous la forme \" A vers C\") pour faire passer une pile de taille n de A vers C en prenant B comme interm\u00e9diaire.</p> \ud83d\udc0d Script Python<pre><code>def hanoi(n, depart, inter, arrivee):\n    \"\"\" n : nombre d'assiettes dans la pile\n    # depart : la pile de d\u00e9part(\"A\", \"B\" ou \"C\")\n    # inter : la pile interm\u00e9daire(\"A\", \"B\" ou \"C\")\n    # arrivee : la pile d'arriv\u00e9e (\"A\", \"B\" ou \"C\") \"\"\"\n\n    if n == 1 :\n        print(depart + \" vers \" + arrivee)\n    else :\n        hanoi(n-1, depart, arrivee, inter) \n        print(depart + \" vers \" + arrivee)\n        hanoi(n-1, inter, depart, arrivee)\n\nhanoi(5, \"A\", \"B\", \"C\")\n</code></pre>"},{"location":"T2_Programmation/2.1_Recursivite/exercices/#ex-11-flocon","title":"Ex. 11 : Flocon","text":"<p>Exercice 11</p> \u00c9nonc\u00e9Correction <p>Cet exercice a pour objectif le trac\u00e9 du flocon de Von Koch. </p> <p>L'id\u00e9e est de r\u00e9p\u00e9ter de mani\u00e8re r\u00e9cursive la transformation ci-dessous : chaque segment de longueur <code>l</code> donne naissance \u00e0 4 segments de longueur <code>l/3</code>, en construisant une pointe de triangle \u00e9quilat\u00e9ral sur le deuxi\u00e8me tiers du segment.</p> <p></p> <p>1) Cr\u00e9er une fonction r\u00e9cursive <code>floc(n,l)</code> qui trace \u00e0 une \u00abprofondeur\u00bb <code>n</code> un segment de longueur <code>l</code>.  Indications</p> <ul> <li>l'instruction de trac\u00e9 n'a lieu que quand <code>n</code> vaut 0.</li> <li>l'\u00e9tape <code>n</code> fait 4 appels sucessifs \u00e0 l'\u00e9tape <code>n-1</code>.</li> </ul> <p>2) Cr\u00e9er une fonction <code>triangle(n,l)</code> qui trace le flocon complet.</p> \ud83d\udc0d Script Python<pre><code>from turtle import *\n\ndef floc(n, l):\n    if n == 0:\n        forward(l)\n    else:\n        floc(n-1,l/3)\n        left(60)\n        floc(n-1,l/3)\n        right(120)\n        floc(n-1,l/3)\n        left(60)\n        floc(n-1,l/3)\n\n\nspeed(0)\n\ndef triangle(n,l):\n    for _ in range(3):\n        floc(n,l)\n        right(120)\n\ntriangle(5,400)\n</code></pre> Bibliographie <ul> <li>Num\u00e9rique et Sciences Informatiques, Terminale, T. BALABONSKI, S. CONCHON, J.-C. FILLIATRE, K. NGUYEN, \u00e9ditions ELLIPSES.</li> <li>Pr\u00e9pabac NSI, Terminale, G.CONNAN, V.PETROV, G.ROZSAVOLGYI, L.SIGNAC, \u00e9ditions HATIER.</li> </ul>"},{"location":"T2_Programmation/2.2_Programmation_Orientee_Objet/cours/","title":"Programmation Orient\u00e9e Objet","text":"<p>Source</p> <p>Groupe de travail NSI (Chatel P., Chouteau J., Teilhaud F., Gambazza W., Buonocore E., Connan G., Mandon F., Lecomte A., Bignin S., Sarnette F.)  Licence CC BY NC SA</p> <p></p>"},{"location":"T2_Programmation/2.2_Programmation_Orientee_Objet/cours/#1-introduction-a-la-programmation-objet","title":"1. Introduction \u00e0 la programmation objet","text":"<p>La programmation objet correspond \u00e0 une mani\u00e8re peut-\u00eatre plus naturelle pour les humains, de concevoir le fonctionnement d'un programme.  En ce moment o\u00f9 vous lisez le notebook, plusieurs \"objets\" sont en action. Un \u00e9cran qui affiche le notebook ; des yeux qui re\u00e7oivent la lumi\u00e8re ; une premi\u00e8re partie du cerveau, le cortex visuel, qui transforme cette lumi\u00e8re en images ; et enfin une deuxi\u00e8me partie du cerveau, le cortex c\u00e9r\u00e9bral, qui transforme cette image en pens\u00e9e. La communication se fait ici \u00e0 sens unique, de l'\u00e9cran vers la pens\u00e9e.   Dans un deuxi\u00e8me temps, vous allez r\u00e9pondre aux questions pos\u00e9es plus loin. Il y aura interaction dans les deux sens, en rajoutant un autre objet, le clavier.   On est donc en pr\u00e9sence d'objets ayant \u00e0 la fois des caract\u00e9ritiques, et des actions, qui leurs sont propres. Le clavier a comme caract\u00e9ristiques ses touches, la mani\u00e8re dont il est connect\u00e9 \u00e0 l'ordinateur. Et ses actions peuvent \u00eatre de communication vers l'ordinateur : envoyer le code d'une touche ; ou bien en provenance de l'ordinateur : configuration en azerty ou qwerty. Remarquez que l'objet clavier est ici d\u00e9fini de mani\u00e8re g\u00e9n\u00e9rale, on ne pr\u00e9cise pas sa marque, son agencement de touches etc. De la m\u00eame mani\u00e8re que l'on dit \"j'ai pris la voiture\" et non pas \"j'ai pris la 2CV orange de 1964\".  </p> <p> Retour sur des usages masqu\u00e9s de la classe de 1\u00e8re :</p> <p>Comme M.Jourdain faisait de la prose sans le savoir, vous avez d\u00e9j\u00e0 utilis\u00e9 l'an pass\u00e9 la programmation objet.</p> <p>Regardons par exemple comment est programm\u00e9e la fonction randint de la biblioth\u00e8que <code>random</code> :</p> <p>\ud83d\udc0d Script Python<pre><code>import random\nimport inspect\n\nprint(inspect.getsource(random.randint)) \n</code></pre> \ud83d\udc0d Script Python<pre><code>def randint(self, a, b):\n    \"\"\"Return random integer in range [a, b], including both end points.\n            \"\"\"\n    return self.randrange(a, b+1)\n</code></pre></p> <p>Except\u00e9 la pr\u00e9sence d'un self surprenant (randint n'ayant besoin que de 2 param\u00e8tres a et b), rien de nouveau, on voit la d\u00e9finition d'une fonction tr\u00e8s courte...</p> <p>Inspectons maintenant tout le code de la biblioth\u00e8que random, on constate la pr\u00e9sence de mots-cl\u00e9s comme class, une fonction <code>__init__</code> et si vous chercher bien on y retrouve la fonction <code>randint</code>... mais inclue dans la d\u00e9finition de la classe</p> classe random <p>\ud83d\udc0d Script Python<pre><code>print(inspect.getsource(random))\n</code></pre> \ud83d\udc0d Script Python<pre><code>    \"\"\"Random variable generators.\n\n        integers\n        --------\n            uniform within range\n\n        sequences\n        ---------\n            pick random element\n            pick random sample\n            pick weighted random sample\n            generate random permutation\n\n        distributions on the real line:\n        ------------------------------\n            uniform\n            triangular\n            normal (Gaussian)\n            lognormal\n            negative exponential\n            gamma\n            beta\n            pareto\n            Weibull\n\n        distributions on the circle (angles 0 to 2pi)\n        ---------------------------------------------\n            circular uniform\n            von Mises\n\n    General notes on the underlying Mersenne Twister core generator:\n\n    * The period is 2**19937-1.\n    * It is one of the most extensively tested generators in existence.\n    * The random() method is implemented in C, executes in a single Python step,\n    and is, therefore, threadsafe.\n\n    \"\"\"\n\n    from warnings import warn as _warn\n    from math import log as _log, exp as _exp, pi as _pi, e as _e, ceil as _ceil\n    from math import sqrt as _sqrt, acos as _acos, cos as _cos, sin as _sin\n    from os import urandom as _urandom\n    from _collections_abc import Set as _Set, Sequence as _Sequence\n    from itertools import accumulate as _accumulate, repeat as _repeat\n    from bisect import bisect as _bisect\n    import os as _os\n\n    try:\n        # hashlib is pretty heavy to load, try lean internal module first\n        from _sha512 import sha512 as _sha512\n    except ImportError:\n        # fallback to official implementation\n        from hashlib import sha512 as _sha512\n\n\n    __all__ = [\"Random\",\"seed\",\"random\",\"uniform\",\"randint\",\"choice\",\"sample\",\n            \"randrange\",\"shuffle\",\"normalvariate\",\"lognormvariate\",\n            \"expovariate\",\"vonmisesvariate\",\"gammavariate\",\"triangular\",\n            \"gauss\",\"betavariate\",\"paretovariate\",\"weibullvariate\",\n            \"getstate\",\"setstate\", \"getrandbits\", \"choices\",\n            \"SystemRandom\"]\n\n[...]\n\n    if __name__ == '__main__':\n        _test()\n</code></pre></p> <p>La fonction <code>__init__</code> pr\u00e9sente en Python dans toute classe est app\u00e9l\u00e9e constructeur et la fonction <code>randint</code> est ce qu'on appelle une m\u00e9thode de la classe. Ce vocabulaire est pr\u00e9cis\u00e9 dans la partie suivante, avec un exemple de cr\u00e9ation d'une nouvelle classe (car c'est tout l'int\u00e9r\u00eat de la programmation orient\u00e9e objet, le programmeur d\u00e9finissant lui m\u00eame ses propres classes avec ses m\u00e9thodes et ses attributs).</p>"},{"location":"T2_Programmation/2.2_Programmation_Orientee_Objet/cours/#11-objectif-bataille","title":"1.1 Objectif bataille ?","text":"<p>Nous allons utiliser ce principe d'objets pour jouer \u00e0 la bataille, ou \u00e0 d'autres jeux de cartes. La bataille est un jeu, qui utilise un paquet de cartes, constitu\u00e9 de... cartes. Le premier objet que l'on va cr\u00e9er est donc une carte \"g\u00e9n\u00e9rique\", comme une \"voiture\" g\u00e9n\u00e9rique. </p> <p>La classe Carte a :</p> <ul> <li> <p>des attributs/composants (les caract\u00e9risques):</p> <ul> <li>sa couleur (coeur, pique, carreau, tr\u00e8fle)</li> <li>sa hauteur (as ou 1, 2, ... jusqu'\u00e0 roi)</li> <li>sa valeur, qui n'est pas forc\u00e9ment la m\u00eame que sa hauteur (exemple pour le valeur)</li> <li>Remarque : les attributs sont priv\u00e9s, c'est-\u00e0-dire qu'un objet ext\u00e9rieur qui veut y acc\u00e9der ne peut pas les modifier directement. Il est oblig\u00e9 de passer par les m\u00e9thodes de la classe. C'est le principe d'encapsulation des donn\u00e9es. les attributs sont prot\u00e9g\u00e9s d'une modification directe par un objet ext\u00e9rieur.</li> </ul> </li> </ul> <p></p> <ul> <li> <p>des m\u00e9thodes (les actions):</p> <ul> <li>cr\u00e9ation/construction de la carte avec couleur, hauteur et valeur. Cette m\u00e9thode particuli\u00e8re est le constructeur</li> <li>commmuniquer ses attributs (m\u00e9thodes <code>get</code>). Ces m\u00e9thodes sont des accesseurs</li> <li>changer sa valeur (m\u00e9thode <code>set</code>). Cette m\u00e9thode est un modifieur ou mutateur</li> <li>Remarque : on ne change pas la couleur ni la hauteur (sauf si on triche)</li> <li>Remarque : les m\u00e9thodes get et set sont publiques. Ce sont celles qui seront utilis\u00e9es par les objets ext\u00e9rieurs pour interagir avec la carte. Par usage, on les appelera getters/setters</li> </ul> </li> </ul> <p></p> <p>Quand on cr\u00e9e une carte, on cr\u00e9e une instance de la classe carte. Pour cela, on utilise une m\u00e9thode sp\u00e9ciale, le constructeur de la classe. Le constructeur cr\u00e9e l'objet en m\u00e9moire, et renvoie la r\u00e9f\u00e9rence sur l'objet (son adresse). En Python cette m\u00e9thode est <code>__init__</code>. </p> <p>Remarques : </p> <p> Une classe est une nouvelle structure de donn\u00e9es, que l'on a construit. Cette structure a un comportement d\u00e9fini par ses m\u00e9thodes. Une classe peut \u00eatre vue comme un nouveau type.  La programmation objet permet de d\u00e9couper plus facilement le travail \u00e0 l'int\u00e9rieur d'une \u00e9quipe, chaque collaborateur pouvant programmer une classe ind\u00e9pendamment des autres. Un programmeur utilisant une classe cr\u00e9ee par un de ses coll\u00e8gues n'a pas besoin de savoir \"comment\" \u00e7a marche, juste \"ce qu'il peut faire\" avec les objets de cette classe.</p>"},{"location":"T2_Programmation/2.2_Programmation_Orientee_Objet/cours/#12-premiere-ebauche","title":"1.2 Premi\u00e8re \u00e9bauche","text":"<p>Cette premi\u00e8re version donne une classe dans laquelle les attributs sont publics. Comme on va le voir ci-apr\u00e8s, les attributs publics sont accessibles \u00e0 tout le monde. Et comme on l'a dit ci-dessus, on souhaite des attributs priv\u00e9s et non publics ; il est n\u00e9anmoins int\u00e9ressant de voir comment cela fonctionne.</p> \ud83d\udc0d Script Python<pre><code>class Carte:\n    \"\"\"\n    Carte d'un jeu\n    \"\"\"\n    def __init__(self,couleur,hauteur,valeur = 0): # (1)\n        self.couleur = couleur\n        self.hauteur = hauteur\n        self.valeur = valeur\n</code></pre> <ol> <li>par d\u00e9faut la valeur est \u00e0 0, on peut passer une valeur pr\u00e9cise en param\u00e8tre ou pas</li> </ol> <p>Les instructions suivantes permettent de :  lire les sp\u00e9cifications de la classe : <code>Carte.__doc__</code>  cr\u00e9er une carte <code>Carte('carreau','roi',13)</code>  r\u00e9cup\u00e9rer un attribut <code>roiCarreau.couleur</code>  modifier un attribut <code>roiCarreau.couleur =</code> </p> \ud83d\udc0d Script Python<pre><code>Carte.__doc__     # lecture des sp\u00e9cifications\nroiCarreau = Carte('carreau','roi',13)    # cr\u00e9ation d'une carte\nprint(roiCarreau.hauteur, roiCarreau.couleur)     # lecture de la hauteur et de la couleur de l'objet roiCarreau\nprint()\nroiCarreau.couleur = 'fenetre'   # modification de la hauteur par un individu mal intentionn\u00e9 \nprint(roiCarreau.hauteur, roiCarreau.couleur)     # et voil\u00e0 le r\u00e9sultat !\n</code></pre>"},{"location":"T2_Programmation/2.2_Programmation_Orientee_Objet/cours/#13-deuxieme-ebauche","title":"1.3 Deuxi\u00e8me \u00e9bauche","text":"<p> Rendons les attributs priv\u00e9s pour respecter le principe d'encapsulation. Les attributs priv\u00e9s ne sont plus accessible de l'ext\u00e9rieur de la classe. Il suffit de les \u00e9crire avec <code>_</code> devant. </p> <p> Une remarque importante : en Python, c'est juste une convention, qui signale que l'acc\u00e8s (respectivement la modification) \u00e0/de cet attribut doit se faire par des getters/accesseurs (respectivement setters/mutateurs). On peut quand m\u00eame acc\u00e9der \u00e0 l'attribut malgr\u00e9 la pr\u00e9sence du <code>_</code>. D'autres m\u00e9thodes existent en Python pour \u00e9viter les manipulations d\u00e9lictueuses (on ne les verra pas). En java, parr exemple, l'attribute sera explicitement priv\u00e9 <code>private int valeur</code>.</p> \ud83d\udc0d Script Python<pre><code>class Carte:\n    \"\"\"\n    Carte d'un jeu\n    \"\"\"\n    def __init__(self,couleur,hauteur,valeur = 0):\n        self._couleur = couleur\n        self._hauteur = hauteur\n        self._valeur = valeur\n</code></pre>"},{"location":"T2_Programmation/2.2_Programmation_Orientee_Objet/cours/#14-troisieme-ebauche-getters-et-setters","title":"1.4 troisi\u00e8me \u00e9bauche : getters et setters","text":"<p>L'avantage des attributs priv\u00e9s, c'est qu'ils ne sont modifiables que par l'utilisation de m\u00e9thodes publiques. Ces m\u00e9thodes, puisqu'elles sont publiques, sont accessibles par n'importe quel objet. Mais leur d\u00e9finition \u00e9tant interne \u00e0 la classe, elles sont coh\u00e9rentes avec celle-ci. Lorsqu'un attribut est signal\u00e9 comme priv\u00e9 avec le tiret bas <code>_</code>, on evite donc d'y acc\u00e9der comme pr\u00e9c\u00e9dememnt (<code>roiCarreau._hauteur</code>). On utilise \u00e0 la place des accesseurs (getters en anglais) et des mutateurs (setters en anglais), comme ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>class Carte:\n    \"\"\"\n    Carte d'un jeu\n    \"\"\"\n    def __init__(self,couleur,hauteur,valeur = 0):\n        self._couleur = couleur\n        self._hauteur = hauteur\n        self._valeur = valeur\n\n    # m\u00e9thodes getters/setters\n    def getCouleur(self):\n        return self._couleur\n    def getHauteur(self):\n        return self._hauteur\n    def getValeur(self):\n        return self._valeur\n    def setCouleur(self,nouvCouleur):\n        self._couleur = nouvCouleur\n    def setHauteur(self,nouvHauteur):\n        self._hauteur = nouvHauteur\n    def setValeur(self,nouvValeur):\n        if type(nouvValeur) == int :\n            self._valeur = nouvValeur\n        else:\n            raise TypeError('la valeur doit \u00eatre un entier')\n\n\nroiCarreau = Carte('carreau','roi',13)\nprint(roiCarreau.getCouleur())      # l'appel d'une m\u00e9thode doit vous rappeler \"liste.sort()\"\nroiCarreau.setCouleur('fenetre')\nprint(roiCarreau.getCouleur())\nroiCarreau.setValeur(-1.5)         # faire diff\u00e9rents tests\nprint(roiCarreau.getValeur())\n</code></pre> <p>Remarque : si vous faites du Python plus avanc\u00e9 dans le sup\u00e9rieur, vous verrez qu'il y a des m\u00e9thodes plus pythonesques que les getters et setters ; ce sont les propri\u00e9t\u00e9s et les d\u00e9corateurs. Nous n'en ferons pas usage en terminale (l'objectif n'\u00e9tant pas l'apprentissage de Python mais de la programmation).</p>"},{"location":"T2_Programmation/2.2_Programmation_Orientee_Objet/cours/#2-la-classe-carte-propre","title":"2. La classe Carte \"propre\"","text":"<p>A faire</p> Enonc\u00e9Classe Carte <p>Reprendre la classe pr\u00e9c\u00e9dente. Le nettoyer et le compl\u00e9ter en tenant compte des remarques suivantes/pr\u00e9c\u00e9dentes :</p> <ul> <li>on ne change pas la couleur ni la hauteur (sauf si on triche)</li> <li>le but est de jouer \u00e0 la bataille ; la valeur d'une carte est comprise entre 1 et 13 points.</li> </ul> \ud83d\udc0d Script Python<pre><code>class Carte:\n\"\"\"Carte d'un paquet de cartes, pour jouer \u00e0 diff\u00e9rents jeux. On reste dans les paquets 32/52/54 cartes ou tarot\n\nAttributs : \n    - couleur : chaine de caract\u00e8res, en g\u00e9n\u00e9ral coeur/carreau/pique/tr\u00e8fle, mais peut\n        aussi \u00eatre plus exotique batons/coupes/deniers/\u00e9p\u00e9es. On peut aussi avoir \"atout\" ou \"joker\"\n    - hauteur : chaine de caract\u00e8res, en g\u00e9n\u00e9ral de \"as\" \u00e0 \"roi\", \n        variantes \"un\" \u00e0 \"vingt et un\" popur les atouts, \"aucune\" pour les jokers\n    - valeur : entier (en g\u00e9n\u00e9ral), d\u00e9pend du jeu. \n        Dans un langage fortement typ\u00e9 c'est un flottant (valeurs 0.5 au tarot)\n\nM\u00e9thodes :\n    init()\n    getCouleur()\n    getHauteur()\n    getValeur()\n    setValeur()\n    estSuperieure(autre)  : renvoie un bool\u00e9en vrai si l'objet Carte est de valeur sup\u00e9rieure \u00e0 celle\n        d'un autre objet Carte\n    estEgale(autre)\n\"\"\"\n\ndef __init__(self,couleur,hauteur,valeur = 0):\n    \"\"\"\n    Constructeur de la classe Carte\n    @param:   \n        - couleur : chaine de caract\u00e8res, en g\u00e9n\u00e9ral coeur/carreau/pique/tr\u00e8fle, mais peut\n        aussi \u00eatre plus exotique batons/coupes/deniers/\u00e9p\u00e9es. On peut aussi avoir \"atout\" ou \"joker\"\n        - hauteur : chaine de caract\u00e8res, en g\u00e9n\u00e9ral de \"as\" \u00e0 \"roi\", \n        variantes \"un\" \u00e0 \"vingt et un\" popur les atouts, \"aucune\" pour les jokers\n        - valeur : entier (en g\u00e9n\u00e9ral), d\u00e9pend du jeu. \n        Dans un langage fortement typ\u00e9 c'est un flottant (valeurs 0.5 au tarot)\n    R\u00e9sultat : \n        ne retourne rien, cr\u00e9e une nouvelle Carte\n    \"\"\"\n    self._couleur = couleur\n    self._hauteur = hauteur\n    if valeur &gt; 0 and valeur &lt;= 13:\n        self._valeur = valeur\n    else:\n        raise ValueError(\"La valeur de la carte doit \u00eatre comprise entre 1 et 13\")\n\n# m\u00e9thodes getters/setters\ndef getCouleur(self):\n    \"\"\"\n    @param : pas de parametre dans cette m\u00e9thode\n    @result : renvoie la couleur de l'objet carte\n    \"\"\"\n    return self._couleur\ndef getHauteur(self):\n    \"\"\"\n    D@param : pas de parametre dans cette m\u00e9thode\n    @result : renvoie la hauteur de l'objet carte\n    \"\"\"\n    return self._hauteur\ndef getValeur(self):\n    \"\"\"\n    @param : pas de parametre dans cette m\u00e9thode\n    @result : revoie la valeur de l'objet carte\n    \"\"\"\n    return self._valeur   \ndef setValeur(self,nouvValeur):\n    \"\"\"\n    @param : entier (en g\u00e9n\u00e9ral) ou flottant, nouvelle valeur de la carte\n    @result : ne renvoie rien, mais modifie la valeur de l'objet Carte\n    \"\"\"\n    if nouvValeur &gt; 0 and nouvValeur &lt;= 13:\n        self._valeur = nouvValeur\n    else:\n        raise ValueError(\"La valeur de la carte doit \u00eatre comprise entre 1 et 13\")\n\n#def __repr__(self):\n    #return f'{self._hauteur} de {self._couleur}, valeur {self._valeur}'\n</code></pre>"},{"location":"T2_Programmation/2.2_Programmation_Orientee_Objet/cours/#3-objets-et-reference-memoire","title":"3. Objets et r\u00e9f\u00e9rence m\u00e9moire","text":"<p>Une variable \u00e0 laquelle on affecte un objet ne contient pas l'objet, mais l'adresse m\u00e9moire de l'objet. On peut donc avoir plusieurs variables qui r\u00e9f\u00e9rencent le m\u00eame objet, et ainsi modifier l'objet \u00e0 l'aide de ces diff\u00e9rentes variables. C'est une source d'erreurs potentielles.   </p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>roiCarreau = Carte('carreau','roi',13)\nroiCarreauBis = Carte('carreau','roi',13)\nroiCarreauTer = roiCarreau\nprint(type(roiCarreau))\nprint(roiCarreau)\nprint(roiCarreauBis)\nprint(roiCarreauTer)\nprint(\"Classe Carte \u00e0 l'adresse :\",hex(id(Carte)))\nprint(\"roiCarreau \u00e0 l'adresse :\",hex(id(roiCarreau)))\nprint(\"roiCarreauBis \u00e0 l'adresse :\",hex(id(roiCarreauBis)))\nprint(\"roiCarreauTer \u00e0 l'adresse :\",hex(id(roiCarreauTer)))\n\n#Sortie Console \n\n&lt;class '__main__.Carte'&gt;\n&lt;__main__.Carte object at 0x0000023D91E855B0&gt;\n&lt;__main__.Carte object at 0x0000023D91E85550&gt;\n&lt;__main__.Carte object at 0x0000023D91E855B0&gt;\nClasse Carte \u00e0 l'adresse : 0x23d9138ca50\nroiCarreau \u00e0 l'adresse : 0x23d91e855b0\nroiCarreauBis \u00e0 l'adresse : 0x23d91e85550\nroiCarreauTer \u00e0 l'adresse : 0x23d91e855b0\n</code></pre></p>"},{"location":"T2_Programmation/2.2_Programmation_Orientee_Objet/cours/#4-resume-graphique","title":"4.  R\u00e9sum\u00e9 graphique","text":""},{"location":"T2_Programmation/2.2_Programmation_Orientee_Objet/cours/#en-memoire","title":"En m\u00e9moire","text":"<p>On a en m\u00e9moire la situation suivante, pour l'exemple pr\u00e9c\u00e9dent : </p>"},{"location":"T2_Programmation/2.2_Programmation_Orientee_Objet/cours/#representation-graphique-dune-classe","title":"Repr\u00e9sentation graphique d'une classe","text":"<p>En g\u00e9n\u00e9ral repr\u00e9sente une classe sous cette forme : </p>"},{"location":"T2_Programmation/2.2_Programmation_Orientee_Objet/cours/#ce-qui-se-passe-lorsque-lon-cree-et-accede-a-un-objet","title":"Ce qui se passe lorsque l'on cr\u00e9e et acc\u00e8de \u00e0 un objet","text":"<p>Le sch\u00e9ma ci-dessous montre : * l'encapsulation \u00e0 l'int\u00e9rieur de la classe ; * la cr\u00e9ation d'un objet ; * la modification des attributs.  </p> <p></p> <p>On retrouve la situation des listes et autres types mutables.</p>"},{"location":"T2_Programmation/2.2_Programmation_Orientee_Objet/cours/#5-la-bataille","title":"5. La \"bataille\"","text":""},{"location":"T2_Programmation/2.2_Programmation_Orientee_Objet/cours/#51-comparaison-de-carte","title":"5.1 comparaison de carte","text":"<p>Commen\u00e7ons par un jeu plus simple : la bataille. Pour jouer \u00e0 la bataille, ou \u00e0 tout autre jeu de cartes, il est n\u00e9cessaire de pouvoir comparer des cartes entre elles. On cr\u00e9e deux m\u00e9thodes, l'une pour \"valeur strictement sup\u00e9rieure\", l'autre pour \"valeur \u00e9gale\". Cr\u00e9er la m\u00e9thode estEgale sur le m\u00eame principe que \"estSup\u00e9rieure\".  </p> <p>On va \u00e9galement sp\u00e9cifier correctement notre classe. Dans la suite du notebook, pour des raisons de compacit\u00e9/lisibilit\u00e9, on ne sp\u00e9cifiera pas de mani\u00e8re aussi d\u00e9taill\u00e9e. Mais n'oubliez pas que les sp\u00e9cifications sont pr\u00e9sentes \u00e0 des fins de compr\u00e9hension rapide, doivent \u00eatre pr\u00e9sentes, et compl\u00e8tes.</p> <p>Comparaison</p> Enonc\u00e9Correction <p>Compl\u00e9ter le code des m\u00e9thodes <code>estSuperieure</code> et <code>estEgale</code> en respectant les signatures suivantes</p> \ud83d\udc0d Script Python<pre><code>    # m\u00e9thodes\ndef estSuperieure(self,autre):\n    \"\"\"\n    Compare les valeurs de deux objets Carte\n    @param : autre, objet de classe Carte\n    @result : bool\u00e9en Vrai si la valeur de la Carte self est sup\u00e9rieure \u00e0 la valeur de la Carte autre\n    \"\"\"\n    pass\n\ndef estEgale(self,autre):\n    pass\n</code></pre> \ud83d\udc0d Script Python<pre><code># m\u00e9thodes\ndef estSuperieure(self,autre):\n    \"\"\"\n    Compare les valeurs de deux objets Carte\n    @param : autre, objet de classe Carte\n    @result : bool\u00e9en Vrai si la valeur de la Carte self est sup\u00e9rieure \u00e0 la valeur de la Carte autre\n    \"\"\"\n    return self._valeur &gt; autre.getValeur()\n\n#Correction\ndef estEgale(self,autre):\n    \"\"\"\n    Compare les valeurs de deux objets Carte\n    @param : autre, objet de classe Carte\n    @result : bool\u00e9en Vrai si la valeur de la Carte self est \u00e9gale \u00e0 la valeur de la Carte autre\n    \"\"\"\n    return self._valeur == autre.getValeur() \n</code></pre>"},{"location":"T2_Programmation/2.2_Programmation_Orientee_Objet/cours/#52-gestion-de-laffichage","title":"5.2 Gestion de l'affichage","text":"\ud83d\udc0d Script Python<pre><code>#Quelques Tests\nroiCarreau = Carte('carreau','roi',13)\nseptPique =  Carte('pique','sept',7)\nprint(roiCarreau.estSuperieure(septPique))\nprint(septPique.estSuperieure(roiCarreau))\nprint(roiCarreau)\n</code></pre> Dans la cellule pr\u00e9c\u00e9dente, quel est l'effet de l'instruction <code>print(roiCarreau)</code>? \ud83d\udc0d Script Python<pre><code>&lt;__main__.Carte object at 0x0000018D9D499CD0&gt;\n</code></pre> <p> D\u00e9commentez les lignes de la m\u00e9thode <code>__repr__</code>, et ex\u00e9cutez \u00e0 nouveau la cellule. </p> Quel est le changement ? Que fait la m\u00e9thode <code>__repr__</code> ? <p><code>roi de carreau, valeur 13</code> La m\u00e9thode repr en Python est une m\u00e9thode sp\u00e9ciale utilis\u00e9e pour d\u00e9finir la repr\u00e9sentation d'un objet sous forme de cha\u00eene de caract\u00e8res. Son objectif principal est de fournir une repr\u00e9sentation non ambigu\u00eb de l'objet qui soit utile pour les d\u00e9veloppeurs, souvent dans un contexte de d\u00e9bogage.</p> Diff\u00e9rence entre repr et str <p><code>__repr__</code> est destin\u00e9e \u00e0 fournir une repr\u00e9sentation technique, destin\u00e9e aux d\u00e9veloppeurs. <code>__str__</code>, quant \u00e0 elle, est utilis\u00e9e pour donner une repr\u00e9sentation lisible par l'utilisateur final. Si <code>__str__</code> n'est pas d\u00e9fini dans la classe, Python utilise <code>__repr__</code> par d\u00e9faut.</p> <p>Comment print interagit avec <code>__repr__</code> et <code>__str__</code> ?</p> <p><code>print()</code> appelle <code>__str__</code> de l'objet s'il est d\u00e9fini. Si <code>__str__</code> n'est pas d\u00e9fini, alors <code>print()</code> utilise <code>__repr__</code> \u00e0 la place. Si aucun des deux n'est d\u00e9fini, Python renverra une repr\u00e9sentation par d\u00e9faut de l'objet (par exemple, <code>&lt;__main__.Personne object at 0x7fa3e5b4be50&gt;</code>).</p> Classe personne en illustation \ud83d\udc0d Script Python<pre><code>class Personne:\n    def __init__(self, nom, age):\n        self.nom = nom\n        self.age = age\n\n    def __repr__(self):\n        return f\"Personne(nom='{self.nom}', age={self.age})\"\n\n    def __str__(self):\n        return f\"{self.nom}, {self.age} ans\"\n\npersonne = Personne(\"Alice\", 30)\n\nprint(repr(personne))  # Personne(nom='Alice', age=30) -&gt; D\u00e9veloppeur\nprint(str(personne))   # Alice, 30 ans -&gt; Utilisateur final\n</code></pre>"},{"location":"T2_Programmation/2.2_Programmation_Orientee_Objet/cours/#53-objet-compose-dobjets","title":"5.3 Objet compos\u00e9 d'objets","text":"<p>Dans un paquet de cartes, il y a plusieurs cartes. On va cr\u00e9er donc la classe Paquet. </p> \ud83d\udc0d Script Python<pre><code>class PaquetCartes:\n    \"\"\"\n    Paquet de cartes\n    Attributs:\n        - nom : nom du paquet, de pr\u00e9f\u00e9rence correspondant au nom du jeu pour\n            lequel il va \u00eatre utilis\u00e9\n        - paquet : liste des cartes\n    \"\"\"\n    _hauteurs = [\"as\",\"deux\",\"trois\",\"quatre\",\"cinq\",\"six\",\"sept\",\"huit\",\"neuf\",\"dix\",\n              \"valet\",\"dame\",\"roi\"]\n    _couleurs = [\"coeur\",\"pique\",\"carreau\",\"tr\u00e8fle\"]\n\n    def __init__(self,nom,nbCartes = 32):\n        \"\"\"Constructeur du paquet de cartes\"\"\"\n        self._nom = nom\n        self._nbCartes = nbCartes\n        self._paquet = []\n        if nbCartes == 32:\n            for i in range(6,len(hauteurs)):\n                for j in range(len(self._couleurs)):\n                    self._paquet.append(Carte(self.couleurs[j],hauteurs[i],i + 1)) \n            for j in range(len(self._couleurs)):\n                self._paquet.append(Carte(self._couleurs[j],self._hauteurs[0],14))\n        else:\n            for i in range(1,len(self._hauteurs)):\n                for j in range(len(self._couleurs)):\n                    self._paquet.append(Carte(self._couleurs[j],self._hauteurs[i],i+1))\n            for j in range(len(self._couleurs)):\n                self._paquet.append(Carte(self._couleurs[j],self._hauteurs[0],14))\n\n    def getPaquet(self):\n        return self._paquet\n\npaquetBataille = PaquetCartes('bataille', 52)\n</code></pre>"},{"location":"T2_Programmation/2.2_Programmation_Orientee_Objet/cours/#531-notion-de-variable-de-classe","title":"5.3.1 Notion de variable de classe","text":"<p>On remarque que les listes des valeurs et des hauteurs possibles sont d\u00e9finies avant le constructeur. Ces variables sont partag\u00e9es par toutes les instances de la classe : il n'y a qu'une seule copie de ces variables, cr\u00e9ee lors du chargement de la classe.</p> <p>Variable de classe</p> <p>Une variable de classe est une variable qui est partag\u00e9e par toutes les instances d'une classe. Contrairement aux variables d'instance, qui sont propres \u00e0 chaque objet, les variables de classe sont communes \u00e0 toutes les instances d'une m\u00eame classe. Elles sont d\u00e9finies directement dans la classe, en dehors des m\u00e9thodes, et leur valeur est partag\u00e9e et accessible par chaque instance de cette classe.</p> <p>\ud83d\udc0d Script Python<pre><code>class PaquetCartes:\n    \"\"\"\n    Paquet de cartes\n    Attributs:\n        - nom : nom du paquet, de pr\u00e9f\u00e9rence correspondant au nom du jeu pour\n            lequel il va \u00eatre utilis\u00e9\n        - paquet : liste des cartes\n    \"\"\"\n    _hauteurs = [\"as\",\"deux\",\"trois\",\"quatre\",\"cinq\",\"six\",\"sept\",\"huit\",\"neuf\",\"dix\",\n              \"valet\",\"dame\",\"roi\"]\n    _couleurs = [\"coeur\",\"pique\",\"carreau\",\"tr\u00e8fle\"]\n</code></pre> Les variables de classes sont int\u00e9ressantes pour d\u00e9finir des constantes comme dans notre exemple, mais aussi de pouvoir disposer d'une variable unique commune \u00e0 toutes les instances d'une m\u00eame classe. L'exemple classique en POO est celui de la population.</p> Population \ud83d\udc0d Script Python<pre><code>class Personne:\n    population = 0  # Variable de classe\n\n    def __init__(self, nom, age):\n        self.nom = nom  # Variable d'instance\n        self.age = age  # Variable d'instance\n        Personne.population += 1  # Acc\u00e8s \u00e0 la variable de classe pour incr\u00e9menter la population\n\n    def afficher_details(self):\n        print(f\"Nom: {self.nom}, \u00c2ge: {self.age}\")\n\n# Cr\u00e9ation de deux instances\npersonne1 = Personne(\"Alice\", 30)\npersonne2 = Personne(\"Bob\", 25)\n\n# Affichage des d\u00e9tails des instances\npersonne1.afficher_details()  # Affiche : Nom: Alice, \u00c2ge: 30\npersonne2.afficher_details()  # Affiche : Nom: Bob, \u00c2ge: 25\n\n# Acc\u00e8s \u00e0 la variable de classe via la classe\nprint(f\"Population actuelle : {Personne.population}\")  # Affiche : Population actuelle : 2\n\n# Acc\u00e8s \u00e0 la variable de classe via une instance (possible mais pas recommand\u00e9)\nprint(f\"Population via personne1 : {personne1.population}\")  # Affiche : Population via personne1 : 2\n</code></pre> <p>A faire</p> <p>Testez le code pr\u00e9c\u00e9dent avec 32 cartes, et corrigez les erreurs.   Remarque : le param\u00e8tre <code>nbCartes</code>est renseign\u00e9 par d\u00e9faut \u00e0 32, il n'est pas foc\u00e9ment n\u00e9cessaire de le pr\u00e9ciser lors de l'appel du constructeur. S'il est absent, il y aura 32 cartes dans le paquet, sinon il y aura le nombre de cartes pr\u00e9cis\u00e9 lors de l'appel.</p> Correction Constructeur \ud83d\udc0d Script Python<pre><code>   def __init__(self,nom,nbCartes):\n    \"\"\"Constructeur du paquet de cartes\"\"\"\n    self._nom = nom\n    self._nbCartes = nbCartes\n    self._paquet = []\n    for i in range((len(self._hauteurs)-(self._nbCartes // 4)),len(self._hauteurs)):\n        for j in range(len(self._couleurs)):\n            self._paquet.append(Carte(self._couleurs[j],self._hauteurs[i],i + 2)) \n    #Si le nombre de cartes n'est pas un multiple de 4, il faut ajouter les cartes restantes\n    if (len(self._hauteurs)-(self._nbCartes // 4)) % 2 != 0:\n        #Il faut ajouter le reste de (len(self._hauteurs)-(self._nbCartes // 4)) \u00e0 la fin du paquet\n        for i in range((len(self._hauteurs)-(self._nbCartes // 4))-1,(len(self._hauteurs)-(self._nbCartes // 4))):\n            for j in range((self._nbCartes % 4)):\n                self._paquet.append(Carte(self._couleurs[j],self._hauteurs[i],i + 2))\n\n    #Exemple d'appel du constructeur dans la classe de test\n    paquetBataille = PaquetCartes(\"bataille\", 10) ;\n</code></pre>"},{"location":"T2_Programmation/2.2_Programmation_Orientee_Objet/cours/#532-afficher-les-cartes","title":"5.3.2 Afficher les cartes","text":"<p>Quand on joue aux cartes, c'est assez important de savoir ce que l'on a en main, ou au moins de savoir quelle est la valeur de la carte jou\u00e9e ! Affichons donc les 10 premi\u00e8res cartes avec le code suivant.</p> \ud83d\udc0d Script Python<pre><code>print(paquetBataille)\nfor i in range(10):\n    print(paquetBataille.getPaquet()[i])\n</code></pre> <p> Suivant que vous avez ou non d\u00e9fini la m\u00e9thode <code>__repr__</code> dans la classe <code>Carte</code>, que constatez-vous ?  </p> <p>A faire</p> <p>modifiez le code des classes <code>Carte</code>et <code>PaquetCartes</code>, pour afficher les attributs de chaque carte et du paquet (utilisez <code>__repr__(self)</code>).  V\u00e9rifiez \u00e9galement que la valeur des as est correcte et qu'un paquet de 32 cartes contient bien toutes les cartes n\u00e9cessaires.</p>"},{"location":"T2_Programmation/2.2_Programmation_Orientee_Objet/cours/#533-avec-les-objets-composes-dobjets-les-methodes-enchainees","title":"5.3.3 Avec les objets compos\u00e9s d'objets, les m\u00e9thodes \"enchain\u00e9es\"","text":"<p>Composition d'objets : La composition en POO signifie qu'un objet contient une r\u00e9f\u00e9rence \u00e0 un ou plusieurs autres objets, et interagit avec eux pour accomplir une t\u00e2che. Cela permet de mod\u00e9liser des relations de type \"a un\" (par exemple, une voiture a un moteur, un conducteur, etc.) comme ici un paquet de cartes est compos\u00e9 de cartes.</p> <p>On peut \u00e9crire des instructions appliquant une m\u00e9thode sur le r\u00e9sultat d'une autre m\u00e9thode. Quand tu parles d'encha\u00eenement de m\u00e9thodes, il s'agit g\u00e9n\u00e9ralement de retourner l'objet lui-m\u00eame \u00e0 la fin d'une m\u00e9thode pour permettre d'appeler une autre m\u00e9thode de l'objet dans la m\u00eame cha\u00eene. C'est un motif de conception appel\u00e9 fluent interface, souvent utilis\u00e9 pour rendre le code plus lisible et compact.</p> <p>\ud83d\udc0d Script Python<pre><code>paquetBataille.getPaquet()[-1].getValeur()\n</code></pre> <code>getPaquet()</code> retourne une liste, <code>[-1]</code> permet de r\u00e9cup\u00e9rer le dernier objet de la liste des cartes. Objet qui est donc une Carte sur laquelle on peut appliquer la m\u00e9thode <code>getValeur()</code> qui appartient \u00e0 la classe <code>Carte</code>.</p> <p>Pour pouvoir jouer, il nous manque encore quelques m\u00e9thodes dans notre classe PaquetCartes. </p> <p>Application</p> A faireCorrection <p>Cr\u00e9er : - la m\u00e9thode <code>melange(self)</code>qui m\u00e9lange le paquet comme son nom l'indique. Cette m\u00e9thode renvoie <code>self</code>, elle modifie l'attribut <code>__paquet</code>. On utilisera la m\u00e9thode <code>shuffle(tableau_\u00e0_m\u00e9langer)</code>de la biblioth\u00e8que <code>random</code> - la m\u00e9thode <code>distribution(nbJoueurs,nbADistribuer = 0)</code>qui renvoie une <code>donne</code>, une liste de listes de Cartes. Il y a autant de listes que de joueurs. Si nbADistribuer = 0, on distribue tout le paquet de mani\u00e8re \u00e9quitable. Sinon, on donne le nombre de cartes indiqu\u00e9es \u00e0 chaque joueur. Le nombre de cartes \u00e0 distribuer et le nombre de joueurs doivent \u00eatre compatibles avec la taille du paquet de cartes. S'il reste des cartes apr\u00e8s distribution, une derni\u00e8re liste sera ajout\u00e9e avec celles-ci - Si vous le souhaitez, vous pouvez faire une m\u00e9thode <code>distribution(nbJoueurs)</code> beaucoup plus simple, o\u00f9 le paquet est divis\u00e9 en deux (<code>donne</code> contient alors 2 listes). Pour l'instant l'objectif est de jouer \u00e0 la bataille et rien de plus complexe.</p> <p>Remarque : l'affichage des donnes de chaque joueur rel\u00e8ve plut\u00f4t de la classe g\u00e9rant le jeu. En effet dans certains jeux les cartes sont inconnues du joueur.  </p> \ud83d\udc0d Script Python<pre><code>\"\"\"\nla m\u00e9thode melange(self)qui m\u00e9lange le paquet comme son nom l'indique. \nCette m\u00e9thode renvoie self, elle modifie l'attribut __paquet. \nOn utilisera la m\u00e9thode shuffle(tableau_\u00e0_m\u00e9langer)de la biblioth\u00e8que random\n\"\"\"\n\ndef melange(self):\n    \"\"\"\n    D@param : pas de parametre dans cette m\u00e9thode\n    @result : proc\u00e9dure qui m\u00e9lange sur place le paquet de carte\n    Returns\n    -------\n    None.\n\n    \"\"\"\n    random.shuffle(self._paquet)\n\n\n    \"\"\"\n    la m\u00e9thode distribution(nbJoueurs,nbADistribuer = 0)qui renvoie une donne, \n    une liste de listes de Cartes. Il y a autant de listes que de joueurs. \n    Si nbADistribuer = 0, on distribue tout le paquet de mani\u00e8re \u00e9quitable. \n    Sinon, on donne le nombre de cartes indiqu\u00e9es \u00e0 chaque joueur. \n    Le nombre de cartes \u00e0 distribuer et le nombre de joueurs doivent \u00eatre \n    compatibles avec la taille du paquet de cartes. \n    S'il reste des cartes apr\u00e8s distribution, une derni\u00e8re liste sera ajout\u00e9e avec celles-ci\n    \"\"\"\ndef distribution(self,nbJoueurs,nbADistribuer = 0):     \n    \"\"\"\n    D@param : nbJoueurs : entier, d\u00e9termine le nb de joueurs \u00e0 servir\n            nbADistribuer : entier, indique le nb de cartes \u00e0 distribuer.\n    @result : renvoie une liste de liste des cartes distribu\u00e9es en fonction du nombre de joueurs\n    \"\"\"\n    # Gestion des param\u00e8tres entrants\n    if (nbJoueurs*nbADistribuer &gt; len(self._paquet)) or (nbJoueurs&gt;len(self._paquet)):\n        raise Exception('nombre de cartes \u00e0 distribuer et le nombre de joueurs doivent \u00eatre compatibles avec la taille du paquet de cartes')\n        return None\n\n    #Initialisation de la liste des cartes \u00e0 renvoyer\n    dist=[]\n    #Calcul du nb de paquets \u00e0 constituer, initialisation\n    n = 0\n    if nbADistribuer == 0 :\n        n = len(self._paquet)//nbJoueurs\n    else : n = nbADistribuer  #On aura autant de liste \u00e0 ajouter \u00e0 dist que de joueurs.\n\n    for i in range(nbJoueurs):\n        main=[]\n        #tant que l'on a pas atteint le nb de cartes \u00e0 distribuer\n        # while len(main) &lt; n:\n        for i in range(n):\n            #petite astuce de programmation :\n            #On tire un \u00e9l\u00e9ment de la liste jeu au hasard et en l\u2019y supprimme avec \n            #cette instruction \u00e0 tiroirs :main.append(jeu.pop(randrange(len(jeu))))\n            main.append(self._paquet.pop(random.randrange(len(self._paquet))))\n        #Une fois la main du joueur constitu\u00e9, on l'ajoute \u00e0 la distribution\n        dist.append(main)\n    #Traitement du cas : il reste des cartes \u00e0 distribuer \n    if (len(self._paquet) != 0 ):\n        dist.append(self._paquet)\n    return dist\n</code></pre>"},{"location":"T2_Programmation/2.2_Programmation_Orientee_Objet/cours/#6-la-classe-jeu-de-la-bataille","title":"6. La classe \"jeu de la bataille\"","text":"<p>A vous de jouer, puisque vous allez cr\u00e9er la classe <code>JeuBataille</code>, dont les sp\u00e9cifications sont donn\u00e9es ci-dessous. L'ordinateur joue contre lui-m\u00eame.  </p> <p>Rappel des r\u00e8gles:  deux joueurs se partagent le paquet  la donne de chaque joueur est pos\u00e9e face cach\u00e9e devant lui  chaque joueur tire en m\u00eame temps une carte. Le \"en m\u00eame temps\" est en fait un tirage successif, d'abord le joueur num\u00e9ro 1 puis le 2. Ceci pour des raisons d'ordre dans lequel on va ranger les cartes par la suite  En cas d'in\u00e9galit\u00e9 des cartes, le joueur ayant la carte la plus forte l'emporte. Il met les deux cartes sous son paquet, face retourn\u00e9e.  En cas d'\u00e9galit\u00e9, on it\u00e8re le processus. Lorsqu'un joueur retourne une carte plus forte que celle de son adversaire, il remporte tout le tas, qu'il retourne et place en dessous de son paquet  Un joueur a perud lorsqu'il n'a plus de cartes \u00e0 retourner.  Il est th\u00e9oriquement possible d'avoir un match nul  </p>"},{"location":"T2_Programmation/2.2_Programmation_Orientee_Objet/cours/#7-et-si-on-arretait-de-tricher","title":"7. Et si on arr\u00eatait de tricher ...","text":"<p>Une notion importante fait son apparition dans ce jeu. Il s'agit de la file de cartes (et non pile comme on aurait tendance \u00e0 le dire dans le langage courant). Une file est une structure lin\u00e9aire de donn\u00e9es dans laquelle on ajoute des \u00e9l\u00e9ments d'un c\u00f4t\u00e9, et on les supprime de l'autre : c'est la file d'attente \u00e0 la boulangerie. Ou : FIFO (first in first out), \u00e9galement queue en anglais. Les op\u00e9rations sur les files ont des noms sp\u00e9cifiques :  </p> <ul> <li><code>fileVide()</code> : cr\u00e9e une file vide</li> <li><code>tete(file)</code> : renvoie l'\u00e9l\u00e9ment en t\u00eate de la file, la file \u00e9tant non vide</li> <li><code>enfiler(element, file)</code> : ins\u00e8re <code>element</code>en fin de file </li> <li><code>defiler(file)</code>: supprime l'\u00e9l\u00e9ment en t\u00eate de la file. On peut le renvoyer \u00e9ventuellement</li> <li><code>estFileVide(file)</code>: teste si la file est vide</li> <li>On peut \u00e9ventuellement fixer une taille maximale \u00e0 une file  </li> </ul> <p>Cette structure m\u00e9rite amplement sa classe. Cr\u00e9ez-l\u00e0 en suivant les sp\u00e9cifications ci-dessous, vous l'utiliserez dans \"JeuBataille\". Quelques tests sont propos\u00e9s, vous pouvez en rajouter (essayez d'utiliser des <code>assert</code>).</p> \ud83d\udc0d Script Python<pre><code>class File:\n    \"\"\"\n    G\u00e8re les files FIFO\n    Attributs :\n        - file : liste d'\u00e9l\u00e9ments \u00e0 priori du m\u00eame type\n        - nb_elements : taille de la file\n        - premier : premier \u00e9l\u00e9ment de la file\n        - dernier : dernier \u00e9l\u00e9ment de la file\n    M\u00e9thodes :\n        - __init__(liste = []) : constructeur, renvoie une file vide si liste n'est pas renseign\u00e9.\n            Sinon renvoie une file constitu\u00e9e des \u00e9l\u00e9ments de la liste\n        - tete : renvoie l'\u00e9l\u00e9ment en t\u00eate de la file, la file \u00e9tant non vide\n        - enfiler(element) : ins\u00e8re element en fin de file \n        - defiler : supprime l'\u00e9l\u00e9ment en t\u00eate de la file. On peut le renvoyer \u00e9ventuellement.\n            Si la file est vide, renvoie None\n        - estFileVide : teste si la file est vide\n        - getters pour nb_elements, premier et dernier\n    \"\"\"\n    def __init__(self,liste = None):\n        \"\"\"Constructeur de la file\n        Remarque : \u00e9crire self._file = liste copie l'adresse de liste dans self._file. Ceci peut poser\n        des probl\u00e8mes. En effet, si par la suite on modifie liste, alors on modifiera aussi self._file\"\"\"\n        self._file = []\n        if liste == None:\n            pass\n        else:\n            pass\n\n    def estFileVide(self):\n        pass\n\n    def enfiler(self,element):\n        pass\n\n    def defiler(self): \n        pass\n\n    # getters\n    def premier(self):\n        return self._premier\n    def dernier(self):\n        return self._dernier\n    def getNb_elements(self):\n        return self._nb_elements\n\n    # une petite m\u00e9thode d'instrumentation \u00e7a peut parfois aider :-)\n    def printFile(self):\n        print(\"Contenu de la file : \")\n        for element in self._file:\n            if isinstance(element,Carte):   # on teste si \"element\" est une instance de la classe Carte...\n                print(element)        # ...dans le cadre particulier de ce notebook uniquement\n            else:\n                print(element, \"n'est pas une carte\")\n\nma_file = File([11,22,33,44,55])\nma_file.printFile()\nma_file.enfiler(66)\nprint(ma_file.premier(),ma_file.dernier(),ma_file.getNb_elements())\nlong_ma_file = ma_file.getNb_elements()\nfor i in range(long_ma_file):\n    print(ma_file.defiler())\nprint(ma_file.defiler())\nma_file2 = File()\nprint(ma_file2.premier(),ma_file2.dernier(),ma_file2.getNb_elements())\n</code></pre> <p>Jeu de la bataille</p> Trame du jeuCorrection \ud83d\udc0d Script Python<pre><code>class JeuBataille:\n    \"\"\"\n    Jeu de bataille\n    Attributs:\n        - nom_joueur1 : chaine\n        - nom_joueur2 : chaine\n        - paquetBataille : liste des cartes\n        - cartes_j1 : pile des cartes du joueur 1\n        - cartes_j2 : pile des cartes du joueur 2\n        - defausse : pile des cartes de la d\u00e9fausse\n        - nb_tours : entier, nombre de tours de jeu\n        - nb_batailles : entier, nombre de cas d'\u00e9galit\u00e9 lors des tirages simultan\u00e9s\n\n        Remarque : certains de ces attributs auraient peut-\u00eatre plut\u00f4t leur place en tant que variable \n        dans la m\u00e9thode jouer, et vice-versa (?).\n        Dans la version propos\u00e9e ici, le jeu \u00e9tant automatique, c'est m\u00eame certain. Mais si on veut\n        plus visualiser/intervenir lors du jeu, il vaut mieux avoir les attributs ci-dessus.\n\n    M\u00e9thodes :\n        - __init__\n        - jouer : jeu de l'oridnateur contre lui-m\u00eame. Il est conseill\u00e9:\n            soit de mettre tr\u00e8s peu de cartes (8 au total max)\n            soit de pr\u00e9ciser un nombre maximal de tours de jeu\n            Renvoie :\n                match_nul : bool\u00e9en au nom explicite\n                gagnant : cha\u00eene de caract\u00e8res\n                self.nb_batailles\n                self.nb_tours\n    \"\"\"\n\n    def __init__(self, nom_joueur1 = 'ordi1', nom_joueur2 = 'ordi2'):\n        \"\"\"Constructeur du jeu\"\"\"\n        self._nomjoueur1 = nom_joueur1\n        self._nomjoueur2 = nom_joueur2\n        self._paquetBataille = PaquetCartes('bataille',6)\n        donne = self._paquetBataille.melange().distribution(2)\n        self._cartesj1 = File(donne[0])\n        self._cartesj2 = File(donne[1])\n        self._defausse = File()\n        self._nb_tours = 0\n        self._nb_batailles = 0\n        print(\"Cartes j1\")\n        self._cartesj1.printFile()\n        print(\"Cartes j2\")\n        self._cartesj2.printFile()\n\n    def jouer(self):\n        # jouez avec tr\u00e8s peu de cartes (4 \u00e0 10). Fixez un maximum de nombre de tours de jeu\n\n        return (match_nul,gagnant,self._nb_batailles,self._nb_tours)\n\n\nbaston = JeuBataille()\n(mat,gagnant,nb_batailles,tours) = baston.jouer()\nif mat:\n    print(\"match nul, ce n'est pas fr\u00e9quent. En r\u00e9compense, calculer la probabilit\u00e9 de cet \u00e9v\u00e8nement.\")\nelse:\n    if gagnant == None:\n        print(\"trop de tours de jeu. Il y a eu \",nb_batailles,\" batailles\")\n    else:\n        print(gagnant,\" a gagn\u00e9 en \",tours,\" tours de jeu, et \",nb_batailles,\" batailles.\")\n</code></pre> \ud83d\udc0d Script Python<pre><code># -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sun Sep 20 21:54:13 2020\n\n@author: SOPHIE\n\"\"\"\nfrom file import File\nfrom PaquetCartes import PaquetCartes\nfrom carte import Carte\n\nclass JeuBataille:\n    \"\"\"\n    Jeu de bataille\n    Attributs:\n        - nom_joueur1 : chaine\n        - nom_joueur2 : chaine\n        - paquetBataille : liste des cartes\n        - cartes_j1 : pile des cartes du joueur 1\n        - cartes_j2 : pile des cartes du joueur 2\n        - defausse : pile des cartes de la d\u00e9fausse\n        - nb_tours : entier, nombre de tours de jeu\n        - nb_batailles : entier, nombre de cas d'\u00e9galit\u00e9 lors des tirages simultan\u00e9s\n\n        Remarque : certains de ces attributs auraient peut-\u00eatre plut\u00f4t leur place en tant que variable \n        dans la m\u00e9thode jouer, et vice-versa (?).\n        Dans la version propos\u00e9e ici, le jeu \u00e9tant automatique, c'est m\u00eame certain. Mais si on veut\n        plus visualiser/intervenir lors du jeu, il vaut mieux avoir les attributs ci-dessus.\n\n    M\u00e9thodes :\n        - __init__\n        - jouer : jeu de l'oridnateur contre lui-m\u00eame. Il est conseill\u00e9:\n            soit de mettre tr\u00e8s peu de cartes (8 au total max)\n            soit de pr\u00e9ciser un nombre maximal de tours de jeu\n            Renvoie :\n                match_nul : bool\u00e9en au nom explicite\n                gagnant : cha\u00eene de caract\u00e8res\n                self.nb_batailles\n                self.nb_tours\n    \"\"\"\n\n    def __init__(self, nom_joueur1 = 'ordi1', nom_joueur2 = 'ordi2'):\n        \"\"\"Constructeur du jeu\"\"\"\n        self._nomjoueur1 = nom_joueur1\n        self._nomjoueur2 = nom_joueur2\n        self._paquetBataille = PaquetCartes('bataille',12)\n        #On m\u00e9lange et on distribue entre les 2 joueurs.\n        #Pour rappel, distribution(2) distribue toutes les cartes entre les  2 joueurs.\n        self._paquetBataille.melange()\n        donne = self._paquetBataille.distribution(2)\n        #On affecte la premi\u00e8re liste au J1\n        self._cartesj1 = File(donne[0])\n        #Et la seconde au J2\n        self._cartesj2 = File(donne[1])\n        #Si il reste des cartes, on cr\u00e9e une d\u00e9fausse\n        self._defausse = File()\n        #Initialisation du nb de tours \u00e0 0\n        self._nb_tours = 0\n        #Cr\u00e9taion d'un compteur de bataille\n        self._nb_batailles = 0\n        print(\"Cartes j1\")\n        self._cartesj1.printFile()\n        print(\"Cartes j2\")\n        self._cartesj2.printFile()\n\n\n    def jouer(self) :\n        # jouez avec tr\u00e8s peu de cartes (4 \u00e0 10). Fixez un maximum de nombre de tours de jeu\n        poursuivre = True\n        print('Partie principale : ')\n        print('   - {} : {}'.format(self._nomjoueur1, self._cartesj1.printFile()))\n        print('   - {} : {}'.format(self._nomjoueur2, self._cartesj2.printFile()))\n        while poursuivre or self._nb_tours &lt; 5  :\n            self._nb_tours += 1\n            #Cas ou l'un des joueurs n'a plus de carte, on arr\u00eate la partie\n            if self._cartesj1.estFileVide() or self._cartesj2.estFileVide() :\n                poursuivre = False\n            else : \n                #Chaque joueur tire une carte\n                carte1 = self._cartesj1.defiler()\n                carte2 = self._cartesj2.defiler()\n\n            #Cas principal\n            if carte1.estEgale(carte2) :\n                #On lance une bataille uniquement si les 2 joueurs ont un minimum de trois cartes chacun, sinon on arr\u00eate le jeu\n                if self._cartesj1.getNb_elements() &gt; 3 and self._cartesj2.getNb_elements() &gt; 3 :\n                    self._nb_batailles += 1\n                    print('   - BATAILLE.')\n                    #on cr\u00e9e un liste des cartes cach\u00e9es\n                    setJoueur1 = []\n                    setJoueur2 = []\n                    setJoueur1.append(carte1)\n                    setJoueur2.append(carte2)\n                    #Puis on ajoute une carte face cach\u00e9e\n                    setJoueur1.append(self._cartesj1.defiler())\n                    setJoueur2.append(self._cartesj2.defiler())\n                    #On tire une carte face ouverte pour continuer\n                    carte1 = self._cartesj1.defiler()\n                    carte2 = self._cartesj2.defiler()\n                    #Puis on compare \n                    if carte1.estSuperieure(carte2):\n                        #Le joueur1 a gagn\u00e9, on ajoute les 2 cartes et le set cach\u00e9 dans son paquet\n                        self._cartesj1.enfiler(carte1)\n                        self._cartesj1.enfiler(carte2)\n                        self._cartesj1.enfiler(setJoueur1[0])\n                        self._cartesj1.enfiler(setJoueur1[1])\n                        self._cartesj1.enfiler(setJoueur2[0])\n                        self._cartesj1.enfiler(setJoueur2[1])\n                        print('   - {} gagne la bataille.'.format(self._nomjoueur1))\n                    else : \n                        #Le joueur2 a gagn\u00e9, on ajoute les 2 cartes dans son paquet\n                        self._cartesj2.enfiler(carte1)\n                        self._cartesj2.enfiler(carte2)\n                        self._cartesj2.enfiler(setJoueur1[0])\n                        self._cartesj2.enfiler(setJoueur1[1])\n                        self._cartesj2.enfiler(setJoueur2[0])\n                        self._cartesj2.enfiler(setJoueur2[1])\n                        print('   - {} gagne la bataille.'.format(self._nomjoueur2))\n                else : poursuivre = False\n\n            elif carte1.estSuperieure(carte2):\n                #Le joueur1 a gagn\u00e9, on ajoute les 2 cartes dans son paquet\n                self._cartesj1.enfiler(carte1)\n                self._cartesj1.enfiler(carte2)\n                print('   - {} gagne la main.'.format(self._nomjoueur1))\n            else : \n                #Le joueur2 a gagn\u00e9, on ajoute les 2 cartes dans son paquet\n                self._cartesj2.enfiler(carte1)\n                self._cartesj2.enfiler(carte2)\n                print('   - {} gagne la main.'.format(self._nomjoueur2))\n\n        #Determine le gagnant\n        if self._cartesj1.getNb_elements() == self._cartesj2.getNb_elements():\n            match_nul = True\n            gagnant = None\n        elif self._cartesj1.getNb_elements() &gt; self._cartesj2.getNb_elements():\n            match_nul = False\n            gagnant = self._nomjoueur1\n        else : \n            match_nul = False\n            gagnant = self._nomjoueur2\n        return (match_nul,gagnant,self._nb_batailles,self._nb_tours)\n</code></pre>"},{"location":"T2_Programmation/2.2_Programmation_Orientee_Objet/exercices/","title":"Exercices","text":""},{"location":"T2_Programmation/2.2_Programmation_Orientee_Objet/exercices/#exercice-1-eleves","title":"Exercice 1 : ELeves","text":"<p>Eleve</p> Enonc\u00e9Correction <ol> <li>\u00c9crire une classe <code>Eleve</code> qui contiendra les attributs <code>nom</code>, <code>classe</code> et <code>note</code>.</li> <li>Instancier trois \u00e9l\u00e8ves de cette classe.</li> <li>\u00c9crire une fonction <code>compare(eleve1, eleve2)</code> qui renvoie le nom de l'\u00e9l\u00e8ve ayant la meilleure note.</li> </ol> \ud83d\udc0d Script Python<pre><code>class Eleve :\n\n    def __init__(self,nom, classe, note=0) :\n        self._nom = nom\n        self._classe = classe\n        self._note = note\n\n    def getnom(self):\n        return self._nom\n    def getnote(self):\n        return self._note\n\n    def compare(self, eleve) :\n        if self.getnote() &gt;= eleve.getnote() :\n            return self.getnom()\n        else :\n            return eleve.getnom()\n#Tests de la classe\nriri = Eleve(\"Henri\", \"TG2\", 12) #Instanciation d'un objet ELEVE nomm\u00e9 Henri, et stock\u00e9 dans la variable riri\nfifi = Eleve(\"Philippe\", \"TG6\", 15)\nloulou = Eleve(\"Louis\", \"TG1\", 8)\nassert riri.compare(fifi)=='Philippe'\n</code></pre>"},{"location":"T2_Programmation/2.2_Programmation_Orientee_Objet/exercices/#exercice-2-triangle","title":"Exercice 2 : Triangle","text":"<p>Eleve</p> Enonc\u00e9Correction <p>\u00c9crire une classe <code>TriangleRect</code> qui contiendra les attributs <code>cote1</code>, <code>cote2</code> et <code>hypotenuse</code>.</p> <p>La m\u00e9thode constructeur ne prendra en param\u00e8tres que <code>cote1</code> et <code>cote2</code>, l'attribut <code>hypotenuse</code> se calculera automatiquement.</p> <p>\u00c9crire une classe <code>TriangleRect</code> qui contiendra les attributs <code>cote1</code>, <code>cote2</code> et <code>hypotenuse</code>.</p> <p>La m\u00e9thode constructeur ne prendra en param\u00e8tres que <code>cote1</code> et <code>cote2</code>, l'attribut <code>hypotenuse</code> se calculera automatiquement.</p> \ud83d\udc0d Script Python<pre><code>import math \n\nclass TriangleRect :\n\n    def __init__(self, c1, c2) :\n        self._cote1 = c1\n        self._cote2 = c2\n        self.hypothenuse = math.sqrt(self._cote1**2 + self._cote2**2)\n\n    def getcote1(self):\n        return self._cote1\n    def getcote2(self):\n        return self._cote2\n</code></pre> \ud83d\udc0d Script Python<pre><code>mon_triangle = TriangleRect(3,4)\nassert mon_triangle.getcote1() == 3\nassert mon_triangle.getcote2() == 4\nassert mon_triangle.hypothenuse == 5.0\n</code></pre>"},{"location":"T2_Programmation/2.2_Programmation_Orientee_Objet/exercices/#exercice-3","title":"Exercice 3 :","text":"<ol> <li>\u00c9crire une classe <code>Chrono</code> qui contiendra les attributs <code>heures</code>, <code>minutes</code> et <code>secondes</code>.</li> <li>Doter la classe d'une m\u00e9thode <code>affiche()</code> qui fera affichera le temps <code>t</code>.</li> <li>Doter la classe d'une m\u00e9thode <code>avance(s)</code> qui fera avancer le temps <code>t</code> de <code>s</code> secondes.</li> </ol> \ud83d\udc0d Script Python<pre><code>class Chrono :\n\n    def __init__(self, h, m, s):\n        self._heures = h\n        self._minutes = m\n        self._secondes = s\n\n    def getheures(self) :\n        return self._heures\n    def getminutes(self):\n        return self._minutes\n    def getsecondes(self):\n        return self._secondes\n\n    def avance(self, s) :\n        conv_sec = self._heures*60*60 + self._minutes*60 + self._secondes+s\n        q,s=divmod(conv_sec,60)\n        h,m=divmod(q,60)\n        self._heures = h\n        self._minutes = m\n        self._secondes = s\n        #return \"%d:%d:%d\" %(h,m,s)\n\n    def affiche(self) :\n        return f'Il est {self.getheures()} heures, {self.getminutes()} minutes et {self.getsecondes()} secondes'\n</code></pre> \ud83d\udc0d Script Python<pre><code>t = Chrono(17,25,38)\nassert t.getheures() == 17\nassert t.affiche() == 'Il est 17 heures, 25 minutes et 38 secondes'\nt.avance(27)\n#t.affiche()\nassert t.affiche() == 'Il est 17 heures, 26 minutes et 5 secondes'\n</code></pre>"},{"location":"T2_Programmation/2.2_Programmation_Orientee_Objet/exercices/#exercice-4","title":"Exercice 4 :","text":"<p>\u00c9crire une classe <code>Player</code> qui :</p> <ul> <li>ne prendra aucun argument lors de son instanciation.</li> <li>affectera \u00e0 chaque objet cr\u00e9\u00e9 un attribut <code>energie</code> valant 3 par d\u00e9faut</li> <li>affectera \u00e0 chaque objet cr\u00e9\u00e9 un attribut <code>alive</code> valant <code>True</code> par d\u00e9faut.</li> <li>fournira \u00e0 chaque objet une m\u00e9thode <code>blessure()</code> qui diminue l'attribut <code>energie</code> de 1.</li> <li>fournira \u00e0 chaque objet une m\u00e9thode <code>soin()</code> qui augmente l'attribut <code>energie</code> de 1.</li> <li>si l'attribut <code>energie</code> passe \u00e0 0, l'attribut <code>alive</code> doit passer \u00e0 <code>False</code> et ne doit plus pouvoir \u00e9voluer.</li> </ul> \ud83d\udc0d Script Python<pre><code>class Player : \n\n    def __init__(self, e = 3, a = True) :\n        self._energie = e\n        self._alive = a\n\n    def getenergie(self):\n        return self._energie\n    def getalive(self):\n        return self._alive\n\n    def setenergie(self, e):\n        self._energie = e\n    def setalive(self, a):\n        self._alive = a\n\n    def blessure(self):\n        if self.getenergie() &gt; 1 : \n            self._energie -= 1\n        elif self.getenergie() == 1 :\n            self._energie = 0\n            self._alive = False\n\n    def soin(self):\n        if self.getenergie() &gt; 1 : \n            self._energie += 1\n</code></pre> \ud83d\udc0d Script Python<pre><code>mario = Player()\nassert mario.getenergie() == 3\nmario.soin()\nassert mario.getenergie() == 4\nmario.blessure()\nmario.blessure()\nmario.blessure()\nassert mario.getalive() == True\nmario.blessure()\nassert mario.getalive() == False\nmario.soin()\nassert mario.getalive() == False\nassert mario.getenergie() == 0\n</code></pre>"},{"location":"T2_Programmation/2.2_Programmation_Orientee_Objet/exercices/#exercice-5-a-faire-a-la-maison","title":"Exercice 5 : (A faire \u00e0 la maison)","text":"<p>Cr\u00e9er une classe <code>CompteBancaire</code> dont la m\u00e9thode constructeur recevra en param\u00e8tres :</p> <ul> <li>un attribut <code>titulaire</code> stockant le nom du propri\u00e9taire.</li> <li>un attribut <code>solde</code> contenant le solde disponible sur le compte.</li> </ul> <p>Cette classe contiendra deux m\u00e9thodes <code>retrait()</code> et <code>depot()</code> qui permettront de retirer ou de d\u00e9poser de l'argent sur le compte. </p> \ud83d\udc0d Script Python<pre><code>Exemple de l'utilisation de la classe\n&gt;&gt;&gt; compteGL = CompteBancaire(\"riri\", 1000)\n&gt;&gt;&gt; compteGL.retrait(50)\nVous avez retir\u00e9 50 euros\nSolde actuel du compte : 950 euros\n&gt;&gt;&gt; compteGL.retrait(40000)\nRetrait impossible\n&gt;&gt;&gt; compteGL.depot(10000000)\nVous avez d\u00e9pos\u00e9 10000000 euros\nSolde actuel du compte : 10000950 euros\n</code></pre> \ud83d\udc0d Script Python<pre><code>class CompteBancaire :\n\n    def __init__(self, nom, solde) :\n        self._titulaire = nom\n        self._solde = solde\n\n    def getTit(self):\n        return self._titulaire\n    def getsolde(self):\n        return self._solde\n\n    def retrait(self, montant) :\n        if self._solde-montant &gt;=0 :\n            self._solde -= montant\n            print (f'Vous avez retir\u00e9 {montant} euros')\n            print (f'Solde actuel du compte : {self._solde} euros')\n        else :\n            print (f'Retrait impossible')\n\n    def depot(self, montant) :\n        self._solde += montant\n        print (f'Solde actuel du compte : {self._solde}')\n</code></pre> \ud83d\udc0d Script Python<pre><code>compteGL = CompteBancaire(\"riri\", 1000)\ncompteGL.retrait(50)\ncompteGL.retrait(40000)\ncompteGL.depot(10000000)\n</code></pre> \ud83d\udccb Texte<pre><code>Vous avez retir\u00e9 50 euros\nSolde actuel du compte : 950 euros\nRetrait impossible\nSolde actuel du compte : 10000950\n</code></pre> \ud83d\udc0d Script Python<pre><code>\n</code></pre> <p>exercices programmation objet</p> <p>Exercice 1 : des grandes bo\u00eetes et des petites bo\u00eetes et des moyennes bo\u00eetes\u2026 1.  Cr\u00e9er une classe Boite. Cette classe a pour attributs : \u2022   Longueur \u2022   Largeur \u2022   Hauteur \u2022   Ces trois attributs sont dans un ordre d\u00e9croissant longueur \u2265 largeur \u2265 hauteur Elle a pour m\u00e9thodes : \u2022   Volume, qui comme son nom l\u2019indique donne le volume d\u2019une boite \u2022   RentreDans (autre_boite), qui renvoie vrai si l\u2019objet Boite rentre dans autre_boite. 2.  Cr\u00e9er al\u00e9atoirement une liste d\u2019une vingtaine de bo\u00eetes (on peut choisir des dimensions entre 1 et 50). 3.  A l\u2019aide d\u2019un algorithme glouton, donner une suite de bo\u00eetes aussi grande que possible qui rentrent les unes dans les autres. Rappel : pour trier les bo\u00eetes, on fera appel \u00e0 la fonction sorted. Syntaxe : def cle_titre(ligne):     \"\"\"     Renvoie la valeur du champ 'title' d'un enregistrement de la table     \"\"\"     return ligne['title']</p> <p>films_tries = sorted(mesDonn\u00e9es, key = cle_particuli\u00e8re)     On peut rajouter reverse = True pour avoir l\u2019ordre d\u00e9croissant. 4.  Pour les r\u00e9visions (algorithmes \u00e0 conna\u00eetre pour le bac), il peut \u00eatre int\u00e9ressant de cr\u00e9er une m\u00e9thode lt(self) afin de comparer deux bo\u00eetes, puis d\u2019utiliser cette m\u00e9thode pour faire le tri pr\u00e9alable \u00e0 l\u2019algorithme glouton ci-dessus. On utilisera bien s\u00fbr un des algorithmes \u00e0 conna\u00eetre, \u00e0 savoir le tri par insertion et/ou le tri par s\u00e9lection. </p> <p>Exercice 2 : une horloge. Cr\u00e9er une classe horloge, puis la tester. Attributs : \u2022   heures \u2022   minutes \u2022   secondes M\u00e9thodes : \u2022   ticTac : cette m\u00e9thode augmente l\u2019horloge d\u2019une seconde, et \u00e9ventuellement sonne le r\u00e9veil \u2022   reveil(h , mn , s) \u2022   repr</p> <p>Exercice 3 : des chiens. Cr\u00e9er une classe chien, puis la tester. Attributs : \u2022   nom \u2022   points_de_sant\u00e9 \u2022   aboiement : cha\u00eene de caract\u00e8res M\u00e9thodes : \u2022   mordre(autre_chien) : fait baisser les points de sant\u00e9 d\u2019un autre chien \u2022   manger : augmente les points de sant\u00e9 \u2022   grogner : renvoie \u00ab Grrr\u2026 \u00bb + son aboiement \u2022   machouiller(cha\u00eene) : renvoie la cha\u00eene m\u00e9lang\u00e9e \u2022   repr</p>"},{"location":"T2_Programmation/2.2_Programmation_Orientee_Objet/resume/","title":"Resume","text":"<p>Paradigmes de programmation Th\u00e8me : Structure de donn\u00e9es</p> <p>Th\u00e8me : Langage et programmation </p> <p></p> <p>Source du cours :  - Cours r\u00e9dig\u00e9 par Fr\u00e9d\u00e9ric Mandon sous licence Creative Commons BY NC SA -Liste de diffusion NSI -NSI 24 le\u00e7ons avec exercices corrig\u00e9s, \u00e9dition Ellipse -David Roche :  https://pixees.fr/informatiquelycee/n_site/nsi_term_paraProg_poo.html</p> <p>I   Programmation objet</p> <p>1)  Principes Comme son nom l\u2019indique, le paradigme objet donne une vision du probl\u00e8me \u00e0 r\u00e9soudre comme un ensemble d\u2019objets. Ces objets ont des caract\u00e9ristiques et des comportements qui leurs sont propres, ce sont respectivement les attributs et les m\u00e9thodes. Les objets interagissent entre eux avec des messages, en respectant leur interface (c\u2019est-\u00e0-dire l\u2019ensemble des sp\u00e9cifications en version compacte, les signatures des m\u00e9thodes, on verra ce point plus en d\u00e9tail tout au long de l\u2019ann\u00e9e).</p> <p>2)  Un exemple \u00ab papier \u00bb Cr\u00e9ons un jeu vid\u00e9o de type \u00ab hack and slash \u00bb. Dans ce type de jeu, le personnage jou\u00e9 doit tuer un maximum de monstres sur une carte de jeu. A lire le descriptif, 3 objets apparaissent naturellement : \u2022   Le personnage principal ; \u2022   Les monstres ; \u2022   La carte. On remarque imm\u00e9diatement que \u00ab monstre \u00bb aurait plut\u00f4t tendance \u00e0 d\u00e9signer un type qu\u2019un objet unique : les objets sont tous typ\u00e9s. Le type d\u00e9finit \u00e0 la fois le nom de l\u2019objet, et ce qu\u2019il fait. De m\u00eame, avec cette structure, on peut avoir plusieurs objets \u00ab personnages \u00bb, pour jouer en multi-joueur, et bien s\u00fbr plusieurs cartes.</p> <p>Le \u00ab moule \u00bb avec lequel on va fabriquer un objet est appel\u00e9 classe. La classe personnage comprend par exemple les attributs : \u2022   Points de vie \u2022   D\u00e9g\u00e2ts maximums qu\u2019inflige le personnage \u2022   Position Elle comprend les m\u00e9thodes : \u2022   D\u00e9placement \u2022   Attaque \u2022   Et des m\u00e9thodes qui permettent d\u2019acc\u00e9der aux attributs, ou bien de les modifier. Ce sont les accesseurs et les mutateurs. Les attributs sont cach\u00e9s des objets ext\u00e9rieurs (le principe est l\u2019encapsulation), ils sont priv\u00e9s. Les m\u00e9thodes permettant d\u2019y acc\u00e9der sont \u00e0 l\u2019inverse publiques. Un objet ext\u00e9rieur ne doit pas pouvoir modifier \u00e0 loisir les attributs d\u2019un autre objet, en effet il doit y avoir un contr\u00f4le de l\u2019objet sur ses propres attributs. Quand on cr\u00e9e un personnage, l\u2019ordinateur cr\u00e9e une instance de la classe. C\u2019est-\u00e0-dire que tous les objets de la classe auront les m\u00eames attributs et m\u00e9thodes, mais que deux objets de la m\u00eame classe peuvent avoir des valeurs diff\u00e9rentes pour les attributs. L\u2019instance est cr\u00e9e gr\u00e2ce \u00e0 un constructeur. M\u00e9taphore : \u2022   Une classe, c\u2019est le plan d\u2019une maison (abstrait) ; \u2022   Un objet, c\u2019est une maison issue du plan (concret). Ce qu\u2019il y a \u00e0 l\u2019int\u00e9rieur d\u2019une maison diff\u00e8re de l\u2019int\u00e9rieur d\u2019une autre maison (d\u00e9coration, mobilier, etc\u2026) ; \u2022   L\u2019interface c\u2019est le bouton qui permet de r\u00e9gler le chauffage ; \u2022   L\u2019impl\u00e9mentation (ou la r\u00e9alisation) de l\u2019interface, c\u2019est la m\u00e9thode de chauffage/climatisation retenue. L\u2019utilisateur ne conna\u00eet pas le d\u00e9tail de l\u2019impl\u00e9mentation, ce qui compte pour lui, c\u2019est le bouton de r\u00e9glage (donc l\u2019interface)</p> <p>3)  Une classe en Python Le code suivant montre, \u00e9tape par \u00e9tape, la classe \u00ab personnage \u00bb telle qu\u2019on l\u2019a d\u00e9finie au paragraphe pr\u00e9c\u00e9dent. \u2022   Le mot-cl\u00e9 pour d\u00e9finir une classe est class. On donne ensuite les sp\u00e9cifications de la classe (on documente).     class Personnage:     \"\"\"     Personnage d'un jeu de type hack 'n slash</p> \ud83d\udccb Texte<pre><code>Attributs :\n    _nom : chaine de carat\u00e8res, nom du personnage\n    _pv : entier positif ou nul, points de vie du personnage\n    _degats : entier strictement positif, d\u00e9gats maximum\n</code></pre> <p>du personnage         _position : couple d'entiers donnant l'abscisse et l'ordonn\u00e9e                         du personnage sur la carte     M\u00e9thodes:         Init() constructeur de la classe Personnage         getAttribut() : accesseurs des attributs         setAttributs(nouvelle_valeur) : mutateurs des attributs.                 Uniquement pour les attributs _pv et _position         deplacement(param\u00e8tres) : permet de changer la position  du personnage         attaque() : renvoie les d\u00e9g\u00e2ts faits \u00e0 l'adversaire     \"\"\"</p> <p>\u2022   La premi\u00e8re m\u00e9thode dans la classe est le constructeur, appel\u00e9 init en Python. Toutes les m\u00e9thodes d\u2019une classe ont au moins le param\u00e8tre self, c\u2019est-\u00e0-dire que la m\u00e9thode s\u2019applique \u00e0 l\u2019objet lui-m\u00eame. Dans le constructeur de Personnage est aussi pass\u00e9 en argument le param\u00e8tre nom. Le constructeur initialise les attributs de l\u2019objet (points de vie, d\u00e9g\u00e2ts, position). Tous les attributs sont pr\u00e9c\u00e9d\u00e9s d\u2019un tiret bas \u00ab _ \u00bb  pour signifier qu\u2019ils sont priv\u00e9s.     def init(self,nom):         \"\"\"         Constructeur de la classe Personnage         Donn\u00e9es:              _nom : chaine de carat\u00e8res, nom du personnage             _pv : entier positif ou nul, points de vie du personnage             _degats : entier strictement positif, d\u00e9gats maximum du  personnage             _position : couple d'entiers donnant l'abscisse et  l'ordonn\u00e9 du personnage sur la carte         R\u00e9sultat :              ne retourne rien, cr\u00e9e un nouveau Personnage         \"\"\"         self._nom = nom         self._pv = 80         self._degats = 8         self._position = (0,0)</p> <p>\u2022   Accesseurs (getters en anglais) et mutateurs (setters en anglais). On ne documente pas les accesseurs, on peut le faire pour les mutateurs. Les accesseurs n\u2019ont pas de param\u00e8tre (\u00e0 part self), les mutateurs ont la nouvelle valeur. Il n\u2019y a pas forc\u00e9ment de mutateurs (ni d\u2019accesseurs) pour tous les attributs : le nom du personnage n\u2019est pas modifiable ici.</p>"},{"location":"T2_Programmation/2.2_Programmation_Orientee_Objet/resume/#accesseurs-des-attributs","title":"accesseurs des attributs","text":"\ud83d\udccb Texte<pre><code>def getNom(self):\n    return self._nom\ndef getPv(self):\n    return self._pv\ndef getDegats(self):\n    return self._degats\ndef getPosition(self):\n    return self._position\n\n#mutateurs des attributs\ndef setPv(self,nouveaux_pv):\n</code></pre> <p>\"\"\"         Les points de vie d\u2019un personnage sont positifs ou nul.         \"\"\"         if nouveaux_pv &lt;0:             self._pv = 0         else:             self._pv = nouveaux_pv def setDegats(self,nouveaux_degats):         self._degats = nouveaux_degats     def setPosition(self,nouvelle_pos):         # un contr\u00f4le sur la position doit se faire en communiquant avec         # l'objet carte: x et y doivent \u00eatre compatibles.         # Il y aura des instructions du type carte.getDimensions(),         # cartes.getObstacles() etc. dans cette m\u00e9thode         self._position = nouvelle_position</p> <p>\u2022   M\u00e9thodes de la classe. Comme pr\u00e9c\u00e9demment, les m\u00e9thodes ont self en premier param\u00e8tre. Dans cet exemple, la m\u00e9thode de d\u00e9placement reste \u00e0 programmer suivant le jeu. def deplacement(self,param\u00e8tres):         \"\"\"         Donn\u00e9es: param\u00e8tres d\u00e9pendant des r\u00e8gles         R\u00e9sultat: renvoie le bool\u00e9en tout_s_est_bien_passe Vrai si le             d\u00e9placement est possible         \u00e0 programmer suivant les r\u00e8gles,  le return est assez in\u00e9l\u00e9gant ici !         \"\"\"         tout_s_est_bien_passe = True         #...code...         if tout_s_est_bien_passe :             return True         else:             return False     def Attaque(self):         \"\"\"         Donn\u00e9es: pas de param\u00e8tre dans cette m\u00e9thode         R\u00e9sultat: renvoie un entier al\u00e9atoire compris entre 1 et _degats         \"\"\"         return(randint(1,self._degats))</p> <p>On repr\u00e9sente la classe comme ceci :</p> <p></p> <p>4)  Cr\u00e9ation d\u2019une instance et acc\u00e8s aux attributs. Cr\u00e9ation d\u2019un objet :</p> <p>perso_1 = Personnage(\"Un Seul Bras Les Tua Tous\") l\u2019appel \u00e0 mon_perso renvoie l\u2019adresse de l\u2019objet : perso_1 &lt;main.Personnage object at 0x110c892b0&gt; Pour acc\u00e9der aux attributs, on utilise l\u2019accesseur, sans pr\u00e9ciser le param\u00e8tre self : perso_1.getNom() 'Un Seul Bras Les Tua Tous' Pour modifier un attribut, on utilise le mutateur, sans pr\u00e9ciser le param\u00e8tre self : perso_1.setDegats(12) perso_1.getDegats() 12</p> <p>Attributs publics, attributs priv\u00e9s et Python. En programmation objet, ind\u00e9pendamment du langage, on consid\u00e8re que les attributs doivent \u00eatre priv\u00e9s, encapsul\u00e9s \u00e0 l\u2019int\u00e9rieur de la classe et accessibles uniquement par mutateurs. En Python avanc\u00e9 la situation est diff\u00e9rente : les propri\u00e9t\u00e9s et d\u00e9corateurs, que l\u2019on ne verra pas cette ann\u00e9e, \u00e9vitent qu\u2019un objet ext\u00e9rieur modifie un attribut sans en respecter les sp\u00e9cifications. Les attributs dans le constructeur ne sont plus pr\u00e9c\u00e9d\u00e9s du double tiret, le code devient : def init(self,nom):         \"\"\"         Constructeur de la classe Personnage         ...         \"\"\"         self.nom = nom         self.pv = 80         self.degats = 8         self.position = (0,0) Apr\u00e8s cr\u00e9ation du personnage, on peut alors acc\u00e9der et modifier les attributs sans getters ni setters :</p> <p>perso_1 = Personnage(\"Un Seul Bras Les Tua Tous\") perso_1.degats = 12 perso_1.degats 12 Vous trouverez sur le web de nombreux exemples de code r\u00e9dig\u00e9s de cette mani\u00e8re, sans forc\u00e9ment savoir si les propri\u00e9t\u00e9s avanc\u00e9es de Python ont \u00e9t\u00e9 utilis\u00e9es. Nous utiliserons \u00e9galement ce type de code plus tard dans l\u2019ann\u00e9e, pour simplifier l\u2019\u00e9criture des programmes.</p> <p>5)  Interaction entre deux objets. Remarque pr\u00e9liminaire ; le fichier classe_personnage.py comprend notre classe, ainsi que l\u2019import de randint. Cr\u00e9ons un deuxi\u00e8me personnage et faisons les se combattre avec le code suivant :</p> <p>\u2022   On importe la classe dans notre programme principal ; en effet il est conseill\u00e9 de faire un fichier par classe. On donne un alias plus court (perso). import classe_personnage as perso</p> <p>\u2022   On cr\u00e9e les personnages et on modifie leurs attributs perso_1 = perso.Personnage(\"Un Seul Bras Les Tua Tous\") perso_1.setDegats(12) perso_2 = perso.Personnage(\"Ventre de Fer\") perso_2.setPv(120)</p> <p>Remarques :  \u2022   Ne pas donner le m\u00eame nom \u00e0 une m\u00e9thode et \u00e0 un attribut dans une classe ! \u2022   Plusieurs classes peuvent avoir les m\u00eames noms de m\u00e9thodes sans que cela soit probl\u00e9matique. En effet l\u2019appel d\u2019une m\u00e9thode passe par objet.m\u00e9thode() , ce qui permet de savoir dans quelle classe chercher la m\u00e9thode. La classe d\u00e9finit son espace de noms. \u2022    On peut d\u00e9finir des m\u00e9thodes priv\u00e9es, avec la m\u00eame convention que pour les variables priv\u00e9es (avec _ devant le nom). On ne devrait pas s\u2019en servir cette ann\u00e9e. \u2022   On peut d\u00e9finir des \u00e9galement des m\u00e9thodes de classe. On ne met pas self dans les param\u00e8tres. Cette possibilit\u00e9 ne devrait pas nous plus nous \u00eatre utile cette ann\u00e9e.</p> <p>M\u00e9thodes particuli\u00e8res \u2022   Personnage.doc permet d\u2019obtenir les sp\u00e9cifications de la classe \u2022   repr(self) renvoie une cha\u00eene de caract\u00e8res, d\u00e9finie dans la m\u00e9thode, et donnant la description de la classe lorsque qu\u2019on demande un print de l\u2019objet def repr(self) :   return f'{self.nom} a {self._pv} points de vie,\\ninflige {self._degats} points de d\u00e9gats au plus, \\net est en position {self._position}' \u2022   __lt_(self , autre_instance) permet de faire une m\u00e9thode de comparaison entre deux objets (lt = less than)</p>"},{"location":"T2_Programmation/2.3_Calculabilite_Decidabilite/cours/","title":"D\u00e9cidabilit\u00e9, calculabilit\u00e9","text":""},{"location":"T2_Programmation/2.3_Calculabilite_Decidabilite/cours/#1-un-programme-comme-parametre-dun-programme","title":"1. Un programme comme param\u00e8tre d'un programme","text":"<p>Les codes que nous manipulons ressemblent souvent \u00e0 cela : \ud83d\udc0d Script Python<pre><code>def accueil(n):\n    for k in range(n):\n        print(\"bonjour\")\n</code></pre></p> <p>Le programme s'appelle <code>accueil</code>, et pour fonctionner il a besoin d'un param\u00e8tre, qui sera ici un nombre entier <code>n</code>.</p> <p>Voici comment nous pouvons repr\u00e9senter notre machine <code>accueil</code>, son param\u00e8tre d'entr\u00e9e (5) et sa sortie (les 5 \u00abbonjour\u00bb)</p> <p></p> <p>Maintenant, enregistrons le code suivant dans un fichier <code>test.py</code> : \ud83d\udc0d Script Python<pre><code>def accueil(n):\n    for k in range(n):\n        print(\"bonjour\")\n\naccueil(5)\n</code></pre></p> <p>Pour ex\u00e9cuter ce code, nous devons taper dans un terminal l'instruction suivante : <code>python3 test.py</code>, ce qui donnera  </p> <p>Le programme utilis\u00e9 est alors <code>python3</code>, qui prend comme param\u00e8tre le programme <code>test.py</code>. Ce param\u00e8tre <code>test.py</code> est un ensemble de caract\u00e8res qui contient les instructions que le programme <code>python3</code> va interpr\u00e9ter. </p> <p>L'illustration correspondante sera donc :</p> <p></p> <p>Mais nous pouvons aller encore plus loin : l'instruction <code>python3 test.py</code> est tap\u00e9e dans mon Terminal Linux, qui lui-m\u00eame est un programme appel\u00e9 <code>Terminal</code>.</p> <p>Et donc : </p> <p>Conclusion :</p> <p>Il n'y a donc aucun obstacle \u00e0 consid\u00e9rer un programme comme une simple donn\u00e9e, pouvant \u00eatre re\u00e7ue en param\u00e8tre par un autre programme. (voire par lui-m\u00eame !)</p> <p>\u00c0 titre anecdotique, on pourra ex\u00e9cuter avec int\u00e9r\u00eat cette instruction Python : <code>a='a=%r;print(a%%a)';print(a%a)</code>  Ce type de code (magique !) existe dans tous les langages et s'appelle un quine.</p>"},{"location":"T2_Programmation/2.3_Calculabilite_Decidabilite/cours/#2-mon-programme-va-t-il-sarreter","title":"2. Mon programme va-t-il s'arr\u00eater ?","text":""},{"location":"T2_Programmation/2.3_Calculabilite_Decidabilite/cours/#21-un-exemple","title":"2.1 Un exemple","text":"<p>Consid\u00e9rons le programme suivant :</p> \ud83d\udc0d Script Python<pre><code>def countdown(n):\n    while n != 0:\n        print(n)\n        n = n - 1\n    print(\"fini\")\n</code></pre> <p>En l'observant attentivement, je peux pr\u00e9voir que <code>countdown(10)</code> affichera les nombres de 10 \u00e0 1 avant d'\u00e9crire \"fini\". Puis le programme s'arr\u00eatera.</p> <p>Mais que va provoquer <code>countdown(10.8)</code> ?</p> <p>Comme la variable <code>n</code> ne sera jamais \u00e9gale \u00e0 0, le programme va rentrer dans une boucle infinie, il ne s'arr\u00eatera jamais. Mauvaise nouvelle.  J'ai pu pr\u00e9voir ceci en regardant attentivement le code de mon programme. J'ai \u00abremarqu\u00e9\u00bb qu'une variable <code>n</code> non enti\u00e8re provoquerait une boucle infinie.</p> <p>Question : Est-ce qu'un programme d'analyse de programmes aurait pu faire cela \u00e0 ma place ?</p>"},{"location":"T2_Programmation/2.3_Calculabilite_Decidabilite/cours/#22-une-machine-pour-predire-larret-ou-non-dun-programme","title":"2.2 Une machine pour pr\u00e9dire l'arr\u00eat ou non d'un programme.","text":"<p>Apr\u00e8s tout, un programme est une suite d'instructions (le code-source), et peut donc \u00eatre, comme on l'a vu, le param\u00e8tre d'entr\u00e9e d'un autre programme qui l'analyserait.  Un tel programme (appelons-le <code>halt</code>) prendrait en entr\u00e9es :</p> <ul> <li>un param\u00e8tre <code>prog</code> (le code-source du programme)</li> <li>un param\u00e8tre  <code>x</code>, qui serait le param\u00e8tre d'entr\u00e9e de <code>prog</code>.</li> </ul> <p>L'instruction <code>halt(prog, x)</code> renverrait <code>True</code> si <code>prog(x)</code> s'arr\u00eate, et <code>False</code> si <code>prog(x)</code> ne s'arr\u00eate pas.</p> <p></p> <p>Exemple : </p> <ul> <li><code>halt(countdown, 10)</code> renverrait <code>True</code>.</li> <li><code>halt(countdown, 10.8)</code> renverrait <code>False</code>. </li> </ul> <p></p> <p>Tentative d'\u00e9criture de <code>halt</code> en Python :</p> \ud83d\udc0d Script Python<pre><code>def halt(prog, x):\n    if \"prog(x) s'arr\u00eate\":   # mes excuses, je n'ai pas eu le temps de finir totalement ce code\n        return True\n    else :\n        return False\n</code></pre> <p>Nous en resterons l\u00e0 pour l'instant dans l'\u00e9criture de ce programme. Nous allons nous en servir pour construire d'autres programmes.</p>"},{"location":"T2_Programmation/2.3_Calculabilite_Decidabilite/cours/#23-amusons-nous-avec-ce-programme-halt","title":"2.3 Amusons-nous avec ce programme <code>halt</code>.","text":"<p>Consid\u00e9rons le programme :</p> \ud83d\udc0d Script Python<pre><code>def sym(prog):\n    if halt(prog, prog) == True:\n        while True:\n            print(\"vers l'infini et au-del\u00e0 !\")\n    else:\n        return 1\n</code></pre> <p>On peut remarquer que le programme <code>halt</code> est appel\u00e9 avec comme param\u00e8tres <code>prog, prog</code>, ce qui signifie que <code>prog</code> se prend lui-m\u00eame en param\u00e8tre. On rappelle que ce n'est pas choquant, un code-source \u00e9tant une donn\u00e9e comme une autre.</p> <p></p> <p>Ce programme <code>sym</code> re\u00e7oit donc en param\u00e8tre un programme <code>prog</code>, et :</p> <ul> <li>va rentrer dans une boucle infinie si <code>prog(prog)</code> s'arr\u00eate.</li> <li>va renvoyer 1 si  <code>prog(prog)</code> ne s'arr\u00eate pas.</li> </ul>"},{"location":"T2_Programmation/2.3_Calculabilite_Decidabilite/cours/#24-un-leger-probleme","title":"2.4 Un l\u00e9ger probl\u00e8me ...","text":"<p>Puisqu'un programme peut prendre en param\u00e8tre son propre code-source, que donnerait l'appel \u00e0 <code>sym(sym)</code> ?</p> <p>Deux cas peuvent se pr\u00e9senter, suivant si <code>halt(sym, sym)</code> renvoie <code>True</code> ou <code>False</code>.</p> <p></p> <ul> <li> <p>cas n\u00b01 : <code>halt(sym, sym)</code> renvoie <code>True</code>, ce qui signifie que <code>sym(sym)</code>  devrait s'arr\u00eater. Mais dans ce cas-l\u00e0, l'ex\u00e9cution de <code>sym(sym)</code> rentre dans une boucle infinie. C'est une contradiction.</p> </li> <li> <p>cas n\u00b02 : <code>halt(sym, sym)</code> renvoie <code>False</code>, ce qui signifie que <code>sym(sym)</code>  rentre dans une boucle infinie. Mais dans ce cas-l\u00e0, l'ex\u00e9cution de <code>sym(sym)</code> se termine correctement et renvoie la valeur 1. C'est une contradiction.</p> </li> </ul>"},{"location":"T2_Programmation/2.3_Calculabilite_Decidabilite/cours/#25-conclusion","title":"2.5 Conclusion","text":"<p>Nous venons de prouver que notre programme <code>halt</code>, cens\u00e9 pr\u00e9dire si un programme <code>prog</code> peut s'arr\u00eater sur une entr\u00e9e <code>x</code>, NE PEUT PAS EXISTER.</p> <p>Ce r\u00e9sultat th\u00e9orique, d'une importance cruciale, s'appelle le probl\u00e8me de l'arr\u00eat.</p> <p>Probl\u00e8me de l'arr\u00eat  </p> <p>Il ne peut pas exister de programme universel qui prendrait en entr\u00e9es :</p> <ul> <li>un programme P </li> <li>une entr\u00e9e E de ce programme P</li> </ul> <p>et qui d\u00e9terminerait si ce programme P, lanc\u00e9 avec l'entr\u00e9e E, va s'arr\u00eater ou non. </p> <p></p> <p>Ce r\u00e9sultat a \u00e9t\u00e9 d\u00e9montr\u00e9 par Alan Turing en 1936, dans un article intitul\u00e9 \u00abOn computable numbers, with an application to the Entscheidungsproblem\u00bb.</p> <p></p> <p>Pour sa d\u00e9monstration, il pr\u00e9sente un mod\u00e8le th\u00e9orique de machine capable d'ex\u00e9cuter des instructions basiques sur un ruban infini, les machines de Turing.</p> <p>\u00c0 la m\u00eame \u00e9poque, le math\u00e9maticien Alonzo Church d\u00e9montre lui aussi ce th\u00e9or\u00e8me de l'arr\u00eat, mais par un moyen totalement diff\u00e9rent, en inventant le lambda-calcul.</p> <p>Tous deux mettent ainsi un terme au r\u00eave du math\u00e9maticien allemand David Hilbert, qui avait en 1928 pos\u00e9 la question de l'existence d'un algorithme capable de r\u00e9pondre \u00aboui\u00bb ou \u00abnon\u00bb \u00e0 n'importe quel \u00e9nonc\u00e9 math\u00e9matique pos\u00e9 sous forme d\u00e9cisionnelle (\u00abun triangle rectangle peut-il \u00eatre isoc\u00e8le ?\u00bb, \u00abexiste-t-il un nombre premier pair ?\u00bb)</p> <p>Cette question, appel\u00e9e \u00abprobl\u00e8me de la d\u00e9cision\u00bb, ou Entscheidungsproblem en allemand, est d\u00e9finitivement tranch\u00e9e par le probl\u00e8me de l'arr\u00eat : un tel th\u00e9or\u00e8me ne peut pas exister, puisque par exemple, aucun algorithme ne peut r\u00e9pondre \u00aboui\u00bb ou \u00abnon\u00bb \u00e0 la question \u00abce programme va-t-il s'arr\u00eater ?\u00bb.</p> <p>Le th\u00e9or\u00e8me de l'arr\u00eat sera \u00e9tendu plus tard par le th\u00e9or\u00e8me de Rice.</p> <p>Ce r\u00e9sultat d\u00e9montre que toutes les questions s\u00e9mantiques (non \u00e9videntes) au sujet d'un programme sont ind\u00e9cidables :</p> <ul> <li>\u00abce programme va-t-il s'arr\u00eater ?\u00bb (le th\u00e9or\u00e8me de l'arr\u00eat)</li> <li>\u00abce programme va renvoyer la valeur 12 ?\u00bb </li> <li>\u00abce programme va-t-il un jour renvoyer un message d'erreur ?\u00bb </li> <li>...</li> </ul> <p>Rice d\u00e9montre que toutes ces questions peuvent \u00eatre ramen\u00e9es (on dit r\u00e9duites) au th\u00e9or\u00e8me de l'arr\u00eat, qui est ind\u00e9cidable.</p>"},{"location":"T2_Programmation/2.3_Calculabilite_Decidabilite/cours/#2-calculabilite","title":"2. Calculabilit\u00e9","text":"<p>D\u00e9cidabilit\u00e9 et calculabilit\u00e9</p> <p>Le probl\u00e8me de l'arr\u00eat est dit ind\u00e9cidable car la fonction qui le r\u00e9sout (notre brave programme <code>halt</code>) n'est pas calculable. </p>"},{"location":"T2_Programmation/2.3_Calculabilite_Decidabilite/cours/#21-notion-de-calculabilite","title":"2.1 Notion de calculabilit\u00e9","text":"<p>Qu'y a-t-il derri\u00e8re cette notion de calculabilit\u00e9 ? Cette notion, qui jette un pont entre les math\u00e9matiques (la vision de Church, pour sch\u00e9matiser) et l'informatique (la vision de Turing) n'est pas simple \u00e0 d\u00e9finir !</p> <p>Le calcul math\u00e9matique peut se r\u00e9duire \u00e0 une succession d'op\u00e9rations \u00e9l\u00e9mentaires (songez \u00e0 la multiplication enti\u00e8re comme une s\u00e9rie d'additions). Les nombres calculables sont les nombres qui sont g\u00e9n\u00e9rables en un nombre fini d'op\u00e9rations \u00e9l\u00e9mentaires.  De la m\u00eame mani\u00e8re, une fonction math\u00e9matique sera dite calculable s'il existe une suite finie d'op\u00e9rations \u00e9l\u00e9mentaires permettant de passer d'un nombre x \u00e0 son image f(x).</p> <p>On retrouve cette notion d'op\u00e9rations \u00e9l\u00e9mentaires dans les machines de Turing.  Cette machine (th\u00e9orique) permet de simuler tout ce qu'un programme informatique (une suite d'instructions) est capable d'ex\u00e9cuter. Un algorithme peut se r\u00e9duire \u00e0 une suite d'op\u00e9rations \u00e9lementaires, comme une fonction math\u00e9matique peut se r\u00e9duire \u00e0 une suite de calculs. D\u00e8s lors, on pourra consid\u00e9rer un algorithme comme une fonction.</p> <p>Turing a d\u00e9montr\u00e9 que l'ensemble des fonctions calculables, au sens de Church, \u00e9tait \u00e9quivalent \u00e0 l'ensemble des fonctions programmables sur sa machine. Certaines fonctions peuvent \u00eatre calculables, ou ne pas l'\u00eatre : c'est notamment le cas de notre fonction du probl\u00e8me de l'arr\u00eat. </p>"},{"location":"T2_Programmation/2.3_Calculabilite_Decidabilite/cours/#22-langages-turing-complets","title":"2.2 Langages Turing-complets","text":"<p>Ce r\u00e9sultat ne d\u00e9pend pas du langage utilis\u00e9 : le fait que nous ayons utilis\u00e9 Python au paragraphe pr\u00e9c\u00e9dent n'a pas d'influence sur notre d\u00e9monstration. Nous savons depuis les machines de Turing que tous nos langages de programmation sont Turing-complets : ils sont tous capables de faire la m\u00eame chose (avec plus ou moins de facilit\u00e9 !).  Scratch, C, Python, Java, Basic, Haskell, Brainfuck... tous ces langages sont th\u00e9oriquement \u00e9quivalents : la calculabilit\u00e9 ne d\u00e9pend pas du langage utilis\u00e9.</p>"},{"location":"T2_Programmation/2.3_Calculabilite_Decidabilite/cours/#23-hp-calculable-oui-mais-facilement-1-million-de-a-gagner-ci-dessous","title":"2.3 (HP) Calculable, oui, mais facilement ? -&gt; 1 million de $ \u00e0 gagner ci-dessous.","text":"<p>L'\u00e9tude de la calculabilit\u00e9 d'une fonction (\u00e0 prendre au sens le plus large, c'est-\u00e0-dire un algorithme) ne se limite pas \u00e0 un choix binaire : \u00abcalculable\u00bb vs \u00abnon calculable\u00bb. Parmi les fonctions calculables, certaines peuvent l'\u00eatre rapidement, et d'autre beaucoup moins.</p> <p>On retrouve alors la notion bien connue de complexit\u00e9 algorithmique, qui permet de classifier les algorithmes suivant leur d\u00e9pendance \u00e0 la taille de leurs donn\u00e9es d'entr\u00e9e (voir le cours de Premi\u00e8re).</p> <p>On peut regrouper les probl\u00e8mes suivant la complexit\u00e9 de l'algorithme qui permet de les r\u00e9soudre.</p>"},{"location":"T2_Programmation/2.3_Calculabilite_Decidabilite/cours/#231-la-classe-p","title":"2.3.1 la classe P","text":"<p>D\u00e9finition de la classe P</p> <p>On dira que sont de \u00abclasse P\u00bb tous les probl\u00e8mes dont l'algorithme de recherche de solution est de complexit\u00e9 polynomiale.</p> <p>Que retrouve-t-on dans la classe P ? Tous les probl\u00e8mes dont la solution est un algorithme de complexit\u00e9 lin\u00e9raire, quadratique, logarithmique... Tout mais surtout pas un algorithme de complexit\u00e9 exponentielle.</p> <p>Pour le r\u00e9sumer tr\u00e8s grossi\u00e8rement, un probl\u00e8me de classe P est un probl\u00e8me que l'on sait r\u00e9soudre en temps raisonnable (m\u00eame grand). </p> <ul> <li>le probl\u00e8me du tri d'une liste est dans P.</li> <li>le probl\u00e8me de la factorisation d'un grand nombre (sur lequel repose la s\u00e9curit\u00e9 du RSA) n'est a priori pas dans P.</li> <li>le probl\u00e8me de la primalit\u00e9 (\u00abce nombre est-il premier ?\u00bb) a longtemps \u00e9t\u00e9 consid\u00e9r\u00e9 comme n'\u00e9tant pas dans P... jusqu'en 2002, o\u00f9 a \u00e9t\u00e9 d\u00e9couvert le test de primalit\u00e9 AKS, de complexit\u00e9 polynomiale (d'ordre 6). Ce test est donc maintenant dans P.</li> </ul>"},{"location":"T2_Programmation/2.3_Calculabilite_Decidabilite/cours/#232-la-classe-np","title":"2.3.2 la classe NP","text":"<p>D\u00e9finition de la classe NP</p> <p>On dira que sont de \u00abclasse NP\u00bb tous les probl\u00e8mes dont l'algorithme de recherche de solution est Non-d\u00e9terministe Polynomial.</p> <p>Warning :  NP ne signifie pas Non-Polynomial !!! </p> <p>Que veut dire la formulation \u00abnon-d\u00e9terministe polynomial\u00bb ? Cela fait r\u00e9f\u00e9rence \u00e0 ce que serait capable de faire une machine de Turing (donc, n'importe quel ordinateur) travaillant de mani\u00e8re non-d\u00e9terministe, donc capable d'explorer simultan\u00e9ment plusieurs solutions possibles. On peut imaginer un arbre dont le parcours se ferait simultan\u00e9ment dans toutes les branches, et non en largeur ou profondeur comme nous l'avons vu.</p> <p>Sur une machine non-d\u00e9terministe, si la solution \u00e0 un probl\u00e8me se trouve en temps polynomial, alors ce probl\u00e8me appartient \u00e0 la classe NP. </p> <p>Tr\u00e8s bien, mais les machines non-d\u00e9terministes... cela n'existe pas r\u00e9ellement. Comment caract\u00e9riser concr\u00e8tement cette classe de probl\u00e8me ?</p> <p>Si la solution peut \u00eatre trouv\u00e9e de mani\u00e8re polynomiale par une machine non-d\u00e9terministe, une machine d\u00e9terministe qui aurait de la chance en partant directement vers la bonne solution la trouverait elle aussi de mani\u00e8re polynomiale. On simplifie souvent cela en disant \u00abla v\u00e9rification de la solution est polynomiale\u00bb. Cela nous donnne cette d\u00e9finition plus accessible de la classe NP :</p> <p>D\u00e9finition (plus simple) de la classe NP</p> <p>On dira que sont de \u00abclasse NP\u00bb tous les probl\u00e8mes dont l'algorithme de v\u00e9rification de solution est polynomial.</p> <p>Pour le r\u00e9sumer tr\u00e8s grossi\u00e8rement, un probl\u00e8me de classe NP est un probl\u00e8me dont on sait v\u00e9rifier facilement si une solution propos\u00e9e marche ou pas :</p> <ul> <li>la r\u00e9solution d'un sudoku est dans NP : si quelqu'un vous montre un sudoku rempli, vous pouvez tr\u00e8s rapidement lui dire si sa solution est valable ou pas.</li> <li>la factorisation d'un nombre est dans NP : si quelqu'un vous propose 4567*6037 comme d\u00e9composition de 27570979, vous pouvez tr\u00e8s rapidement lui dire s'il a raison. (oui.)</li> <li>le probl\u00e8me du sac \u00e0 dos (en version d\u00e9cisionnelle) est dans NP. Une proposition de butin peut facilement \u00eatre examin\u00e9e pour savoir si elle est possible ou non.</li> <li>le probl\u00e8me du voyageur de commerce (ou TSP : Traveller Sales Problem), en version d\u00e9cisionnelle, est dans NP. Si on vous propose un trajet, vous pouvez facilement v\u00e9rifier que sa longueur est (par exemple) inf\u00e9rieure \u00e0 150 km.</li> </ul> <p>Malheureusement, aucun de ces probl\u00e8mes cit\u00e9s n'a (\u00e0 ce jour) d'algorithme de r\u00e9solution meilleur qu'exponentiel...</p>"},{"location":"T2_Programmation/2.3_Calculabilite_Decidabilite/cours/#223-p-np-ou-pas","title":"2.2.3 P = NP, ou pas ?","text":"<p>Tous les probl\u00e8mes de P ont une solution qui peut \u00eatre trouv\u00e9e de mani\u00e8re polynomiale. Donc \u00e9videmment, la v\u00e9rification de cette solution est aussi polynomiale. Donc tous les probl\u00e8mes de P sont dans NP. On dit que P est inclus dans NP, que l'on \u00e9crit P \u2282 NP.</p> <p>Voici une capture d'\u00e9cran de l'excellente vid\u00e9o Nos algorithmes pourraient-ils \u00eatre BEAUCOUP plus rapides ? (P=NP ?) de l'excellent David Louapre :</p> <p></p> <p>On y retrouve (en vert) la classe P, qui contient les algorithmes de tri. En blanc, la classe NP, qui contient les probl\u00e8mes de factorisation, du sudoku, du sac-\u00e0-dos...</p> <p>Si quelqu'un trouve un jour un algorithme de polynomial de factorisation, alors le probl\u00e8me de factorisation viendra se ranger dans P. (accessoirement, le RSA sera sans doute d\u00e9truit par cette d\u00e9couverte, sauf si l'ordre de complexit\u00e9 est tr\u00e8s grand)</p> <p>Mais certains de ces probl\u00e8mes dans NP ont une propri\u00e9t\u00e9 remarquable : la r\u00e9solution polynomiale d'un seul d'entre eux ferait ramener la totalit\u00e9 des probl\u00e8mes NP dans P. On dit que ces probl\u00e8mes sont NP-complets (marqu\u00e9s en rouge ci-dessus) Concr\u00e8tement, si vous trouvez une solution polynomiale de r\u00e9solution du sudoku, vous entrainez avec lui dans P tous les autres probl\u00e8mes NP, et vous aurez ainsi prouv\u00e9 que P = NP. Accessoirement, vous gagnerez aussi le prix d'un million de dollars promis par la fondation Clay \u00e0 qui tranchera cette question... (prix que vous partagerez bien \u00e9videmment avec votre professeur de NSI)</p> <p>Actuellement, \u00e0 part le grand Donald Knuth, la plupart des chercheurs qui travaillent \u00e0 ce probl\u00e8me sont plut\u00f4t pessimistes, et pensent que P \u2260 NP.  Cela signifie qu'ils pensent que certains probl\u00e8mes ne pourront jamais avoir une solution polynomiale. </p> <p>Alors, P = NP ou P \u2260 NP ? R\u00e9ponse peut-\u00eatre un jour...</p>"},{"location":"T2_Programmation/2.3_Calculabilite_Decidabilite/cours/#bibliographie","title":"Bibliographie","text":"<ul> <li>Num\u00e9rique et Sciences Informatiques, Terminale, T. BALABONSKI, S. CONCHON, J.-C. FILLIATRE, K. NGUYEN, \u00e9ditions ELLIPSES.</li> <li>Pr\u00e9pabac NSI, Terminale, G. CONNAN, V. PETROV, G. ROZSAVOLGYI, L. SIGNAC, \u00e9ditions HATIER.</li> <li>https://interstices.info/pnp-elementaire-ma-chere-watson/</li> <li>https://interstices.info/alan-turing-du-calculable-a-lindecidable/</li> <li>https://www.labri.fr/perso/betrema/MC/MC8.html</li> <li>https://scienceetonnante.com/2020/07/17/est-ce-que-p-np/</li> </ul>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/bonnesPratiques/","title":"Bonnes pratiques","text":"<p>extrait du site https://realpython.com/python-pep8/</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/bonnesPratiques/#1-conventions-syntaxiques","title":"1. Conventions syntaxiques","text":"<p>La programmation est un art d\u00e9licat : un simple caract\u00e8re en trop peut provoquer une erreur pour le code tout entier (penser \u00e0 un innocent caract\u00e8re d'espace en d\u00e9but de ligne dans un code Python).</p> <p></p> <p>Mais m\u00eame lorsqu'un code s'ex\u00e9cute sans erreur, il ne faut pas n\u00e9gliger l'aspect purement \u00abesth\u00e9tique\u00bb de celui-ci : il est n\u00e9cessaire de respecter autant que possible des conventions typographiques, qui vont standardiser le code et le rendre ainsi plus lisible.</p> <p>Ainsi pour chaque langage, il existe une \u00abbible\u00bb de bonnes pratiques de pr\u00e9sentation du code, qui visent \u00e0 l'uniformiser. Pour Python, cette r\u00e9f\u00e9rence s'appelle la Python Enhancement Proposal 8, plus connue sous le nom de PEP8. </p> <p>En voici quelques extraits :</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/bonnesPratiques/#les-espaces","title":"Les espaces","text":"<p>\u25b6 Il faut mettre une espace (oui, en typographie, on dit \u00abune\u00bb espace et non pas \u00abun\u00bb espace) avant et apr\u00e8s chaque op\u00e9rateur de comparaison, d'affectation, ou math\u00e9matique  (<code>=, ==, &gt;, +, *, ...</code> )</p> \ud83d\udc0d Script Python<pre><code># PAS BIEN \na=3\n\n# BIEN \na = 3\n</code></pre> \ud83d\udc0d Script Python<pre><code># PAS BIEN\nif x&gt;3:\n    print(\"ok\")\n\n# BIEN\nif x &gt; 3:\n    print(\"ok\")\n</code></pre> <p>\u25b6 Pour les op\u00e9rateurs math\u00e9matiques, on essaie de reconstituer les groupes de priorit\u00e9 (lorsqu'il y en a) :</p> \ud83d\udc0d Script Python<pre><code># PAS BIEN\nx = 3*2\n\n# BIEN\nx = 3 * 2\n</code></pre> <p>mais </p> \ud83d\udc0d Script Python<pre><code># PAS BIEN\nx = 3 * 2 + 5\n\n# BIEN\nx = 3*2 + 5\n</code></pre> <p>\u25b6 On ne met pas d'espace \u00e0 int\u00e9rieur des parenth\u00e8ses, des crochets ou des accolades :</p> \ud83d\udc0d Script Python<pre><code># PAS BIEN\nfor x in range( 5 ):\n    print( 'bonjour' )\n\n# BIEN\nfor x in range(5):\n    print('bonjour')\n</code></pre> <p>\u25b6 Pour les virgules, et les deux points :  pas d'espace avant mais une espace apr\u00e8s.</p> \ud83d\udc0d Script Python<pre><code># PAS BIEN\nif color == (0,255,0) :\n    print('vert')\n\n# BIEN\nif color == (0, 255, 0):\n    print('vert')\n</code></pre> <p>On peut contr\u00f4ler si son code v\u00e9rifie les standards de la PEP8 sur ce site http://pep8online.com/</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/bonnesPratiques/#les-conventions-de-nommage","title":"Les conventions de nommage","text":"<p>\u25b6 Les variables \u00e0 une lettre (comme <code>i</code>, <code>j</code>, <code>k</code> ) sont r\u00e9serv\u00e9es aux indices (notamment dans les boucles).</p> <p>\u25b6 Les autres variables doivent avoir des noms explicites, \u00e9ventuellement \u00e9crits en <code>snake_case</code> si plusieurs mots doivent \u00eatre reli\u00e9s.</p> \ud83d\udc0d Script Python<pre><code># PAS BIEN\nif d == 1:\n    cep += vm\n\n# BIEN\nif date == 1:\n    compte_epargne += versement_mensuel\n</code></pre> <p>Rappel des diff\u00e9rents types de casse :</p> <ul> <li><code>snake_case</code> : les mots sont s\u00e9par\u00e9s par des underscores. Conseill\u00e9 en Python.</li> <li><code>camelCase</code> : les mots sont s\u00e9par\u00e9s par des majuscules mais la 1\u00e8re lettre est minuscule. Conseill\u00e9 en Javascript.</li> <li><code>PascalCase</code> : les mots sont s\u00e9par\u00e9s par des majuscules et la 1\u00e8re lettre est majuscule. Conseill\u00e9 en C.</li> <li><code>kebab-case</code> : les mots sont s\u00e9par\u00e9s par des tirets courts. Conseill\u00e9 en HTML - CSS.</li> </ul> <p>\u25b6 Cas particulier des classes en Programmation Orient\u00e9e Objet : leur nom doit commencer par une majuscule.</p> \ud83d\udc0d Script Python<pre><code># PAS BIEN\nclass voiture:\n    def __init__(self, annee, marque, modele):\n       #pass\n\n# BIEN\nclass Voiture:\n    def __init__(self, annee, marque, modele):\n       #pass\n</code></pre>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/bonnesPratiques/#2-commentaires-et-docstrings","title":"2. Commentaires et docstrings","text":""},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/bonnesPratiques/#21-commenter-son-code-ou-pas","title":"2.1 Commenter son code ? (ou pas)","text":"<p>La n\u00e9cessit\u00e9 de commenter son code est assez controvers\u00e9e. Il est d'usage de dire qu'un code doit \u00eatre assez explicite pour que le lecteur puisse le comprendre sans avoir \u00e0 lire un commentaire. </p> <p>De fait, les commentaires sont parfois (souvent) superflus :</p> <p></p> <p>Et s'ils sont r\u00e9ellement n\u00e9cessaires, il faut se poser la question : est-ce que ce code n'aurait pas pu \u00eatre plus simple ? (attention, la r\u00e9ponse n'est pas toujours oui)</p> <p></p> <p>Exemple :</p> <p>Consid\u00e9rons la fonction suivante. \ud83d\udc0d Script Python<pre><code>def f(c, t, n):\n    # c est le capital de d\u00e9part, t le taux annuel et n le nombre d'ann\u00e9es\n    return c * (1 + t)**n  #renvoie le capital apr\u00e8s n ann\u00e9es\n</code></pre> Elle est bien comment\u00e9e. Mais si on croise la fonction <code>f()</code> ailleurs dans le code, se souviendra-t-on de son r\u00f4le ?</p> <p>Il aurait mieux valu \u00e9crire : \ud83d\udc0d Script Python<pre><code>def capital_apres_n_annees(capital, taux, nombre_annees) :\n    return capital * (1 + taux)**nombre_annees\n</code></pre> Ce code est plus long, mais assez explicite pour se passer de commentaires.</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/bonnesPratiques/#22-le-cas-particulier-des-docstrings","title":"2.2 Le cas particulier des <code>docstrings</code>","text":""},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/bonnesPratiques/#221-que-sont-les-docstrings","title":"2.2.1 Que sont les <code>docstrings</code>?","text":"<p>Les <code>docstrings</code> sont des commentaires normalis\u00e9s pour les fonctions, qui peuvent \u00eatre consult\u00e9s en console.</p> <p>Exemples :</p> <p>Nous connaissons la fonction <code>len()</code> qui permet par exemple de conna\u00eetre la longueur d'une liste pass\u00e9e en param\u00e8tre.</p> <p>Si nous tapons en console la commande <code>print(len.__doc__)</code>, nous aurons la description de cette fonction. </p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; len.__doc__\n'Return the number of items in a container.'\n</code></pre> Il est aussi possible d'acc\u00e9der \u00e0 la docstring d'une fonction <code>f</code>  par la commande <code>help(f)</code> :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; help(len)\nHelp on built-in function len in module builtins:\n\nlen(obj, /)\n    Return the number of items in a container.\n</code></pre> <p></p> <p>De m\u00eame pour la fonction <code>range</code> : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; print(range.__doc__)\nrange(stop) -&gt; range object\nrange(start, stop[, step]) -&gt; range object\n\nReturn an object that produces a sequence of integers from start (inclusive)\nto stop (exclusive) by step.  range(i, j) produces i, i+1, i+2, ..., j-1.\nstart defaults to 0, and stop is omitted!  range(4) produces 0, 1, 2, 3.\nThese are exactly the valid indices for a list of 4 elements.\nWhen step is given, it specifies the increment (or decrement).\n</code></pre></p> <p>Le r\u00e9sultat de la commande <code>help(range)</code> est trop long pour \u00eatre repris ici, mais on y retrouve bien la docstring de la fonction <code>range</code>.</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/bonnesPratiques/#222-creer-ses-propres-docstrings","title":"2.2.2 Cr\u00e9er ses propres docstrings","text":"<p>Il suffit pour cela de commencer la fonction \u00e0 documenter par une ou plusieurs phrases entre triples quotes :</p> <p>\ud83d\udc0d Script Python<pre><code>def capital_apres_n_annees(capital, taux, nombre_annees) :\n    \"\"\"\n    Renvoie le capital apr\u00e8s n ann\u00e9es.\n    capital : valeur initiale\n    taux : taux d'int\u00e9r\u00eat exprim\u00e9 en nombre d\u00e9cimal (ex: 0.02 pour un taux de 2 %)\n    nombre_annees : nombre d'ann\u00e9es de placement du capital\n    \"\"\"\n    return capital * (1 + taux)**nombre_annees\n</code></pre> Ainsi, un utilisateur pourra trouver en console le mode d'emploi de notre fonction :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; help(capital_apres_n_annees)\nHelp on function capital_apres_n_annees in module __main__:\n\ncapital_apres_n_annees(capital, taux, nombre_annees)\n    Renvoie le capital apr\u00e8s n ann\u00e9es.\n    capital : valeur initiale\n    taux : taux d'int\u00e9r\u00eat exprim\u00e9 en nombre d\u00e9cimal (ex: 0.02 pour un taux de 2 %)\n    nombre_annees : nombre d'ann\u00e9es de placement du capital\n</code></pre> <p>Comme on le voit, tout cela est tr\u00e8s \u00abverbeux\u00bb. Cela peut nous para\u00eetre largement superflu puisque nos codes d\u00e9passent rarement quelques dizaines de lignes et sont lus par rarement plus de 2 personnes. Mais dans la vraie vie des d\u00e9veloppeurs, il est primordial qu'un code soit clair et document\u00e9.</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/bonnesPratiques/#3-la-programmation-defensive-des-assert-pour-securiser-le-code","title":"3. La programmation d\u00e9fensive : des <code>assert</code> pour s\u00e9curiser le code","text":"<p>La programmation d\u00e9fensive est l'art de pr\u00e9voir le pire et d'essayer de le d\u00e9tecter avant qu'il ne soit trop tard. De mani\u00e8re bien plus concr\u00e8te, il est d'usage d'essayer de r\u00e9p\u00e9rer si des donn\u00e9es (souvent des param\u00e8tres d'une fonction) sont susceptibles de cr\u00e9er des probl\u00e8mes, ou sont hors sp\u00e9cification.</p> <p>Un exemple :</p> <p>La fonction :</p> <p>\ud83d\udc0d Script Python<pre><code>def racine_carree(x):\n    assert x &gt;= 0, 'un nombre positif ou nul est requis'\n    return x ** 0.5\n</code></pre> donnera, lors de l'appel \u00e0 <code>racine_carree(-2)</code>, le message suivant :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; racine_carree(-2)\nTraceback (most recent call last):\n  File \"&lt;pyshell&gt;\", line 1, in &lt;module&gt;\n  File \"/home/gilles/Bureau/exemples_assert.py\", line 2, in racine_carree\n    assert x &gt;= 0, 'un nombre positif ou nul est requis'\nAssertionError: un nombre positif ou nul est requis\n</code></pre> <p>Un autre exemple :</p> \ud83d\udc0d Script Python<pre><code>def moyenne_trimestrielle(liste_notes):\n    \"\"\"\n    calcule la moyenne des nombres de la liste liste_notes\n    \"\"\"\n    assert liste_notes != [] , 'liste vide'\n    assert max(liste_notes) &lt;= 20, 'au moins une note d\u00e9passe 20'\n    assert min(liste_notes) &gt;=0, 'au moins une note est en dessous de 0'\n\n    return sum(liste_notes) / len(liste_notes)\n</code></pre> <p>\u00c0 ce stade, les <code>assert</code> sont donc pour nous juste un moyen rapide de remplacer un test <code>if ... then ... else</code> pour d\u00e9tecter des erreurs potentielles. Ils sont en r\u00e9alit\u00e9 plus utiles que cela : lors de la conception d'un programme, des <code>assert</code> sont pos\u00e9s pour v\u00e9rifier l'int\u00e9grit\u00e9 du code, mais peuvent \u00eatre d\u00e9sactiv\u00e9s \u00e0 tout moment pour en faire un code optimis\u00e9 (par la commande <code>-O</code> \u00e0 l'ex\u00e9cution). Tout ceci d\u00e9passe largement le cadre de notre cours.</p> <p>Il est \u00e0 noter aussi que les erreurs peuvent \u00eatre g\u00e9r\u00e9es par le m\u00e9canisme <code>try ... except</code>, qui permet de \u00ablever des exceptions\u00bb. Pour les curieux, plus de renseignements ici.</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/bonnesPratiques/#4-les-tests","title":"4. Les tests","text":""},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/bonnesPratiques/#41-pourquoi-des-tests","title":"4.1 Pourquoi des tests ?","text":"<p>Tester une fonction est la premi\u00e8re chose que l'on fait (normalement...) lorsqu'on vient de finir de l'\u00e9crire. </p> <p>Par exemple, si on vient de construire la fonction <code>valeur_absolue(n)</code>, il est fort probable qu'on aille taper ceci dans la console :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; valeur_absolue(-3)\n3\n&gt;&gt;&gt; valeur_absolue(0)\n0\n&gt;&gt;&gt; valeur_absolue(7)\n7\n</code></pre> <ul> <li>On peut regrouper tous ces tests au sein d'une m\u00eame fonction <code>test_valeur_absolue()</code>.</li> <li>On peut \u00e9crire cette fonction <code>test_valeur_absolue()</code> avant m\u00eame de commencer \u00e0 \u00e9crire la fonction <code>valeur_absolue(n)</code>.</li> </ul> <p>Remarque :  la m\u00e9thode de d\u00e9veloppement logiciel TDD (Test Driven Developement) est bas\u00e9e en partie sur ce principe  : </p> <ol> <li>On commence par \u00e9crire le test de la fonction.</li> <li>Le test \u00e9choue (forc\u00e9ment, la fonction n'est pas encore cod\u00e9e !)</li> <li>On \u00e9crit le code de la fonction pour que le test soit valid\u00e9.</li> <li>On am\u00e9liore (si possible) ce code tout en v\u00e9rifiant que le test continue \u00e0 \u00eatre valide.</li> </ol> <p></p> <p>Revenons \u00e0 nos tests sur la fonction <code>valeur_absolue(n)</code></p> \ud83d\udc0d Script Python<pre><code>def test_valeur_absolue():\n    if valeur_absolue(-3) == 3 :\n        print(\"ok\")\n    else:\n        print(\"erreur\")\n\n    if valeur_absolue(0) == 0 :\n        print(\"ok\")\n    else:\n        print(\"erreur\")\n\n    if valeur_absolue(7) == 7 :\n        print(\"ok\")\n    else:\n        print(\"erreur\")\n</code></pre> <p>En console, il suffit maintenant d'appeler la fonction <code>test_valeur_absolue()</code> :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; test_valeur_absolue()\nok\nok\nok\n</code></pre>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/bonnesPratiques/#42-revoila-les-assert","title":"4.2 Revoil\u00e0 les <code>assert</code>","text":"<p>Utiliser des <code>assert</code> permet d'\u00e9crire tr\u00e8s simplement les tests pr\u00e9c\u00e9dents.</p> <p>Reprenons notre fonction <code>valeur_absolue()</code>. Sa fonction test  <code>test_valeur_absolue()</code> peut s'\u00e9crire :</p> \ud83d\udc0d Script Python<pre><code>def test_valeur_absolue():\n    assert valeur_absolue(-3) == 3\n    assert valeur_absolue(0) == 0\n    assert valeur_absolue(7) == 7\n</code></pre> <p>Exercice : \u00c9crire une fonction <code>maxi(liste)</code> qui renvoie le plus grand \u00e9l\u00e9ment de la liste <code>liste</code> pass\u00e9e en param\u00e8tre (de pr\u00e9f\u00e9rence sans utiliser la fonction <code>max()</code> ...). Vous \u00e9crirez d'abord une fonction <code>test_maxi()</code> avant d'\u00e9crire la fonction <code>maxi(liste)</code> </p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/bonnesPratiques/#43-le-module-doctest","title":"4.3 Le module <code>doctest</code>","text":"<p>Le module <code>doctest</code>  permet d'\u00e9crire les tests \u00e0 l'int\u00e9rieur de la docstring d'une fonction. </p> <p>Consid\u00e9rons une fonction dont le but est de compter les voyelles du mot pass\u00e9 en param\u00e8tre.</p> \ud83d\udc0d Script Python<pre><code>def compte_voyelles(mot):\n    \"\"\"\n    renvoie le nombre de voyelles du mot donn\u00e9 en param\u00e8tre.\n    &gt;&gt;&gt; compte_voyelles(\"python\")\n    2\n    &gt;&gt;&gt; compte_voyelles(\"HTTP\")\n    0\n    &gt;&gt;&gt; compte_voyelles(\"eau\")\n    3\n    \"\"\"\n    voyelles = \"aeiou\"\n    total = 0\n    for lettre in mot:\n        if lettre in voyelles:\n            total += 1\n    return total\n</code></pre> <p>Observez bien la docstring : elle contient explicitement ce qu'on veut que renvoie le terminal lorsqu'on appellera la fonction. On \u00e9crit donc les trois chevrons <code>&gt;&gt;&gt;</code> suivi de l'appel \u00e0 la fonction, et \u00e0 la ligne en dessous ce que nous esp\u00e9rons que la fonction nous renvoie. On peut \u00e9crire autant de tests que l'on veut.</p> <p>Ensuite, en console : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; import doctest\n&gt;&gt;&gt; doctest.testmod()\n</code></pre> Dans notre cas, le retour sera celui-ci :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; import doctest\n&gt;&gt;&gt; doctest.testmod()\n**********************************************************************\nFile \"voyelles.py\", line 4, in __main__.compte_voyelles\nFailed example:\n    compte_voyelles(\"python\")\nExpected:\n    2\nGot:\n    1\n**********************************************************************\n1 items had failures:\n   1 of   3 in __main__.compte_voyelles\n***Test Failed*** 1 failures.\nTestResults(failed=1, attempted=3)\n</code></pre> <p>On voit que le test <code>compte_voyelles(\"python\")</code> a renvoy\u00e9 la valeur 1 alors qu'on attendait 2. En regardant notre fonction, on s'aper\u00e7oit donc qu'on avait oubli\u00e9 le <code>y</code> dans la liste des voyelles. </p> <p>En corrigeant ceci, le test devient : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; import doctest\n&gt;&gt;&gt; doctest.testmod()\nTestResults(failed=0, attempted=3)\n</code></pre> Ce qui est beaucoup plus satisfaisant.</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/bonnesPratiques/#43-a-propos-des-tests","title":"4.3 \u00c0 propos des tests","text":"<p>Le comportement face aux tests en programmation doit \u00eatre le m\u00eame qu'en math\u00e9matiques : un test qui ne marche pas est plus riche d'enseignements qu'un test qui marche.</p> <p>En math\u00e9matiques, seule la notion de contre-exemple est fertile : si quelqu'un vous affirme que \u00abtous les nombres impairs sont premiers\u00bb, il vous suffit d'exhiber le nombre 9 pour lui prouver qu'il a tort et achever la discussion.</p> <p>Par contre, il aurait pu essayer de vous convaincre avec les nombres 3, 5 et 13, qui sont bien impairs et premiers.</p> <p>De la m\u00eame mani\u00e8re, voir qu'une fonction passe les tests que vous avez \u00e9crits ne vous assurera pas que cette fonction aura toujours le bon comportement souhait\u00e9. Elle l'aura pour les valeurs de test, mais pas forc\u00e9ment pour les autres.</p> <p>En revanche, si une fonction ne passe pas un des tests, vous avez la certitude qu'il y a un probl\u00e8me \u00e0 r\u00e9gler quelque part.</p> <p>Tout ceci en admettant, bien s\u00fbr, que vos tests eux-m\u00eames ne comportent pas d'erreurs...</p> <p></p> <p></p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/bonnesPratiques/#bibliographie","title":"Bibliographie","text":"<ul> <li>https://www.reddit.com/r/ProgrammerHumor/</li> <li>https://fr.wikipedia.org/wiki/Test_driven_development</li> <li>https://www.fil.univ-lille1.fr/~L1S2API/CoursTP/tp_doctest.html</li> </ul>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/cours/","title":"Cours","text":"<p>Cours tests &amp; bugs Antoine MAROT (antoine.marot@ensemblescolaire-niort.com) David SALL\u00c9 (david.salle@ensemblescolaire-niort.com) Julien SIMONNEAU (julien.simonneau@ensemblescolaire-niort.com)</p> <p>Ce document est mis \u00e0 disposition selon les termes de la licence Creative Commons BY-NC-SA 4.0</p> <p>Version du document v0.2 Date 15/10/2020</p> <p>Table des mati\u00e8res 1 - Introduction    3 1.1 - Plan  3 1.2 - Un peu d\u2019histoire 4 1.3 - Vue d\u2019ensemble    5 1.4 - Conseils  5 1.5 - Erreur avec l\u2019interpr\u00e9teur Python 6 2 - Les exceptions  7 2.1 - Utiliser try/except   8 2.2 - Diff\u00e9renciation   8 2.3 - Et quoi qu\u2019il arrive...   9 2.4 - Lever soi m\u00eame une Exception  9 3 - Bogues et d\u00e9bogueur 10 3.1 - Causes des bogues 10 3.2 - Outil de d\u00e9bogage 10 3.3 - Source d\u2019information  11 4 - Tests unitaires 12 4.1 - Introduction  12 4.1.1 - Avantages/inconv\u00e9nients 12 4.1.2 - Outils  12 4.2 - Mise en \u0153uvre 13 4.2.1 - Fonctionnement  13 4.2.2 - Module calculs.py   13 4.2.3 - Tests unitaires avec les assertions 14 4.2.4 - Tests unitaires avec la librairie unittest  15 5 - Optimisation des performances   18 5.1 - Principe  18 5.2 - Chronom\u00e9trage simple  18 5.3 - Profilage 18</p> <p>1 - Introduction 1.1 - Plan Ce document pr\u00e9sente quelques notions autours de la mise au point des programmes : \u00b7   gestion des erreurs/exceptions \u00b7   gestion des bugs \u00b7   tests unitaires \u00b7   analyse des performances</p> <p>D\u00e9butons par un slogan en informatique !</p> <p>1.2 - Un peu d\u2019histoire L\u2019histoire de l\u2019informatique est truff\u00e9e d\u2019inventions et de grandes r\u00e9alisations, mais aussi parfois de d\u00e9sastres industriels. Les cons\u00e9quences peuvent aller de simples erreurs au plantage complet du syst\u00e8me en passant par les failles de s\u00e9curit\u00e9. Quelques exemples de bugs ou bogues tristement connus : Quand   Quoi    Cons\u00e9quence 1947    Un insecte (bug in english) est venu cr\u00e9er un faux contact entre 2 relais \u00e9lectrom\u00e9caniques de l\u2019ordinateur Harvard Mark II. Une simple erreur 1991    Une erreur d\u2019arrondi pour passer d\u2019un entier \u00e0 un r\u00e9el sur 24 bits a engendr\u00e9 une erreur de 600m dans les calculs de trajectoire du syst\u00e8me anti-missile Patriot.   Mort de 28 soldats am\u00e9ricains 1996    Un d\u00e9passement d\u2019entier dans le programme d\u2019Ariane5 qui avait \u00e9t\u00e9 en partie copi\u00e9/coll\u00e9 d\u2019Ariane4. Mais les variables utilis\u00e9es ne convenaient plus en taille pour la puissance d\u2019Ariane 5  Explosion de la fus\u00e9e 1997    Quelques jours apr\u00e8s son arriv\u00e9e sur Mars, le robot Sojourner de la mission Pathfinder se bloque \u00e0 cause d\u2019une inversion de priorit\u00e9 dans ses t\u00e2ches. Le probl\u00e8me sera corrig\u00e9 \u00e0 distance depuis la Terre Retard dans la mission 2014    Le c\u00e9l\u00e8bre clip Gangnam Style provoque un d\u00e9bordement d\u2019entier dans le compteur de vue de la plateforme Youtube      Rien de particulier 2038    Un d\u00e9passement d\u2019entier dans la gestion de la date. Y2038 en \u00e9cho \u00e0 Y2000 (bug de l\u2019an 2000) appa\u00eetra peut-\u00eatre dans les syst\u00e8mes 32 bits qui compte les secondes \u00e0 partir du 1er janvier 1970 pour g\u00e9rer la date du syst\u00e8me.   L\u2019ann\u00e9e deviendra 1901 au lieu de 2038</p> <p>D\u2019autres exemples ici : https://en.wikipedia.org/wiki/List_of_software_bugs</p> <p>1.3 - Vue d\u2019ensemble Lorsqu\u2019on programme en Python (et dans les autres langages \u00e9galement), on est rapidement confront\u00e9 \u00e0 3 types d\u2019erreurs. Type d\u2019 erreur  Description Difficult\u00e9 \u00e0 r\u00e9soudre Syntaxe li\u00e9e au langage Le code source comporte des erreurs et l\u2019interpr\u00e9teur n\u2019arrive pas \u00e0 l\u2019ex\u00e9cuter. Il vous indique en g\u00e9n\u00e9ral Solution : se r\u00e9f\u00e9rer au message de l\u2019interpr\u00e9teur Python et v\u00e9rifier la syntaxe    Facile Valeur ou action inappropri\u00e9e   Le programme se lance bien, mais dans certaines conditions \u201cplante\u201d. Solution : se r\u00e9f\u00e9rer au message d\u2019erreur de l\u2019interpr\u00e9teur Python et v\u00e9rifier les valeurs notamment \u00e0 l\u2019aide d\u2019un d\u00e9bogueur    Difficile Conception de l\u2019algorithme  Le programme se lance bien, ne plante pas, mais ne produit pas le r\u00e9sultat escompt\u00e9 Solution : revoir l\u2019algorithme utilis\u00e9 et les \u00e9tapes de l\u2019ex\u00e9cution du programme avec un d\u00e9bogueur  Tr\u00e8s difficile</p> <p>1.4 - Conseils Conseils lorsqu\u2019on cr\u00e9\u00e9 un script Python : \u00b7   corriger les erreurs de syntaxe \u00b7   anticiper les erreurs de saisie de l\u2019utilisateur, imaginer le pire \u00b7   tester unitairement (entr\u00e9es =&gt; sorties, cas limite avec 0, \u201c\u201d, tous les cas de figure if/else) \u00b7   v\u00e9rifier les boucles while et leurs conditions de sortie (invariant) \u00b7   contr\u00f4ler les erreurs avec try/except \u00b7   se m\u00e9fier des calculs et comparaisons avec les nombres flottants</p> <p>1.5 - Erreur avec l\u2019interpr\u00e9teur Python Anatomie d\u2019un message d\u2019erreur de l\u2019interpr\u00e9teur Python : Traceback (most recent call last): File \"/home/jbegood/mon_script.py\", line 12, in  x = taille NameError: name 'taille' is not defined <p>A noter que quand on utilise des fonctions qui appellent d\u2019autres fonctions, le message d\u2019erreur retrace tout le parcours et il faut commencer \u00e0 lire par la fin. Quelques erreurs courantes li\u00e9es au langage Python : Type    Description SyntaxError Erreur de syntaxe : \u00b7   confusion entre = et == \u00b7   oubli d\u2019une parenth\u00e8se ( ou ) \u00b7   oubli d\u2019un d\u00e9limiteur de string \u201c ou \u2018 ou \u201c\u201d\u201d \u00b7   oubli du : annon\u00e7ant un bloc NameError   Erreur sur le nom d\u2019une variable ou fonction \u00b7   mauvais nom \u00b7   d\u00e9claration au mauvais endroit \u00b7   oubli d\u2019import d\u2019un module IndentationError    Erreur d\u2019indentation \u00b7   mauvais alignement \u00b7   m\u00e9lange d\u2019espaces et tabulations (Python3) TypeError   Erreur sur les types \u00b7   addition impossible entre int et string \u00b7   arrondi d\u2019un string AssertionError  Erreur issue d\u2019un test unitaire ZeroDivisionError   Erreur de division par 0 KeyError    Erreur sur un dictionnaire IOError Erreur lors d\u2019un entr\u00e9e/sortie (fichier...)</p> <p>2 - Les exceptions Toutes les erreurs du tableau pr\u00e9c\u00e9dent sont en fait des exceptions qui h\u00e9ritent de la m\u00eame classe m\u00e8re Exception.</p> <p>Lorsque Python l\u00e8ve une exception telle que celles pr\u00e9sentes dans le tableau, le programme est stopp\u00e9 imm\u00e9diatement et un message d\u2019erreur est affich\u00e9 pour pr\u00e9venir l\u2019utilisateur de la cause du probl\u00e8me. Prenons l\u2019exemple de ce programme qui saisit un nombre et calcule son inverse :</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/cours/#version-normale","title":"Version normale","text":"<p>x = int(input(\"Saisir x : \")) print(\"1/x =\", 1/x)</p> <p>Selon ce que va saisir l\u2019utilisateur, le r\u00e9sultat sera tr\u00e8s diff\u00e9rent. En cas de mauvaise saisie, le programme stoppe. Saisie d\u2019un entier x=4 Saisie d\u2019un string x=\u201d2\u201d   Saisie d\u2019un entier x = 0 Saisir x : 4 1/x = 0.25  Traceback (...):   File \"test.py\", line 1... ValueError: invalid literal for int() with base 10: '\"2\"'   Traceback (...):   File \"/test.py\", line 2...    ZeroDivisionError: division by zero</p> <p>2.1 - Utiliser try/except Cependant parfois, il est plus int\u00e9ressant de \u201ccapturer\u201d cette exception de mani\u00e8re \u00e0 informer l\u2019utilisateur du probl\u00e8me et lui proposer une alternative, plut\u00f4t que de stopper brutalement le programme. Pour cela on utilisera les mot-clefs try et except : \u00b7   try va d\u00e9buter un bloc d\u2019instructions \u00e0 risque, susceptible de g\u00e9n\u00e9rer une erreur \u00b7   except va intercepter l\u2019erreur pour \u00e9viter l\u2019arr\u00eat brutal du programme et proposer un traitement du probl\u00e8me, souvent un affichage Le mod\u00e8le est celui-ci : try:     # Code \u00e0 risque except Exception as erreur:     # Traitement de l'erreur (affichage...)</p> <p>Pour le programme qui calcule l\u2019inverse cela donnerait :</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/cours/#version-avec-capture-simple-et-affichage","title":"Version avec capture simple et affichage","text":"<p>try:     x = int(input(\"Saisir x : \"))     print(\"1/x =\", 1 / x) except Exception as erreur:     print(\"Erreur :\", erreur)</p> <p>2.2 - Diff\u00e9renciation Si l\u2019on souhaite diff\u00e9rencier le traitement des erreurs, il faudra ajouter plusieurs blocs except, typiquement un par type d\u2019erreur</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/cours/#version-avec-capture-et-traitement-differencies","title":"Version avec capture et traitement diff\u00e9renci\u00e9s","text":"<p>try:     x = int(input(\"Saisir x : \"))     print(\"1/x =\", 1 / x) except ValueError as erreur:     print(\"Erreur de saisie :\", erreur) except ZeroDivisionError as erreur:     print(\"Impossible de diviser par z\u00e9ro :\", erreur)</p> <p>2.3 - Et quoi qu\u2019il arrive... On peut \u00e9galement ajouter un bloc d\u2019instructions qui sera ex\u00e9cut\u00e9 quoiqu\u2019il arrive : erreur ou comportement normal. Pour cela on ajoutera \u00e0 la fin le mot clef finally :</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/cours/#version-avec-capture-et-traitement-differencies-et","title":"Version avec capture et traitement diff\u00e9renci\u00e9s et","text":""},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/cours/#quoiquil-arrive-un-message-de-fin","title":"quoiqu'il arrive un message de fin","text":"<p>try:     x = int(input(\"Saisir x : \"))     print(\"1/x =\", 1 / x) except ValueError as erreur:     print(\"Erreur de saisie :\", erreur) except ZeroDivisionError as erreur:     print(\"Impossible de diviser par z\u00e9ro :\", erreur) finally:     print(\"Merci d'avoir utiliser ce calculateur\")</p> <p>2.4 - Lever soi m\u00eame une Exception Quand on \u00e9crit son propre module Python avec ses fonctions, ses classes, ses m\u00e9thodes, on a souvent besoin de lever nous m\u00eame des exceptions sans attendre l\u2019interpr\u00e9teur Python. A l\u2019aide du mot-clef raise, on peut lever une exception \u00e0 tout moment.</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/cours/#levee-dexception","title":"Lev\u00e9e d'exception","text":"<p>x = int(input(\"Saisir x : \")) if x == 13:     raise ValueError(\"D\u00e9sol\u00e9, je suis superstitieux\") print(\"1/x =\", 1/x)</p> <p>Celle-ci sera intercept\u00e9e par un bloc try/except ou pas. Il est \u00e9galement possible de d\u00e9finir ses propres exceptions personnalis\u00e9es en la rattachant \u00e0 la classe Exception via l\u2019h\u00e9ritage</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/cours/#definition-dune-exception-personnalisee","title":"D\u00e9finition d'une Exception personnalis\u00e9e","text":"<p>class SuperstitionError(Exception):     \"\"\"Classe repr\u00e9sentation l'erreur li\u00e9e au nombre 13\"\"\"     pass</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/cours/#levee-dune-exception-personnalisee","title":"Lev\u00e9e d'une exception personnalis\u00e9e","text":"<p>x = int(input(\"Saisir x : \")) if x == 13:     raise SuperstitionError(\"D\u00e9sol\u00e9, je suis superstitieux\") print(\"1/x =\", 1/x)</p> <p>3 - Bogues et d\u00e9bogueur 3.1 - Causes des bogues Dans la suite de ce chapitre, on tentera de pr\u00e9senter sommairement les causes les plus courantes des bogues dans les programmes. \u00b7   Probl\u00e8me de typage \u00b7   Effet de bord non d\u00e9sir\u00e9 \u00b7   D\u00e9bordement dans un tableau \u00b7   Instruction conditionnelle non exhaustive \u00b7   Mauvais choix d\u2019in\u00e9galit\u00e9 \u00b7   Calcul/comparaison de nombres flottants \u00b7   D\u00e9bordement d\u2019entier \u00b7   Mauvaise indentation</p> <p>3.2 - Outil de d\u00e9bogage Le d\u00e9bogueur est un outil int\u00e9gr\u00e9 dans la majorit\u00e9 des IDE. Il permet de fixer des points d\u2019arr\u00eat (breakpoints) et de consulter l\u2019\u00e9tat des variables (watches). On peut ensuite avancer pas \u00e0 pas en mode : \u00b7   Step over (F8) : saute par dessus les fonctions \u00b7   Step into (F7) : entre dans les fonctions Exemple d\u2019utilisation dans PyCharm. Etape 1 : on fixe un point d\u2019arr\u00eat dans le programme dans la zone \u00e0 d\u00e9boguer</p> <p>Etape 2 : on lance l\u2019ex\u00e9cution du programme en mode debug (ic\u00f4ne insecte)</p> <p>Etape 3 : on visualise l\u2019\u00e9tat des variables Soit dans la zone \u201cwatches\u201d</p> <p>Soit directement dans le code</p> <p>Etape 4 : on avance pas \u00e0 pas avec la touche F8 ou F7</p> <p>Etape 5 : on reboucle \u00e0 l\u2019\u00e9tape 4 jusqu\u2019\u00e0 trouver l\u2019origine du bogue</p> <p>3.3 - Source d\u2019information O\u00f9 trouver de l\u2019aide quand on a un bogue \u00b7   https://stackoverflow.com/ \u00b7   https://github.com/</p> <p>Les types de vuln\u00e9rabilit\u00e9s les plus courantes li\u00e9es \u00e0 des bogues : \u00b7   https://www.cvedetails.com/vulnerabilities-by-types.php \u00b7   https://owasp.org/www-project-top-ten/</p> <p>4 - Tests unitaires 4.1 - Introduction Les tests unitaires consistent \u00e0 v\u00e9rifier le bon fonctionnement d\u2019une portion de code informatique, typiquement une fonction. Ils s\u2019inscrivent dans une d\u00e9marche plus g\u00e9n\u00e9rale de tests qui consiste \u00e0 valider qu\u2019un produit r\u00e9pond bien au besoin exprim\u00e9 en amont. Pyramide des tests :</p> <p>Certaines m\u00e9thodes de d\u00e9veloppement comme TDD (Test Driven Development) propose m\u00eame d\u2019\u00e9crire les tests avant le code source.</p> <p>4.1.1 - Avantages/inconv\u00e9nients Avantages : \u00b7   s\u2019assurer du bon fonctionnement \u00b7   trouver des bugs le plus t\u00f4t possible \u00b7   garantir la non r\u00e9gression du code apr\u00e8s la correction d\u2019un bug \u00b7   servir de documentation et d\u2019exemple en compl\u00e9ment de l\u2019API Inconv\u00e9nients : \u00b7   cela peut \u00eatre long et fastidieux \u00e0 r\u00e9aliser 4.1.2 - Outils Plusieurs outils sont disponibles dont certains seront pr\u00e9sent\u00e9s en d\u00e9tails dans la suite du document : \u00b7   assert : mot clef Python \u00b7   unittest : librairie standard de tests unitaires \u00b7   doctest : librairie standard utilisant les tests unitaires dans les docstring \u00b7   pytest  : libraire de tests unitaires 4.2 - Mise en \u0153uvre 4.2.1 - Fonctionnement Imaginons que vous avez \u00e9crit un module Python nomm\u00e9 calculs.py contenant diff\u00e9rentes fonctions. Pour r\u00e9aliser des tests unitaires sur votre module, vous allez devoir cr\u00e9er un nouveau fichier test_calculs.py dont le r\u00f4le sera de valider le bon fonctionnement de votre module rectangle.py. Cela se fera en 3 \u00e9tapes : 1.  initialisation (setUp) : pr\u00e9paration d\u2019un environnement pour ex\u00e9cuter le test (fixture) 2.  v\u00e9rification (test_xxx) : comparaison du r\u00e9sultat obtenu avec le r\u00e9sultat escompt\u00e9 3.  d\u00e9sactivation (tearDown) : d\u00e9sinstallation de l\u2019environnement de test afin de le pas polluer les tests suivants Les tests doivent \u00eatre ind\u00e9pendants et reproductibles, c\u2019est ce qui explique les \u00e9tapes 1 et 3.</p> <p>4.2.2 - Module calculs.py Soit le module calculs.py ci-dessous \u00e0 tester. def additionner(a, b):     \"\"\"Calcule et retourne la somme de a et b\"\"\"     return a * b</p> <p>def etre_pair(n):     \"\"\"Test la parit\u00e9 d'un nombre\"\"\"     if n % 2 == 0:         return True     else:         return False</p> <p>Vous aurez noter que le d\u00e9veloppeur a fait une faute de frappe dans la fonction additionner() en rempla\u00e7ant le signe + par *. Tout l\u2019int\u00e9r\u00eat des tests unitaires va \u00eatre de rep\u00e9rer cette erreur suffisamment t\u00f4t, id\u00e9alement avant l\u2019int\u00e9gration du module calcul.py dans un autre projet. Car une fois int\u00e9gr\u00e9, l\u2019erreur peut s\u2019av\u00e9rer beaucoup plus longue et complexe \u00e0 trouver et corriger.</p> <p>4.2.3 - Tests unitaires avec les assertions Afin de tester ce module calculs.py, il va falloir cr\u00e9er un fichier test_calculs.py contenant nos tests unitaires. Ce fichier va utiliser le mot clef Python assert pour v\u00e9rifier que le r\u00e9sultat produit par une fonction et bien conforme aux attentes. Si ce n\u2019est pas le cas une erreur AssertionError stoppe le programme.</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/cours/#assertion-vraie-ne-produisant-pas-derreur","title":"Assertion vraie, ne produisant pas d'erreur","text":"<p>assert 1 == 1, \"1 doit \u00eatre \u00e9gal \u00e0 1\"</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/cours/#assertion-fausse-produisant-une-assertionerror","title":"Assertion fausse, produisant une AssertionError","text":"<p>assert 1 == 0, \"1 = 0 devrait lever une erreur\"</p> <p>Traceback (most recent call last):   File \"tests_assert.py\", line 4, in      assert 1 == 0, \"1 = 0 devrait lever une erreur\" AssertionError <p>Pour les tests unitaires du module calculs.py, on pourrait \u00e9crire les assertions suivantes :</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/cours/#importation-du-module-a-tester-et-ses-fonctions","title":"Importation du module \u00e0 tester et ses fonctions","text":"<p>from calculs import additionner, etre_pair</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/cours/#tests-unitaires-de-la-fonction-additionner","title":"Tests unitaires de la fonction additionner()","text":"<p>assert additionner(2, 2) == 4, \"2 + 2 = 4\" assert additionner(0, 0) == 0, \"0 + 0 = 0\" assert additionner(11, 5) == 16, \"11 + 5 = 16\"</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/cours/#tests-unitaires-de-la-fonction-etre_pair","title":"Tests unitaires de la fonction etre_pair()","text":"<p>assert etre_pair(5) == False, \"5 n\u2019est pas pair\" assert etre_pair(4) == True, \"4 est pair\" assert etre_pair(0) == True, \"0 est pair\"</p> <p>Le lancement de test_calculs.py produira alors l\u2019erreur suivante : Traceback (most recent call last):   File \"tests_calculs.py\", line 7, in      assert additionner(11, 5) == 16, \"11 + 5 = 16\" AssertionError <p>Notre script de tests unitaires a bien rep\u00e9r\u00e9 une erreur sur la fonction additionner() qu\u2019il devrait \u00eatre ais\u00e9 de corriger. A noter que les 2 premiers tests sont pass\u00e9s malgr\u00e9 l\u2019erreur de codage, d\u2019o\u00f9 l\u2019importance d\u2019\u00eatre le plus exhaustif possible dans l\u2019\u00e9criture des tests. Cependant on pourra remarquer quelques faiblesses avec cette m\u00e9thode assert : \u00b7   le script s\u2019est arr\u00eat\u00e9 \u00e0 la premi\u00e8re erreur, donc on ne sait pas si la fonction etre_pair() est correcte \u00b7   quand tous les tests passeront avec succ\u00e8s, le script ne produira rien \u00b7   certains tests sont plus difficiles \u00e0 r\u00e9aliser avec assert (cha\u00eenes de caract\u00e8res, sortie affichage, plusieurs fonctions...) \u00b7   si chaque test demandait une initialisation avant de s\u2019ex\u00e9cuter (ouverture fichier, base de donn\u00e9es, r\u00e9seaux...) il faudrait le faire avant chaque assert =&gt; tr\u00e8s lourd car de nombreux copier/coller Au chapitre suivant nous allons voir une librairie d\u00e9di\u00e9e aux tests unitaires, plus puissante mais aussi plus lourde d\u2019utilisation.</p> <p>4.2.4 - Tests unitaires avec la librairie unittest Avec la librairie unittest les m\u00eames tests qu\u2019avec assert pourraient ressembler \u00e0 :</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/cours/#librairies-utilisees","title":"Librairies utilis\u00e9es","text":"<p>import unittest from calculs import additionner, etre_pair</p> <p>class TestCalculs(unittest.TestCase):     \"\"\"Classe g\u00e9rant les tests unitaires du module calculs\"\"\"</p> \ud83d\udccb Texte<pre><code>def test_additionner(self):\n    \"\"\"Tests unitaires de la fonction additionner()\"\"\"\n    self.assertEqual(additionner(2, 2), 4, \"2 + 2 =&gt; 4\")\n    self.assertEqual(additionner(0, 0), 0, \"0 + 0 =&gt; 0\")\n    self.assertEqual(additionner(11, 5), 16, \"11 + 5 =&gt; 16\")\n\ndef test_etre_pair(self):\n    \"\"\"Tests unitaires de la fonction etre_pair()\"\"\"\n    self.assertEqual(etre_pair(5), False, \"5 est impair\")\n    self.assertEqual(etre_pair(4), True, \"4 est pair\")\n    self.assertEqual(etre_pair(0), True, \"0 est pair\")\n</code></pre>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/cours/#lancement-des-tests","title":"Lancement des tests","text":"<p>if name == 'main':     unittest.main()</p> <p>On retrouve dans ce code : Code python Description import unittest Importation de la librairie unittest qui fait partie de la librairie standard Python, donc pas d\u2019installation class TestCalculs(unittest.TestCase):     Cr\u00e9ation d\u2019un classe regroupant les tests unitaires et h\u00e9ritant de TestCase def test_additionner(self): Fonction d\u00e9butant par test_xxx signifiant qu\u2019elle embarque des tests unitaires self.assertEqual(     additionner(2, 2),     4,     \"2 + 2 =&gt; 4\")   Assertion v\u00e9rifiant le r\u00e9sultat retourn\u00e9 par une fonction accompagn\u00e9e d\u2019un message if name == 'main':     unittest.main() Lancement des tests, la librairie va rechercher seul les tests \u00e0 effectuer (m\u00e9thodes d\u00e9butant par test_xxx et les ex\u00e9cuter)</p> <p>Le lancement de ce script de test produira le r\u00e9sultat suivant : $ python3 -m unittest ====================================================================== FAIL: test_additionner (test_calculs_unittest.TestCalculs) Tests unitaires de la fonction additionner()</p> <p>Traceback (most recent call last):   File \"test_calculs.py\", line 21, in test_additionner     self.assertEqual(additionner(11, 5), 16, \"11 + 5 =&gt; 16\") AssertionError: 55 != 16 : 11 + 5 =&gt; 16</p> <p>Ran 5 tests in 0.001s</p> <p>FAILED (failures=1, errors=1)</p> <p>Par rapport \u00e0 la m\u00e9thode assert, on peut remarquer que : \u00b7   tous les tests ont \u00e9t\u00e9 lanc\u00e9s, le script ne s\u2019est pas arr\u00eat\u00e9 \u00e0 la premi\u00e8re erreur \u00b7   d\u2019autres m\u00e9thodes de tests que assertEqual() existent : o   assertTrue() : teste si \u00e9gal \u00e0 True o   assertIsNone() : teste si vaut None o   assertAlmostEqual() : teste si \u00e9gal avec une marge d\u2019erreur o   assertRaises() : teste si une exception est lev\u00e9e o   assertRegex() : teste une cha\u00eene de caract\u00e8res o   assertLogs() : teste si un log a bien \u00e9t\u00e9 produit</p> <p>Dans PyCharm, on retrouve un bilan plus graphique...</p> <p>...mais on peut \u00e9galement g\u00e9n\u00e9rer un rapport au format HTML ou XML en cliquant sur l\u2019ic\u00f4ne \u00e0 gauche de la roue dent\u00e9e</p> <p>La librairie unittest permet \u00e9galement d\u2019initialiser (setUp) l\u2019environnement (fixture) avant l\u2019ex\u00e9cution de chaque test et aussi de le d\u00e9sactiver (tearDown) pour le prochain. Dans cet exemple on ouvre et ferme un fichier de donn\u00e9es : class TestCalculs(unittest.TestCase):     \"\"\"Classe g\u00e9rant les tests unitaires du module calculs\"\"\"</p> \ud83d\udccb Texte<pre><code>def setUp(self):\n    \"\"\"Initialisation des tests\"\"\"\n    # Ouverture du fichier contenant le jeu de test\n    self.fichier = open(\"data.json\", \"r\")\n\ndef tearDown(self):\n    \"\"\"D\u00e9sactivation des tests\"\"\"\n    # Fermeture du fichier contenant le jeu de test\n    self.fichier.close()\n\n# ...suite de la classe tronqu\u00e9e\n</code></pre> <p>5 - Optimisation des performances 5.1 - Principe Les gains d\u2019optimisation sont souvent li\u00e9s : \u00b7   \u00e0 l\u2019algorithme utilis\u00e9 \u00b7   au langage lui m\u00eame et sa machinerie interne</p> <p>5.2 - Chronom\u00e9trage simple Le chronom\u00e9trage d\u2019une portion de code ou d\u2019une fonction peut s\u2019effectuer avec la fonction perf_counter() du module time comme ci-dessous :</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/cours/#importation-des-outils-pour-mesurer-le-temps","title":"Importation des outils pour mesurer le temps","text":"<p>import time</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/cours/#fonction-quon-souhaite-chronometrer","title":"Fonction qu'on souhaite chronom\u00e9trer","text":"<p>def additionner(limite):     somme = 0     for i in range(0, limite+1):         somme += i     return somme</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/cours/#lancement-et-chronometrage-de-la-fonction","title":"Lancement et chronom\u00e9trage de la fonction","text":"<p>debut = time.perf_counter() resultat = additionner(1000000) fin = time.perf_counter()</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/cours/#affichage-du-resultat-et-de-la-duree-dexecution","title":"Affichage du r\u00e9sultat et de la dur\u00e9e d'ex\u00e9cution","text":"<p>print(f\"La somme jusqu\u2019\u00e0 1000000 est {resultat}\") delai = fin - debut print(f\"Dur\u00e9e d'ex\u00e9cution = {delai} s\")</p> <p>5.3 - Profilage Le profilage d\u2019un code donne des r\u00e9sultats beaucoup plus complet avec pour chaque fonction : \u00b7   le temps total d\u2019ex\u00e9cution \u00b7   le nombre d\u2019appels \u00b7   la dur\u00e9e moyenne d\u2019un appel \u00b7   ...</p> <p>Le module cProfile pr\u00e9sent dans la distribution standard de Python permet de r\u00e9aliser facilement ce profilage. Il suffit de lancer l\u2019ex\u00e9cution d\u2019un script depuis un terminal comme ci-dessous : jbegood@pc:$ python3 -m cProfile ./time04.py          1001004 function calls in 14.529 seconds</p> <p>Ordered by: standard name</p> <p>ncalls  tottime  percall  cumtime  percall filename:lineno(function)           1    0.000    0.000   14.529   14.529 time04.py:1()           1    0.001    0.001   14.529   14.529 time04.py:1(faire_quelque_chose)        1000    0.180    0.000   14.529    0.015 time04.py:5(faire_autre_chose)     1000000   14.349    0.000   14.349    0.000 time04.py:9(faire_semblant)           1    0.000    0.000   14.529   14.529 {built-in method builtins.exec}           1    0.000    0.000    0.000    0.000 {method 'disable' of '_...' objects} <p>On peut noter par exemple que la fonction faire_semblant() a \u00e9t\u00e9 appel\u00e9e 1000000 de fois pour un temps total d\u2019ex\u00e9cution de 14,349s soit presque l\u2019int\u00e9gralit\u00e9 du temps d\u2019ex\u00e9cution du programme complet. C\u2019est pr\u00e9cis\u00e9ment sur cette fonction qu\u2019il faudrait focaliser les optimisations.</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/tp/","title":"Tp","text":"<p>Cours tests &amp; bugs Antoine MAROT (antoine.marot@ensemblescolaire-niort.com) David SALL\u00c9 (david.salle@ensemblescolaire-niort.com) Julien SIMONNEAU (julien.simonneau@ensemblescolaire-niort.com)</p> <p>Ce document est mis \u00e0 disposition selon les termes de la licence Creative Commons BY-NC-SA 4.0</p> <p>Version du document v0.2 Date 15/10/2020</p> <p>Table des mati\u00e8res 1 - Introduction    3 1.1 - Plan  3 1.2 - Un peu d\u2019histoire 4 1.3 - Vue d\u2019ensemble    5 1.4 - Conseils  5 1.5 - Erreur avec l\u2019interpr\u00e9teur Python 6 2 - Les exceptions  7 2.1 - Utiliser try/except   8 2.2 - Diff\u00e9renciation   8 2.3 - Et quoi qu\u2019il arrive...   9 2.4 - Lever soi m\u00eame une Exception  9 3 - Bogues et d\u00e9bogueur 10 3.1 - Causes des bogues 10 3.2 - Outil de d\u00e9bogage 10 3.3 - Source d\u2019information  11 4 - Tests unitaires 12 4.1 - Introduction  12 4.1.1 - Avantages/inconv\u00e9nients 12 4.1.2 - Outils  12 4.2 - Mise en \u0153uvre 13 4.2.1 - Fonctionnement  13 4.2.2 - Module calculs.py   13 4.2.3 - Tests unitaires avec les assertions 14 4.2.4 - Tests unitaires avec la librairie unittest  15 5 - Optimisation des performances   18 5.1 - Principe  18 5.2 - Chronom\u00e9trage simple  18 5.3 - Profilage 18</p> <p>1 - Introduction 1.1 - Plan Ce document pr\u00e9sente quelques notions autours de la mise au point des programmes : \u00b7   gestion des erreurs/exceptions \u00b7   gestion des bugs \u00b7   tests unitaires \u00b7   analyse des performances</p> <p>D\u00e9butons par un slogan en informatique !</p> <p>1.2 - Un peu d\u2019histoire L\u2019histoire de l\u2019informatique est truff\u00e9e d\u2019inventions et de grandes r\u00e9alisations, mais aussi parfois de d\u00e9sastres industriels. Les cons\u00e9quences peuvent aller de simples erreurs au plantage complet du syst\u00e8me en passant par les failles de s\u00e9curit\u00e9. Quelques exemples de bugs ou bogues tristement connus : Quand   Quoi    Cons\u00e9quence 1947    Un insecte (bug in english) est venu cr\u00e9er un faux contact entre 2 relais \u00e9lectrom\u00e9caniques de l\u2019ordinateur Harvard Mark II. Une simple erreur 1991    Une erreur d\u2019arrondi pour passer d\u2019un entier \u00e0 un r\u00e9el sur 24 bits a engendr\u00e9 une erreur de 600m dans les calculs de trajectoire du syst\u00e8me anti-missile Patriot.   Mort de 28 soldats am\u00e9ricains 1996    Un d\u00e9passement d\u2019entier dans le programme d\u2019Ariane5 qui avait \u00e9t\u00e9 en partie copi\u00e9/coll\u00e9 d\u2019Ariane4. Mais les variables utilis\u00e9es ne convenaient plus en taille pour la puissance d\u2019Ariane 5  Explosion de la fus\u00e9e 1997    Quelques jours apr\u00e8s son arriv\u00e9e sur Mars, le robot Sojourner de la mission Pathfinder se bloque \u00e0 cause d\u2019une inversion de priorit\u00e9 dans ses t\u00e2ches. Le probl\u00e8me sera corrig\u00e9 \u00e0 distance depuis la Terre Retard dans la mission 2014    Le c\u00e9l\u00e8bre clip Gangnam Style provoque un d\u00e9bordement d\u2019entier dans le compteur de vue de la plateforme Youtube      Rien de particulier 2038    Un d\u00e9passement d\u2019entier dans la gestion de la date. Y2038 en \u00e9cho \u00e0 Y2000 (bug de l\u2019an 2000) appa\u00eetra peut-\u00eatre dans les syst\u00e8mes 32 bits qui compte les secondes \u00e0 partir du 1er janvier 1970 pour g\u00e9rer la date du syst\u00e8me.   L\u2019ann\u00e9e deviendra 1901 au lieu de 2038</p> <p>D\u2019autres exemples ici : https://en.wikipedia.org/wiki/List_of_software_bugs</p> <p>1.3 - Vue d\u2019ensemble Lorsqu\u2019on programme en Python (et dans les autres langages \u00e9galement), on est rapidement confront\u00e9 \u00e0 3 types d\u2019erreurs. Type d\u2019 erreur  Description Difficult\u00e9 \u00e0 r\u00e9soudre Syntaxe li\u00e9e au langage Le code source comporte des erreurs et l\u2019interpr\u00e9teur n\u2019arrive pas \u00e0 l\u2019ex\u00e9cuter. Il vous indique en g\u00e9n\u00e9ral Solution : se r\u00e9f\u00e9rer au message de l\u2019interpr\u00e9teur Python et v\u00e9rifier la syntaxe    Facile Valeur ou action inappropri\u00e9e   Le programme se lance bien, mais dans certaines conditions \u201cplante\u201d. Solution : se r\u00e9f\u00e9rer au message d\u2019erreur de l\u2019interpr\u00e9teur Python et v\u00e9rifier les valeurs notamment \u00e0 l\u2019aide d\u2019un d\u00e9bogueur    Difficile Conception de l\u2019algorithme  Le programme se lance bien, ne plante pas, mais ne produit pas le r\u00e9sultat escompt\u00e9 Solution : revoir l\u2019algorithme utilis\u00e9 et les \u00e9tapes de l\u2019ex\u00e9cution du programme avec un d\u00e9bogueur  Tr\u00e8s difficile</p> <p>1.4 - Conseils Conseils lorsqu\u2019on cr\u00e9\u00e9 un script Python : \u00b7   corriger les erreurs de syntaxe \u00b7   anticiper les erreurs de saisie de l\u2019utilisateur, imaginer le pire \u00b7   tester unitairement (entr\u00e9es =&gt; sorties, cas limite avec 0, \u201c\u201d, tous les cas de figure if/else) \u00b7   v\u00e9rifier les boucles while et leurs conditions de sortie (invariant) \u00b7   contr\u00f4ler les erreurs avec try/except \u00b7   se m\u00e9fier des calculs et comparaisons avec les nombres flottants</p> <p>1.5 - Erreur avec l\u2019interpr\u00e9teur Python Anatomie d\u2019un message d\u2019erreur de l\u2019interpr\u00e9teur Python : Traceback (most recent call last): File \"/home/jbegood/mon_script.py\", line 12, in  x = taille NameError: name 'taille' is not defined <p>A noter que quand on utilise des fonctions qui appellent d\u2019autres fonctions, le message d\u2019erreur retrace tout le parcours et il faut commencer \u00e0 lire par la fin. Quelques erreurs courantes li\u00e9es au langage Python : Type    Description SyntaxError Erreur de syntaxe : \u00b7   confusion entre = et == \u00b7   oubli d\u2019une parenth\u00e8se ( ou ) \u00b7   oubli d\u2019un d\u00e9limiteur de string \u201c ou \u2018 ou \u201c\u201d\u201d \u00b7   oubli du : annon\u00e7ant un bloc NameError   Erreur sur le nom d\u2019une variable ou fonction \u00b7   mauvais nom \u00b7   d\u00e9claration au mauvais endroit \u00b7   oubli d\u2019import d\u2019un module IndentationError    Erreur d\u2019indentation \u00b7   mauvais alignement \u00b7   m\u00e9lange d\u2019espaces et tabulations (Python3) TypeError   Erreur sur les types \u00b7   addition impossible entre int et string \u00b7   arrondi d\u2019un string AssertionError  Erreur issue d\u2019un test unitaire ZeroDivisionError   Erreur de division par 0 KeyError    Erreur sur un dictionnaire IOError Erreur lors d\u2019un entr\u00e9e/sortie (fichier...)</p> <p>2 - Les exceptions Toutes les erreurs du tableau pr\u00e9c\u00e9dent sont en fait des exceptions qui h\u00e9ritent de la m\u00eame classe m\u00e8re Exception.</p> <p>Lorsque Python l\u00e8ve une exception telle que celles pr\u00e9sentes dans le tableau, le programme est stopp\u00e9 imm\u00e9diatement et un message d\u2019erreur est affich\u00e9 pour pr\u00e9venir l\u2019utilisateur de la cause du probl\u00e8me. Prenons l\u2019exemple de ce programme qui saisit un nombre et calcule son inverse :</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/tp/#version-normale","title":"Version normale","text":"<p>x = int(input(\"Saisir x : \")) print(\"1/x =\", 1/x)</p> <p>Selon ce que va saisir l\u2019utilisateur, le r\u00e9sultat sera tr\u00e8s diff\u00e9rent. En cas de mauvaise saisie, le programme stoppe. Saisie d\u2019un entier x=4 Saisie d\u2019un string x=\u201d2\u201d   Saisie d\u2019un entier x = 0 Saisir x : 4 1/x = 0.25  Traceback (...):   File \"test.py\", line 1... ValueError: invalid literal for int() with base 10: '\"2\"'   Traceback (...):   File \"/test.py\", line 2...    ZeroDivisionError: division by zero</p> <p>2.1 - Utiliser try/except Cependant parfois, il est plus int\u00e9ressant de \u201ccapturer\u201d cette exception de mani\u00e8re \u00e0 informer l\u2019utilisateur du probl\u00e8me et lui proposer une alternative, plut\u00f4t que de stopper brutalement le programme. Pour cela on utilisera les mot-clefs try et except : \u00b7   try va d\u00e9buter un bloc d\u2019instructions \u00e0 risque, susceptible de g\u00e9n\u00e9rer une erreur \u00b7   except va intercepter l\u2019erreur pour \u00e9viter l\u2019arr\u00eat brutal du programme et proposer un traitement du probl\u00e8me, souvent un affichage Le mod\u00e8le est celui-ci : try:     # Code \u00e0 risque except Exception as erreur:     # Traitement de l'erreur (affichage...)</p> <p>Pour le programme qui calcule l\u2019inverse cela donnerait :</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/tp/#version-avec-capture-simple-et-affichage","title":"Version avec capture simple et affichage","text":"<p>try:     x = int(input(\"Saisir x : \"))     print(\"1/x =\", 1 / x) except Exception as erreur:     print(\"Erreur :\", erreur)</p> <p>2.2 - Diff\u00e9renciation Si l\u2019on souhaite diff\u00e9rencier le traitement des erreurs, il faudra ajouter plusieurs blocs except, typiquement un par type d\u2019erreur</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/tp/#version-avec-capture-et-traitement-differencies","title":"Version avec capture et traitement diff\u00e9renci\u00e9s","text":"<p>try:     x = int(input(\"Saisir x : \"))     print(\"1/x =\", 1 / x) except ValueError as erreur:     print(\"Erreur de saisie :\", erreur) except ZeroDivisionError as erreur:     print(\"Impossible de diviser par z\u00e9ro :\", erreur)</p> <p>2.3 - Et quoi qu\u2019il arrive... On peut \u00e9galement ajouter un bloc d\u2019instructions qui sera ex\u00e9cut\u00e9 quoiqu\u2019il arrive : erreur ou comportement normal. Pour cela on ajoutera \u00e0 la fin le mot clef finally :</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/tp/#version-avec-capture-et-traitement-differencies-et","title":"Version avec capture et traitement diff\u00e9renci\u00e9s et","text":""},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/tp/#quoiquil-arrive-un-message-de-fin","title":"quoiqu'il arrive un message de fin","text":"<p>try:     x = int(input(\"Saisir x : \"))     print(\"1/x =\", 1 / x) except ValueError as erreur:     print(\"Erreur de saisie :\", erreur) except ZeroDivisionError as erreur:     print(\"Impossible de diviser par z\u00e9ro :\", erreur) finally:     print(\"Merci d'avoir utiliser ce calculateur\")</p> <p>2.4 - Lever soi m\u00eame une Exception Quand on \u00e9crit son propre module Python avec ses fonctions, ses classes, ses m\u00e9thodes, on a souvent besoin de lever nous m\u00eame des exceptions sans attendre l\u2019interpr\u00e9teur Python. A l\u2019aide du mot-clef raise, on peut lever une exception \u00e0 tout moment.</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/tp/#levee-dexception","title":"Lev\u00e9e d'exception","text":"<p>x = int(input(\"Saisir x : \")) if x == 13:     raise ValueError(\"D\u00e9sol\u00e9, je suis superstitieux\") print(\"1/x =\", 1/x)</p> <p>Celle-ci sera intercept\u00e9e par un bloc try/except ou pas. Il est \u00e9galement possible de d\u00e9finir ses propres exceptions personnalis\u00e9es en la rattachant \u00e0 la classe Exception via l\u2019h\u00e9ritage</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/tp/#definition-dune-exception-personnalisee","title":"D\u00e9finition d'une Exception personnalis\u00e9e","text":"<p>class SuperstitionError(Exception):     \"\"\"Classe repr\u00e9sentation l'erreur li\u00e9e au nombre 13\"\"\"     pass</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/tp/#levee-dune-exception-personnalisee","title":"Lev\u00e9e d'une exception personnalis\u00e9e","text":"<p>x = int(input(\"Saisir x : \")) if x == 13:     raise SuperstitionError(\"D\u00e9sol\u00e9, je suis superstitieux\") print(\"1/x =\", 1/x)</p> <p>3 - Bogues et d\u00e9bogueur 3.1 - Causes des bogues Dans la suite de ce chapitre, on tentera de pr\u00e9senter sommairement les causes les plus courantes des bogues dans les programmes. \u00b7   Probl\u00e8me de typage \u00b7   Effet de bord non d\u00e9sir\u00e9 \u00b7   D\u00e9bordement dans un tableau \u00b7   Instruction conditionnelle non exhaustive \u00b7   Mauvais choix d\u2019in\u00e9galit\u00e9 \u00b7   Calcul/comparaison de nombres flottants \u00b7   D\u00e9bordement d\u2019entier \u00b7   Mauvaise indentation</p> <p>3.2 - Outil de d\u00e9bogage Le d\u00e9bogueur est un outil int\u00e9gr\u00e9 dans la majorit\u00e9 des IDE. Il permet de fixer des points d\u2019arr\u00eat (breakpoints) et de consulter l\u2019\u00e9tat des variables (watches). On peut ensuite avancer pas \u00e0 pas en mode : \u00b7   Step over (F8) : saute par dessus les fonctions \u00b7   Step into (F7) : entre dans les fonctions Exemple d\u2019utilisation dans PyCharm. Etape 1 : on fixe un point d\u2019arr\u00eat dans le programme dans la zone \u00e0 d\u00e9boguer</p> <p>Etape 2 : on lance l\u2019ex\u00e9cution du programme en mode debug (ic\u00f4ne insecte)</p> <p>Etape 3 : on visualise l\u2019\u00e9tat des variables Soit dans la zone \u201cwatches\u201d</p> <p>Soit directement dans le code</p> <p>Etape 4 : on avance pas \u00e0 pas avec la touche F8 ou F7</p> <p>Etape 5 : on reboucle \u00e0 l\u2019\u00e9tape 4 jusqu\u2019\u00e0 trouver l\u2019origine du bogue</p> <p>3.3 - Source d\u2019information O\u00f9 trouver de l\u2019aide quand on a un bogue \u00b7   https://stackoverflow.com/ \u00b7   https://github.com/</p> <p>Les types de vuln\u00e9rabilit\u00e9s les plus courantes li\u00e9es \u00e0 des bogues : \u00b7   https://www.cvedetails.com/vulnerabilities-by-types.php \u00b7   https://owasp.org/www-project-top-ten/</p> <p>4 - Tests unitaires 4.1 - Introduction Les tests unitaires consistent \u00e0 v\u00e9rifier le bon fonctionnement d\u2019une portion de code informatique, typiquement une fonction. Ils s\u2019inscrivent dans une d\u00e9marche plus g\u00e9n\u00e9rale de tests qui consiste \u00e0 valider qu\u2019un produit r\u00e9pond bien au besoin exprim\u00e9 en amont. Pyramide des tests :</p> <p>Certaines m\u00e9thodes de d\u00e9veloppement comme TDD (Test Driven Development) propose m\u00eame d\u2019\u00e9crire les tests avant le code source.</p> <p>4.1.1 - Avantages/inconv\u00e9nients Avantages : \u00b7   s\u2019assurer du bon fonctionnement \u00b7   trouver des bugs le plus t\u00f4t possible \u00b7   garantir la non r\u00e9gression du code apr\u00e8s la correction d\u2019un bug \u00b7   servir de documentation et d\u2019exemple en compl\u00e9ment de l\u2019API Inconv\u00e9nients : \u00b7   cela peut \u00eatre long et fastidieux \u00e0 r\u00e9aliser 4.1.2 - Outils Plusieurs outils sont disponibles dont certains seront pr\u00e9sent\u00e9s en d\u00e9tails dans la suite du document : \u00b7   assert : mot clef Python \u00b7   unittest : librairie standard de tests unitaires \u00b7   doctest : librairie standard utilisant les tests unitaires dans les docstring \u00b7   pytest  : libraire de tests unitaires 4.2 - Mise en \u0153uvre 4.2.1 - Fonctionnement Imaginons que vous avez \u00e9crit un module Python nomm\u00e9 calculs.py contenant diff\u00e9rentes fonctions. Pour r\u00e9aliser des tests unitaires sur votre module, vous allez devoir cr\u00e9er un nouveau fichier test_calculs.py dont le r\u00f4le sera de valider le bon fonctionnement de votre module rectangle.py. Cela se fera en 3 \u00e9tapes : 1.  initialisation (setUp) : pr\u00e9paration d\u2019un environnement pour ex\u00e9cuter le test (fixture) 2.  v\u00e9rification (test_xxx) : comparaison du r\u00e9sultat obtenu avec le r\u00e9sultat escompt\u00e9 3.  d\u00e9sactivation (tearDown) : d\u00e9sinstallation de l\u2019environnement de test afin de le pas polluer les tests suivants Les tests doivent \u00eatre ind\u00e9pendants et reproductibles, c\u2019est ce qui explique les \u00e9tapes 1 et 3.</p> <p>4.2.2 - Module calculs.py Soit le module calculs.py ci-dessous \u00e0 tester. def additionner(a, b):     \"\"\"Calcule et retourne la somme de a et b\"\"\"     return a * b</p> <p>def etre_pair(n):     \"\"\"Test la parit\u00e9 d'un nombre\"\"\"     if n % 2 == 0:         return True     else:         return False</p> <p>Vous aurez noter que le d\u00e9veloppeur a fait une faute de frappe dans la fonction additionner() en rempla\u00e7ant le signe + par *. Tout l\u2019int\u00e9r\u00eat des tests unitaires va \u00eatre de rep\u00e9rer cette erreur suffisamment t\u00f4t, id\u00e9alement avant l\u2019int\u00e9gration du module calcul.py dans un autre projet. Car une fois int\u00e9gr\u00e9, l\u2019erreur peut s\u2019av\u00e9rer beaucoup plus longue et complexe \u00e0 trouver et corriger.</p> <p>4.2.3 - Tests unitaires avec les assertions Afin de tester ce module calculs.py, il va falloir cr\u00e9er un fichier test_calculs.py contenant nos tests unitaires. Ce fichier va utiliser le mot clef Python assert pour v\u00e9rifier que le r\u00e9sultat produit par une fonction et bien conforme aux attentes. Si ce n\u2019est pas le cas une erreur AssertionError stoppe le programme.</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/tp/#assertion-vraie-ne-produisant-pas-derreur","title":"Assertion vraie, ne produisant pas d'erreur","text":"<p>assert 1 == 1, \"1 doit \u00eatre \u00e9gal \u00e0 1\"</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/tp/#assertion-fausse-produisant-une-assertionerror","title":"Assertion fausse, produisant une AssertionError","text":"<p>assert 1 == 0, \"1 = 0 devrait lever une erreur\"</p> <p>Traceback (most recent call last):   File \"tests_assert.py\", line 4, in      assert 1 == 0, \"1 = 0 devrait lever une erreur\" AssertionError <p>Pour les tests unitaires du module calculs.py, on pourrait \u00e9crire les assertions suivantes :</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/tp/#importation-du-module-a-tester-et-ses-fonctions","title":"Importation du module \u00e0 tester et ses fonctions","text":"<p>from calculs import additionner, etre_pair</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/tp/#tests-unitaires-de-la-fonction-additionner","title":"Tests unitaires de la fonction additionner()","text":"<p>assert additionner(2, 2) == 4, \"2 + 2 = 4\" assert additionner(0, 0) == 0, \"0 + 0 = 0\" assert additionner(11, 5) == 16, \"11 + 5 = 16\"</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/tp/#tests-unitaires-de-la-fonction-etre_pair","title":"Tests unitaires de la fonction etre_pair()","text":"<p>assert etre_pair(5) == False, \"5 n\u2019est pas pair\" assert etre_pair(4) == True, \"4 est pair\" assert etre_pair(0) == True, \"0 est pair\"</p> <p>Le lancement de test_calculs.py produira alors l\u2019erreur suivante : Traceback (most recent call last):   File \"tests_calculs.py\", line 7, in      assert additionner(11, 5) == 16, \"11 + 5 = 16\" AssertionError <p>Notre script de tests unitaires a bien rep\u00e9r\u00e9 une erreur sur la fonction additionner() qu\u2019il devrait \u00eatre ais\u00e9 de corriger. A noter que les 2 premiers tests sont pass\u00e9s malgr\u00e9 l\u2019erreur de codage, d\u2019o\u00f9 l\u2019importance d\u2019\u00eatre le plus exhaustif possible dans l\u2019\u00e9criture des tests. Cependant on pourra remarquer quelques faiblesses avec cette m\u00e9thode assert : \u00b7   le script s\u2019est arr\u00eat\u00e9 \u00e0 la premi\u00e8re erreur, donc on ne sait pas si la fonction etre_pair() est correcte \u00b7   quand tous les tests passeront avec succ\u00e8s, le script ne produira rien \u00b7   certains tests sont plus difficiles \u00e0 r\u00e9aliser avec assert (cha\u00eenes de caract\u00e8res, sortie affichage, plusieurs fonctions...) \u00b7   si chaque test demandait une initialisation avant de s\u2019ex\u00e9cuter (ouverture fichier, base de donn\u00e9es, r\u00e9seaux...) il faudrait le faire avant chaque assert =&gt; tr\u00e8s lourd car de nombreux copier/coller Au chapitre suivant nous allons voir une librairie d\u00e9di\u00e9e aux tests unitaires, plus puissante mais aussi plus lourde d\u2019utilisation.</p> <p>4.2.4 - Tests unitaires avec la librairie unittest Avec la librairie unittest les m\u00eames tests qu\u2019avec assert pourraient ressembler \u00e0 :</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/tp/#librairies-utilisees","title":"Librairies utilis\u00e9es","text":"<p>import unittest from calculs import additionner, etre_pair</p> <p>class TestCalculs(unittest.TestCase):     \"\"\"Classe g\u00e9rant les tests unitaires du module calculs\"\"\"</p> \ud83d\udccb Texte<pre><code>def test_additionner(self):\n    \"\"\"Tests unitaires de la fonction additionner()\"\"\"\n    self.assertEqual(additionner(2, 2), 4, \"2 + 2 =&gt; 4\")\n    self.assertEqual(additionner(0, 0), 0, \"0 + 0 =&gt; 0\")\n    self.assertEqual(additionner(11, 5), 16, \"11 + 5 =&gt; 16\")\n\ndef test_etre_pair(self):\n    \"\"\"Tests unitaires de la fonction etre_pair()\"\"\"\n    self.assertEqual(etre_pair(5), False, \"5 est impair\")\n    self.assertEqual(etre_pair(4), True, \"4 est pair\")\n    self.assertEqual(etre_pair(0), True, \"0 est pair\")\n</code></pre>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/tp/#lancement-des-tests","title":"Lancement des tests","text":"<p>if name == 'main':     unittest.main()</p> <p>On retrouve dans ce code : Code python Description import unittest Importation de la librairie unittest qui fait partie de la librairie standard Python, donc pas d\u2019installation class TestCalculs(unittest.TestCase):     Cr\u00e9ation d\u2019un classe regroupant les tests unitaires et h\u00e9ritant de TestCase def test_additionner(self): Fonction d\u00e9butant par test_xxx signifiant qu\u2019elle embarque des tests unitaires self.assertEqual(     additionner(2, 2),     4,     \"2 + 2 =&gt; 4\")   Assertion v\u00e9rifiant le r\u00e9sultat retourn\u00e9 par une fonction accompagn\u00e9e d\u2019un message if name == 'main':     unittest.main() Lancement des tests, la librairie va rechercher seul les tests \u00e0 effectuer (m\u00e9thodes d\u00e9butant par test_xxx et les ex\u00e9cuter)</p> <p>Le lancement de ce script de test produira le r\u00e9sultat suivant : $ python3 -m unittest ====================================================================== FAIL: test_additionner (test_calculs_unittest.TestCalculs) Tests unitaires de la fonction additionner()</p> <p>Traceback (most recent call last):   File \"test_calculs.py\", line 21, in test_additionner     self.assertEqual(additionner(11, 5), 16, \"11 + 5 =&gt; 16\") AssertionError: 55 != 16 : 11 + 5 =&gt; 16</p> <p>Ran 5 tests in 0.001s</p> <p>FAILED (failures=1, errors=1)</p> <p>Par rapport \u00e0 la m\u00e9thode assert, on peut remarquer que : \u00b7   tous les tests ont \u00e9t\u00e9 lanc\u00e9s, le script ne s\u2019est pas arr\u00eat\u00e9 \u00e0 la premi\u00e8re erreur \u00b7   d\u2019autres m\u00e9thodes de tests que assertEqual() existent : o   assertTrue() : teste si \u00e9gal \u00e0 True o   assertIsNone() : teste si vaut None o   assertAlmostEqual() : teste si \u00e9gal avec une marge d\u2019erreur o   assertRaises() : teste si une exception est lev\u00e9e o   assertRegex() : teste une cha\u00eene de caract\u00e8res o   assertLogs() : teste si un log a bien \u00e9t\u00e9 produit</p> <p>Dans PyCharm, on retrouve un bilan plus graphique...</p> <p>...mais on peut \u00e9galement g\u00e9n\u00e9rer un rapport au format HTML ou XML en cliquant sur l\u2019ic\u00f4ne \u00e0 gauche de la roue dent\u00e9e</p> <p>La librairie unittest permet \u00e9galement d\u2019initialiser (setUp) l\u2019environnement (fixture) avant l\u2019ex\u00e9cution de chaque test et aussi de le d\u00e9sactiver (tearDown) pour le prochain. Dans cet exemple on ouvre et ferme un fichier de donn\u00e9es : class TestCalculs(unittest.TestCase):     \"\"\"Classe g\u00e9rant les tests unitaires du module calculs\"\"\"</p> \ud83d\udccb Texte<pre><code>def setUp(self):\n    \"\"\"Initialisation des tests\"\"\"\n    # Ouverture du fichier contenant le jeu de test\n    self.fichier = open(\"data.json\", \"r\")\n\ndef tearDown(self):\n    \"\"\"D\u00e9sactivation des tests\"\"\"\n    # Fermeture du fichier contenant le jeu de test\n    self.fichier.close()\n\n# ...suite de la classe tronqu\u00e9e\n</code></pre> <p>5 - Optimisation des performances 5.1 - Principe Les gains d\u2019optimisation sont souvent li\u00e9s : \u00b7   \u00e0 l\u2019algorithme utilis\u00e9 \u00b7   au langage lui m\u00eame et sa machinerie interne</p> <p>5.2 - Chronom\u00e9trage simple Le chronom\u00e9trage d\u2019une portion de code ou d\u2019une fonction peut s\u2019effectuer avec la fonction perf_counter() du module time comme ci-dessous :</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/tp/#importation-des-outils-pour-mesurer-le-temps","title":"Importation des outils pour mesurer le temps","text":"<p>import time</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/tp/#fonction-quon-souhaite-chronometrer","title":"Fonction qu'on souhaite chronom\u00e9trer","text":"<p>def additionner(limite):     somme = 0     for i in range(0, limite+1):         somme += i     return somme</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/tp/#lancement-et-chronometrage-de-la-fonction","title":"Lancement et chronom\u00e9trage de la fonction","text":"<p>debut = time.perf_counter() resultat = additionner(1000000) fin = time.perf_counter()</p>"},{"location":"T2_Programmation/2.4_Mise_au_point_de_programme/tp/#affichage-du-resultat-et-de-la-duree-dexecution","title":"Affichage du r\u00e9sultat et de la dur\u00e9e d'ex\u00e9cution","text":"<p>print(f\"La somme jusqu\u2019\u00e0 1000000 est {resultat}\") delai = fin - debut print(f\"Dur\u00e9e d'ex\u00e9cution = {delai} s\")</p> <p>5.3 - Profilage Le profilage d\u2019un code donne des r\u00e9sultats beaucoup plus complet avec pour chaque fonction : \u00b7   le temps total d\u2019ex\u00e9cution \u00b7   le nombre d\u2019appels \u00b7   la dur\u00e9e moyenne d\u2019un appel \u00b7   ...</p> <p>Le module cProfile pr\u00e9sent dans la distribution standard de Python permet de r\u00e9aliser facilement ce profilage. Il suffit de lancer l\u2019ex\u00e9cution d\u2019un script depuis un terminal comme ci-dessous : jbegood@pc:$ python3 -m cProfile ./time04.py          1001004 function calls in 14.529 seconds</p> <p>Ordered by: standard name</p> <p>ncalls  tottime  percall  cumtime  percall filename:lineno(function)           1    0.000    0.000   14.529   14.529 time04.py:1()           1    0.001    0.001   14.529   14.529 time04.py:1(faire_quelque_chose)        1000    0.180    0.000   14.529    0.015 time04.py:5(faire_autre_chose)     1000000   14.349    0.000   14.349    0.000 time04.py:9(faire_semblant)           1    0.000    0.000   14.529   14.529 {built-in method builtins.exec}           1    0.000    0.000    0.000    0.000 {method 'disable' of '_...' objects} <p>On peut noter par exemple que la fonction faire_semblant() a \u00e9t\u00e9 appel\u00e9e 1000000 de fois pour un temps total d\u2019ex\u00e9cution de 14,349s soit presque l\u2019int\u00e9gralit\u00e9 du temps d\u2019ex\u00e9cution du programme complet. C\u2019est pr\u00e9cis\u00e9ment sur cette fonction qu\u2019il faudrait focaliser les optimisations.</p>"},{"location":"T3_Algorithmique/sommaire/","title":"Sommaire","text":"<ol> <li>Diviser pour r\u00e9gner </li> <li>Programmation dynamique</li> <li>Recherche textuelle</li> </ol>"},{"location":"T3_Algorithmique/3.1_Diviser_pour_regner/cours/","title":"Diviser pour r\u00e9gner","text":""},{"location":"T3_Algorithmique/3.1_Diviser_pour_regner/cours/#1-retour-sur-lalgorithme-de-dichotomie","title":"1. Retour sur l'algorithme de dichotomie","text":"<p>Nous avons vu en classe de Premi\u00e8re l'algorithme de dichotomie (du grec dikhotomia, \u00ab division en deux parties \u00bb).</p> <p>Notre but ici est la recherche de la pr\u00e9sence (ou non) d'un \u00e9l\u00e9ment dans une liste tri\u00e9e. Notre fonction renverra donc un bool\u00e9en.</p> <p>La recherche na\u00efve (\u00e9l\u00e9ment par \u00e9l\u00e9ment) est naturellement de complexit\u00e9 lin\u00e9aire. Nous allons voir que la m\u00e9thode dichotomique est plus efficace.</p>"},{"location":"T3_Algorithmique/3.1_Diviser_pour_regner/cours/#11-version-imperative","title":"1.1 Version imp\u00e9rative","text":"<p>Dichotomie version imp\u00e9rative </p> \ud83d\udc0d Script Python<pre><code>def recherche_dichotomique(tab, val) :\n    '''\n    renvoie True ou False suivant la pr\u00e9sence de la valeur val dans le tableau tri\u00e9 tab.\n    '''\n    i_debut = 0\n    i_fin = len(tab) - 1\n    while i_debut &lt;= i_fin :\n        i_centre = (i_debut + i_fin) // 2     # (1)\n        val_centrale = tab[i_centre]          # (2) \n        if val_centrale == val:               # (3) \n            return True\n        if val_centrale &lt; val:                # (4) \n            i_debut = i_centre + 1            # (5) \n        else :\n            i_fin = i_centre - 1\n    return False\n</code></pre> <ol> <li>on prend l'indice central</li> <li>on prend la valeur centrale</li> <li>si la valeur centrale est la valeur cherch\u00e9e...</li> <li>si la valeur centrale est trop petite...</li> <li>on ne prend pas la valeur centrale qui a d\u00e9j\u00e0 \u00e9t\u00e9 test\u00e9e</li> </ol> <p>Exemple d'utilisation :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tab = [1, 5, 7, 9, 12, 13]\n&gt;&gt;&gt; recherche_dichotomique(tab, 12)\nTrue\n&gt;&gt;&gt; recherche_dichotomique(tab, 17)\nFalse\n</code></pre> <p>\u00c0 chaque tour de la boucle <code>while</code>, la taille de la liste est divis\u00e9e par 2. Ceci conf\u00e8re \u00e0 cet algorithme une complexit\u00e9 logarithmique (bien meilleure qu'une complexit\u00e9 lin\u00e9aire).</p>"},{"location":"T3_Algorithmique/3.1_Diviser_pour_regner/cours/#12-version-recursive","title":"1.2 Version r\u00e9cursive","text":""},{"location":"T3_Algorithmique/3.1_Diviser_pour_regner/cours/#121-preambule-le-slicing","title":"1.2.1 Pr\u00e9ambule : le slicing","text":"<p>Pour \u00e9crire simplement la version r\u00e9cursive de cet algorithme, nous allons avoir besoin de faire du slicing (d\u00e9coupage) de listes. Cette manipulation n'est pas au programme de NSI (m\u00eame si elle est tr\u00e8s simple). Attention, elle a un co\u00fbt algorithmique important, qui peut fausser notre analyse de complexit\u00e9.</p> <p>Exemples de slicing :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; lst = ['a', 'b', 'c', 'd', 'e']\n&gt;&gt;&gt; lst[:2]\n['a', 'b']\n&gt;&gt;&gt; lst[2:]\n['c', 'd', 'e']\n</code></pre> <p>On comprend que  :</p> <ul> <li><code>lst[:k]</code> va renvoyer la sous-liste compos\u00e9e du premier \u00e9l\u00e9ment jusqu'\u00e0 celui d'indice <code>k</code> non inclus.</li> <li><code>lst[k:]</code> va renvoyer la sous-liste compos\u00e9e du <code>k</code>-i\u00e8me \u00e9l\u00e9ment (inclus) jusqu'au dernier.</li> <li>plus g\u00e9n\u00e9ralement, <code>lst[k:p]</code> va renvoyer la sous-liste compos\u00e9e du <code>k</code>-i\u00e8me \u00e9l\u00e9ment (inclus) jusqu'au <code>p</code>-i\u00e8me (non inclus).</li> </ul>"},{"location":"T3_Algorithmique/3.1_Diviser_pour_regner/cours/#122-dichotomie-recursive-avec-slicing","title":"1.2.2 Dichotomie r\u00e9cursive avec slicing","text":"<p>Dichotomie version r\u00e9cursive avec slicing </p> \ud83d\udc0d Script Python<pre><code>def dichotomie_rec(tab, val):\n    if len(tab) == 0:\n        return False\n    i_centre = len(tab) // 2\n    if tab[i_centre] == val:\n        return True\n    if tab[i_centre] &lt; val:\n        return dichotomie_rec(tab[i_centre + 1:], val) # (1)\n    else:\n        return dichotomie_rec(tab[:i_centre], val)  # (2)\n</code></pre> <ol> <li>On prend la partie droite de liste, juste apr\u00e8s l'indice central.</li> <li>On prend la partie gauche de liste, juste avant l'indice central.</li> </ol> <p>Exemple d'utilisation :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tab = [1, 5, 7, 9, 12, 13]\n&gt;&gt;&gt; dichotomie_rec(tab, 12)\nTrue\n&gt;&gt;&gt; dichotomie_rec(tab, 17)\nFalse\n</code></pre> Visualisation gr\u00e2ce \u00e0 PythonTutor: <p> </p>"},{"location":"T3_Algorithmique/3.1_Diviser_pour_regner/cours/#123-dichotomie-recursive-sans-slicing","title":"1.2.3 Dichotomie r\u00e9cursive sans slicing","text":"<p>Il est possible de programmer de mani\u00e8re r\u00e9cursive la recherche dichotomique sans toucher \u00e0 la liste, et donc en jouant uniquement sur les indices :</p> <p>Dichotomie version r\u00e9cursive sans slicing </p> \ud83d\udc0d Script Python<pre><code>def dicho_rec_2(tab, val, i=0, j=None): # (1)\n    if j is None:                       # (2)\n        j = len(tab)-1\n    if i &gt; j :\n        return False\n    m = (i + j) // 2\n    if tab[m] &lt; val :\n        return dicho_rec_2(tab, val, m + 1, j)\n    elif tab[m] &gt; val :\n        return dicho_rec_2(tab, val, i, m - 1 )\n    else :\n        return True\n</code></pre> <ol> <li>Pour pouvoir appeler simplement la fonction sans avoir \u00e0 pr\u00e9ciser les indices, on leur donne des param\u00e8tres par d\u00e9faut.</li> <li>Il est impossible de donner <code>j=len(tab)-1</code> par d\u00e9faut (car <code>tab</code> est aussi un param\u00e8tre). On passe donc par une autre valeur (ici <code>None</code>) qu'on va ici intercepter.</li> </ol> <p>Exemple d'utilisation :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tab = [1, 5, 7, 9, 12, 13]\n&gt;&gt;&gt; dicho_rec_2(tab, 12)\nTrue\n&gt;&gt;&gt; dicho_rec_2(tab, 17)\nFalse\n</code></pre>"},{"location":"T3_Algorithmique/3.1_Diviser_pour_regner/cours/#2-diviser-pour-regner","title":"2. Diviser pour r\u00e9gner","text":"<p>Les algorithmes de dichotomie pr\u00e9sent\u00e9s ci-dessous ont tous en commun de diviser par deux la taille des donn\u00e9es de travail \u00e0 chaque \u00e9tape. Cette m\u00e9thode de r\u00e9solution d'un probl\u00e8me est connue sous le nom de diviser pour r\u00e9gner, ou divide and conquer en anglais.  </p> <p>Une d\u00e9finition pourrait \u00eatre :</p> <p>D\u00e9finition </p> <p>Un probl\u00e8me peut se r\u00e9soudre en employant le paradigme diviser pour r\u00e9gner lorsque : - il est possible de d\u00e9composer ce probl\u00e8me en sous-probl\u00e8mes ind\u00e9pendants. - la taille de ces sous-probl\u00e8mes est une fraction du probl\u00e8me initial</p> <p>Remarques :</p> <ul> <li>Les sous-probl\u00e8mes peuvent n\u00e9cessiter d'\u00eatre ensuite recombin\u00e9s entre eux (voir plus loin le tri fusion).</li> <li> <p>Consid\u00e9rons de l'\u00e9criture r\u00e9cursive de la fonction <code>factorielle</code> ci-dessous : \ud83d\udc0d Script Python<pre><code>def factorielle(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorielle(n-1)\n</code></pre> On ne peut pas parler ici de diviser pour r\u00e9gner car la taille des donn\u00e9es \u00e0 traiter est pass\u00e9e de n \u00e0 n-1. C'est bien une diminution (qui fait que l'algorithme fonctionne) mais il n'y a pas de division de la taille des donn\u00e9es. C'est cette division (par 2 dans le cas de la dichotomie) qui donne son efficacit\u00e9 \u00e0 ce paradigme.</p> </li> <li> <p>Le paradigme diviser pour r\u00e9gner va naturellement amener \u00e0 r\u00e9diger des programmes r\u00e9cursifs.</p> </li> </ul>"},{"location":"T3_Algorithmique/3.1_Diviser_pour_regner/cours/#3-lexponentiation-rapide","title":"3. L'exponentiation rapide","text":"<p>On appelle exponentiation le fait de mettre en puissance un nombre. On va donc coder, de deux mani\u00e8res diff\u00e9rentes, la puissance d'un nombre.</p>"},{"location":"T3_Algorithmique/3.1_Diviser_pour_regner/cours/#31-algorithme-classique","title":"3.1 Algorithme classique","text":"<p>Exponentiation classique </p> \ud83d\udc0d Script Python<pre><code>def puissance(a, n):\n    if n == 0:\n        return 1\n    else:\n        return a * puissance(a, n-1)\n</code></pre>"},{"location":"T3_Algorithmique/3.1_Diviser_pour_regner/cours/#32-algorithme-utilisant-diviser-pour-regner","title":"3.2 Algorithme utilisant diviser pour r\u00e9gner","text":"<p>Nous allons nous appuyer sur la remarque math\u00e9matique suivante : Pour tout nombre \\(a\\), </p> <ul> <li> <p>si \\(n\\) est pair, \\(a^n = (a^2)^{\\frac{n}{2}}\\)</p> </li> <li> <p>si \\(n\\) est impair, \\(a^n = a \\times a^{n-1} = a \\times (a^2)^{\\frac{n-1}{2}}\\)</p> </li> </ul> <p>Ainsi, dans le cas o\u00f9 \\(n\\) est pair, il suffit d'\u00e9lever \\(a\\) au carr\u00e9 (une seule op\u00e9ration) pour que l'exposant diminue de moiti\u00e9. On peut donc programmer la fonction <code>puissance</code>  en utilisant le paradigme diviser pour r\u00e9gner : </p> <p>Exponentiation rapide </p> \ud83d\udc0d Script Python<pre><code>def puissance_mod(a, n):\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n        return puissance_mod(a*a, n//2)\n    else:\n        return a * puissance_mod(a*a, (n-1)//2)\n</code></pre>"},{"location":"T3_Algorithmique/3.1_Diviser_pour_regner/cours/#33-comparaison-de-la-vitesse-dexecution-des-deux-algorithmes","title":"3.3 Comparaison de la vitesse d'ex\u00e9cution des deux algorithmes","text":"<p>Exercice</p> \u00c9nonc\u00e9Correction <p>Recr\u00e9er le graphique ci-dessus, qui compare les temps d'ex\u00e9cution des deux fonctions <code>puissance</code> et <code>puissance_mod</code>.</p> <p>Aide pour Matplotlib : le code ci-dessous</p> \ud83d\udc0d Script Python<pre><code>import matplotlib.pyplot as plt\n\ndef carre(x):\n    return x*x\n\nx = list(range(10))\ny = [carre(k) for k in x]\nplt.plot(x, y)\nplt.show()\n</code></pre> <p>donne le graphique suivant :</p> <p></p> \ud83d\udc0d Script Python<pre><code>import matplotlib.pyplot as plt\nimport timeit\n\ndef puissance(a, n):\n    if n == 0:\n        return 1\n    else:\n        return a * puissance(a, n-1)\n\ndef puissance_mod(a, n):\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n        return puissance_mod(a*a, n//2)\n    else:\n        return a * puissance_mod(a*a, (n-1)//2)\n\ndef calcule_tps_normal(n):\n    return timeit.timeit(lambda: puissance(3, n), number=1000)\n\ndef calcule_tps_rapide(n):\n    return timeit.timeit(lambda: puissance_mod(3, n), number=1000)\n\nx = list(range(0, 200, 1))   #[0, ..., 200]\ny = [calcule_tps_normal(k) for k in x]  \ny_2 = [calcule_tps_rapide(k) for k in x]  \nplt.plot(x, y)\nplt.plot(x, y_2)\nplt.show()\n</code></pre>"},{"location":"T3_Algorithmique/3.1_Diviser_pour_regner/cours/#4-le-tri-fusion","title":"4. Le tri-fusion","text":"<p>En anglais le merge sort.</p> <p></p>"},{"location":"T3_Algorithmique/3.1_Diviser_pour_regner/cours/#41-preambule-linterclassement","title":"4.1 Preambule : l'interclassement","text":"<p>Le m\u00e9canisme principal du tri fusion est la fusion de deux listes tri\u00e9es en une nouvelle liste elle aussi tri\u00e9e.</p> <p>On appelera ce m\u00e9canisme l'interclassement.</p> <p>Principe de l'interclassement de deux listes <code>lst1</code> et <code>lst2</code>.</p> <ul> <li>on part d'une liste vide <code>lst_totale</code></li> <li>on y ajoute alternativement les \u00e9l\u00e9ments de <code>lst1</code> et <code>lst2</code>. Il faut pour cela g\u00e9rer s\u00e9par\u00e9ment un indice <code>i1</code> pour la liste <code>lst1</code>  et un indice <code>i2</code>  pour la liste <code>i2</code>.</li> <li>quand une liste est \u00e9puis\u00e9e, on y ajoute la totalit\u00e9 restante de l'autre liste.</li> </ul> <p>Exercice</p> \u00c9nonc\u00e9Correction <p>Coder la fonction <code>interclassement</code>. </p> \ud83d\udc0d Script Python<pre><code>def interclassement(lst1, lst2):\n    i1 = 0\n    i2 = 0\n    lst_totale = []\n    while i1 != len(lst1) and i2 != len(lst2):\n        if lst1[i1] &lt; lst2[i2]:\n            lst_totale.append(lst1[i1])\n            i1 += 1\n        else:\n            lst_totale.append(lst2[i2])\n            i2 += 1\n    return lst_totale + lst1[i1:] + lst2[i2:]\n</code></pre>"},{"location":"T3_Algorithmique/3.1_Diviser_pour_regner/cours/#42-la-fusion","title":"4.2 La fusion","text":""},{"location":"T3_Algorithmique/3.1_Diviser_pour_regner/cours/#421-principe","title":"4.2.1 Principe","text":"<p>L'id\u00e9e du tri fusion est le d\u00e9coupage de la liste originale en une multitude de listes ne contenant qu'un seul \u00e9l\u00e9ment. Ces listes \u00e9l\u00e9mentaires seront ensuite interclass\u00e9es avec la fonction pr\u00e9c\u00e9dente.</p> <p></p> <p>Principe de l'algorithme du tri fusion :</p> <ul> <li>pour trier une liste, on interclasse les deux moiti\u00e9s de cette liste, pr\u00e9c\u00e9d\u00e9mment elles-m\u00eames tri\u00e9es par le tri fusion.</li> <li>si une liste \u00e0 trier est r\u00e9duite \u00e0 un \u00e9l\u00e9ment, elle est d\u00e9j\u00e0 tri\u00e9e. </li> </ul>"},{"location":"T3_Algorithmique/3.1_Diviser_pour_regner/cours/#422-implementation","title":"4.2.2 Impl\u00e9mentation","text":"<p>La grande force de ce tri va \u00eatre qu'il se programme simplement de mani\u00e8re r\u00e9cursive, en appelant \u00e0 chaque \u00e9tape la m\u00eame fonction mais avec une taille de liste divis\u00e9e par deux, ce qui justifie son classement parmi les algorithmes utilisants \u00abdiviser pour r\u00e9gner\u00bb.</p> <p>Algorithme de tri fusion (merge sort)  </p> \ud83d\udc0d Script Python<pre><code>def interclassement(lst1, lst2):\n    lst_totale = []\n    n1, n2 = len(lst1), len(lst2)\n    i1, i2 = 0, 0\n    while i1 &lt; n1 and i2 &lt; n2:\n        if lst1[i1] &lt; lst2[i2]:\n            lst_totale.append(lst1[i1])\n            i1 += 1\n        else:\n            lst_totale.append(lst2[i2])\n            i2 += 1\n    return lst_totale + lst1[i1:] + lst2[i2:]\n\ndef tri_fusion(lst):\n    if len(lst) &lt;= 1:\n        return lst\n    else:\n        m = len(lst) // 2\n        return interclassement(tri_fusion(lst[:m]), tri_fusion(lst[m:]))\n</code></pre>"},{"location":"T3_Algorithmique/3.1_Diviser_pour_regner/cours/#423-visualisation","title":"4.2.3 Visualisation","text":"<p>Une erreur classique avec les fonctions r\u00e9cursives est de consid\u00e9rer que les appels r\u00e9cursifs sont simultan\u00e9s. Ceci est faux ! L'animation suivante montre la progression du tri :</p> <p></p> <p>Il est aussi conseill\u00e9 d'observer l'\u00e9volution de l'algorithme gr\u00e2ce \u00e0 PythonTutor :</p>"},{"location":"T3_Algorithmique/3.1_Diviser_pour_regner/cours/#43-complexite","title":"4.3 Complexit\u00e9","text":"<p>La division par 2 de la taille de la liste pourrait nous amener \u00e0 penser que le tri fusion est de complexit\u00e9 logarithmique, comme l'algorithme de dichotomie. Il n'en est rien.</p> <p>En effet, l'instruction finale <code>interclassement(tri_fusion(lst[:m]), tri_fusion(lst[m:]))</code> lance deux appels \u00e0 la fonction <code>tri_fusion</code> (avec certe des donn\u00e9es d'entr\u00e9e deux fois plus petites).</p> <p>On peut montrer que :</p> <p>Complexit\u00e9 du tri fusion </p> <p>L'algorithme de tri fusion est en \\(O(n \\log n)\\).</p> <p>On dit qu'il est semi-logarithmique.</p> <p>Une complexit\u00e9 semi-logarithmique (en \\(O(n \\log n)\\)) se situe \u00abentre\u00bb une complexit\u00e9 lin\u00e9aire (en \\(O(n)\\)) et une complexit\u00e9 quadratique (en \\(O(n^2)\\)).</p> <p></p> <p>Une jolie animation permettant de comparer les tris :</p> <p></p> <p>Issue de ce site</p>"},{"location":"T3_Algorithmique/3.1_Diviser_pour_regner/exercices/","title":"Exercices","text":"<p>Exercice 1 : Tri Fusion : application</p> Enonc\u00e9Correction <p>D\u00e9taillez les \u00e9tapes du tri fusion sur le tableau [23, 17, 28, 11, 20, 22, 19, 16]. D\u00e9terminez le nombre de comparaisons effectu\u00e9es durant les \u00e9tapes de fusion. Combien faudrait-il faire de comparaisons avec l'algorithme de tri par s\u00e9lection ?</p> <p></p> <p>D\u00e9terminez le nombre de comparaisons effectu\u00e9es durant les \u00e9tapes de fusion. Pour fusionner les tableaux de taille 1, il en faut 4\u00d71 = 4. Pour fusionner les tableaux de taille 2, il en faut 3 + 2 = 5. Pour fusionner les tableaux de taille 4, il en faut 6. Ce qui donne un total de 4 + 5 + 6 = 15 comparaisons.</p> <p>Combien faudrait-il faire de comparaisons avec l'algorithme de tri par s\u00e9lection ? Il en faut 7 + 6 + 5 + 4 + 3 + 2 + 1 = 28.</p> <p>Exercice 2 : Tri Fusion : application</p> Enonc\u00e9Correction <p>D\u00e9taillez les \u00e9tapes du tri fusion sur le tableau [68, 46, 27, 54, 32]. D\u00e9terminez le nombre de comparaisons effectu\u00e9es durant les \u00e9tapes de fusion. Combien faudrait-il faire de comparaisons avec l'algorithme de tri par s\u00e9lection ?</p> <p></p> <p>D\u00e9terminez le nombre de comparaisons effectu\u00e9es durant les \u00e9tapes de fusion. Pour fusionner [68] avec [46] et [54] avec [32], il en faut 2\u00d71 = 2. Pour fusionner [27] avec [32, 54], il en faut 1 seule. Pour fusionner [46, 68] avec [27, 32, 54], il en faut 4. Ce qui donne un total de 2 + 1 + 4 = 7 comparaisons.</p> <p>** Combien faudrait-il faire de comparaisons avec l'algorithme de tri par s\u00e9lection ?** Il en faut 4 + 3 + 2 + 1 = 10.</p> <p>Exercice 3 </p> Enonc\u00e9Correction <p>On consid\u00e8re la fonction <code>rechercher(x,T,debut,fin)</code> de recherche, entre debut et fin inclus, de l'indice d'un \u00e9l\u00e9ment <code>x</code> dans un tableau <code>T</code> tri\u00e9 suivant l'ordre croissant.</p> <p>\ud83d\udc0d Script Python<pre><code>def rechercher(x, T, debut, fin):\n\"\"\" Renvoie l'indice de x, entre debut et fin, dans le tableau tri\u00e9 dans l'ordre croissant T, et -1 sinon. \"\"\"\n    while debut &lt;= fin:\n        milieu = (debut + fin) // 2\n        if x == T[milieu]:\n            return milieu\n        elif x &lt; T[milieu]:\n            fin = milieu - 1\n        else:\n            debut = milieu + 1\n    return -1\n\ndef indice(x, L):\n    return rechercher(x, L, 0, len(L)-1)\n\npremiers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59]\nprint(indice(19, premiers))\n&gt;&gt; 7 \nprint(indice(51, premiers))\n&gt;&gt; 1\n</code></pre> De quel algorithme s'agit-il ?  En quoi cet algorithme rel\u00e8ve-t-il du paradigme diviser-pour-r\u00e9gner ? R\u00e9\u00e9crire la fonction <code>rechercher(x,T,debut,fin)</code> sous la forme r\u00e9cursive.</p> <p>De quel algorithme s'agit-il ?  Il s'agit d'une impl\u00e9mentation it\u00e9rative de la recherche dichotomique. En quoi cet algorithme rel\u00e8ve-t-il du paradigme diviser-pour-r\u00e9gner ? L'algorithme de recherche dichotomique divise l'intervalle de recherche en deux sous-intervalles disjoints <code>([debut;milieu-1] et [milieu+1;fin])</code> et d\u00e9termine, au moyen d'une comparaison, le sous-intervalle sur lequel il convient de poursuivre cette recherche pour trouver la r\u00e9ponse (l'indice de l'\u00e9l\u00e9ment recherch\u00e9). L'algorithme proc\u00e8de donc par division en sous probl\u00e8mes ind\u00e9pendants, qu'il r\u00e9sout en combinant les r\u00e9ponses (en poursuivant la recherche sur le seul sous-intervalle pertinent, capable de fournir la r\u00e9ponse si elle existe)</p> \ud83d\udc0d Script Python<pre><code>def rechercher(x, T, debut, fin):\n    if debut &gt; fin:\n        return -1\n    else:\n        milieu = (debut + fin) // 2\n        if x == T[milieu]:\n            return milieu\n        elif x &lt; T[milieu]:\n            return rechercher(x, T, debut, milieu - 1)\n        else:\n            return rechercher(x, T, milieu + 1, fin)\n</code></pre> <p>Exercice 4 : couple (minimum, maximum)</p> AlgorithmeCorrection <p>Recherche du couple (minimum, maximum) dans un tableau avec une m\u00e9thode \u00ab diviser pour r\u00e9gner \u00bb  On scindera le tableau en deux parties et on effectuera la recherche r\u00e9cursivement. Si le tableau a une taille de 2, alors le couple <code>(minimum, maximum)</code> s\u2019obtient directement par comparaison  des deux valeurs. Si le tableau a une taille de 1, alors le couple <code>(minimum, maximum)</code> est compos\u00e9 de deux fois l\u2019unique  valeur du tableau. Lors de la phase de combinaison, on comparera les r\u00e9sultats \u00ab remontant \u00bb de la r\u00e9cursivit\u00e9 pour obtenir le  r\u00e9sultat.</p> <p> Impl\u00e9menter cet algorithme   Donner la complexit\u00e9 de l\u2019algorithme. Remarque : ceux qui sont \u00e0 l\u2019aise essaieront autant que possible de ne pas utiliser de slices, mais plut\u00f4t des indices de d\u00e9but et de fin. Ceci pour des raisons d\u2019efficacit\u00e9 lors de l\u2019impl\u00e9mentation.</p> \ud83d\udc0d Script Python<pre><code>from random import randint\n\nliste = []\nfor i in range(0, 30):\n    liste.append(randint(1,100))\n\nprint(liste)\n\ndef min_et_max(T):\n    if len(T) == 1:\n        return (T[0], T[0])\n    elif len(T) == 2:\n        if T[0] &lt; T[1]:\n            return (T[0], T[1])\n        else:\n            return (T[1], T[0])\n    else:\n        m = len(T) // 2\n        min1, max1 = min_et_max(T[:m])\n        min2, max2 = min_et_max(T[m:])\n        return min(min1, min2), max(max1, max2)\n\nprint(min_et_max(liste))\n</code></pre> <p>Exercice 5 : Quick sort (facultatif)</p> Algorithme (pas au programme de terminale, mais un des tris les plus efficaceCorrection <p>Le tri rapide (quicksort en anglais) est un algorithme de tri g\u00e9n\u00e9ralement tr\u00e8s rapide qui met en oeuvre le paradigme diviser-pour-r\u00e9gner suivant l'algorithme :  \u2022 Lorsqu'un tableau est vide ou ne contient qu'un \u00e9l\u00e9ment, il est d\u00e9j\u00e0 tri\u00e9. \u2022 Sinon :     o Prendre l'\u00e9l\u00e9ment (appel\u00e9 pivot) situ\u00e9 au milieu du tableau T \u00e0 trier.     o Cr\u00e9er le tableau Tinf des \u00e9l\u00e9ments de T strictement inf\u00e9rieurs au pivot.     o Cr\u00e9er le tableau Tpivot des \u00e9l\u00e9ments de T \u00e9gaux au pivot.     o Cr\u00e9er le tableau Tsup des \u00e9l\u00e9ments strictement sup\u00e9rieurs au pivot.     o Le tableau tri\u00e9 est obtenu par la concat\u00e9nation des trois tableaux :     Tinf tri\u00e9, Tpivot non tri\u00e9 et Tsup tri\u00e9 suivant le m\u00eame algorithme.</p> <p> Impl\u00e9mentez le tri rapide sous la forme d'une fonction r\u00e9cursive tri_rapide()</p> <p></p> <p>@Credits: fullyunderstood.com et codescope.com</p> \ud83d\udc0d Script Python<pre><code>from random import randint\n\nliste = []\nfor i in range(0, 30):\n    liste.append(randint(1,100))\n\nprint(liste)\n\ndef triRapide(liste):\n    \"\"\"\n    fonction qui initialise la fonction r\u00e9cursive de tri rapide d'une liste.\n    \"\"\"\n    trier(liste, 0, len(liste+1))\n\ndef trier(liste, indiceDebut, indiceFin):\n    \"\"\"\n    fonction r\u00e9cursive qui trie une liste en utilisant la m\u00e9thode trie rapide.\n    \"\"\"\n    if (indiceFin &lt;= indiceDebut):\n        return \n    indicePivot = randint(indiceDebut, indiceFin)\n    pivot = liste[indicePivot]\n    indicePivot = partitionner(liste, pivot, indiceDebut, indicePivot, indiceFin)\n    trier(liste, indiceDebut, indicePivot-1)\n    trier(liste, indicePivot+1, indiceFin)\n\ndef partitionner(liste, pivot, indiceDebut, indicePivot, indiceFin):\n    \"\"\"\n    fonction qui partitionne une liste en fonction d'un pivot en mettant \u00e0 gauche\n    du pivot les \u00e9l\u00e9ments plus petits que le pivot et \u00e0 droite les \u00e9l\u00e9ments plus\n    grand. L'indice du pivot est susceptible d'\u00eatre modifi\u00e9 au cours du traitement ;\n    il est donc renvoy\u00e9 par cette fonction.\n    \"\"\"\n    termine = False\n    indiceCourant = indiceDebut\n    while indiceCourant &lt;= indiceFin:\n        if liste[indiceCourant] &gt; pivot and indiceCourant &lt; indicePivot:\n            liste[indicePivot] = liste[indiceCourant]\n            liste[indiceCourant] = liste[indicePivot-1]\n            liste[indicePivot-1] = pivot\n            indicePivot = indicePivot - 1\n        elif liste[indiceCourant] &lt; pivot and indiceCourant &gt; indicePivot:\n            liste[indicePivot] = liste[indiceCourant]\n            liste[indiceCourant] = liste[indicePivot+1]\n            liste[indicePivot+1] = pivot\n            indicePivot = indicePivot + 1\n        else:\n            indiceCourant = indiceCourant + 1\n    return indicePivot\n\ntriRapide(liste)\nprint(liste)\n</code></pre>"},{"location":"T3_Algorithmique/3.1_Diviser_pour_regner/data/mesures_comparees/","title":"Mesures comparees","text":"In\u00a0[\u00a0]: Copied! <pre>import time\n</pre> import time In\u00a0[\u00a0]: Copied! <pre>import matplotlib.pyplot as plt\n</pre> import matplotlib.pyplot as plt In\u00a0[\u00a0]: Copied! <pre>def puissance(a, n):\n    if n == 0:\n        return 1\n    else:\n        return a * puissance(a, n-1)\n</pre> def puissance(a, n):     if n == 0:         return 1     else:         return a * puissance(a, n-1) In\u00a0[\u00a0]: Copied! <pre>def puissance_mod(a, n):\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n        return puissance_mod(a*a, n//2)\n    else:\n        return a * puissance_mod(a*a, (n-1)//2)\n</pre> def puissance_mod(a, n):     if n == 0:         return 1     if n % 2 == 0:         return puissance_mod(a*a, n//2)     else:         return a * puissance_mod(a*a, (n-1)//2) In\u00a0[\u00a0]: Copied! <pre>def mesure(n):\n    t0 = time.time()\n    h = puissance(3,n)\n    return time.time() - t0\n</pre> def mesure(n):     t0 = time.time()     h = puissance(3,n)     return time.time() - t0 In\u00a0[\u00a0]: Copied! <pre>def mesure_mod(n):\n    t0 = time.time()\n    h = puissance_mod(3,n)\n    return time.time() - t0\n</pre> def mesure_mod(n):     t0 = time.time()     h = puissance_mod(3,n)     return time.time() - t0 In\u00a0[\u00a0]: Copied! <pre>def moy_mesure(n, nb):\n    s = []\n    for k in range(nb):\n        s.append(mesure(n))\n    s.sort()\n    ns = s[10:40]\n    return sum(ns)/len(ns)\n</pre> def moy_mesure(n, nb):     s = []     for k in range(nb):         s.append(mesure(n))     s.sort()     ns = s[10:40]     return sum(ns)/len(ns) In\u00a0[\u00a0]: Copied! <pre>nmes = 100\nsig = 10\n</pre> nmes = 100 sig = 10 In\u00a0[\u00a0]: Copied! <pre>def moy_mesure_mod(n, nb):\n    s = []\n    for k in range(nb):\n        s.append(mesure_mod(n))\n    s.sort()\n    delta = int(nmes*sig/100)\n    \n    k1 = delta\n    k2 = nmes - delta\n    ns = s[k1:k2]\n    return sum(ns)/len(ns)\n</pre> def moy_mesure_mod(n, nb):     s = []     for k in range(nb):         s.append(mesure_mod(n))     s.sort()     delta = int(nmes*sig/100)          k1 = delta     k2 = nmes - delta     ns = s[k1:k2]     return sum(ns)/len(ns) In\u00a0[\u00a0]: Copied! <pre>x = list(range(200))\ny = [moy_mesure(mx,nmes) for mx in x]\ny_mod = [moy_mesure_mod(mx,nmes) for mx in x]\nplt.plot(x,y, label = \"puissance(3, n)\")\nplt.plot(x,y_mod,  label = \"puissance_mod(3, n)\")\nplt.legend(loc=\"upper left\")\nplt.xlabel(\"valeur de l'exposant n\")\nplt.ylabel(\"temps moyen (s)\")\nplt.title(\"Comparaison du temps moyen d'ex\u00e9cution\")\nplt.show()\nplt.save(\"test.png\")\n</pre> x = list(range(200)) y = [moy_mesure(mx,nmes) for mx in x] y_mod = [moy_mesure_mod(mx,nmes) for mx in x] plt.plot(x,y, label = \"puissance(3, n)\") plt.plot(x,y_mod,  label = \"puissance_mod(3, n)\") plt.legend(loc=\"upper left\") plt.xlabel(\"valeur de l'exposant n\") plt.ylabel(\"temps moyen (s)\") plt.title(\"Comparaison du temps moyen d'ex\u00e9cution\") plt.show() plt.save(\"test.png\")"},{"location":"T3_Algorithmique/3.2_Programmation_dynamique/TP_pyramides/","title":"Optimisation d'une somme dans une pyramide","text":"<p>Probl\u00e8me</p> <p>Consid\u00e9rons la pyramide ci-dessous :</p> <p></p> <p>En partant du sommet et en descendant jusqu'en bas en prenant soit \u00e0 gauche soit \u00e0 droite, quelle est la somme maximale que l'on peut obtenir ?</p> <p></p>"},{"location":"T3_Algorithmique/3.2_Programmation_dynamique/TP_pyramides/#1-quelques-outils","title":"1. Quelques outils","text":"<p> La pyramide ci-dessus sera impl\u00e9ment\u00e9e par une liste de listes :</p> \ud83d\udc0d Script Python<pre><code>pyr_exemple = [[3], [5, 4], [1, 2, 9], [2, 6, 5, 3], [5, 8, 9, 7, 9]]\n</code></pre> <p> Pour g\u00e9n\u00e9rer une pyramide de hauteur <code>n</code> (compos\u00e9e d'entiers al\u00e9atoires entre 0 et 9) :</p> \ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef genere_pyr(n):\n    pyr = []\n    for k in range(1, n+1):\n        lst = [randint(0,9) for _ in range(k)]\n        pyr.append(lst)\n    return pyr\n</code></pre> <p> Pour afficher une pyramide en console : \ud83d\udc0d Script Python<pre><code>def affiche(pyr):\n    for lst in pyr:\n        print(\" \"*(len(pyr)-len(lst)) + \" \".join(str(k) for k in lst))\n</code></pre></p> <p>exercice 1</p> <p>Cr\u00e9er puis afficher une pyramide de hauteur 10.</p> Correction \ud83d\udccb Texte<pre><code>```python\n&gt;&gt;&gt; pyr = genere_pyr(10)\n&gt;&gt;&gt; affiche(pyr)\n         9\n        9 2\n       8 1 7\n      4 0 4 0\n     3 4 5 7 8\n    4 4 7 5 8 4\n   7 8 1 6 0 6 0\n  4 3 2 0 8 2 5 8\n 6 0 7 9 0 9 9 0 8\n3 1 7 9 2 6 9 6 5 9                    \n```\n</code></pre>"},{"location":"T3_Algorithmique/3.2_Programmation_dynamique/TP_pyramides/#2-recherche-par-force-brute","title":"2. Recherche par force brute","text":""},{"location":"T3_Algorithmique/3.2_Programmation_dynamique/TP_pyramides/#21-liste-de-tous-les-parcours","title":"2.1 Liste de tous les parcours","text":"<p>La fonction <code>liste_parcours</code>  ci-dessous renvoie la liste de tous les trajets possibles lors de la travers\u00e9e de la pyramide <code>pyr</code>. Ces parcours contiennent les indices des valeurs travers\u00e9es lors du parcours.</p> \ud83d\udc0d Script Python<pre><code>def liste_parcours(pyr):\n    file = [[0]]\n    parcours = []\n    while file:\n        trajet = file.pop(0)\n        j = trajet[-1]\n        trajet_left = trajet[::]\n        trajet_right = trajet[::]\n        niv = len(trajet)\n        trajet_left.append(j)\n        trajet_right.append(j+1)\n        if len(trajet_left) == len(pyr):\n            parcours.append(trajet_left)\n        else:\n            file.append(trajet_left)\n        if len(trajet_right) == len(pyr):\n            parcours.append(trajet_right)\n        else:\n            file.append(trajet_right)\n    return parcours\n</code></pre> <p>exercice 2</p> <ol> <li>Observez la liste des trajets pour la pyramide <code>pyr_exemple</code> pour en comprendre la notation.</li> <li>Pour une pyramide de hauteur \\(n\\), combien y a-t-il de trajets diff\u00e9rents ? </li> <li>Pour une pyramide de hauteur 41, que pensez-vous du nombre de trajets diff\u00e9rents ?</li> </ol> Correction <p>Le nombre de trajets pour une hauteur \\(n\\) est \\(2^{n-1}\\).</p> <p>Pour une pyramide de hauteur 41, cela donne \\(2^{40}\\), soit plus de mille milliards de chemins possibles...</p>"},{"location":"T3_Algorithmique/3.2_Programmation_dynamique/TP_pyramides/#22-valeur-dun-trajet","title":"2.2 Valeur d'un trajet","text":"<p>exercice 3</p> <p>\u00c9crire une fonction <code>val_trajet</code> qui prend en param\u00e8tres un trajet <code>trajet</code> et une pyramide <code>pyr</code> et qui renvoie la somme finale \u00e0 l'issue de ce trajet.</p> Correction \ud83d\udc0d Script Python<pre><code>def val_trajet(trajet, pyr):\n    s = 0\n    for i in range(len(trajet)):\n        s += pyr[i][trajet[i]]\n    return s\n</code></pre>"},{"location":"T3_Algorithmique/3.2_Programmation_dynamique/TP_pyramides/#23-somme-maximale-par-force-brute","title":"2.3 Somme maximale par force brute","text":"<p>R\u00e9vision : max</p> enonc\u00e9 <p>Ecrire la fonction <code>maxi</code> qui prend en param\u00e8tre une liste non vide d'entier et qui renvoie un tuple correspondant \u00e0 au maximum de cette liste et son indice</p> Correction \ud83d\udc0d Script Python<pre><code>def maxi(li):\nmax = li[0]\nimaxi = 0\nfor k in range(len(li)):\n    if li[k] &gt; max:\n        max = li[k]\n        imaxi = k\nreturn (max,imaxi)\n</code></pre> <p>exercice 4.1</p> <p>Q1. \u00c9crire une fonction <code>max_force_brute</code> qui prend en param\u00e8tre une pyramide <code>pyr</code> et qui renvoie la somme maximale parmi tous les trajets possibles.</p> Correction \ud83d\udc0d Script Python<pre><code>def max_force_brute(pyr):\n    trajets = liste_parcours(pyr)\n    m = 0\n    for tr in trajets:\n        v = val_trajet(tr, pyr)\n        if v &gt; m:\n               m = v\n    return m\n</code></pre> <p>exercice 4.1</p> <p>Q2. Testez votre algorithme avec <code>pyr_exemple</code>, ainsi qu'avec des pyramides de taille sup\u00e9rieure. Que se passe-t-il ?</p> Correction <p>Notre algorithme donne bien la bonne solution pour <code>pyr_exemple</code>, mais d\u00e8s que la taille de la pyramide augmente, le temps d'ex\u00e9cution devient beaucoup trop long et notre programme inutilisable.</p>"},{"location":"T3_Algorithmique/3.2_Programmation_dynamique/TP_pyramides/#3-recherche-par-methode-gloutonne","title":"3. Recherche par m\u00e9thode gloutonne","text":"<p>Notre algorithme de force brute n'\u00e9tant pas utilisable, il va falloir essayer d'\u00eatre plus efficace. Pourquoi ne pas chercher une m\u00e9thode gloutonne ?</p> <p>Rappel :  lors du parcours d'une pyramide, les deux cases sous la case <code>[i][j]</code> sont la case <code>[i+1][j]</code> et <code>[i+1][j+1]</code>.</p> <p></p> <p>exercice 5.1</p> <p>Q1. Compl\u00e9ter la fonction <code>max_glouton</code> ci-dessous qui calcule de mani\u00e8re gloutonne le \u00abmeilleur\u00bb trajet d'une pyramide <code>pyr</code>. </p> \ud83d\udc0d Script Python<pre><code>    def max_glouton(pyr):\n        s = pyr[0][0]\n        j = 0\n        for i in range(..., ...):\n            v1 = ...\n            v2 = ...\n            if ... &gt; ...:\n                ... += ...\n            else:\n                ... += ...\n                j = ...\n        return s\n</code></pre> Correction \ud83d\udc0d Script Python<pre><code>def max_glouton(pyr):\n    s = pyr[0][0]\n    j = 0\n    for i in range(1, len(pyr)):\n        v1 = pyr[i][j]\n        v2 = pyr[i][j + 1]\n        if v1 &gt; v2:\n            s += v1\n        else:\n            s += v2\n            j = j + 1\n    return s\n</code></pre> <p>exercice 5.2</p> <p>Q2. Observer et analyser le r\u00e9sultat donn\u00e9 par notre algorithme sur <code>pyr_exemple</code>.</p> Correction <p>Notre algorithme renvoie 25 au lieu de 30. Il ne nous donne donc pas le meilleur r\u00e9sultat. Cela ne doit pas nous \u00e9tonner, car la succession de meilleurs choix locaux ne donne pas forc\u00e9ment le meilleur choix global.</p>"},{"location":"T3_Algorithmique/3.2_Programmation_dynamique/TP_pyramides/#4-recherche-par-methode-recursive","title":"4. Recherche par m\u00e9thode r\u00e9cursive","text":"<p>exercice 6.1</p> <p>Observer le dessin suivant : </p> <p>Q1. En d\u00e9duire une fonction <code>max_recursif</code> qui prendra en param\u00e8tre une pyramide <code>pyr</code> et qui calculera de mani\u00e8re r\u00e9cursive la somme maximale.</p> <p>Pour extraire les deux sous-pyramides gauche et droite, on pourra utiliser le code suivant :</p> \ud83d\udc0d Script Python<pre><code>def extract_sub_left_right(pyr):\n    left = []\n    right = []\n    for k in range(1, len(pyr)):\n        lst_left = [pyr[k][j] for j in range(k)]\n        lst_right = [pyr[k][j+1] for j in range(k)]\n        left.append(lst_left)\n        right.append(lst_right)\n    return left, right\n</code></pre> Correction \ud83d\udc0d Script Python<pre><code>    def max_recursif(pyr):\n        if len(pyr) == 1:\n            return pyr[0][0]\n        pyr_left, pyr_right = extract_sub_left_right(pyr)\n        return pyr[0][0] + max(max_recursif(pyr_left), max_recursif(pyr_right))\n</code></pre> <p>exercice 6.2</p> <p>Q2. Testez votre algorithme avec <code>pyr_exemple</code>, ainsi qu'avec des pyramides de taille sup\u00e9rieure. Que se passe-t-il ?</p> Correction <p>D\u00e8s que la hauteur de la pyramide d\u00e9passe 25 (environ) le programme devient extr\u00eamement lent et inutilisable. On retrouve le probl\u00e8me rencontr\u00e9 avec l'algorithme de force brute.</p>"},{"location":"T3_Algorithmique/3.2_Programmation_dynamique/TP_pyramides/#5-optimisation-de-la-methode-recursive-par-programmation-dynamique","title":"5. Optimisation de la m\u00e9thode r\u00e9cursive par programmation dynamique","text":"<p>La lenteur de l'algorithme pr\u00e9c\u00e9dent vient du fait que certains calculs sont redondants. </p> <p></p> <p>Par exemple, le calcul du maximum de la pyramide rouge sera lanc\u00e9 en tant que sous-pyramide droite de la valeur 5, et en tant que sous-pyramide gauche de la valeur 4.</p> <p>Si la pyramide initiale est grande, ces appels inutiles vont se multiplier et ralentir consid\u00e9rablement l'ex\u00e9cution du programme.</p> <p>exercice 7.1</p> <p>Dans le code r\u00e9cursif suivant, chaque pyramide est identifi\u00e9e par les coordonn\u00e9es de son sommet, stock\u00e9es dans le tuple <code>pos</code> .</p> <p>Pour chaque sommet de coordonn\u00e9es <code>(i, j)</code>, il y a aura donc un appel r\u00e9cursif pour calculer la somme maximale de la pyramide de sommet <code>(i+1, j)</code> et celle de sommet <code>(i+1, j+1)</code>.</p> <p>Ce sont ces calculs que l'on doit stocker pour \u00e9viter d'avoir \u00e0 les refaire (principe de m\u00e9mo\u00efsation).</p> <p>On va donc utiliser un dictionnaire <code>dict_max</code> qui associera \u00e0 chaque sommet <code>(i, j)</code> la somme maximale de sa pyramide.</p> <p>Q1. Compl\u00e9ter le code suivant :</p> \ud83d\udc0d Script Python<pre><code>dict_max = {}\ndef max_rec_dynamique(pyr, pos=(0,0)):\n    i, j = pos\n    if i == len(pyr) - 1:\n        return pyr[...][...]\n\n    # calcul du max de la sous-pyramide gauche\n    if (..., ...) in dict_max:\n        val_gauche = ...\n    else:\n        val_gauche = ...\n        dict_max[...] = ...\n\n    # calcul du max de la sous-pyramide droite\n    ...\n    ...\n    ...\n    ...\n    ...\n\n    return ... + ...\n</code></pre> correction \ud83d\udc0d Script Python<pre><code>dict_max = {}\ndef max_rec_dynamique(pyr, pos=(0,0)):\n    i, j = pos\n    if i == len(pyr) - 1:\n        return pyr[i][j]\n\n    if (i+1, j) in dict_max:\n        val_gauche = dict_max[(i+1, j)]\n    else:\n        val_gauche = max_rec_dynamique(pyr, (i+1, j))\n        dict_max[(i+1, j)] = val_gauche\n\n    if (i+1, j+1) in dict_max:\n        val_droit = dict_max[(i+1, j+1)]\n    else:\n        val_droit = max_rec_dynamique(pyr, (i+1, j+1))\n        dict_max[(i+1, j+1)] = val_droit\n\n    return pyr[i][j] + max(val_gauche, val_droit)\n</code></pre> <p>exercice 7.2</p> <p>Q2. Testez votre algorithme avec <code>pyr_exemple</code>, ainsi qu'avec des pyramides de taille sup\u00e9rieure. Que constatez-vous ?</p> correction <p>On constate que notre algorithme est devenu quasi-instantan\u00e9. Il ne faut que quelques secondes pour faire trouver le maximum d'une pyramide de taille 500.</p>"},{"location":"T3_Algorithmique/3.2_Programmation_dynamique/TP_pyramides/#6-methode-bottom-up","title":"6. M\u00e9thode bottom-up","text":"<p>Plus court chemin</p> <p></p> <p>Dans la figure ci-dessus, le chemin surlign\u00e9 est le chemin de longueur minimale entre A et C. </p> <p>Ce chemin passe par B. </p> <p>On peut donc en d\u00e9duire que la portion de ce chemin entre B et C (portion rouge) est le chemin minimal entre B et C.</p> <p>On peut le d\u00e9montrer facilement par l'absurde : si le chemin rouge n'est pas le chemin minimal entre B et C, alors il en existe un autre qui est minimal (par exemple le violet). En emprutant ce chemin \u00e0 partir de B, on pourrait donc construire entre A et C un chemin plus court que le chemin surlign\u00e9, ce qui est impossible.</p> <p>De mani\u00e8re analogue, on peut affirmer ceci : si le chemin minimal passe par B, alors la portion de ce chemin minimal entre B et C est forc\u00e9ment le chemin rouge.</p> <p>Nous allons exploiter une id\u00e9e similaire pour maximiser le parcours dans notre pyramide.</p> <p></p> <p>Admettons que le parcours maximal passe par la valeur 6. Ensuite, ce parcours doit passer par 8 ou par 9. Comme ce parcours est maximal, il passera forc\u00e9ment par 9.</p> <p>On peut donc en d\u00e9duire que si le parcours arrive \u00e0 cette valeur 6, alors cette valeur pourrait \u00eatre remplac\u00e9e par 15.</p> <p>Faisons de m\u00eame pour les autres valeurs de l'avant-derni\u00e8re ligne :</p> <p></p> <p>En proc\u00e9dant de m\u00eame pour les lignes sup\u00e9rieures, on trouve la valeur maximale de 30 :</p> <p></p> <p>exercice 8</p> <p>En s'inspirant de la m\u00e9thode pr\u00e9c\u00e9dente, \u00e9crire une fonction <code>max_iteratif</code> qui prend une pyramide <code>pyr</code> en param\u00e8tre et qui renvoie la somme maximale des parcours de cette pyramide.</p> <p>Effectuer des tests pour appr\u00e9cier l'efficacit\u00e9 de cette fonction.</p> Correction <p>\ud83d\udc0d Script Python<pre><code>def max_iteratif(pyr):\n    for i in range(len(pyr)-2, -1, -1):\n        for j in range(len(pyr[i])):\n            pyr[i][j] = pyr[i][j] + max(pyr[i+1][j], pyr[i+1][j+1])\n    return pyr[0][0]\n</code></pre> On peut calculer que cet algorithme est de complexit\u00e9 quadratique. Il reste n\u00e9anmoins tr\u00e8s rapide, y compris pour des grandes pyramides.</p>"},{"location":"T3_Algorithmique/3.2_Programmation_dynamique/TP_rendu_monnaie/","title":"Optimisation de rendu de monnaie","text":"<p>Probl\u00e8me</p> <p></p> <p>Nous allons nous int\u00e9resser au probl\u00e8me suivant :</p> <p>\u00c9tant donn\u00e9s une liste de pi\u00e8ces <code>pieces</code> et une somme \u00e0 rendre <code>somme</code>, peut-on calculer le nombre minimal de pi\u00e8ces pour r\u00e9aliser cette somme ?</p> <p>Remarque importante :</p> <p>Dans toute la suite, on consid\u00e9rera que la somme \u00e0 rendre est un nombre entier positif, et que dans la liste de pi\u00e8ces se trouve la pi\u00e8ce de valeur 1. Ainsi, il est toujours possible de rendre la monnaie.</p>"},{"location":"T3_Algorithmique/3.2_Programmation_dynamique/TP_rendu_monnaie/#1-retour-sur-lalgorithme-glouton","title":"1. Retour sur l'algorithme glouton","text":"<p>Nous avons vu en Premi\u00e8re un algorithme capable de donner une combinaison d'\u00e9l\u00e8ments avec une contrainte <code>max</code>.</p> <p>Cet algorithme fonctionnait de mani\u00e8re gloutonne : on cherche \u00e0 rendre \u00e0 maximiser la solution.</p> <p>Il existe une autre type d'algorithme glouton, le rendu de monnaie.</p> <p>Le rendu de monnaie</p> <p>L'objectif est pour une somme \u00e0 rendre, de donner la combinaison utilisant un minimum de pi\u00e8ces ou de billets pour fabriquer la somme \u00e0 rendre. </p> <p>exercice 1</p> <p>Compl\u00e9ter la fonction <code>rendu_glouton</code> qui prend en param\u00e8tres une liste de pi\u00e8ces <code>pieces</code> (class\u00e9es dans l'ordre croissant) et la somme \u00e0 rendre <code>somme</code> et qui renvoie le nombre minimal de pi\u00e8ces qu'il faut rendre.</p> \ud83d\udc0d Script Python<pre><code>def rendu_glouton(pieces, somme):\n    i =  ... # (1)\n    nb_pieces = ...\n    while ... &gt; ...:\n        if ... &lt;= somme:\n            nb_pieces += ... \n            somme -= ...\n        else :\n            i -= ...   \n    return ...\n</code></pre> <ol> <li>Attention, les pi\u00e8ces sont class\u00e9es dans l'ordre croissant.</li> </ol> <p>Exemple d'utilisation : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; rendu_glouton([1, 2, 5], 12)\n3\n</code></pre></p> Correction \ud83d\udc0d Script Python<pre><code>def rendu_glouton(pieces, somme):\n    i =  len(pieces) - 1\n    nb_pieces = 0\n    while somme &gt; 0:\n        if pieces[i] &lt;= somme:\n            nb_pieces += 1 \n            somme -= pieces[i] \n        else :\n            i -= 1   \n    return nb_pieces\n</code></pre> <p>Nous savons que cet algorithme est optimal sous certaines conditions sur la composition des pi\u00e8ces. Par exemple le syst\u00e8me des euros (1, 2, 5, 10, 20, 50, 100, 200) rend l'algorithme glouton optimal (on dit que le syst\u00e8me est canonique).</p> <p>Mais si le syst\u00e8me n'est pas canonique, l'algorithme glouton peut ne pas donner la meilleure solution :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; rendu_glouton([1, 6, 10], 12)\n3\n</code></pre> <p>Notre algorithme va trouver que \\(12 = 10 + 1 + 1\\) et donc rendre 3 pi\u00e8ces, alors qu'il est possible de faire \\(12 = 6+6\\) et ne rendre que 2 pi\u00e8ces.</p>"},{"location":"T3_Algorithmique/3.2_Programmation_dynamique/TP_rendu_monnaie/#2-algorithme-recursif","title":"2. Algorithme r\u00e9cursif","text":"<p>Il est possible de construire un algorithme optimal de mani\u00e8re r\u00e9cursive.</p> <p>Il faut pour cela faire les observations suivantes :</p> <ul> <li>pour rappel, le rendu est toujours possible : dans le pire des cas, le nombre de pi\u00e8ces \u00e0 rendre est \u00e9gal \u00e0 la somme de d\u00e9part (rendu effectu\u00e9 \u00e0 coups de pi\u00e8ces de 1)</li> <li> Si <code>p</code> est une pi\u00e8ce de <code>pieces</code>, le nombre minimal de pi\u00e8ces n\u00e9cessaires pour rendre la somme <code>somme</code>   est \u00e9gal \u00e0 1 + le nombre minimal de pi\u00e8ces n\u00e9cessaires (contenant <code>p</code>)    pour rendre la somme <code>somme - p</code>.  </li> </ul> <p>Cette derni\u00e8re observation est cruciale. Elle repose sur le fait qu'il suffit de ajouter 1 pi\u00e8ce (la pi\u00e8ce de valeur <code>p</code>) \u00e0 la meileure combinaison qui rend <code>somme - p</code> pour avoir la meilleure combinaison qui rend <code>somme</code> (meilleure combinaison parmi celles contenant <code>p</code>). </p> <p>On va donc passer en revue toutes les pi\u00e8ces <code>p</code> et mettre \u00e0 jour \u00e0 chaque fois le nombre minimal de pi\u00e8ces.</p> <p>exercice 2</p> <p>Compl\u00e9ter la fonction <code>rendu_recursif</code> qui prend en param\u00e8tres une liste de pi\u00e8ces <code>pieces</code> et la somme \u00e0 rendre <code>somme</code> et qui renvoie le nombre minimal de pi\u00e8ces qu'il faut rendre.</p> \ud83d\udc0d Script Python<pre><code>def rendu_recursif(pieces, somme):\n    nb_pieces = ... # (1)\n    if somme == 0:\n        return ... # (2)\n    for p in pieces:\n        if ... &lt;= ...: # (3)\n            nb_pieces = min(nb_pieces, ... + rendu_recursif(pieces, ...))\n    return ...   \n</code></pre> <ol> <li>Nombre de pi\u00e8ces dans le pire des cas</li> <li>Cas de base</li> <li>Peut-on rendre la pi\u00e8ce <code>p</code> ? </li> </ol> Correction \ud83d\udc0d Script Python<pre><code>def rendu_recursif(pieces, somme):\n    nb_pieces = somme\n    if somme == 0:\n        return 0\n    for p in pieces:\n        if p &lt;= somme:\n            nb_pieces = min(nb_pieces, 1 + rendu_recursif(pieces, somme-p))\n    return nb_pieces    \n</code></pre> <p>Testons notre algorithme :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; rendu_recursif([1, 2, 5], 12)\n3\n&gt;&gt;&gt; rendu_recursif([1, 6, 10], 12)\n2\n</code></pre> <p>Il ne se laisse pas pi\u00e8ger comme l'algorithme glouton et rend bien en 2 pi\u00e8ces la somme 12.</p> <p>Mais...</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; rendu_recursif([1, 6, 10], 107)\nRecursionError: maximum recursion depth exceeded in comparison\n</code></pre> <p></p> <p>Le nombre d'appels r\u00e9cursifs de notre algorithme augmente exponentiellement avec la valeur de la somme \u00e0 rendre : on se retrouve tr\u00e8s rapidement avec des milliards d'appels r\u00e9cursifs, ce qui n'est pas g\u00e9rable.</p> <p>Ces appels r\u00e9cursifs ont lieu sur un nombre limit\u00e9 de valeurs : par construction de notre algorithme, si la somme \u00e0 rendre est 100, il y aura beaucoup (beaucoup) d'appels vers 99, vers 98, vers 97... jusqu'\u00e0 0. </p> <p>On peut donc l\u00e9gitimement penser \u00e0 m\u00e9mo\u00efser notre algorithme, en stockant les valeurs pour \u00e9viter de les recalculer.</p>"},{"location":"T3_Algorithmique/3.2_Programmation_dynamique/TP_rendu_monnaie/#3-algorithme-recursif-memoise","title":"3. Algorithme r\u00e9cursif memo\u00efs\u00e9","text":"<p>exercice 3</p> <p>Compl\u00e9ter la fonction <code>rendu_recursif_memoise</code> qui prend en param\u00e8tres une liste de pi\u00e8ces <code>pieces</code> et la somme \u00e0 rendre <code>somme</code> et qui renvoie le nombre minimal de pi\u00e8ces qu'il faut rendre.</p> <p>On utilisera le dictionnaire <code>memo_rendu</code> dans lequel on associera \u00e0 chaque somme <code>somme</code> son nombre de pi\u00e8ces minimal. </p> \ud83d\udc0d Script Python<pre><code>memo_rendu = {}\ndef rendu_recursif_memoise(pieces, somme):\n    nb_pieces = somme\n    if somme == 0:\n        return 0\n    for p in pieces:\n        if p &lt;= somme:\n            if ... not in memo_rendu:\n                memo_rendu[...] = ...\n            nb_pieces = ...\n    return nb_pieces        \n</code></pre> Correction <p><code>python linenums='1' memo_rendu = {} def rendu_recursif_memoise(pieces, somme):     nb_pieces = somme     if somme == 0:         return 0     for p in pieces:         if p &lt;= somme:             if somme-p not in memo_rendu:                 memo_rendu[somme-p] = rendu_recursif_memoise(pieces, somme-p)             nb_pieces = min(nb_pieces, 1 + memo_rendu[somme-p])     return nb_pieces</code></p> <p>Notre algorithme est maintenant beaucoup (beaucoup) plus efficace :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; rendu_recursif_memoise([1, 6, 10], 107)\n12\n</code></pre>"},{"location":"T3_Algorithmique/3.2_Programmation_dynamique/TP_rendu_monnaie/#4-algorithme-bottom-up","title":"4. Algorithme bottom-up","text":"<p>Nous avions calcul\u00e9 le \\(F_n\\), n-i\u00e8me terme de la suite de Fibonacci en calculant d'abord \\(F_0\\), \\(F_1\\), \\(F_2\\), ..., jusqu'\u00e0 \\(F_{n-1}\\) puis \\(F_n\\).</p> <p>En s'inspirant de cette m\u00e9thode (bottom-up) nous allons ici calculer successivement tous les rendus minimaux jusqu'\u00e0 <code>somme</code> avant de calculer le rendu minimal de <code>somme</code>.</p> <p>exercice 4</p> <p>Compl\u00e9ter la fonction <code>rendu_bottom_up</code> qui prend en param\u00e8tres une liste de pi\u00e8ces <code>pieces</code> et la somme \u00e0 rendre <code>somme</code> et qui renvoie le nombre minimal de pi\u00e8ces qu'il faut rendre.    </p> <p>Nous stockerons chaque rendu dans un dictionnaire <code>rendu</code>, initialis\u00e9 \u00e0 la valeur 0 pour la cl\u00e9 0.</p> \ud83d\udc0d Script Python<pre><code>def rendu_bottom_up(pieces, somme):\n    rendu = {...}\n    for s in range(..., ...): # (1)\n        rendu[s] = ... #(2)\n        for p in pieces:\n            if p &lt;= s:\n                rendu[s] = min(..., ... + ...)\n    return ...   \n</code></pre> <ol> <li>Attention, il faut aller jusqu'\u00e0 la valeur <code>somme</code>. </li> <li>Nombre de pi\u00e8ces dans le pire des cas.</li> </ol> Correction \ud83d\udc0d Script Python<pre><code>def rendu_bottom_up(pieces, somme):\n    rendu = {0:0}\n    for s in range(1, somme+1):\n        rendu[s] = s\n        for p in pieces:\n            if p &lt;= s:\n                rendu[s] = min(rendu[s], 1 + rendu[s-p])\n    return rendu[somme]    \n</code></pre> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; rendu_bottom_up([1, 6, 10], 107)\n12\n</code></pre> <p>Notre algorithme it\u00e9ratif est de complexit\u00e9 lin\u00e9aire (par rapport \u00e0 la variable <code>somme</code>).</p>"},{"location":"T3_Algorithmique/3.2_Programmation_dynamique/TP_rendu_monnaie/#5-bonus-construction-dune-solution","title":"5. Bonus : construction d'une solution","text":"<p>Nos diff\u00e9rents algorithmes avaient pour but de nous renvoyer le nombre minimal de pi\u00e8ces. Mais peut-on les modifier pour qu'ils renvoient la liste de pi\u00e8ces utilis\u00e9es ?</p> <p>Nous allons nous appuyer sur le dernier algorithme cr\u00e9\u00e9 (par m\u00e9thode bottom-up).</p> <p>Il suffit de rajouter un dictionnaire solutions qui associera \u00e0 chaque somme la liste des pi\u00e8ces n\u00e9cessaires.</p> <p>Lors du parcours de toutes les pi\u00e8ces, si un nouveau nombre minimal de pi\u00e8ces est trouv\u00e9 pour la pi\u00e8ce <code>p</code>, il faut rajouter la pi\u00e8ce <code>p</code> \u00e0 la liste des solutions.</p> <p>exercice 5</p> <p>Compl\u00e9ter la fonction <code>rendu_solution</code> qui prend en param\u00e8tres une liste de pi\u00e8ces <code>pieces</code> et la somme \u00e0 rendre <code>somme</code> et qui renvoie le nombre minimal de pi\u00e8ces qu'il faut rendre.   </p> \ud83d\udc0d Script Python<pre><code>def rendu_solution(pieces, somme):\n    rendu = {0:0}\n    solution = {}\n    solution[0] = []\n    for s in range(1, somme+1):\n        rendu[s] = s\n        solution[s] = []\n        for p in pieces:\n            if p &lt;= s:\n                if 1 + rendu[s-p] &lt; rendu[s]:\n                    rendu[s] = ...\n                    solution[s] = ... .copy() # (1)\n                    solution[s]. ...\n    return ...\n</code></pre> <ol> <li>On effectue une copie de liste avec la m\u00e9thode <code>copy</code>. </li> </ol> Correction \ud83d\udc0d Script Python<pre><code>def rendu_solution(pieces, somme):\n    rendu = {0:0}\n    solution = {}\n    solution[0] = []\n    for s in range(1, somme+1):\n        rendu[s] = s\n        solution[s] = []\n        for p in pieces:\n            if p &lt;= s:\n                if 1 + rendu[s-p] &lt; rendu[s]:\n                    rendu[s] = 1 + rendu[s-p]\n                    solution[s] = solution[s-p].copy()\n                    solution[s].append(p)\n    return solution[somme]\n</code></pre> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; rendu_solution([1,6,10], 12)\n[6, 6]\n&gt;&gt;&gt; rendu_solution([1,6,10], 107)\n[10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 1]\n</code></pre>"},{"location":"T3_Algorithmique/3.2_Programmation_dynamique/cours/","title":"Programmation dynamique","text":""},{"location":"T3_Algorithmique/3.2_Programmation_dynamique/cours/#1-retour-sur-la-suite-de-fibonacci","title":"1. Retour sur la suite de Fibonacci","text":""},{"location":"T3_Algorithmique/3.2_Programmation_dynamique/cours/#11-simple-et-inefficace","title":"1.1 Simple et inefficace","text":"<p>la suite de Fibonacci est d\u00e9finie par :</p> <ul> <li>\\(F_0 = 0\\)</li> <li>\\(F_1 = 1\\)</li> <li>\\(\\forall n \\in \\mathbb{N}, F_{n+2} = F_{n+1}+F_n\\)</li> </ul> <p>se programme r\u00e9cursivement par :</p> \ud83d\udc0d Script Python<pre><code>def fibo(n):\n    if n == 0 :\n        return 0   \n    elif n == 1 :\n        return 1\n    else :\n        return fibo(n-1) + fibo(n-2)\n</code></pre> <p>Ce code, d'une grande simplicit\u00e9, est malheureusement tr\u00e8s inefficace.</p> <p>exercice 1</p> <p>Mesurer le temps de calcul de <code>fibo(40)</code>.</p> \ud83d\udc0d Script Python<pre><code>import time\n\ndef fibo(n):\n    if n == 0 :\n        return 0   \n    elif n == 1 :\n        return 1\n    else :\n        return fibo(n-1) + fibo(n-2)\n\nt0 = time.time()\nfibo(40)\nprint(time.time() - t0)\n</code></pre> <p>Le temps de calcul est de plusieurs dizaines de secondes, sur une machine r\u00e9cente. C'est tr\u00e8s mauvais !</p> <p>En cause : la multitude des appels r\u00e9cursifs nous conduit \u00e0 refaire des calculs d\u00e9j\u00e0 effectu\u00e9s.</p> <p>Observons l'arbre d'appels de <code>fibo(6)</code> :</p> <p></p> <p>Le calcul de <code>fibo(2)</code> se retrouve ainsi 5 fois dans l'arbre.</p> <p>Pour r\u00e9soudre notre probl\u00e8me, nous l'avons divis\u00e9 en probl\u00e8mes plus petits, mais malheureusement pas ind\u00e9pendants : on dit que les probl\u00e8mes se recouvrent, ce qui nous am\u00e8ne \u00e0 refaire des choses d\u00e9j\u00e0 faites. </p> <p>Dans l'algorithme de dichotomie, ou du tri-fusion, les probl\u00e8mes \u00e9taient ind\u00e9pendants et ne se recouvraient pas : on ne refaisait jamais deux fois la m\u00eame chose. Ce n'est pas le cas ici.</p>"},{"location":"T3_Algorithmique/3.2_Programmation_dynamique/cours/#12-se-souvenir-des-belles-choses-des-calculs-la-memoisation","title":"1.2 Se souvenir des belles choses des calculs : la m\u00e9mo\u00efsation","text":"<p>Comment \u00e9viter de recalculer (par exemple) 5 fois <code>fibo(2)</code> ?</p> <p>L'id\u00e9e g\u00e9n\u00e9rale est de stocker le r\u00e9sultat de chaque calcul, par exemple dans un dictionnaire. Ainsi, \u00e0 chaque demande de calcul :</p> <ul> <li>Soit le calcul a d\u00e9j\u00e0 \u00e9t\u00e9 effectu\u00e9 : on a donc juste \u00e0 le lire dans le dictionnaire.</li> <li>Soit le calcul n'a jamais \u00e9t\u00e9 effectu\u00e9 : on l'effectue, et on stocke le r\u00e9sultat dans le dictionnaire.</li> </ul> <p>exercice 2</p> <p>Compl\u00e9ter le code suivant :</p> \ud83d\udc0d Script Python<pre><code>dict_fibo = {0:0, 1:1}\ndef fibo(n):\n    if n in dict_fibo:\n        return ...\n    dict_fibo[n] = ... + ...\n    return ...\n</code></pre> correction \ud83d\udc0d Script Python<pre><code>    dict_fibo = {0:0, 1:1}\n    def fibo(n):\n        if n in dict_fibo:\n            return dict_fibo[n]\n        dict_fibo[n] = fibo(n-1) + fibo(n-2)\n        return dict_fibo[n]\n</code></pre> <p>exercice</p> ConsignesEnonc\u00e9 <p>Mesurer le temps de calcul de <code>fibo(40)</code> et comparer avec la mesure de l'exercice 1.</p> <p>Le temps de calcul est maintenant de l'ordre de \\(10^{-5}\\) secondes. C'est un million (!!!) de fois plus rapide qu'\u00e0 l'exercice 1.</p>"},{"location":"T3_Algorithmique/3.2_Programmation_dynamique/cours/#13-quelques-remarques","title":"1.3 Quelques remarques","text":""},{"location":"T3_Algorithmique/3.2_Programmation_dynamique/cours/#131-juste-une-brute-force-plus-efficace","title":"1.3.1  Juste une brute-force plus efficace ?","text":"<p>Notre technique de m\u00e9mo\u00efsation ne change pas vraiment la structure du programme : on continue de calculer toutes les valeurs interm\u00e9diaires, mais on ne les calcule qu'une seule fois.</p> <p></p>"},{"location":"T3_Algorithmique/3.2_Programmation_dynamique/cours/#132-suppression-de-la-variable-globale","title":"1.3.2  Suppression de la variable globale","text":"<p>Dans le code pr\u00e9c\u00e9dent, le dictionnaire <code>dict_fibo</code> est \u00e0 l'ext\u00e9rieur de la fonction. Un dictionnaire \u00e9tant un type mutable, sa modification \u00e0 l'int\u00e9rieur de la fonction ne pose pas de probl\u00e8me. Toutefois, ce genre de pratique est d\u00e9conseill\u00e9 : si par exemple on appelle 2 fois la fonction <code>fibo</code>, le dictionnaire n'est pas r\u00e9initialis\u00e9 entre-temps (ce qui dans notre cas n'est pas probl\u00e9matique, mais cela pourrait l'\u00eatre). Comment \u00e9viter cela ?</p> <p>On peut utiliser une fonction englobante (appel\u00e9e ici <code>fibonacci</code> ) :</p> \ud83d\udc0d Script Python<pre><code>def fibonacci(n):\n    dict_fibo = {0:0, 1:1}\n    def fibo(n):\n        if n in dict_fibo:\n            return dict_fibo[n]\n        dict_fibo[n] = fibo(n-1) + fibo(n-2)\n        return dict_fibo[n]\n    return fibo(n)\n</code></pre> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; fibonacci(50)\n12586269025\n</code></pre> <p>Remarquez la d\u00e9finition d'une fonction \u00e0 l'int\u00e9rieur d'une autre. Cela ne pose aucun probl\u00e8me, mais attention, cette fonction n'existe pas \u00e0 l'ext\u00e9rieur de sa fonction englobante.</p>"},{"location":"T3_Algorithmique/3.2_Programmation_dynamique/cours/#133-memoisation-automatique-en-python","title":"1.3.3  M\u00e9mo\u00efsation automatique en Python","text":"<p>La fonction <code>lru_cache</code> du module <code>functools</code> permet de m\u00e9mo\u00efser automatiquement une fonction r\u00e9cursive. Il suffit, juste avant d'\u00e9crire la fonction, de mettre la ligne <code>@lru_cache</code> (appel\u00e9e d\u00e9corateur). </p> \ud83d\udc0d Script Python<pre><code>import time\nfrom functools import lru_cache\n\n@lru_cache  #(1)\ndef fibo(n): #(2)\n    if n == 0 :\n        return 0   \n    elif n == 1 :\n        return 1\n    else :\n        return fibo(n-1) + fibo(n-2)\n\nt0 = time.time()\nfibo(35)\nprint(time.time() - t0)\n</code></pre> <ol> <li>\u00abd\u00e9corateur\u00bb de la fonction</li> <li>Ceci est notre VIEILLE fonction <code>fibo</code>, extr\u00eamement lente...</li> </ol> <p>Essayez en commentant / d\u00e9commentant la ligne 4... c'est magique !</p>"},{"location":"T3_Algorithmique/3.2_Programmation_dynamique/cours/#14-de-bas-en-haut","title":"1.4 De bas en haut","text":"<p>La structure r\u00e9cursive naturelle de la suite de Fibonacci nous a conduit vers un programme qui calcule (ou plut\u00f4t appelle) les valeurs de haut en bas. (m\u00e9thode top-down)</p> <p>Et si on commen\u00e7ait par le bas ?</p> <p>Si nous devions calculer mentalement le 6\u00e8me terme de la suite de Fibonacci, on commencerait par calculer le 3\u00e8me, puis le 4\u00e8me, puis le 5\u00e8me et enfin le 6\u00e8me.</p> <p>exercice</p> <p>Compl\u00e9ter le code ci-dessous :</p> \ud83d\udc0d Script Python<pre><code> def fibo(n):\n    dict_fibo = {}\n    dict_fibo[0] = ...\n    dict_fibo[1] = ...\n    for k in range(..., ...):\n        dict_fibo[k] = dict_fibo[...] + dict_fibo[...]\n    return dict_fibo[...]\n</code></pre> Correction \ud83d\udc0d Script Python<pre><code>def fibo(n):\n    dict_fibo = {}\n    dict_fibo[0] = 0\n    dict_fibo[1] = 1\n    for k in range(2, n+1):\n        dict_fibo[k] = dict_fibo[k-1] + dict_fibo[k-2]\n    return dict_fibo[n]\n</code></pre> <p>Cette m\u00e9thode it\u00e9rative part du bas pour aller vers le haut. On parle de m\u00e9thode bottom-up.  De mani\u00e8re plus g\u00e9n\u00e9rale, cette m\u00e9thode est bas\u00e9e sur le fait de r\u00e9soudre des probl\u00e8mes de petite taille, puis de plus en plus gros, jusqu'au probl\u00e8me final.</p>"},{"location":"T3_Algorithmique/3.2_Programmation_dynamique/cours/#15-bilan-des-methodes-employees","title":"1.5 Bilan des m\u00e9thodes employ\u00e9es","text":"<p>Principes de programmation dynamique </p> <ul> <li> <p>Lors d'un calcul effectu\u00e9 de mani\u00e8re r\u00e9cursive, il peut arriver que de multiples appels r\u00e9cursifs soient identiques. Pour \u00e9viter de recalculer plusieurs fois la m\u00eame chose, on peut stocker les r\u00e9sultats interm\u00e9diaires. On appelle cette technique la m\u00e9mo\u00efsation. Cette technique minimise le nombre d'op\u00e9rations et acc\u00e9l\u00e8re grandement l'ex\u00e9cution du programme. Le prix \u00e0 payer est l'utilisation d'une structure de stockage des valeurs interm\u00e9diaires, et donc une augmentation de la m\u00e9moire utilis\u00e9e par le programme.</p> </li> <li> <p>Lors d'un calcul effectu\u00e9 de mani\u00e8re it\u00e9rative, il est parfois plus simple de commencer par une \u00abpetite\u00bb version du probl\u00e8me pour progressivement remonter vers la solution du probl\u00e8me global.</p> </li> </ul>"},{"location":"T3_Algorithmique/3.2_Programmation_dynamique/cours/#2-programmation-dynamique-et-optimisation","title":"2. Programmation dynamique et optimisation","text":""},{"location":"T3_Algorithmique/3.2_Programmation_dynamique/cours/#21-optimisation-dune-somme-dans-une-pyramide","title":"2.1 Optimisation d'une somme dans une pyramide","text":"<p>Probl\u00e8me</p> <p>Consid\u00e9rons la pyramide ci-dessous :</p> <p></p> <p>En partant du sommet et en descendant soit \u00e0 gauche soit \u00e0 droite, quel chemin donne la somme maximale en arrivant en bas ?</p> <p></p> <p>La suite : TP Pyramides</p>"},{"location":"T3_Algorithmique/3.2_Programmation_dynamique/cours/#22-optimisation-du-rendu-de-monnaie","title":"2.2 Optimisation du rendu de monnaie","text":"<p>Probl\u00e8me</p> <p></p> <p>\u00c9tant donn\u00e9s une liste de pi\u00e8ces <code>pieces</code> et une somme \u00e0 rendre <code>somme</code>, peut-on calculer le nombre minimal de pi\u00e8ces pour r\u00e9aliser cette somme ?</p> <p>La suite : TP Rendu de monnaie</p> <p>Entrainement : \u00c9num\u00e9ration des permutationsDifficult\u00e9 : </p> <p>Entrainement : Nombre de chemins dans une grilleDifficult\u00e9 : </p>"},{"location":"T3_Algorithmique/3.3_Recherche_textuelle/cours/","title":"Recherche textuelle","text":""},{"location":"T3_Algorithmique/3.3_Recherche_textuelle/cours/#1-recherche-naive","title":"1. Recherche na\u00efve","text":"Illustration de l'algorithme <p>Vous pouvez contr\u00f4ler le d\u00e9roulement de l'animation en la survolant avec la souris.</p>"},{"location":"T3_Algorithmique/3.3_Recherche_textuelle/cours/#10-cadre-du-probleme","title":"1.0 Cadre du probl\u00e9me","text":"<p>Dans toute la suite on cherche donc la premi\u00e8re occurrence d\u2019un motif de longueur \\(p\\) dans un texte de longueur \\(n\\).</p> <p>\u00c0 un moment donn\u00e9 de la recherche, on observe une fen\u00eatre de taille <code>p</code> du texte complet, sur laquelle on aligne le motif, et on regarde s'il y a bien correspondance.</p> <p></p> <p>Dans ce sch\u00e9ma, la fen\u00eatre est positionn\u00e9e en <code>i=6</code>. Les caract\u00e8re du motif sont indic\u00e9s par <code>j</code> tandis que ceux du texte sont indic\u00e9s par <code>i</code>.</p> <p>Pour voir si on a trouv\u00e9 un motif, on doit comparer les caract\u00e8res du motif \u00e0 ceux qui leur font face dans le texte.</p> <p> Pour chaque caract\u00e8re du motif, on va comparer <code>motif[j]</code> \u00e0 <code>texte[i:j]</code> avec Les caract\u00e8res du texte pr\u00e9sents dans la fen\u00eatre num\u00e9rot\u00e9s de 0 \u00e0 <code>p-1</code></p> <p> Si la fen\u00eatre pr\u00e9sente un d\u00e9faut de correspondance entre les caract\u00e8res du texte et ceux du motif, on d\u00e9place la fen\u00eatre. Si le motif correspond parfaitement au texte d\u00e9voil\u00e9 dans la fen\u00eatre, on a trouv\u00e9 une occurrence \u00e0 la position <code>i</code>.</p> <p> Pr\u00e9condition : pour que la recherche puisse se faire, on doit avoir l'in\u00e9galit\u00e9 \\(0 &lt; len(motif) &lt; len(texte)\\), autrement exprim\u00e9 ici <code>0 &lt; p &lt; n</code></p>"},{"location":"T3_Algorithmique/3.3_Recherche_textuelle/cours/#11-premier-algorithme","title":"1.1 Premier algorithme","text":"<p>On balaye la fen\u00eatre de gauche \u00e0 droite et on teste si chaque caract\u00e8re correspond. Si ce n\u2019est pas le cas, on d\u00e9cale la fen\u00eatre de 1 vers la droite.</p> <p>Ici : \u00e9chec de la correspondance pour j = 1</p> <p></p> <p>Donc d\u00e9calage de la fen\u00eatre d\u2019un cran vers la droite</p> <p></p> <p>Algorithme de recherche na\u00efve </p> \ud83d\udc0d Script Python<pre><code>    def recherche_naive(texte, motif):\n        '''\n        renvoie la liste des indices (\u00e9ventuellement vide) des occurrences de\n        de la cha\u00eene motif dans la cha\u00eene texte.\n        '''\n        indices = []\n        i = 0\n        while i &lt;= len(texte) - len(motif):\n            #On parcourt la fen\u00eatre du motif\n            while j &lt; len(motif) and texte[i+j] == motif[j]:\n                j += 1 \n            if j == len(motif):\n                indices.append(i) #On a trouv\u00e9 le motif\n            i += 1 #d\u00e9calage de 1 en cas d'\u00e9chec ou en cas de motif trouv\u00e9\n\n        return indices\n</code></pre>"},{"location":"T3_Algorithmique/3.3_Recherche_textuelle/cours/#12-modification-de-lalgorithme","title":"1.2 Modification de l'algorithme","text":"<p>Exercice 1</p> \u00c9nonc\u00e9Correction <p>Re-\u00e9crire l'algorithme pr\u00e9c\u00e9dent en s'arr\u00eatant d\u00e8s qu'une occurrence de <code>motif</code> est trouv\u00e9e dans <code>texte</code>.</p> <p>La fonction renverra uniquement un bool\u00e9en. </p> \ud83d\udc0d Script Python<pre><code>def recherche_naive_bool(texte, motif):\n    '''\n    renvoie un bool\u00e9en indiquant la pr\u00e9sence ou non de\n    la cha\u00eene motif dans la cha\u00eene texte.\n    '''\n    trouve = False\n    i = 0\n    while i &lt;= len(texte) - len(motif) and not trouve:\n        k = 0\n        while k &lt; len(motif) and texte[i+k] == motif[k]:\n            k += 1\n        if k == len(motif):\n            trouve = True\n        i += 1\n\n    return trouve\n</code></pre>"},{"location":"T3_Algorithmique/3.3_Recherche_textuelle/cours/#13-application-a-la-recherche-dun-motif-dans-un-roman","title":"1.3 Application \u00e0 la recherche d'un motif dans un roman","text":"<p>Le Projet Gutenberg permet de t\u00e9l\u00e9charger l\u00e9galement des ouvrages libres de droits dans diff\u00e9rents formats.</p> <p>Nous allons travailler avec le Tome 1 du roman Le rouge et le noir de Stendhal, \u00e0 t\u00e9l\u00e9charger ici au format <code>txt</code>. </p>"},{"location":"T3_Algorithmique/3.3_Recherche_textuelle/cours/#131-recuperation-du-texte-dans-une-seule-chaine-de-caracteres","title":"1.3.1 R\u00e9cup\u00e9ration du texte dans une seule cha\u00eene de caract\u00e8res","text":"\ud83d\udc0d Script Python<pre><code>with open(\"stendhals.txt\") as f:\n    texte = f.read().replace('\\n', ' ')\n</code></pre>"},{"location":"T3_Algorithmique/3.3_Recherche_textuelle/cours/#132-verification-et-mesure-du-temps-de-recherche","title":"1.3.2 V\u00e9rification et mesure du temps de recherche","text":"<p>Exercice 2</p> \u00c9nonc\u00e9Correction <ol> <li>Testez la validit\u00e9 de vos r\u00e9ponses en comparant avec les r\u00e9sultats donn\u00e9s par la fonctionnalit\u00e9 <code>find</code> propos\u00e9e par :simple-python:</li> <li>Mesurez le temps d'ex\u00e9cution de votre algorithme \u00e0 l'aide du module <code>time</code>.  </li> </ol> \ud83d\udc0d Script Python<pre><code>import time\ntop = time.time()\n#Avec le find de python\ng = stendhal.find('Mme de R\u00eanal fut fid\u00e8le \u00e0 sa promesse')\nt_fin = time.time()\nprint(t_fin - top)\nprint(g)\ntop = time.time()\nh = recherche_naive_bool(stendhal, 'Mme de R\u00eanal fut fid\u00e8le \u00e0 sa promesse')\nt_fin = time.time()\nprint(t_fin - top)\nprint(h)\n</code></pre>"},{"location":"T3_Algorithmique/3.3_Recherche_textuelle/cours/#2-algorithme-de-boyer-moore-horspool","title":"2. Algorithme de Boyer-Moore-Horspool","text":"<p>Les performances de la recherche na\u00efve laissant \u00e0 d\u00e9sirer, de nombreux informaticiens ont propos\u00e9 des solutions pour am\u00e9liorer la recherche. Un des algorithmes les plus connus est l\u2019algorithme de Knuth, Morris, Pratt, mais il ne figure pas au programme. Un autre algorithme, tr\u00e8s efficace, est l\u2019algorithme de Boyer et Moore, qui a \u00e9t\u00e9 invent\u00e9 en 1977.</p> <p>Boyer et Moore travaillaient alors \u00e0 l\u2019universit\u00e9 d\u2019Austin au Texas en tant qu\u2019informaticiens. Boyer qui \u00e9tait aussi un math\u00e9maticien est maintenant \u00e0 la retraite. Nigel Horspool  est n\u00e9 en Grande-Bretagne mais citoyen canadien. Il est professeur \u00e9m\u00e9rite d\u2019informatique de l\u2019universit\u00e9 de Victoria, retrait\u00e9 depuis 2016. Il a con\u00e7u une variante simplifi\u00e9e de l'algorithme de Boyer-Moore.</p> Illustration de l'algorithme <p></p> <p>Vous pouvez contr\u00f4ler le d\u00e9roulement de l'animation en la survolant avec la souris.</p>"},{"location":"T3_Algorithmique/3.3_Recherche_textuelle/cours/#21-les-deux-idees-du-principe-de-boyer-moore-horspool","title":"2.1 Les deux id\u00e9es du principe de Boyer-Moore-Horspool","text":"<p> La premi\u00e8re id\u00e9e consiste \u00e0 comparer le motif avec la portion du texte qui appara\u00eet dans la fen\u00eatre de droite \u00e0 gauche, et non pas de gauche \u00e0 droite. Ainsi, on fait d\u00e9cro\u00eetre <code>j</code> \u00e0 partir de <code>p \u2212 1</code> jusqu\u2019\u00e0 trouver que le caract\u00e8re qui lui fait face dans le texte, c\u2019est-\u00e0-dire <code>x = texte[i + j]</code>, est diff\u00e9rent du caract\u00e8re <code>y = motif[j]</code> du motif.</p> <p> La deuxi\u00e8me id\u00e9e consiste \u00e0 op\u00e9rer sur la fen\u00eatre un d\u00e9calage qui varie en fonction de la paire de caract\u00e8res qui ont r\u00e9v\u00e9l\u00e9 la non-correspondance, c\u2019est-\u00e0-dire en fonction de (x; y). Pour cela, on effectue un pr\u00e9-traitement du motif."},{"location":"T3_Algorithmique/3.3_Recherche_textuelle/cours/#211-calcul-du-decalage-quand-x-napparait-pas-dans-le-motif","title":"2.1.1 Calcul du d\u00e9calage quand x n'appara\u00eet pas dans le motif","text":"<p>Quand <code>x</code> n'appara\u00eet pas du tout dans le motif : on d\u00e9place la fen\u00eatre pour qu'elle soit juste \u00e0 droite du couple <code>(x,y)</code> qui a provoqu\u00e9 l'\u00e9chec. </p> <p></p> <p></p> <p> Le d\u00e9calage dans ce cas pour un \u00e9chec en position <code>j</code> du motif est donc de <code>d=p+1</code>.</p>"},{"location":"T3_Algorithmique/3.3_Recherche_textuelle/cours/#212-calcul-du-decalage-quand-x-apparait-ailleurs-dans-le-motif","title":"2.1.2 Calcul du d\u00e9calage quand x appara\u00eet ailleurs dans le motif","text":"<p>Dans le cas o\u00f9 x appara\u00eet dans le motif, on d\u00e9place la fen\u00eatre pour que x apparaisse juste au-dessus de la lettre du motif qui lui est \u00e9gale.</p> <p>Si \\(x\\) appara\u00eet plusieurs fois dans le motif, alors on utilisera pour d\u00e9caler la position la plus \u00e0 droite, qu'on note \\(r\\). <p></p> <p></p> <p> On calcule alors <code>d</code> : </p> <ul> <li>si <code>d &gt; 0</code>, on d\u00e9cale de <code>d</code> </li> <li>Sinon, on d\u00e9cale de <code>1</code> comme dans la m\u00e9thode na\u00efve. </li> </ul>"},{"location":"T3_Algorithmique/3.3_Recherche_textuelle/cours/#22-implementation","title":"2.2 Impl\u00e9mentation","text":""},{"location":"T3_Algorithmique/3.3_Recherche_textuelle/cours/#221-calcul-de-la-position-la-plus-a-droite-et-stockage-dans-un-dictionnaire","title":"2.2.1 calcul de la position la plus \u00e0 droite et stockage dans un dictionnaire","text":"<p>On va ici construire un dictionnaire <code>aDroite</code> dont : - les cl\u00e9s sont les caract\u00e8res (les lettres) du motif - les valeurs sont la position la plus \u00e0 droite du caract\u00e8re.</p> \ud83d\udc0d Script Python<pre><code>#Exemple \"\u00e0 la main\" pour le mot 'maman'\naDroite = dict()\naDroite['m']=0 #car c'est le premier qu'on a trouv\u00e9\naDroite['a']=1 #idem\naDroite['m']=2 #on a trouv\u00e9 un 'm' plus \u00e0 droite donc on change la valeur pour 'm'\naDroite['a']=3 #idem : on vient de trouver un 'a' plus \u00e0 droite que le pr\u00e9c\u00e9dent\n#fini !\nprint(\"dico r\u00e9sultat : \", aDroite)\n</code></pre> <p>A faire</p> construitADroiteCorrection <p>\u00e9crire la fonction <code>construitADroite(motif)</code> qui renvoie le dictionnaire ainsi construit pour le motif donn\u00e9 en param\u00e8tre.**</p> \ud83d\udc0d Script Python<pre><code>def construitADroite(motif):\n    '''calcule et renvoie un dictionnaire dont les clefs sont les caract\u00e8res du motif\n    et le valeurs sont leur position la plus \u00e0 droite dans le motif'''\n    aDroite = {}\n    p = len(motif)\n    for j in range(p-1):\n        aDroite[motif[j]]=j\n    return aDroite\nassert(construitADroite('maman')=={'m': 2, 'a': 3})\n</code></pre>"},{"location":"T3_Algorithmique/3.3_Recherche_textuelle/cours/#222-ecriture-de-la-nouvelle-fonction-correspondance","title":"2.2.2 Ecriture de la nouvelle fonction correspondance","text":"<p>A faire : compl\u00e9ter le code de la fonction <code>correspondance(texte, motif)</code></p> <p>Comme dans la partie 1.1, cette fonction renvoie, pour une fen\u00eatre en position <code>i</code>, un couple form\u00e9 : - d'un bool\u00e9en <code>ok</code> qui vaut <code>True</code> si on a trouv\u00e9 une occurrence du motif, et <code>False</code> sinon  - d'un entier <code>decalage</code> qui est cette fois calcul\u00e9 selon la m\u00e9thode de Horspool</p> <p>Correspondance</p> CorrespondanceCorrection \ud83d\udc0d Script Python<pre><code>def correspondance(texte, motif, i, aDroite):\n    ''' On suppose que le dictionnaire pour le motif a d\u00e9j\u00e0 \u00e9t\u00e9 calcul\u00e9 au niveau global\n    Cette fonction, pour une fen\u00eatre en position i, teste si le motif correspond et sinon, indique quel d\u00e9calage appliquer'''\n    p = len(motif)\n    for j in range(....., ....., ....): #on balaie cette fois la fen\u00eatre de droite \u00e0 gauche : de p-1 \u00e0 0 inclus en d\u00e9croissant\n        x = texte[.....]\n        if x != motif[j]:\n            #on calcule le d\u00e9calage\n            #on teste d\u00e9j\u00e0 si x est dans le motif quelque part\n            if ...............:\n                r = ....... #position la plus \u00e0 droite\n                d = ........ #d\u00e9calage\n            else:\n                #x n'est pas dans le motif : d\u00e9calage maximal\n                d = .........\n            return (....., .....)\n    #si on est arriv\u00e9 l\u00e0, c'est qu'il y a eu correspondance parfaite : on a trouv\u00e9 une occurrence. D\u00e9calage \u00e0 0\n    return (True, 0)\n</code></pre> \ud83d\udc0d Script Python<pre><code>def correspondance(texte, motif, i, aDroite):\n    ''' On suppose que le dictionnaire pour le motif a d\u00e9j\u00e0 \u00e9t\u00e9 calcul\u00e9 au niveau global\n    Cette fonction, pour une fen\u00eatre en position i, teste si le motif correspond et sinon, indique quel d\u00e9calage appliquer'''\n    n = len(texte)\n    p = len(motif)\n    for j in range(p-1, -1, -1): #on balaie cette fois la fen\u00eatre de droite \u00e0 gauche : de p-1 \u00e0 0 inclus en d\u00e9croissant\n        x = texte[i+j]\n        if x != motif[j]:\n            #on calcule le d\u00e9calage\n            #on teste d\u00e9j\u00e0 si x est dans le motif quelque part\n            if x in aDroite.keys():\n                r = aDroite[x] #position la plus \u00e0 droite\n                d = j - r #d\u00e9calage\n            else:\n                #x n'est pas dans le motif : d\u00e9calage maximal\n                d = j+1\n            return (False, d)\n    #si on est arriv\u00e9 l\u00e0, c'est qu'il y a eu correspondance parfaite : on a trouv\u00e9 une occurrence. D\u00e9calage \u00e0 0\n    return (True, 0)\ntexte = 'CAATGTCTGCACCAAGAC'\nmotif = 'CAAG'\naDroite = construitADroite(motif)\nassert(correspondance(texte, motif, 0, aDroite)==(False, 4))\nassert(correspondance(texte, motif, 3, aDroite)==(False, 3))\nassert(correspondance(texte, motif, 7, aDroite)==(False, 1))\nassert(correspondance(texte, motif, 12, aDroite)==(True, 0))\n</code></pre>"},{"location":"T3_Algorithmique/3.3_Recherche_textuelle/cours/#223-ecriture-de-la-fonction-de-recherche-finale","title":"2.2.3 Ecriture de la fonction de recherche finale","text":"<p>Maintenant qu'on a la fonction <code>correspondance</code>, on peut passer \u00e0 l'\u00e9criture de la fonction de recherche finale.</p> <p>Cette fonction <code>recherche(texte, motif)</code> : - calcule d'abord le dictionnaire des positions \u00e0 droite pour le motif - puis parcourt le texte de gauche \u00e0 droite en appliquant \u00e0 chaque \u00e9tape le d\u00e9calage calcul\u00e9 par la fonction <code>correspondance</code>. - Elle renvoie l'indice de la premi\u00e8re occurrence du motif cherch\u00e9, ou \u00e0 d\u00e9faut -1 s'il ne s'y trouve pas.</p> <p>C'est donc quasiment la m\u00eame qu'en partie 2 : la seule diff\u00e9rence est qu'elle calcule le dictionnaire !</p> <p>Recherche Finale</p> A faireCorrection <p>\u00e9crire ci-dessous cette fonction finale de <code>recherche</code></p> \ud83d\udc0d Script Python<pre><code>def recherche(texte, motif):\n    n = len(texte)\n    p = len(motif)\n    aDroite = construitADroite(motif)\n    i = 0\n    while i+p &lt;=n:\n        ok, decalage = correspondance(texte, motif, i, aDroite)\n        if ok==True:\n            return i\n        else:\n            i = i + decalage\n    return -1\ntexte = 'CAATGTCTGCACCAAGAC'\nmotif = 'CAAG'\nassert(recherche(texte, motif) == 12)\nassert(recherche(texte, 'BB') == -1)\n</code></pre>"},{"location":"T3_Algorithmique/3.3_Recherche_textuelle/cours/#3-bonus-comparaison-des-temps-de-calcul","title":"3. Bonus : comparaison des temps de calcul","text":"\ud83d\udc0d Script Python<pre><code>texte_pire = 'A'*10**6\nmotif_pire = 'A'*10*3+'B'\n\nimport time\ntop = time.time()\ng = recherche(texte_pire, motif_pire)\nt_fin = time.time()\nprint(t_fin - top)\nprint(g)\ntop = time.time()\nh = recherche_naive(texte_pire, motif_pire)\nt_fin = time.time()\nprint(t_fin - top)\nprint(h)\n</code></pre>"},{"location":"T4_Bases_de_donnees/sommaire/","title":"Sommaire","text":"<p>Cr\u00e9dit</p> <p>@cr\u00e9dits du cours : olivier l\u00e9cluse, lyc\u00e9e Salvador Allende Exercices de r\u00e9vision de type BAC : forge NSI</p> <ol> <li>Cours Mod\u00e9le relationnel</li> <li>Cr\u00e9ation de Base de donn\u00e9es</li> <li>Manipulation des base de donn\u00e9es</li> <li>Mise \u00e0 jour de base de donn\u00e9es</li> <li>Exploiter une base de donn\u00e9es avec Python</li> <li>Exploiter un DataSet</li> </ol>"},{"location":"T4_Bases_de_donnees/4.1_modele_relationnel/cours/","title":"Le mod\u00e8le relationnel","text":"<p>Credits</p> <ul> <li>Wikipedia</li> <li>cours de F. Duchateau, LIRIS, S. Kaci Universit\u00e9 Montpellier 2, B. Mermet, Universit\u00e9 le Havre,4</li> <li>Cours de Fr\u00e9d\u00e9ric Mandon sous licence Creative Commons BY NC SA</li> <li>Cours de Olivier Lecluse (licence by SA 2020)</li> </ul>"},{"location":"T4_Bases_de_donnees/4.1_modele_relationnel/cours/#introduction","title":"Introduction","text":"<p>Le d\u00e9veloppement des traitements informatiques n\u00e9cessite la manipulation de donn\u00e9es de plus en plus nombreuses. Leur organisation et leur stockage constituent un enjeu essentiel de performance.</p> <p>Vous avez vu l'an dernier une mani\u00e8re de stocker et manipuler des donn\u00e9es structur\u00e9es \u00e0 l'aide de diff\u00e9rents formats (dictionnaire, CSV). Ces formats bas\u00e9s essentiellement sur du texte sont faciles \u00e0 mettre en oeuvre et \u00e0 utiliser mais ne sont pas adapt\u00e9s au traitement d'un grand nombre d'informations, en particulier lorsque celles-ci se trouvent r\u00e9parties dans plusieurs tables ou fichiers : Imaginez une compagnie charg\u00e9e de l'organisation de la circulation des trains sur le territoire national g\u00e9rant les r\u00e9servations et l'exploitation des trains avec des fichiers CSV !</p> <p>Les premi\u00e8res bases de donn\u00e9es sont apparues dans les ann\u00e9es 1960 et se sont d\u00e9velopp\u00e9es en m\u00eame temps que l'informatique. Dans les ann\u00e9es 1980 est apparu le langage SQL sp\u00e9cialement con\u00e7u pour faire des requ\u00eates (s\u00e9lectionner, filtrer, mettre \u00e0 jour) sur les syst\u00e8mes de bases de donn\u00e9es. Nous aborderons ce nouveau langage particulier dans cette partie.</p> <p>De nos jours les bases de donn\u00e9es sont omnipr\u00e9sentes, en particulier sur le web. La plupart des sites, en particulier dans le commerce en ligne, y font largement appel.</p>"},{"location":"T4_Bases_de_donnees/4.1_modele_relationnel/cours/#gerer-efficacement-les-donnees","title":"G\u00e9rer efficacement les donn\u00e9es","text":"<p>Dans une base de donn\u00e9es, l'information est stock\u00e9e dans des fichiers, mais ceux-ci ne sont en g\u00e9n\u00e9ral pas lisible par un humain : ils n\u00e9cessitent l'utilisation d'un syst\u00e8me de base de donn\u00e9es (SGBD) pour les exploiter. Ceux-ci permettent :     - de lire, \u00e9crire, modifier, effacer, mettre en relation des donn\u00e9es dans les diff\u00e9rentes tables     - de g\u00e9rer les utilisateurs ayant acc\u00e8s aux donn\u00e9es     - de g\u00e9rer les droits d'acc\u00e8s aux diff\u00e9rentes donn\u00e9es     - d'assurer la s\u00e9curit\u00e9 et l'int\u00e9grit\u00e9 des donn\u00e9es y compris lorsque plusieurs utilisateurs acc\u00e8dent simultan\u00e9ment aux m\u00eames donn\u00e9es.</p>"},{"location":"T4_Bases_de_donnees/4.1_modele_relationnel/cours/#les-grands-logiciels-de-sgbdr","title":"Les grands logiciels de SGBDR","text":"<p>Parmis les logiciels de gestion de bases de donn\u00e9es les plus connus, nous avons</p> <p>Dans le domaine du libre :   mariaDb / mySQL      postgreSQL</p> <p>Dans le monde propri\u00e9taire, les plus connus sont :  IBM DB2      Oracle Database      Microsoft SQL Server.</p> <p>Ce sont de tr\u00e8s gros logiciels, fonctionnant en mode client/serveur, assez complexes \u00e0 mettre en oeuvre et \u00e0 utiliser. Ils sont con\u00e7us pour g\u00e9rer plusieurs millions, voire milliards d'enregistrement de mani\u00e8re fiable et s\u00e9curis\u00e9e. Leur architecture c\u00f4t\u00e9 serveur est pr\u00e9vue pour \u00eare r\u00e9partie sur plusieurs machines et ainsi permettre une tenue en charge lorsqu'un grand nombre de requ\u00eates parviennent.</p> <p>En ce qui nous concerne, nous utiliserons dans la suite un outil libre simple \u00e0 mettre en oeuvre mais permettant tout de m\u00eame de se familiariser avec le langage SQL : SQLite.</p>"},{"location":"T4_Bases_de_donnees/4.1_modele_relationnel/cours/#le-modele-relationnel_1","title":"Le mod\u00e8le relationnel","text":"<p>Les informations et les donn\u00e9es sont collect\u00e9es depuis longtemps par les \u00e9tats, ou par diverses organisations.  Le stockage des donn\u00e9es a \u00e9volu\u00e9 des fiches papier aux fiches cartonn\u00e9es, puis aux fichiers informatiques, et enfin aux bases de donn\u00e9es. </p> <p>Comment faire pour construire un bon mod\u00e8le pour une base de donn\u00e9es ?  Mod\u00e9liser, c\u2019est d\u00e9finir un monde abstrait qui co\u00efncide avec une partie de l\u2019apparence du r\u00e9el.  Bien mod\u00e9liser, c\u2019est faire que ce monde abstrait soit structur\u00e9, performant, et accessible facilement. Dans ce paragraphe, on va se concentrer sur le niveau logique de la repr\u00e9sentation des donn\u00e9es : le mod\u00e8le relationnel.</p>"},{"location":"T4_Bases_de_donnees/4.1_modele_relationnel/cours/#1-un-exemple","title":"1.  Un exemple","text":"<p>Un club de sports dispose des donn\u00e9es suivantes :</p> Pr\u00e9nom Nom Sport Niveau Date derni\u00e8re comp\u00e9tition Classement derni\u00e8re comp\u00e9tition Code sport Colette Mavall\u00e9e P\u00e9tanque d\u00e9butant Montpellier aucune 0 P1 Berthe Mavall\u00e9e P\u00e9tanque national Montpellier 01/01/2020 1 P1 Janine Tutor Fl\u00e9chettes R\u00e9gional Saint-Cl\u00e9ment 15/12/2019 5 F2 Am\u00e9lie Diodeuor Aquaponey D\u00e9partemental Saint-G\u00e9ly 25/08/2020 2 A2 Hans Kimkonzern Fl\u00e9chettes D\u00e9butant Saint-G\u00e9ly aucune 0 F2 Janine Tutor Aquaponey Confirm\u00e9 Saint-Cl\u00e9ment 31/05/2020 8 A2"},{"location":"T4_Bases_de_donnees/4.1_modele_relationnel/cours/#a-premier-modele-fichier-informatique-de-type-tableur-open-office-excel-etc","title":"a. Premier mod\u00e8le : fichier informatique de type tableur (Open Office, Excel, etc.)","text":"<p>Dans le mod\u00e8le relationnel, ces donn\u00e9es sont alors mod\u00e9lis\u00e9es sous la forme de la relation (dite aussi table) <code>Club = { Pr\u00e9nom String , Nom String , Sport String , Adresse String , DateC Date , Classement Int , Code_Sport String }</code></p> <p>On garde les donn\u00e9es exactement comme elles sont pr\u00e9sent\u00e9es ci-dessus. Les anomalies suivantes peuvent se produire : - Redondance lorsqu\u2019un homonyme s\u2019inscrit. - Modification : si le code sport de P\u00e9tanque devient P3 en premi\u00e8re ligne, alors il est n\u00e9cessaire de modifier d\u2019autres lignes - Suppression : des informations d\u00e9pendant d\u2019autres informations. Par exemple, supprimer un sport demande aussi de supprimer son code. - Insertion : ins\u00e9rer un nouvel enregistrement demande la connaissance de toutes les informations qui lui sont li\u00e9es. Un nouvel inscrit doit imm\u00e9diatement choisir un sport.</p>"},{"location":"T4_Bases_de_donnees/4.1_modele_relationnel/cours/#b-deuxieme-modele-trois-relations","title":"b. Deuxi\u00e8me mod\u00e8le : trois relations","text":"<p>La base de donn\u00e9es est constitu\u00e9e de trois relations Inscrit , Sport , Comp\u00e9tition.  Les sch\u00e9mas de ces relations sont : </p> \ud83d\udccb Texte<pre><code>Inscrit = { Identifiant_I Int, Pr\u00e9nom String , Nom String , Adresse String }\nSport = { Code_Sport String,  Sport String , Horaire String}\nPratiquant = { Identifiant_I Int, Code_Sport String , Niveau String }\nComp\u00e9tition = { Identifiant_I Int, , DateC Date , Code_Sport String , Classement Int }\n</code></pre> <p>Les d\u00e9fauts identifi\u00e9s ci-dessus disparaissent au moins partiellement, et la gestion globale des donn\u00e9es est bien plus simple : pas de redondance, des tables plus simples, insertion/modification/suppression plus simples \u00e9galement.</p> <p>A retenir</p> <p></p>"},{"location":"T4_Bases_de_donnees/4.1_modele_relationnel/cours/#2-les-contraintes","title":"2.  Les contraintes","text":"<p>Les contraintes d\u2019int\u00e9grit\u00e9 sont des r\u00e8gles permettant de garantir la coh\u00e9rence des donn\u00e9es lors de la mise \u00e0 jour de la base.</p>"},{"location":"T4_Bases_de_donnees/4.1_modele_relationnel/cours/#a-contraintes-dentite","title":"a. Contraintes d\u2019entit\u00e9","text":"<p>La contrainte d\u2019entit\u00e9 permet de s\u2019assurer que chaque enregistrement de la relation est unique. Comme on l\u2019a vu ci-dessus, la donn\u00e9e d\u2019un nom et pr\u00e9nom ne suffit pas vu l\u2019existence d\u2019homonymes. Par ailleurs rajouter l\u2019adresse en plus n\u2019est pas une solution pratique, vu que la personne peut d\u00e9m\u00e9nager. C\u2019est pour cela que l\u2019on rajoute parfois un identifiant unique : num\u00e9ro de s\u00e9curit\u00e9 sociale, num\u00e9ro de candidat pour le bac.</p> <p>Remarques : -   L\u2019existence de num\u00e9ros distincts pour la m\u00eame personne, suivant les domaines, se justifie pour des raisons soci\u00e9tales. En effet un unique num\u00e9ro pour tout permettrait un croisement de fichiers tr\u00e8s intrusif pour la vie priv\u00e9e (personne n\u2019a besoin de savoir que M. X, num\u00e9ro de s\u00e9curit\u00e9 sociale xx, a profit\u00e9 de son cong\u00e9 maladie pour exploser son record \u00e0 Candy Crush o\u00f9 il serait identifi\u00e9 sous le m\u00eame num\u00e9ro)</p> <ul> <li> <p>Un couple, plus g\u00e9n\u00e9ralement un n-uplet, peut servir d\u2019identifiant unique. Si l\u2019on cr\u00e9e une base de donn\u00e9es des \u00e9l\u00e8ves de terminale NSI du Lyc\u00e9e Jean Jaur\u00e8s, le couple (Nom , Pr\u00e9nom) vous identifie bien individuellement.   Il n'existe qu'un seul identifiant par table mais pouvant porter sur plusieurs attributs.</p> </li> <li> <p>En th\u00e9orie, toutes les relations doivent avoir une cl\u00e9 primaire. En pratique, il arrive que certaines n\u2019en aient pas, on cr\u00e9e dans ce cas un index pour rechercher un enregistrement dans la table (recherche dichotomique).</p> </li> </ul> <p>L\u2019attribut ou l\u2019ensemble d\u2019attributs permettant l\u2019identification de l\u2019enregistrement est appel\u00e9  cl\u00e9 primaire de la relation, et est not\u00e9 dans le sch\u00e9ma par soulignement</p> <p>Exemple : <code> Inscrit = { Identifiant_I Int, Pr\u00e9nom String , Nom String , Adresse String } Sport = { Code_Sport String,  Sport String , Horaire String} Pratiquant = { Identifiant_I Int, Code_Sport String , Niveau String } Comp\u00e9tition = { Identifiant_I Int, , DateC Date , Code_Sport String , Classement Int } </code></p>"},{"location":"T4_Bases_de_donnees/4.1_modele_relationnel/cours/#b-contraintes-de-reference","title":"b. Contraintes de r\u00e9f\u00e9rence","text":"<p>Les relations Pratiquant et Comp\u00e9tition font r\u00e9f\u00e9rence \u00e0 des attributs d\u2019autres tables. Lorsqu\u2019on enregistre une nouvelle ligne dans ces tables, on v\u00e9rifie que les attributs r\u00e9f\u00e9renc\u00e9s existent : ce sont des cl\u00e9s \u00e9trang\u00e8res. On les note dans le sch\u00e9ma par un <code>#</code> .  <code> Pratiquant = { #Identifiant_I Int, #Code_Sport String , Niveau String } Comp\u00e9tition = { #Identifiant_I Int, , DateC Date , #Code_Sport String , Classement Int } </code></p> <p>Remarque : lors de la cr\u00e9ation de la base de donn\u00e9es, on cr\u00e9e d\u2019abord les tables sans cl\u00e9s \u00e9trang\u00e8res, puis les tables avec cl\u00e9s \u00e9trang\u00e8res. En effet le SGBD v\u00e9rifie la coh\u00e9rence  au fur et \u00e0 mesure de la construction.   Remarque 2 : Une cl\u00e9 \u00e9trang\u00e8re d\u00e9signe TOUJOURS une cl\u00e9 primaire. Les deux attributs doivent \u00eatre STRICTEMENT du m\u00eame type de donn\u00e9es. </p>"},{"location":"T4_Bases_de_donnees/4.1_modele_relationnel/cours/#c-contraintes-de-domaine","title":"c. Contraintes de domaine","text":"<p>Les contraintes de domaine concernent les attributs. On les a exprim\u00e9es ici sous forme de type \u00ab g\u00e9n\u00e9rique \u00bb, String, Int ou Date. On dispose d\u2019autres types, Float, Boolean, Time, \u2026 qui d\u00e9pendent en fait du SGB utilis\u00e9.  On verra par la suite sur SQL qu\u2019en effet ces contraintes s\u2019expriment l\u00e9g\u00e8rement diff\u00e9remment. On peut \u00e9galement pr\u00e9ciser qu\u2019une valeur doit \u00eatre non nulle.  Par exemple lorsque l\u2019on cr\u00e9e un nouvel adh\u00e9rent, son adresse pourrait ne pas \u00eatre imm\u00e9diatement renseign\u00e9e, mais pas ses nom et pr\u00e9nom. </p>"},{"location":"T4_Bases_de_donnees/4.1_modele_relationnel/cours/#d-contraintes-utilisateur","title":"d. Contraintes utilisateur","text":"<p>Ce sont des contraintes sp\u00e9cifiques qui ne rentrent pas dans les cat\u00e9gories pr\u00e9c\u00e9dentes.  Par exemple, on peut pr\u00e9ciser que le niveau est forc\u00e9ment dans la liste (d\u00e9butant, confirm\u00e9, d\u00e9partemental, r\u00e9gional, national, international, intergalactique), qu\u2019un num\u00e9ro de t\u00e9l\u00e9phone portable d\u00e9bute par +33 suivi par un 6 ou un 7,  puis est suivi de 8 chiffres, qu\u2019un \u00e9mail est de la forme : une cha\u00eene de caract\u00e8res sans @, un seul caract\u00e8re @, au moins un caract\u00e8re, un point, et encore au moins un autre caract\u00e8re.</p>"},{"location":"T4_Bases_de_donnees/4.1_modele_relationnel/cours/#ii-le-langage-sql","title":"II - Le langage SQL","text":"<p>Au niveau de la terminale retenez les structures des requ\u00eates :</p> <p>\u2022   d\u2019exploration des donn\u00e9es, version programme de Terminale NSI</p> \ud83d\uddc2\ufe0f SQL<pre><code>SELECT liste d\u2019attributs (et fonctions d\u2019agr\u00e9gation)\nFROM table\nINNER JOIN table ON \u00e9galit\u00e9 d\u2019attributs\nWHERE condition(s) \nORDER BY attributs de tri (chaque attribut suivi de DESC ou ASC)\n</code></pre> <p>\u2022   d\u2019un ajout d\u2019enregistrement \ud83d\uddc2\ufe0f SQL<pre><code>INSERT INTO table (liste d\u2019attributs facultative) VALUES liste de valeurs\n</code></pre></p> <p>\u2022   de modification d\u2019enregistrement(s) \ud83d\uddc2\ufe0f SQL<pre><code>UPDATE table SET att1 = val1 , att2 = val2,\u2026 (WHERE condition)\n</code></pre></p> <p>\u2022   de suppression d\u2019un enregistrement \ud83d\uddc2\ufe0f SQL<pre><code>DELETE FROM table WHERE condition\n</code></pre> Si vous voulez aller un peu plus loin retenez les structures des requ\u00eates :</p> <p>\u2022   d\u2019exploration des donn\u00e9es, version programme de Terminale NSI + compl\u00e9ments : \ud83d\uddc2\ufe0f SQL<pre><code>SELECT liste d\u2019attributs (et fonctions d\u2019agr\u00e9gation)\nFROM table\nINNER JOIN table ON \u00e9galit\u00e9 d\u2019attributs\nWHERE condition(s) \nORDER BY attributs de tri (chaque attribut suivi de DESC ou ASC)\n</code></pre></p> <p>\u2022   de cr\u00e9ation de table \ud83d\uddc2\ufe0f SQL<pre><code>CREATE table (\nAttribut1 type de donn\u00e9es, (contrainte(s))\n\u2026\nPRIMARY KEY attribut\nFOREIGN KEY attribut REFERENCES autre_table.attribut\n)\n</code></pre></p> <p>\u2022   de suppression de table \ud83d\uddc2\ufe0f SQL<pre><code>DROP table (IF EXISTS)\n</code></pre></p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_1/","title":"D\u00e9couverte du langage SQL","text":"<p>T\u00e9l\u00e9chargement</p> <p>Vous pouvez t\u00e9l\u00e9charger le notebook du cours ici</p> <p>Dans ce TP jous allons d\u00e9couvrir le langage SQL (Structured Query Language) qui est le langage utilis\u00e9 pour effectuer des requ\u00eates sur une base de donn\u00e9es relationnelles. Nous apprendrons lors de ce TP \u00e0 :  - cr\u00e9er des tables avec les attributs que l'on souhaite - ins\u00e9rer des enregistrements - faire des requ\u00eates sur la base pour extraire des informations</p> <p>Contrairement aux apparences, nous n'utiliserons pas Python dans ce classeur, mais directement SQL gr\u00e2ce \u00e0 l'extension ipython-sql qu'il faut activer en ouvrant une console Anaconda prompt et taper les commandes suivantes :</p> <p>```Python Console Session pip install jupyter-sql pip install ipython-sql \ud83d\udccb Texte<pre><code>puis relancer jupyter.\n\nOn charge le module SQL avec la commande suivante\n\n```Python Console Session\n%load_ext sql\n</code></pre></p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_1/#creer-la-base-de-donnees","title":"Cr\u00e9er la base de donn\u00e9es","text":"<p>Nous allons commencer par cr\u00e9er une base vide dans laquelle nous allons travailler :</p> \ud83d\udc0d Script Python<pre><code>%sql sqlite:///livres_db\n</code></pre> <p>La base s'appelle livres_db et est au format sqlite qui est un gestionnaire de base de donn\u00e9es relationnelles l\u00e9ger et facile \u00e0 prendre en main.</p> <p>Les donn\u00e9es seront inscrites dans le fichier livres_db qui vient d'\u00eatre cr\u00e9\u00e9 \u00e0 c\u00f4t\u00e9 de ce classeur et que vous pourrez retrouver dans votre travail de travail quand vous aurez fini ce chapitre.</p> <p>L'objectif est de peupler une base de donn\u00e9es avec la base livres dont voici le mod\u00e8le relationnel. Cette base sera constitu\u00e9e de 4 tables :</p> <p><code> LANGUE (idLangue int, langue str) AUTEUR (idAuteur&gt; int, nom str, prenom str, anneeNaissance int, #idLangue int) THEME (idTheme int, theme str) LIVRE (idLivre int, titre str, #idAuteur int, #idTheme int) </code></p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_1/#creer-une-table","title":"Cr\u00e9er une table","text":"<p>Il est temps de commencer \u00e0 peupler notre base de donn\u00e9es. Nous allons commencer par cr\u00e9er la table Langues en saisissant notre premi\u00e8re requ\u00eate :</p> \ud83d\uddc2\ufe0f SQL<pre><code>%%sql \nCREATE TABLE Langues \n(\nIdLangue INTEGER  PRIMARY KEY,\nLangue   TEXT\n);\n</code></pre>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_1/#quelques-explications","title":"Quelques explications :","text":"<p>Pour commencer, dans jupyter lorsque nous voulons taper une commande SQL et non du langage python. Pour cela, nous inscrirons en premi\u00e8re ligne de cellule la commande magique <code>%%sql</code>. N'oubliez jamais de commencer toutes vos cellules ainsi car sinon, la commande sera interpr\u00e9t\u00e9e par python et non SQL.</p> <p>La premi\u00e8re requ\u00eate SQL que nous allons apprendre est la requ\u00eate <code>CREATE TABLE</code> - on indique le nom de la table \u00e0 cr\u00e9er - entre parenth\u00e8se on liste les attributs \u00e0 mettre ainsi que leur type. - une requ\u00eate se termine toujours par ;</p> <p>Nous avons deux types diff\u00e9rents dans notre base de donn\u00e9es : - le type TEXT pour tout ce qui est cha\u00eene de caract\u00e8res - le type INTEGER pour les entiers</p> <p>L'attribut IdLangue est la  cl\u00e9 primaire de la table. C'est un entier qui commence \u00e0 1 et qui sera automatiquement incr\u00e9ment\u00e9 au fur \u00e0 mesure que l'on ins\u00e8re des donn\u00e9es dans la table. C'est en indiquant <code>PRIMARY KEY</code> apr\u00e8s le type dans la d\u00e9claration de l'attribut IdLangue que sqlite se comporte ainsi.</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_1/#inserer-des-enregistrements-dans-la-table","title":"Ins\u00e9rer des enregistrements dans la table","text":"<p>Maintenant que nous avons une table vide, il nous faut la remplir avec les donn\u00e9es sur les auteurs. Nous utiliserons pour cela la requ\u00eate INSERT. Voici son utilisation :</p> \ud83d\uddc2\ufe0f SQL<pre><code>%%sql\nINSERT INTO Langues \n    (Langue)\nVALUES\n    (\"Anglais\"),\n    (\"Fran\u00e7ais\");\n</code></pre>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_1/#quelques-explications_1","title":"Quelques explications :","text":"<p>La requ\u00eate INSERT s'utilise ainsi :</p> \ud83d\uddc2\ufe0f SQL<pre><code>INSERT INTO ##TABLE##\n    (## attributs dont on donne les valeurs##)\nVALUES\n    (## enregistrement 1 ##),\n    ...\n    (## enregistrement n ##);\n</code></pre> <p>On peut refaire une autre requ\u00eate INSERT \u00e0 la suite si on souhaite ajouter encore des donn\u00e9es au bout de la table. </p> <p>Vous remarquez que l'on ne donne pas de valeur pour l'attribut IdLangue. C'est parce qu'on l'a d\u00e9clar\u00e9 en <code>PRIMARY KEY</code>. Il est donc automatiquement g\u00e9r\u00e9 par sqlite. Nous verrons cela en lisant le contenu complet de la table.</p> <p>On est pas oblig\u00e9 de pr\u00e9ciser tous les attributs. IdLangue est un exemple particulier, mais il est possible d'omettre d'autres attributs. Ils seront alors affect\u00e9s d'une valeur nulle.</p> <p>A l'issue de la requ\u00eate, sqlite nous informe que 2 lignes ont \u00e9t\u00e9 cr\u00e9\u00e9es.</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_1/#lire-le-contenu-dune-table","title":"Lire le contenu d'une table","text":"<p>Nous allons \u00e0 pr\u00e9sent utiliser une requ\u00eate SELECT afin de r\u00e9cup\u00e9rer le contenu de la table. Ces requ\u00eates peuvent \u00eatre tr\u00e8s sophistiqu\u00e9es comme on va le voir en fin de TP. Pour le moment, nous nous contenterons de la forme la plus simple :</p> \ud83d\uddc2\ufe0f SQL<pre><code>%%sql\n\nSELECT * FROM Langues;\n</code></pre> \ud83d\udccb Texte<pre><code>     * sqlite:///livres_db\n    Done.\n</code></pre> IdLangue Langue 1 Anglais 2 Fran\u00e7ais <p>Vous voyez donc appra\u00eetre le contenu de la table. Vous constatez que la cl\u00e9 primaire IdLangue a bien \u00e9t\u00e9 g\u00e9n\u00e9r\u00e9e correctement.</p> <p>Il est possible de stocker le r\u00e9sultat de cette requ\u00eate dans une variable pour l'exploiter plus facilement dans jupyter. Voici comment proc\u00e9der en modifiant l\u00e9g\u00e8rement la premi\u00e8re ligne :</p> \ud83d\udc0d Script Python<pre><code>resultat = %sql SELECT * FROM Langues;\n</code></pre> <p>Vous voyez au passage la syntaxe concise permettant de r\u00e9cup\u00e9rer le r\u00e9sultat d'une requ\u00eate dans une variable. Cette variable r\u00e9sultat est exploitable dans ce classeur, y compris par python !!</p> <p>A faire</p> <p>Essayer de manipuler la variable <code>resultat</code> avec print, type. Essayer de s\u00e9lectionner le premier \u00e9l\u00e9ment</p> <p>On a donc ici le meilleur des deux mondes : des requ\u00eates SQL et une base de donn\u00e9es pour stocker efficacement les donn\u00e9es, le langage python pour traiter ces donn\u00e9es gr\u00e2ce \u00e0 des algorithmes faciles \u00e0 \u00e9crire.</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_1/#table-auteur","title":"Table Auteur","text":"<p>A faire</p> <p>Cr\u00e9ez la table Auteurs afin que celle-ci refl\u00e8te les informations suivantes :</p> Nom Prenom annee naissance langue Orwell George 1903 Anglais Herbert Frank 1920 Anglais Asimov Isaac 1920 Anglais Huxley Aldous 1894 Anglais Bradbury Ray 1920 Anglais K. Dick Philip 1928 Anglais Barjavel Ren\u00e9 1911 Fran\u00e7ais Boulle Pierre 1912 Fran\u00e7ais Van Vogt Alfred Elton 1912 Anglais Verne Jules 1828 Fran\u00e7ais <p>Pour cela, vous utiliserez la commande suivante pour cr\u00e9er la table et vous adapterez les donn\u00e9es \u00e0 cette structure.</p> \ud83d\uddc2\ufe0f SQL<pre><code>%%sql \nCREATE TABLE Auteurs (\n    IdAuteur       INTEGER  PRIMARY KEY,\n    NomAuteur      TEXT,\n    PrenomAuteur   TEXT,\n    IdLangue       INTEGER,\n    AnneeNaissance INTEGER,\n    FOREIGN KEY(IdLangue) REFERENCES Langues(IdLangue)\n);\n</code></pre> <p>Une nouveaut\u00e9 appara\u00eet ici dans la cr\u00e9ation de la table : La table Auteurs poss\u00e8de une cl\u00e9 \u00e9tang\u00e8re : IdLangue. Cette cl\u00e9 est un entier.</p> <p>Remarquez la ligne <code>FOREIGN KEY(IdLangue) REFERENCES Langues(IdLangue)</code>. Celle-ci permet de d\u00e9clarer une contrainte sur cette cl\u00e9 afin d'indiquer \u00e0 SQLite que IdLangue est une cl\u00e9 \u00e9trang\u00e8re. SQLite sera alors responsable de maintenir la coh\u00e9rence entre les deux tables que l'on a ainsi reli\u00e9e.</p> <p>Cette d\u00e9claration est obligatoire pour garantir l'int\u00e9grit\u00e9 r\u00e9f\u00e9rentielle de la base de donn\u00e9es.</p> <p>A faire</p> RequeteCorrection <p>Ajoutez les occurrences d'auteur \u00e0 la la table Auteurs afin que celle-ci refl\u00e8te les informations ci dessus :</p> \ud83d\uddc2\ufe0f SQL<pre><code>%%sql \n\nINSERT INTO Auteurs (idAuteur, NomAuteur, ...)\nVALUES\n(1, \"Orwell\", \"Georges\", ...)\n</code></pre>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_1/#table-theme-et-table-livre","title":"Table Theme et Table Livre","text":"<p>Notre base n'est pas encore compl\u00e8te : il nous reste \u00e0 cr\u00e9er les tables Livres et Themes qui doivent refl\u00e9ter le contenu suivant :</p> Titre NomAuteur PrenomAuteur AnneeNaissance Langue AnneePubli Themes 1984 Orwell George 1903 Anglais 1949 Totalitarisme, science-fiction, anticipation, Dystopie Dune Herbert Frank 1920 Anglais 1965 science-fiction, anticipation Fondation Asimov Isaac 1920 Anglais 1951 science-fiction, Economie Le meilleur des mondes Huxley Aldous 1894 Anglais 1931 Totalitarisme, science fiction, dystopie Fahrenheit 451 Bradbury Ray 1920 Anglais 1953 science-fiction, Dystopie Ubik K. Dick Philip 1928 Anglais 1969 science-fiction, anticipation Chroniques martiennes Bradbury Ray 1920 Anglais 1950 science-fiction, anticipation La nuit des temps Barjavel Ren\u00e9 1911 Fran\u00e7ais 1968 science-fiction, trag\u00e9die Blade Runner K. Dick Philip 1928 Anglais 1968 Intelligence artificielle, science fiction Les Robots Asimov Isaac 1920 Anglais 1950 science fiction, Intelligence artificielle La Plan\u00e8te des singes Boulle Pierre 1912 Fran\u00e7ais 1963 science fiction, Dystopie Ravage Barjavel Ren\u00e9 1911 Fran\u00e7ais 1943 Science-Fiction, anticipation Le Ma\u00eetre du Haut Ch\u00e2teau K. Dick Philip 1928 Anglais 1962 Dystopie, Uchronie Le monde des A Van Vogt Alfred Elton 1912 Anglais 1945 science fiction, IA La Fin de l\u2019\u00e9ternit\u00e9 Asimov Isaac 1920 Anglais 1955 science-fiction, voyage dans le temps De la Terre \u00e0 la Lune Verne Jules 1828 Fran\u00e7ais 1865 Science-Fiction, aventure"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_1/#la-table-livres","title":"La table LIVRES","text":"<p>La table LIVRES devra avoir la structure d\u00e9crite dans l'extrait suivant :</p> IdLivre Titre IdAuteur AnneePubli ... ... ... ... 8 La nuit des temps 7 1968 ... ... ... ... <ul> <li>l'ann\u00e9e de publication est de type INTEGER</li> <li>IdLivre d\u00e9signe bien s\u00fbr la cl\u00e9 primaire</li> <li>IdAuteur est une cl\u00e9 externe faisant r\u00e9f\u00e9rence \u00e0 l'auteur.</li> <li>dans l'extrait, la cl\u00e9 IdAuteur vaut 7. L'auteur de La nuit des temps est donc Barjavel</li> <li>on ne renseigne pas la langue ou l'ann\u00e9e de naissance de l'auteur car ces informations sont d\u00e9j\u00e0 pr\u00e9sentes dans la table Auteurs.</li> <li>On traitera la probl\u00e9matique des th\u00e8mes plus tard...</li> </ul> <p>A faire</p> RequeteCorrection <p>saisissez la requ\u00eate pour cr\u00e9er la table Livres puis ins\u00e9rer les donn\u00e9es dans la table </p> <p>V\u00e9rifiez votre travail en listant tous les enregistrements de la table LIVRES dans la variable <code>resultat</code></p> \ud83d\udc0d Script Python<pre><code>assert (1, '1984', 1, 1949) in resultat\n</code></pre>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_1/#la-table-themes","title":"La table Themes","text":"<p>Traitons \u00e0 pr\u00e9sent la probl\u00e9matique des Th\u00e8mes. La table Themes devra avoir la structure d\u00e9crite dans l'extrait suivant :</p> IdTheme Intitule 1 Science-fiction ... ... <ul> <li>IdTheme d\u00e9signe bien s\u00fbr la cl\u00e9 primaire</li> <li>Intitule est un champ texte contenant l'intitul\u00e9 du th\u00e8me tel qu'il appara\u00eet dans le tableau global.</li> </ul> <p>A faire</p> <p>Dans la cellule ci-dessous, vous saisirez donc 2 requ\u00eates : - Une pour cr\u00e9er la table Themes - Une pour ins\u00e9rer les donn\u00e9es dans la table.</p> <p>V\u00e9rifiez votre travail en lisant tous les enregistrements de la table Themes dans la variable <code>resultat</code></p> \ud83d\udc0d Script Python<pre><code>assert (1, \"Science-fiction\") in resultat\n</code></pre>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_1/#une-table-manquante","title":"Une table manquante !","text":"<p>La saisie de notre base de donn\u00e9e est incompl\u00e8te ! Nous avons en effet saisi tous les auteurs, tous les livres, toutes les langues, tous les th\u00e8mes et pourtant il manque une information. Laquelle ?</p> <p>Quelle solution envisager pour saisir cette information ?</p> <p>A faire</p> <p>Cr\u00e9er une table RelationsLivreTheme mettant en relation les livres et les th\u00e8mes associ\u00e9s. Saisir le contenu de cette table.</p> \ud83d\udc0d Script Python<pre><code>resultat = %sql SELECT IdLivre, IdTheme FROM RelationsLivreTheme;\nassert (1, 1) in resultat\n</code></pre>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_1/#cardinalite","title":"Cardinalit\u00e9","text":"<p>En regardant notre base de donn\u00e9es et les relations que nous avons cr\u00e9\u00e9 entre les tables, on remarque que celles-ci ont des cardinalit\u00e9s diff\u00e9rentes. La cardinalit\u00e9 d'une relation entre deux tables A et B exprime \u00e0 combien d'enregistrements de A peut \u00eatre reli\u00e9 chaque enregistrement de B.</p> <p>Par exemple, \u00e0 un livre est associ\u00e9 un auteur unique, mais pour un auteur donn\u00e9, il peut y avoir plusieurs livres. On parle alors de relation de 1 \u00e0 n</p> <p>Lorsque plusieurs enregistrements de la table A peuvent \u00eatre associ\u00e9s \u00e0 plusieurs enregistrements de la table B, on parle alors d'une relation de n \u00e0 n</p> <p>A vous de jouer</p> <p>Citez dans la base de donn\u00e9es - une relation de 1 \u00e0 n - une relation de n \u00e0 n</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_1/#table-de-relation","title":"Table de relation","text":"<p>Pour une relation de n \u00e0 n, nous aurons en g\u00e9n\u00e9ral recours \u00e0 la cr\u00e9ation d'une nouvelle table de relation contenant les cl\u00e9s externes des tables \u00e0 mettre en relation. C'est ce que nous avons mis en oeuvre pour la table RelationsLivreTheme.</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_2/","title":"Manipulation des base de donn\u00e9es","text":"<p>T\u00e9l\u00e9chargement</p> <p>Dans ce cours, nous poursuivrons l'\u00e9tude de l'exemple de la base de donn\u00e9es de livres de SF et nous verrons des requ\u00eates de s\u00e9lection avanc\u00e9es ainsi que la mani\u00e8re de fusionner plusieurs tables (Jointure).</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_2/#clause-select","title":"Clause SELECT","text":""},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_2/#selection-simple","title":"S\u00e9lection simple","text":"<p> Supposons que l'on veuille lister seulement les noms et pr\u00e9noms des auteurs n\u00e9s avant 1900, on utilisera une clause WHERE condition :</p> \ud83d\udc0d Script Python<pre><code>%sql SELECT NomAuteur, PrenomAuteur from Auteurs WHERE AnneeNaissance &lt; 1900;\n</code></pre> NomAuteur PrenomAuteur Huxley Aldous Verne Jules <p> Pour obtenir les auteurs pr\u00e9nomm\u00e9s Jules :</p> \ud83d\udc0d Script Python<pre><code>%sql SELECT NomAuteur, PrenomAuteur from Auteurs WHERE PrenomAuteur = 'Jules';\n</code></pre> NomAuteur PrenomAuteur Verne Jules <p>Vous voyez que les textes sont d\u00e9limit\u00e9s par des quotes '...'.</p> <p>Attention : essayez de remplacer Jules par jules et vous constaterez que la recherche est sensible aux majuscules.</p> <p> Supposns maintenant que l'on recherche les auteurs dont le pr\u00e9nom commence par P  Nous utiliserons une clause LIKE de cette mani\u00e8re.</p> \ud83d\udc0d Script Python<pre><code>%sql SELECT NomAuteur, PrenomAuteur from Auteurs WHERE PrenomAuteur LIKE 'P%';\n</code></pre>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_2/#selection-multiple","title":"S\u00e9lection multiple","text":"<p>Il est possible de croiser plusieurs crit\u00e8res \u00e0 l'aide d'op\u00e9rateurs booleens : AND et OR. </p> <p> Voici la liste des auteurs fran\u00e7ais n\u00e9s apr\u00e8s 1900 :</p> \ud83d\udc0d Script Python<pre><code>%sql SELECT NomAuteur, PrenomAuteur from Auteurs WHERE IdLangue = 2 AND AnneeNaissance &gt; 1900;\n</code></pre>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_2/#compter-le-nombre-de-reponses-dune-requete-select","title":"Compter le nombre de r\u00e9ponses d'une requ\u00eate SELECT","text":"<p> Combien y a t-il d'auteurs n\u00e9s entre 1900 et 1915 ?  Vous verrez \u00e0 l'occation l'utilisation de l'op\u00e9rateur BETWEEN pour tester l'appartenance \u00e0 un intervalle.</p> \ud83d\udc0d Script Python<pre><code>nbr = %sql SELECT COUNT(*) from Auteurs WHERE AnneeNaissance BETWEEN 1900 AND 1915;\n\nprint(nbr)\nprint(\"r\u00e9cup\u00e9rer juste le nombre : \", nbr[0][0])\n</code></pre>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_2/#trier-les-reponses","title":"Trier les r\u00e9ponses","text":"<p> Nous allons lister tous les auteurs par ordre croissant d'ann\u00e9e de naissance</p> \ud83d\udc0d Script Python<pre><code>%sql SELECT * from Auteurs ORDER BY AnneeNaissance;\n</code></pre> <p> par ordre d\u00e9croissant, on ajoute DESC \u00e0 la fin de la requ\u00eate</p> \ud83d\udc0d Script Python<pre><code>%sql SELECT * from Auteurs ORDER BY AnneeNaissance DESC;\n</code></pre>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_2/#eviter-les-occurrences-multiples","title":"\u00c9viter les occurrences multiples","text":"<p>interrogeons la table Livres sur les ann\u00e9es de publication, rang\u00e9es par ordre croissant :</p> \ud83d\udc0d Script Python<pre><code>%sql SELECT AnneePubli from Livres ORDER BY AnneePubli;\n</code></pre> <p>On constate la pr\u00e9sence de quelques doublons.    Pour \u00e9viter les redondances dans les r\u00e9sultats, on peut rajouter le mot-cl\u00e9 DISTINCT juste apr\u00e8s le SELECT.</p> \ud83d\udc0d Script Python<pre><code>%sql SELECT DISTINCT AnneePubli from Livres ORDER BY AnneePubli;\n</code></pre> <p>!!! example \"A faire     === \"Question\"         1. Donner la liste de tous les titres des livres \u00e9crits entre 1920 et 1950.         2. Combien y en a t-il ?</p> \ud83d\udccb Texte<pre><code>    ```python\n    # V\u00e9rification des r\u00e9ponses\n\n    assert reponse_1[3][0] == 'Les Robots'\n    assert reponse_2[0][0] == 6\n    ```\n=== \"Correction\"\n</code></pre>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_2/#requetes-portant-sur-plusieurs-tables","title":"Requ\u00eates portant sur plusieurs tables","text":"<p>Jusqu'\u00e0 pr\u00e9sent, nos requ\u00eates ne portaient que sur une seule table. N\u00e9anmoins notre liste de livres comporte des donn\u00e9es en provenance de plusieurs tables simultan\u00e9ment. Nous allons voir comment effectuer des requ\u00eates pour croiser des donn\u00e9es en provenance de plusieurs tables.</p> \ud83d\udc0d Script Python<pre><code>%sql SELECT * FROM Langues, Auteurs\n</code></pre> <p>Comme on peut le constater cette requ\u00eate est peu pertinente car elle affiche toutes les donn\u00e9es de chacune des tables sans effectuer de correspondances. La cl\u00e9 de jointure appara\u00eet pourtant ici clairement : il s'agit de id_langue qui doit permettre de recouper les informations entre les deux tables : il est en effet inutile d'afficher les donn\u00e9es pour lesquelles les langues ne correspondent pas entre les deux tables.</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_2/#jointure","title":"Jointure","text":"<p>La jointure consiste \u00e0 croiser les donn\u00e9es de plusieurs tables pour les pr\u00e9senter sous forme d'un seul tableau. On va utiliser ce m\u00e9canisme pour afficher clairement la langue de l'auteur plut\u00f4t qu'un num\u00e9ro qui n'est pas forc\u00e9ment tr\u00e8s parlant. Nous utiliserons pour cela l'op\u00e9rateur JOIN ... ON :</p> \ud83d\udc0d Script Python<pre><code>%sql SELECT NomAuteur, PrenomAuteur, Langue, AnneeNaissance FROM Auteurs JOIN Langues ON Auteurs.IdLangue = Langues.IdLangue\n</code></pre> <p>Les champs sur lesquels faire la jointure ayant les m\u00eames noms dans les 2 tables, cette requ\u00eate peut aussi \u00eatre \u00e9crite plus simplement en utilisant le mot-cl\u00e9 USING ainsi : </p> \ud83d\udc0d Script Python<pre><code>%sql SELECT NomAuteur, PrenomAuteur, Langue, AnneeNaissance  FROM Auteurs JOIN Langues USING (IdLangue)\n</code></pre> <p>A vous de jouer</p> QuestionsCorrection <p>En croisant la table Livres avec la table Auteurs</p> <ol> <li>r\u00e9cup\u00e9rer dans la variable <code>reponse_1</code> une liste dont les attributs sont Titre, PrenomAuteur, NomAuteur et AnneePubli, tri\u00e9e du plus r\u00e9cent au plus ancien.</li> <li>r\u00e9cup\u00e9rer dans la variable <code>reponse_2</code> une liste dont les attributs sont Titre, PrenomAuteur, NomAuteur et AnneePubli \u00e9crits en fran\u00e7ais.</li> </ol> \ud83d\udc0d Script Python<pre><code>assert reponse_1[0] == ('Ubik', 'Philip', 'K. Dick', 1969)\nassert reponse_2[0] == ('La nuit des temps', 'Ren\u00e9', 'Barjavel', 1968)\n</code></pre>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_2/#le-cas-des-relations-de-n-a-n","title":"Le cas des relations de n \u00e0 n","text":"<p>Parfois il arrive que les donn\u00e9es \u00e0 collecter se trouvent dans plus que deux tables : c'est le cas des Th\u00e8mes pour les livres qui n\u00e9cessitent l'analyse de 3 tables : Livres et Th\u00e8mes bien s\u00fbr, mais aussi la table de relation RelationsLivreTheme.</p> <p>Observez et \u00e9tudiez la requ\u00eate suivante : Le principe est d'encha\u00eener deux jointures JOIN ... USING en utilisant la table de Relation au milieu. En effet, la requ\u00eate se lit de la gauche vers la droite et on ne peut faire de jointure que si on a une cl\u00e9 externe en commun, ce qui n'est par exemple pas le cas entre Livres et Th\u00e8mes.</p> \ud83d\udc0d Script Python<pre><code>%sql SELECT Titre, Intitule FROM Livres JOIN RelationsLivreTheme USING (IdLivre) JOIN Themes USING (IdTheme)\n</code></pre> <p>A vous de jouer</p> QuestionCorrection <p>Ecrire une requ\u00eate permettant d'obtenir une liste dont les attributs sont Titre, NomAuteur et Langue tri\u00e9e par ordre croissant de date de naissance de l'auteur.</p> <p>Vous stockerez le r\u00e9sultat dans une variable <code>result</code> \ud83d\udc0d Script Python<pre><code>assert result[0] == ('De la Terre \u00e0 la Lune', 'Verne', 'Fran\u00e7ais')\n</code></pre></p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_3/","title":"Manipuler les donn\u00e9es avec SQL","text":"<p>T\u00e9l\u00e9chargement</p> <p>Vous pouvez t\u00e9l\u00e9charger le notebook du cours ici</p> <p>Dans ce dernier TP, nous allons voir comment ins\u00e9rer, mettre \u00e0 jour ou supprimer des enregistrements dans des tables.</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_3/#inserer-un-enregistrement-dans-une-table","title":"Ins\u00e9rer un enregistrement dans une table","text":"<p>Nous avons d\u00e9j\u00e0 rencontr\u00e9 cerre requ\u00e8te INSERT. Elle s'applique que la table soit vide ou nom. </p> <p> On peut tr\u00e8s bien ajouter par exemple une troisi\u00e8me langue dans notre table Langues</p> \ud83d\udc0d Script Python<pre><code>%sql INSERT INTO Langues (Langue) VALUES('Klingon');\n</code></pre>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_3/#mise-a-jour-effacement-update-et-delete","title":"Mise a jour, effacement : UPDATE et DELETE","text":"<p>Les requ\u00eates UPDATE et DELETE fonctionnent sur le m\u00eame mod\u00e8le que les requ\u00eates SELECT.  Attention, on a vite fait d'effacer toutes ses donn\u00e9es si on ne configure pas bien sa requ\u00eate. Une bonne habitude \u00e0 prendre est de tester d'abord ses crit\u00e8res \u00e0 l'aide d'un SELECT.</p> <p>Observez les exemples ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>%sql SELECT NomAuteur FROM Auteurs WHERE IdAuteur = 10;\n</code></pre> <p>Modifions le nom de l'auteur gr\u00e2ce \u00e0 une requ\u00eate de mise \u00e0 jour : </p> \ud83d\uddc2\ufe0f SQL<pre><code>**UPDATE** *table* &lt;br&gt;\n**SET**  *attribut1* = *valeur1*, *attribut2* = *valeur2*, ...&lt;br&gt;\n**WHERE** *crit\u00e8re*;\n</code></pre> \ud83d\uddc2\ufe0f SQL<pre><code>%%sql \n\nUPDATE Auteurs \nSET NomAuteur = \"Ze Djloule\", PrenomAuteur = \"Juju\"\nWHERE IdAuteur=10;\n\nSELECT * FROM Auteurs ;\n</code></pre> <p>supprimons vite cette entr\u00e9e ! Nous utiliserons une requ\u00eate</p> \ud83d\uddc2\ufe0f SQL<pre><code>**DELETE FROM** *table* **WHERE** *critere*\n</code></pre> <p>Attention : soyez bien s\u00fbr de votre crit\u00e8re sous peine de perdre des donn\u00e9es importantes !</p> \ud83d\uddc2\ufe0f SQL<pre><code>%%sql \n\nDELETE  FROM Auteurs  WHERE IdAuteur=10;\nSELECT * FROM Auteurs;\n</code></pre>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_3/#attention-a-la-coherence-des-donnees","title":"Attention \u00e0 la coh\u00e9rence des donn\u00e9es","text":"<p>Dans une base de donn\u00e9es relationnelle il faut \u00eatre vigilant lors de la suppression d'enregistrements : en effet la suppression d'un enregistrement entra\u00eene la suppression de sa cl\u00e9 primaire qui peut \u00eatre utilis\u00e9e en tant que cl\u00e9 externe dans une autre table. Cela entra\u00eene la corruption des donn\u00e9es. Observez l'exemple ci-dessous dans lequel je me suis attribu\u00e9 un livre c\u00e9l\u00e8bre sans toucher \u00e0 la table Livres</p> <p>Il existe en SQL des moyens pour se pr\u00e9munir de ce type de probl\u00e8mes mais cela d\u00e9passe le cadre de ce cours.</p> \ud83d\uddc2\ufe0f SQL<pre><code>%%sql\nINSERT INTO Auteurs \n    (NomAuteur, PrenomAuteur, IdLangue, AnneeNaissance) \nVALUES\n    (\"DUPONT\", \"Olivier\", 2, 1850);\n\nSELECT Titre, NomAuteur from Livres JOIN Auteurs USING (IdAuteur);\n</code></pre> <p>A faire</p> QuestionCorrection <ol> <li>R\u00e9ins\u00e9rez l'auteur Jules Verne \u00e0 sa place !</li> <li>Supprimez tous les livres \u00e9crits au 19e sciecle</li> </ol>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_4_python/","title":"Exploiter une base de donn\u00e9es avec Python","text":"<p>Dans ce TP, nous allons reprendre notre base de donn\u00e9es d'exemples sur les livres, mais nous allons utiliser Python pour ex\u00e9cuter et exploiter les requ\u00eates SQL. </p> <p>Notre SGBD sera toujours SQLite : le module python que nous utiliserons se nomme sqlite3.</p> \ud83d\udc0d Script Python<pre><code>import sqlite3\n</code></pre> <p>Le module \u00e9tant import\u00e9, nous devons r\u00e9aliser deux actions pour pouvoir commencer \u00e0 utiliser notre base : - ouvrir le fichier de base de donn\u00e9es - cr\u00e9er un curseur</p> <p>Le curseur est un objet python offrant des m\u00e9thodes pour ex\u00e9cuter des requ\u00eates et r\u00e9cup\u00e9rer le ou les r\u00e9sultats de ces requ\u00eates.</p> \ud83d\udc0d Script Python<pre><code>bdd = sqlite3.connect(\"livres_db\")\ncurseur = bdd.cursor()\n</code></pre> <p>livres_db est le nom du fichier contenant la base de donn\u00e9ees SQLite que nous allons exploiter. Si le fichier n'existe pas, une nouvelle base de donn\u00e9es sera cr\u00e9\u00e9e.</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_4_python/#executer-des-requetes-de-selection","title":"Ex\u00e9cuter des requ\u00eates de s\u00e9lection","text":""},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_4_python/#le-principe","title":"Le principe","text":"<p>Reste ensuite \u00e0 ex\u00e9cuter notre premi\u00e8re requ\u00eate. Pour cela, nous utiliserons la m\u00e9thode execute() du curseur, la requ\u00eate \u00e9tant une cha\u00eene de caract\u00e8res pass\u00e9e en param\u00e8tre.</p> \ud83d\udc0d Script Python<pre><code>requete = \"SELECT * FROM Livres;\"\ncurseur.execute(requete)\n</code></pre> <p>Pour visualiser le r\u00e9sultat de notre requ\u00eate, nous utiliserons encore notre curseur. Deux m\u00e9thodes permettent principalement de le faire : - fetchone() pour r\u00e9cup\u00e9rer un r\u00e9sultat puis avancer le curseur d'un cran - fetchall() pour r\u00e9cup\u00e9rer d'un coup tous les r\u00e9sultats. </p> <p>Regardez les exemples ci-dessous pour mieux comprendre comment fonctionne le curseur : il s'agit litt\u00e9ralement d'un curseur que l'on d\u00e9place de r\u00e9sultat en r\u00e9sultat. Vous vous en rendrez compte en ex\u00e9cutant plusieurs fois la cellule ci-dessous.</p> \ud83d\udc0d Script Python<pre><code>curseur.fetchone()\n</code></pre> <p>Vous constatez que le r\u00e9sultat est un tuple  dont les \u00e9l\u00e9ments correspondent aux attributs s\u00e9lectionn\u00e9s : ici c'est *. Il n'est pas facile de se rappeler de l'ordre des attributs. Pour cela vous pouvez faire appel \u00e0 la propri\u00e9t\u00e9 :</p> \ud83d\udc0d Script Python<pre><code>curseur.description\n</code></pre> <p>et pour rendre la r\u00e9ponse plus lisible, une petite liste en compr\u00e9hension ;). Et voil\u00e0 les attributs de colonne en clair dans l'ordre ou ils apparaissent dans le r\u00e9sultat de la requ\u00eate !</p> \ud83d\udc0d Script Python<pre><code>[d[0] for d in curseur.description]\n</code></pre> <p>A pr\u00e9sent, le fonctionnement de fetchall() ne devrait pas vous \u00e9tonner : on r\u00e9cup\u00e8re logiquement un tuple avec tous les r\u00e9sultats.</p> \ud83d\udc0d Script Python<pre><code>curseur.fetchall()\n</code></pre> <p>Si vous avez suivi les instructions pr\u00e9c\u00e9dentes, vous devriez constater qu'il manque des enregistrements. Pourquoi ? Un indice : si vous r\u00e9ex\u00e9cutez une nouvelle fois la m\u00e9thode fetchall() du curseur, celle-ci ne renverra rien !</p> <p>Et oui, c'est la notion de curseur qui se d\u00e9place au fur \u00e0 mesure qu'unb r\u00e9sultat est donn\u00e9 : les pr\u00e9c\u00e9dents appels de fetchone() ont fait avancer le curseur, et de m\u00eame, fetchall() positionne le curseur \u00e0 la toute fin.</p> <p>Pour retrouver tous les r\u00e9sultats \u00e0 nouveau, il faut r\u00e9ex\u00e9cuter la requ\u00eate. Evitez donc de m\u00e9langer fetchone() et fetchall() sous peine de ne plus trop savoir ou en est le curseur et ce que vous r\u00e9cup\u00e9rez.</p> <p>Voici donc le moyen le plus simple de r\u00e9cup\u00e9rer tous les r\u00e9sultats d'une requ\u00eate d'un coup.</p> \ud83d\udc0d Script Python<pre><code>curseur.execute(requete)\nresultats = curseur.fetchall()\nresultats\n</code></pre>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_4_python/#construire-des-requetes-a-partir-de-variables-python","title":"Construire des requ\u00eates \u00e0 partir de variables python","text":"<p>Nous allons dans l'exemple suivant \u00e9crire une fonction prenom()  - qui prend en param\u00e8tre un curseur et un nom d'auteur - qui renvoie son pr\u00e9nom</p> <p>Si le nom de l'auteur ne figure pas dans la table Auteurs, la fonction renverra None.</p> \ud83d\udc0d Script Python<pre><code>def prenom(c, nom):\n    requete = \"SELECT PrenomAuteur FROM Auteurs WHERE NomAuteur = ?\"\n    c.execute(requete, [nom])\n    r = c.fetchall()\n    if len(r) == 0:\n        return None\n    elif len(r) == 1:\n        return r[0][0]\n</code></pre> \ud83d\udc0d Script Python<pre><code>prenom(curseur, \"Verne\")\n</code></pre>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_4_python/#explications","title":"Explications","text":"<p>Dans cet exemple, nous construisons une requ\u00eate \u00e0 partir d'une variable Python. SQLite propose un m\u00e9canisme de substitution s\u00e9curis\u00e9 permettant d'injecter une ou plusieurs variables \u00e0 l'int\u00e9rieur d'une requ\u00eate. C'est ce m\u00e9canisme que vous devez utiliser : ne construisez pas vous m\u00eame la cha\u00eene de caract\u00e8re contenant la requ\u00eate compl\u00e8te, c'est une mauvaise pratique qui vous conduira in\u00e9vitablement \u00e0 des probl\u00e8mes.</p> <p>Pour utiliser ce m\u00e9canisme de substitution, vous devez - mettre des ? dans votre requ\u00eate \u00e0 l'emplacement de la variable \u00e0 ins\u00e9rer - passer en second param\u00e8tre la liste des valeurs \u00e0 substituer dans la requ\u00eate</p> <p>C'est simple, fiable et s\u00e9curis\u00e9, en particulier contre les injections SQL !</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_4_python/#a-vous-de-jouer","title":"A vous de jouer","text":"<p>Ecrivez une fonction romans()  - qui prend en param\u00e8tre un curseur et un nom d'auteur - qui renvoie une liste de Titres de romans \u00e9crits par cet auteur</p> <p>Si le nom de l'auteur ne figure pas dans la table Auteurs, la fonction renverra None.</p> \ud83d\udc0d Script Python<pre><code>def romans(c, nom):\n    # YOUR CODE HERE\n</code></pre> \ud83d\udc0d Script Python<pre><code>assert romans(curseur, \"Asimov\") == ['Fondation', 'Les Robots', 'La Fin de l\u2019\u00e9ternit\u00e9']\nassert romans(curseur, \"Verne\") == ['De la Terre \u00e0 la Lune']\n</code></pre>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_4_python/#inserer-de-nouveaux-enregistrements","title":"Ins\u00e9rer de nouveaux enregistrements","text":"<p>Les requ\u00eates de modification sur la base se font de la m\u00eame mani\u00e8re que les requ\u00eates de s\u00e9lection, \u00e0 une petite subtilit\u00e9 pr\u00e8s : apr\u00e8s ex\u00e9cution de la requ\u00eate, il faudra faire appel \u00e0 la m\u00e9thode commit() de l'objet bdd (issu de la connexion) afin que les modifications soient prises en compte dans le fichier de base de donn\u00e9es. </p> <p>Attention : Si vous oubliez l'appel \u00e0 commit, vos modifications seront perdues lorsque vous quitterez votre programme car elles ne seront pas inscrites dans le fichier de la base de donn\u00e9es.</p> \ud83d\udc0d Script Python<pre><code>requete = \"\"\"\nINSERT INTO Auteurs \n  (NomAuteur, PrenomAuteur, IdLangue, AnneeNaissance)\nVALUES\n  ('Lecluse', 'Olivier', 2, 1870);\n\"\"\"\n\ncurseur.execute(requete)\nbdd.commit()\n</code></pre> <p>la propri\u00e9t\u00e9 lastrowid peut \u00eatre int\u00e9ressante car elle donne acc\u00e8s \u00e0 la cl\u00e9 primaire cr\u00e9\u00e9e automatiquement pour notre nouvel enregistrement. En voici une utilisation :</p> \ud83d\udc0d Script Python<pre><code>last_id = curseur.lastrowid\nlast_id \n</code></pre> \ud83d\udc0d Script Python<pre><code>requete = \"SELECT * FROM Auteurs WHERE IdAuteur = ?\"\ncurseur.execute(requete, [last_id])\ncurseur.fetchone()\n</code></pre>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_4_python/#a-vous-de-jouer_1","title":"A vous de jouer","text":"<p>Effacez de la table auteur ce dernier enregistrement que nous avons cr\u00e9\u00e9.</p> \ud83d\udc0d Script Python<pre><code># YOUR CODE HERE\n</code></pre> \ud83d\udc0d Script Python<pre><code>requete = \"SELECT COUNT(*) from Auteurs\"\ncurseur.execute(requete)\nassert curseur.fetchone()[0] == 10\n</code></pre> \ud83d\udc0d Script Python<pre><code>curseur.execute(\"SELECT * FROM Auteurs\")\ncurseur.fetchall()\n</code></pre>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_4_python/#pour-finir","title":"Pour Finir","text":"<p>Notre travail sur la BDD exemple est \u00e0 pr\u00e9sent termin\u00e9. Afin de fermer le fichier proprement et de s'assurer que les donn\u00e9es saisies seront bien inscrites dans le fichier, il faut imp\u00e9rativement appeler la m\u00e9thode close() sur l'objet bdd :</p> \ud83d\udc0d Script Python<pre><code>bdd.close()\n</code></pre> \ud83d\udc0d Script Python<pre><code>curseur\n</code></pre> <p>A partir de ce moment l\u00e0, plus acune op\u00e9ration n'est possible sur la base de donn\u00e9es comme le montre la cellule suivante :</p> \ud83d\udc0d Script Python<pre><code>requete = \"SELECT COUNT(*) from Auteurs\"\ncurseur.execute(requete)\n</code></pre>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_5_baseDataGouv/","title":"Exploiter un vrai jeu de donn\u00e9e","text":""},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_5_baseDataGouv/#mise-en-pratique-sur-une-vraie-base","title":"Mise en pratique sur une vraie base","text":"<p>A partir de maintenant, vous avez les connaissances pour r\u00e9aliser une application s'appuyant sur une base de donn\u00e9es. Il  ne reste plus qu'\u00e0 les appliquer dans le cadre d'un projet ou un mini projet. Un exemple de mini-projet possible dans le domaine du BigData consiste \u00e0 r\u00e9cup\u00e9rer des donn\u00e9es officielles et \u00e0 s'aider du langage SQL pour les exploiter.</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_5_baseDataGouv/#exemple-de-jeu-de-donnees","title":"Exemple de jeu de donn\u00e9es","text":"<p>Une source int\u00e9ressante pour r\u00e9cup\u00e9rer des donn\u00e9es est data.gouv.fr. Voici un exemple de jeu de donn\u00e9es : https://www.data.gouv.fr/fr/datasets/resultats-du-controle-sanitaire-de-leau-distribuee-commune-par-commune/#_</p> <p>La description de chacun des fichiers se trouve ici : https://static.data.gouv.fr/resources/resultats-du-controle-sanitaire-de-leau-distribuee-commune-par-commune/20190710-030936/20190708-eau-distrib-documentation-v4.pdf</p> <ol> <li>T\u00e9l\u00e9chargez le fichier dis-* le plus r\u00e9cent. D\u00e9compressez le et analysez sa structure.</li> <li>Cr\u00e9ez une nouvelle base de donn\u00e9es et 3 tables \u00e0 l'int\u00e9rieur :<ul> <li>Communes</li> <li>Prelevements</li> <li>Resultats</li> </ul> </li> <li>Cr\u00e9ez dans chacune des tables une cl\u00e9 primaire nomm\u00e9e Id*NomTable* ainsi que des attributs correspondants aux intitul\u00e9s de colonne</li> <li>A l'aide de Python, lisez chacun des fichiers et peuplez les tables correspondantes.</li> <li>Cr\u00e9ez des requ\u00eates SQL afin de vous renseigner sur la qualit\u00e9 de l'eau dans les communes proches de chez vous.</li> </ol>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_5_baseDataGouv/#creation-des-tables","title":"Cr\u00e9ation des tables","text":"\ud83d\udc0d Script Python<pre><code>import sqlite3\nbdd = sqlite3.connect(\"dis_db\")\ncurseur = bdd.cursor()\n</code></pre> \ud83d\udc0d Script Python<pre><code># Creation table Communes\nrequete = \"\"\"\nCREATE TABLE Communes\n(\n    IdCommune INTEGER  PRIMARY KEY,\n    inseecommune TEXT,\n    nomcommune TEXT,\n    quartier TEXT,\n    cdreseau TEXT,\n    nomreseau TEXT,\n    debutalim DATE\n);\"\"\"\ncurseur.execute(requete)\n\n# Creation des tables Prelevements et Resultats\n\n# YOUR CODE HERE\n\nbdd.commit()\n</code></pre>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_5_baseDataGouv/#alimentation-de-la-base-de-donnees","title":"Alimentation de la base de donn\u00e9es","text":"\ud83d\udc0d Script Python<pre><code># Exemple d'import d'un fichier CSV dans une BDD\n\nimport csv\n\nwith open('DIS_COM_UDI_2020.txt', encoding='utf-8') as csvfile:\n    nb_lignes = 0\n    lignes = csv.reader(csvfile)\n    entete = True\n    for l in lignes:\n        if entete:\n            entete = False\n        else:\n            nb_lignes += 1\n            requete = f\"\"\"\n            INSERT INTO Communes\n                (inseecommune,nomcommune,quartier,cdreseau,nomreseau,debutalim)\n            VALUES\n                (?, ?, ?, ?, ?, ?)\n            \"\"\"\n            curseur.execute(requete, l)\n    bdd.commit()\n    print(f\"{nb_lignes} enregistrements cr\u00e9\u00e9s\")\n</code></pre> <p>A faire</p> <p>Proc\u00e9dez de m\u00eame pour le fichier pr\u00e9l\u00e8vement</p> \ud83d\udc0d Script Python<pre><code>curseur.execute(\"SELECT COUNT(*) FROM Prelevements;\")\nassert curseur.fetchone()[0] == 126730\n</code></pre> <p>A faire</p> <p>Proc\u00e9dez de m\u00eame pour le fichier Resultat</p> \ud83d\udc0d Script Python<pre><code>curseur.execute(\"SELECT COUNT(*) FROM Resultats;\")\nassert curseur.fetchone()[0] == 3683342\n</code></pre>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_5_baseDataGouv/#interrogation-de-la-base-de-donnees","title":"Interrogation de la base de donn\u00e9es","text":"<p>Nous avons \u00e0 pr\u00e9sent une vraie base de donn\u00e9es avec de vraies donn\u00e9es, en nombre cons\u00e9quent. Une petite requ\u00eate sur la table Resultats suffit pour s'en convaincre : Plus de 3 millions et demi d'enregistrements !</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_5_baseDataGouv/#quelques-idees-de-fonctions-a-creer","title":"Quelques id\u00e9es de fonctions \u00e0 cr\u00e9er !","text":"<ul> <li> <p>une fonction liste_communes prenant en entr\u00e9e un curseur et un num\u00e9ro de d\u00e9partement et renvoyant la liste des communes dans de d\u00e9partement pr\u00e9sentes dans la base.</p> <ul> <li>La fonction ne renverra pas plusieurs fois la m\u00eame commune</li> <li>Attention, pour un num\u00e9ro de d\u00e9partement inf\u00e9rieur \u00e0 10, if faut penser \u00e0 ajouter \"0\"...</li> <li>Le champ numeroinsee commence par le num\u00e9ro du d\u00e9partement mais est diff\u00e9rent du code postal.</li> </ul> </li> <li> <p>une fonction anomalies() prenant un curseur et un nom de commune et qui renvoie la date et la conclusion du pr\u00e9l\u00e9vement (champ conclusionprel dans Prelevements dans la commune) et la r\u00e9f\u00e9rence du pr\u00e9l\u00e8vement (champ referenceprel dans Prelevements) en cas d'anomalie. Vous rep\u00e8rerez dans la base la phrase type lorsque tout va bien !</p> </li> <li> <p>une fonction resultat() prenant en param\u00e8tres un curseur et une r\u00e9f\u00e9rence de pr\u00e9l\u00e8vement et qui renvoie les r\u00e9sultats d\u00e9taill\u00e9s de l'analyse avec les informations suivantes :</p> <ul> <li>libell\u00e9 associ\u00e9 \u00e0 chaque code param\u00e8tre, composant la d\u00e9nomination du param\u00e8tre sous forme de texte libre</li> <li>Le r\u00e9sultat de l\u2019analyse physico-chimique ou microbiologique du param\u00e8tre</li> <li>L'unit\u00e9 de mesure du param\u00e8tre</li> <li>La limite(s) de qualit\u00e9 du param\u00e8tre concern\u00e9 en vigueur  au moment du pr\u00e9l\u00e8vement</li> </ul> </li> </ul> \ud83d\udc0d Script Python<pre><code>assert \"CAEN\" in liste_communes(curseur, 14)\n</code></pre> <p>\ud83d\udc0d Script Python<pre><code>anomalies(curseur, \"HEROUVILLE-SAINT-CLAIR\")\n</code></pre> \ud83d\udc0d Script Python<pre><code>resultats(curseur, \"01400207768\")\n</code></pre></p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_5_baseDataGouv/#amusez-vous","title":"Amusez vous","text":"<p>Interrogez la base de donn\u00e9es pour rechercher des anomalies dans votre commune ou les environs, et r\u00e9cup\u00e9rez les r\u00e9sultats d\u00e9taill\u00e9s des analyses en cas de probl\u00e8me pour identifier la source de l'anomalie.</p> <p>Au fil de votre parcours de la base, vous pouvez avoir envie de cr\u00e9er d'autres fonctions pour afficher d'autres informations. Ne vous privez pas !!!</p> \ud83d\udc0d Script Python<pre><code># Amusez vous !\nliste_communes(curseur,14)\n</code></pre>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_5_baseDataGouv/#pour-aller-plus-loin","title":"Pour aller plus loin","text":"<p>Vous avez les outils \u00e0 pr\u00e9sent pout construire une application graphique (avec TKInter par exemple) ou bien un site web (avec PHP ou Flask par exemple) mettant \u00e0 disposition ces r\u00e9sultats. Cela peut faire l'objet d'un projet.</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/tnsi_BD_5_baseDataGouv/#fin-du-travail","title":"Fin du travail","text":"<p>On n'oublie pas de fermer l'acc\u00e8s \u00e0 la base de donn\u00e9es </p> <p>Vous aurez pu constater au cours de vos requ\u00eates que les r\u00e9ponses de la base de donn\u00e9es sont imm\u00e9diates malgr\u00e9 les millions d'enregistrement que celle-ci contient !!</p> \ud83d\udc0d Script Python<pre><code>bdd.close()\n</code></pre>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_1/","title":"SQL 1/3","text":"<p>@cr\u00e9dits du cours : olivier l\u00e9cluse, lyc\u00e9e Salvador Allende</p> <p>Dans ce TP jous allons d\u00e9couvrir le langage SQL (Structured Query Language) qui est le langage utilis\u00e9 pour effectuer des requ\u00eates sur une base de donn\u00e9es relationnelles. Nous apprendrons lors de ce TP \u00e0</p> <ul> <li>cr\u00e9er des tables avec les attributs que l'on souhaite</li> <li>ins\u00e9rer des enregistrements</li> <li>faire des requ\u00eates sur la base pour extraire des informations</li> </ul> <p>Contrairement aux apparences, nous n'utiliserons pas Python dans ce classeur, mais directement SQL gr\u00e2ce \u00e0 l'extension ipython-sql qu'il faut activer en ouvrant une console Anaconda prompt et taper les commandes suivantes :</p> <pre>pip install jupyter-sql\npip install ipython-sql\n</pre> <p>puis relancer jupyter.</p> <p>On charge le module SQL avec la commande suivante</p> In\u00a0[1]: Copied! <pre>%load_ext sql\n</pre> %load_ext sql In\u00a0[2]: Copied! <pre>%sql sqlite:///livres_db\n</pre> %sql sqlite:///livres_db <p>La base s'appelle livres_db et est au format sqlite qui est un gestionnaire de base de donn\u00e9es relationnelles l\u00e9ger et facile \u00e0 prendre en main.</p> <p>Les donn\u00e9es seront inscrites dans le fichier livres_db qui vient d'\u00eatre cr\u00e9\u00e9 \u00e0 c\u00f4t\u00e9 de ce classeur et que vous pourrez t\u00e9l\u00e9charger quand vous aurez fini ce TP.</p> <p>L'objectif est de peupler cette base de donn\u00e9es avec la base livres que l'on a \u00e9tudi\u00e9 lors de la d\u00e9couverte du mod\u00e8le relationnel. Cette base sera constitu\u00e9e de 4 tables :</p> <ul> <li>Auteurs</li> <li>Livres</li> <li>Langues</li> <li>Themes</li> </ul> In\u00a0[\u00a0]: Copied! <pre>%%sql \nCREATE TABLE Langues \n(\nIdLangue INTEGER  PRIMARY KEY,\nLangue   TEXT\n);\n</pre> %%sql  CREATE TABLE Langues  ( IdLangue INTEGER  PRIMARY KEY, Langue   TEXT ); In\u00a0[\u00a0]: Copied! <pre>%%sql\nINSERT INTO Langues \n    (Langue)\nVALUES\n    (\"Anglais\"),\n    (\"Fran\u00e7ais\");\n</pre> %%sql INSERT INTO Langues      (Langue) VALUES     (\"Anglais\"),     (\"Fran\u00e7ais\"); In\u00a0[3]: Copied! <pre>%%sql\n\nSELECT * FROM Langues;\n</pre> %%sql  SELECT * FROM Langues; <pre> * sqlite:///livres_db\nDone.\n</pre> Out[3]: IdLangue Langue 1 Anglais 2 Fran\u00e7ais <p>Vous voyez donc appra\u00eetre le contenu de la table. Vous constatez que la cl\u00e9 primaire IdLangue a bien \u00e9t\u00e9 g\u00e9n\u00e9r\u00e9e correctement.</p> <p>Il est possible de stocker le r\u00e9sultat de cette requ\u00eate dans une variable pour l'exploiter plus facilement dans jupyter. Voici comment proc\u00e9der en modifiant l\u00e9g\u00e8rement la premi\u00e8re ligne :</p> In\u00a0[\u00a0]: Copied! <pre>resultat = %sql SELECT * FROM Langues;\n</pre> resultat = %sql SELECT * FROM Langues; <p>Vous voyez au passage la syntaxe concise permettant de r\u00e9cup\u00e9rer le r\u00e9sultat d'une requ\u00eate dans une variable. Cette variable r\u00e9sultat est exploitable dans ce classeur, y compris par python !!</p> In\u00a0[\u00a0]: Copied! <pre>resultat\n</pre> resultat In\u00a0[\u00a0]: Copied! <pre>print(resultat)\n</pre> print(resultat) <p>Quel est le type de 'resultat' ?</p> In\u00a0[\u00a0]: Copied! <pre>resultat[1]\n</pre> resultat[1] <p>On a donc ici le meilleur des deux mondes : des requ\u00eates SQL et une base de donn\u00e9es pour stocker efficacement les donn\u00e9es, le langage python pour traiter ces donn\u00e9es gr\u00e2ce \u00e0 des algorithmes faciles \u00e0 \u00e9crire.</p> In\u00a0[\u00a0]: Copied! <pre>%%sql \nCREATE TABLE Auteurs (\n    IdAuteur       INTEGER  PRIMARY KEY,\n    NomAuteur      TEXT,\n    PrenomAuteur   TEXT,\n    IdLangue       INTEGER,\n    AnneeNaissance INTEGER,\n    FOREIGN KEY(IdLangue) REFERENCES Langues(IdLangue)\n);\n</pre> %%sql  CREATE TABLE Auteurs (     IdAuteur       INTEGER  PRIMARY KEY,     NomAuteur      TEXT,     PrenomAuteur   TEXT,     IdLangue       INTEGER,     AnneeNaissance INTEGER,     FOREIGN KEY(IdLangue) REFERENCES Langues(IdLangue) ); <p>Une nouveaut\u00e9 appara\u00eet ici dans la cr\u00e9ation de la table : La table Auteurs poss\u00e8de une cl\u00e9 \u00e9tang\u00e8re : IdLangue. Cette cl\u00e9 est un entier.</p> <p>Remarquez la ligne <code>FOREIGN KEY(IdLangue) REFERENCES Langues(IdLangue)</code>. Celle-ci permet de d\u00e9clarer une contrainte sur cette cl\u00e9 afin d'indiquer \u00e0 SQLite que IdLangue est une cl\u00e9 \u00e9trang\u00e8re. SQLite sera alors responsable de maintenir la coh\u00e9rence entre les deux tables que l'on a ainsi reli\u00e9e.</p> <p>Cette d\u00e9claration n'est pas obligatoire mais fortement conseill\u00e9e.</p> In\u00a0[\u00a0]: Copied! <pre>%%sql \n\nINSERT INTO Auteurs (idAuteur, NomAuteur, ...)\nVALUES\n(1, \"Orwell\", \"Georges\", ...)\n</pre> %%sql   INSERT INTO Auteurs (idAuteur, NomAuteur, ...) VALUES (1, \"Orwell\", \"Georges\", ...) In\u00a0[\u00a0]: Copied! <pre>%%sql\n\n/* \n# YOUR CODE HERE\n\n*/\n</pre> %%sql  /*  # YOUR CODE HERE  */ <p>A pr\u00e9sent, saisissez les donn\u00e9es \u00e0 l'int\u00e9rieur de la table.</p> In\u00a0[\u00a0]: Copied! <pre>%%sql\n/* \n# YOUR CODE HERE\n\n*/\n</pre> %%sql /*  # YOUR CODE HERE  */ <p>V\u00e9rifiez votre travail en listant tous les enregistrements de la table LIVRES dans la variable <code>resultat</code></p> In\u00a0[\u00a0]: Copied! <pre>resultat\n</pre> resultat In\u00a0[\u00a0]: Copied! <pre>assert (1, '1984', 1, 1949) in resultat\n</pre> assert (1, '1984', 1, 1949) in resultat In\u00a0[\u00a0]: Copied! <pre>%%sql \n\n/* \n# YOUR CODE HERE\n*/\n</pre> %%sql   /*  # YOUR CODE HERE */ <p>V\u00e9rifiez votre travail en lisant tous les enregistrements de la table Themes dans la variable <code>resultat</code></p> In\u00a0[\u00a0]: Copied! <pre>resultat\n</pre> resultat In\u00a0[\u00a0]: Copied! <pre>assert (1, \"Science-fiction\") in resultat\n</pre> assert (1, \"Science-fiction\") in resultat <p>Cr\u00e9er une table RelationsLivreTheme mettant en relation les livres et les th\u00e8mes associ\u00e9s. Saisir le contenu de cette table.</p> In\u00a0[\u00a0]: Copied! <pre>%%sql \n\n/* \n# YOUR CODE HERE\n*/\n</pre> %%sql   /*  # YOUR CODE HERE */ In\u00a0[\u00a0]: Copied! <pre>resultat = %sql SELECT IdLivre, IdTheme FROM RelationsLivreTheme;\nassert (1, 1) in resultat\n</pre> resultat = %sql SELECT IdLivre, IdTheme FROM RelationsLivreTheme; assert (1, 1) in resultat In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_1/#sql-13","title":"SQL 1/3\u00b6","text":"<p>Cours NSI Terminale - Th\u00e8me 2.</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_1/#decouverte-du-langage-sql","title":"D\u00e9couverte du langage SQL\u00b6","text":""},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_1/#creer-la-base-de-donnees","title":"Cr\u00e9er la base de donn\u00e9es\u00b6","text":"<p>Nous allons commencer par cr\u00e9er une base vide dans laquelle nous allons travailler :</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_1/#creer-une-table","title":"Cr\u00e9er une table\u00b6","text":"<p>Il est temps de commencer \u00e0 peupler notre base de donn\u00e9es. Nous allons commencer par cr\u00e9er la table Langues en saisissant notre premi\u00e8re requ\u00eate :</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_1/#quelques-explications","title":"Quelques explications :\u00b6","text":"<p>Pour commencer, dans jupyter lorsque nous voulons taper une commande SQL et non du langage python. Pour cela, nous inscrirons en premi\u00e8re ligne de cellule la commande magique <code>%%sql</code>. N'oubliez jamais de commencer toutes vos cellules ainsi car sinon, la commande sera interpr\u00e9t\u00e9e par python et non SQL.</p> <p>La premi\u00e8re requ\u00eate SQL que nous allons apprendre est la requ\u00eate <code>CREATE TABLE</code></p> <ul> <li>on indique le nom de la table \u00e0 cr\u00e9er</li> <li>entre parenth\u00e8se on liste les attributs \u00e0 mettre ainsi que leur type.</li> <li>une requ\u00eate se termine toujours par ;</li> </ul> <p>Nous avons deux types diff\u00e9rents dans notre base de donn\u00e9es :</p> <ul> <li>le type TEXT pour tout ce qui est cha\u00eene de caract\u00e8res</li> <li>le type INTEGER pour les entiers</li> </ul> <p>L'attribut IdLangue est la cl\u00e9 primaire de la table. C'est un entier qui commence \u00e0 1 et qui sera automatiquement incr\u00e9ment\u00e9 au fur \u00e0 mesure que l'on ins\u00e8re des donn\u00e9es dans la table. C'est en indiquant <code>PRIMARY KEY</code> apr\u00e8s le type dans la d\u00e9claration de l'attribut IdLangue que sqlite se comporte ainsi.</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_1/#inserer-des-enregistrements-dans-la-table","title":"Ins\u00e9rer des enregistrements dans la table\u00b6","text":"<p>Maintenant que nous avons une table vide, il nous faut la remplir avec les donn\u00e9es sur les auteurs. Nous utiliserons pour cela la requ\u00eate INSERT. Voici son utilisation :</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_1/#quelques-explications","title":"Quelques explications :\u00b6","text":"<p>La requ\u00eate INSERT s'utilise ainsi :</p> <pre><code>INSERT INTO ##TABLE##\n    (## attributs dont on donne les valeurs##)\nVALUES\n    (## enregistrement 1 ##),\n    ...\n    (## enregistrement n ##);\n</code></pre> <p>On peut refaire une autre requ\u00eate INSERT \u00e0 la suite si on souhaite ajouter encore des donn\u00e9es au bout de la table.</p> <p>Vous remarquez que l'on ne donne pas de valeur pour l'attribut IdLangue. C'est parce qu'on l'a d\u00e9clar\u00e9 en <code>PRIMARY KEY</code>. Il est donc automatiquement g\u00e9r\u00e9 par sqlite. Nous verrons cela en lisant le contenu complet de la table.</p> <p>On est pas oblig\u00e9 de pr\u00e9ciser tous les attributs. IdLangue est un exemple particulier, mais il est possible d'omettre d'autres attributs. Ils seront alors affect\u00e9s d'une valeur nulle.</p> <p>A l'issue de la requ\u00eate, sqlite nous informe que 2 lignes ont \u00e9t\u00e9 cr\u00e9\u00e9es.</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_1/#lire-le-contenu-dune-table","title":"Lire le contenu d'une table\u00b6","text":"<p>Nous allons \u00e0 pr\u00e9sent utiliser une requ\u00eate SELECT afin de r\u00e9cup\u00e9rer le contenu de la table. Ces requ\u00eates peuvent \u00eatre tr\u00e8s sophistiqu\u00e9es comme on va le voir en fin de TP. Pour le moment, nous nous contenterons de la forme la plus simple :</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_1/#a-vous-de-jouer","title":"A vous de jouer\u00b6","text":"<p>Cr\u00e9ez la table Auteurs afin que celle-ci refl\u00e8te les informations suivantes :</p> Nom Prenom annee naissance langue Orwell George 1903 Anglais Herbert Frank 1920 Anglais Asimov Isaac 1920 Anglais Huxley Aldous 1894 Anglais Bradbury Ray 1920 Anglais K. Dick Philip 1928 Anglais Barjavel Ren\u00e9 1911 Fran\u00e7ais Boulle Pierre 1912 Fran\u00e7ais Van Vogt Alfred Elton 1912 Anglais Verne Jules 1828 Fran\u00e7ais <p>Pour cela, vous utiliserez la commande suivante pour cr\u00e9er la table et vous adapterez les donn\u00e9es \u00e0 cette structure.</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_1/#a-vous-de-jouer","title":"A vous de jouer\u00b6","text":"<p>Notre base n'est pas encore compl\u00e8te : il nous reste \u00e0 cr\u00e9er les tables Livres et Themes qui doivent refl\u00e9ter le contenu suivant :</p> Titre NomAuteur PrenomAuteur AnneeNaissance Langue AnneePubli Themes 1984 Orwell George 1903 Anglais 1949 Totalitarisme, science-fiction, anticipation, Dystopie Dune Herbert Frank 1920 Anglais 1965 science-fiction, anticipation Fondation Asimov Isaac 1920 Anglais 1951 science-fiction, Economie Le meilleur des mondes Huxley Aldous 1894 Anglais 1931 Totalitarisme, science fiction, dystopie Fahrenheit 451 Bradbury Ray 1920 Anglais 1953 science-fiction, Dystopie Ubik K. Dick Philip 1928 Anglais 1969 science-fiction, anticipation Chroniques martiennes Bradbury Ray 1920 Anglais 1950 science-fiction, anticipation La nuit des temps Barjavel Ren\u00e9 1911 Fran\u00e7ais 1968 science-fiction, trag\u00e9die Blade Runner K. Dick Philip 1928 Anglais 1968 Intelligence artificielle, science fiction Les Robots Asimov Isaac 1920 Anglais 1950 science fiction, Intelligence artificielle La Plan\u00e8te des singes Boulle Pierre 1912 Fran\u00e7ais 1963 science fiction, Dystopie Ravage Barjavel Ren\u00e9 1911 Fran\u00e7ais 1943 Science-Fiction, anticipation Le Ma\u00eetre du Haut Ch\u00e2teau K. Dick Philip 1928 Anglais 1962 Dystopie, Uchronie Le monde des A Van Vogt Alfred Elton 1912 Anglais 1945 science fiction, IA La Fin de l\u2019\u00e9ternit\u00e9 Asimov Isaac 1920 Anglais 1955 science-fiction, voyage dans le temps De la Terre \u00e0 la Lune Verne Jules 1828 Fran\u00e7ais 1865 Science-Fiction, aventure"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_1/#la-table-livres","title":"La table LIVRES\u00b6","text":"<p>La table LIVRES devra avoir la structure d\u00e9crite dans l'extrait suivant :</p> IdLivre Titre IdAuteur AnneePubli ... ... ... ... 8 La nuit des temps 7 1968 ... ... ... ... <ul> <li>l'ann\u00e9e de publication est de type INTEGER</li> <li>IdLivre d\u00e9signe bien s\u00fbr la cl\u00e9 primaire</li> <li>IdAuteur est une cl\u00e9 externe faisant r\u00e9f\u00e9rence \u00e0 l'auteur.</li> <li>dans l'extrait, la cl\u00e9 IdAuteur vaut 7. L'auteur de La nuit des temps est donc Barjavel</li> <li>on ne renseigne pas la langue ou l'ann\u00e9e de naissance de l'auteur car ces informations sont d\u00e9j\u00e0 pr\u00e9sentes dans la table Auteurs.</li> <li>On traitera la probl\u00e9matique des th\u00e8mes plus tard...</li> </ul> <p>Dans la cellule ci-dessous, saisissez la requ\u00eate pour cr\u00e9er la table Livres</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_1/#la-table-themes","title":"La table Themes\u00b6","text":"<p>Traitons \u00e0 pr\u00e9sent la probl\u00e9matique des Th\u00e8mes. La table Themes devra avoir la structure d\u00e9crite dans l'extrait suivant :</p> IdTheme Intitule 1 Science-fiction ... ... <ul> <li>IdTheme d\u00e9signe bien s\u00fbr la cl\u00e9 primaire</li> <li>Intitule est un champ texte contenant l'intitul\u00e9 du th\u00e8me tel qu'il appara\u00eet dans le tableau global.</li> </ul> <p>Dans la cellule ci-dessous, vous saisirez donc 2 requ\u00eates :</p> <ul> <li>Une pour cr\u00e9er la table Themes</li> <li>Une pour ins\u00e9rer les donn\u00e9es dans la table.</li> </ul>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_1/#une-table-manquante","title":"Une table manquante !\u00b6","text":"<p>La saisie de notre base de donn\u00e9e est incompl\u00e8te ! Nous avons en effet saisi tous les auteurs, tous les livres, toutes les langues, tous les th\u00e8mes et pourtant il manque une information. Laquelle ?</p> <p>Quelle solution envisager pour saisir cette information ?</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_1/#cardinalite","title":"Cardinalit\u00e9\u00b6","text":"<p>En regardant notre base de donn\u00e9es et les relations que nous avons cr\u00e9\u00e9 entre les tables, on remarque que celles-ci ont des cardinalit\u00e9s diff\u00e9rentes. La cardinalit\u00e9 d'une relation entre deux tables A et B exprime \u00e0 combien d'enregistrements de A peut \u00eatre reli\u00e9 chaque enregistrement de B.</p> <p>Par exemple, \u00e0 un livre est associ\u00e9 un auteur unique, mais pour un auteur donn\u00e9, il peut y avoir plusieurs livres. On parle alors de relation de 1 \u00e0 n</p> <p>Lorsque plusieurs enregistrements de la table A peuvent \u00eatre associ\u00e9s \u00e0 plusieurs enregistrements de la table B, on parle alors d'une relation de n \u00e0 n</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_1/#a-vous-de-jouer","title":"A vous de jouer\u00b6","text":"<p>Citez dans la base de donn\u00e9es</p> <ul> <li>une relation de 1 \u00e0 n</li> <li>une relation de n \u00e0 n</li> </ul>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_1/#table-de-relation","title":"Table de relation\u00b6","text":"<p>Pour une relation de n \u00e0 n, nous aurons en g\u00e9n\u00e9ral recours \u00e0 la cr\u00e9ation d'une nouvelle table de relation contenant les cl\u00e9s externes des tables \u00e0 mettre en relation. C'est ce que nous avons mis en oeuvre pour la table RelationsLivreTheme.</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_2/","title":"SQL 2/3","text":"In\u00a0[1]: Copied! <pre>%load_ext sql\n\n%sql sqlite:///livres_db\n</pre> %load_ext sql  %sql sqlite:///livres_db In\u00a0[4]: Copied! <pre>%sql SELECT NomAuteur, PrenomAuteur from Auteurs WHERE AnneeNaissance &lt; 1900;\n</pre> %sql SELECT NomAuteur, PrenomAuteur from Auteurs WHERE AnneeNaissance &lt; 1900; <pre> * sqlite:///livres_db\nDone.\n</pre> Out[4]: NomAuteur PrenomAuteur Huxley Aldous Verne Jules <p>Pour obtenir les auteurs pr\u00e9nomm\u00e9s Jules :</p> In\u00a0[2]: Copied! <pre>%sql SELECT NomAuteur, PrenomAuteur from Auteurs WHERE PrenomAuteur = 'Jules';\n</pre> %sql SELECT NomAuteur, PrenomAuteur from Auteurs WHERE PrenomAuteur = 'Jules'; <pre> * sqlite:///livres_db\nDone.\n</pre> Out[2]: NomAuteur PrenomAuteur Verne Jules <p>Vous voyez que les textes sont d\u00e9limit\u00e9s par des quotes '...'.</p> <p>Attention : essayez de remplacer Jules par jules et vous constaterez que la recherche est sensible aux majuscules.</p> <p>Supposns maintenant que l'on recherche les auteurs dont le pr\u00e9nom commence par P : Nous utiliserons une clause LIKE de cette mani\u00e8re :</p> In\u00a0[\u00a0]: Copied! <pre>%sql SELECT NomAuteur, PrenomAuteur from Auteurs WHERE PrenomAuteur LIKE 'P%';\n</pre> %sql SELECT NomAuteur, PrenomAuteur from Auteurs WHERE PrenomAuteur LIKE 'P%'; In\u00a0[\u00a0]: Copied! <pre>%sql SELECT NomAuteur, PrenomAuteur from Auteurs WHERE IdLangue = 2 AND AnneeNaissance &gt; 1900;\n</pre> %sql SELECT NomAuteur, PrenomAuteur from Auteurs WHERE IdLangue = 2 AND AnneeNaissance &gt; 1900; In\u00a0[\u00a0]: Copied! <pre>nbr = %sql SELECT COUNT(*) from Auteurs WHERE AnneeNaissance BETWEEN 1900 AND 1915;\n\nprint(nbr)\nprint(\"r\u00e9cup\u00e9rer juste le nombre : \", nbr[0][0])\n</pre> nbr = %sql SELECT COUNT(*) from Auteurs WHERE AnneeNaissance BETWEEN 1900 AND 1915;  print(nbr) print(\"r\u00e9cup\u00e9rer juste le nombre : \", nbr[0][0]) In\u00a0[\u00a0]: Copied! <pre>%sql SELECT * from Auteurs ORDER BY AnneeNaissance;\n</pre> %sql SELECT * from Auteurs ORDER BY AnneeNaissance; <p>et par ordre d\u00e9croissant, on ajoute DESC \u00e0 la fin de la requ\u00eate</p> In\u00a0[\u00a0]: Copied! <pre>%sql SELECT * from Auteurs ORDER BY AnneeNaissance DESC;\n</pre> %sql SELECT * from Auteurs ORDER BY AnneeNaissance DESC; In\u00a0[\u00a0]: Copied! <pre>%sql SELECT AnneePubli from Livres ORDER BY AnneePubli;\n</pre> %sql SELECT AnneePubli from Livres ORDER BY AnneePubli; <p>On constate la pr\u00e9sence de quelques doublons</p> <p>Pour \u00e9viter les redondances dans les r\u00e9sultats, on peut rajouter le mot-cl\u00e9 DISTINCT juste apr\u00e8s le SELECT :</p> In\u00a0[\u00a0]: Copied! <pre>%sql SELECT DISTINCT AnneePubli from Livres ORDER BY AnneePubli;\n</pre> %sql SELECT DISTINCT AnneePubli from Livres ORDER BY AnneePubli; In\u00a0[\u00a0]: Copied! <pre># Utilisez cette cellule en brouillon pour vos requetes\n</pre> # Utilisez cette cellule en brouillon pour vos requetes  In\u00a0[\u00a0]: Copied! <pre># Utiliser la syntaxe courte \n# reponse_i = %sql VOTRE REQUETE pour i=1 ou i=2\n</pre> # Utiliser la syntaxe courte  # reponse_i = %sql VOTRE REQUETE pour i=1 ou i=2 In\u00a0[\u00a0]: Copied! <pre># V\u00e9rification des r\u00e9ponses\n\nassert reponse_1[3][0] == 'Les Robots'\nassert reponse_2[0][0] == 6\n</pre> # V\u00e9rification des r\u00e9ponses  assert reponse_1[3][0] == 'Les Robots' assert reponse_2[0][0] == 6 In\u00a0[\u00a0]: Copied! <pre>%sql SELECT * FROM Langues, Auteurs\n</pre> %sql SELECT * FROM Langues, Auteurs <p>Comme on peut le constater cette requ\u00eate est peu pertinente car elle affiche toutes les donn\u00e9es de chacune des tables sans effectuer de correspondances. La cl\u00e9 de jointure appara\u00eet pourtant ici clairement : il s'agit de id_langue qui doit permettre de recouper les informations entre les deux tables : il est en effet inutile d'afficher les donn\u00e9es pour lesquelles les langues ne correspondent pas entre les deux tables.</p> In\u00a0[\u00a0]: Copied! <pre>%sql SELECT NomAuteur, PrenomAuteur, Langue, AnneeNaissance FROM Auteurs JOIN Langues ON Auteurs.IdLangue = Langues.IdLangue\n</pre> %sql SELECT NomAuteur, PrenomAuteur, Langue, AnneeNaissance FROM Auteurs JOIN Langues ON Auteurs.IdLangue = Langues.IdLangue <p>Les champs sur lesquels faire la jointure ayant les m\u00eames noms dans les 2 tables, cette requ\u00eate peut aussi \u00eatre \u00e9crite plus simplement en utilisant le mot-cl\u00e9 USING ainsi :</p> In\u00a0[\u00a0]: Copied! <pre>%sql SELECT NomAuteur, PrenomAuteur, Langue, AnneeNaissance  FROM Auteurs JOIN Langues USING (IdLangue)\n</pre> %sql SELECT NomAuteur, PrenomAuteur, Langue, AnneeNaissance  FROM Auteurs JOIN Langues USING (IdLangue) In\u00a0[\u00a0]: Copied! <pre># Utiliser la syntaxe courte \n# reponse_i = %sql VOTRE REQUETE pour i=1 ou i=2\n</pre> # Utiliser la syntaxe courte  # reponse_i = %sql VOTRE REQUETE pour i=1 ou i=2 In\u00a0[\u00a0]: Copied! <pre># Utilisez cette cellule en brouillon pour vos requetes\n</pre> # Utilisez cette cellule en brouillon pour vos requetes  In\u00a0[\u00a0]: Copied! <pre>assert reponse_1[0] == ('Ubik', 'Philip', 'K. Dick', 1969)\nassert reponse_2[0] == ('La nuit des temps', 'Ren\u00e9', 'Barjavel', 1968)\n</pre> assert reponse_1[0] == ('Ubik', 'Philip', 'K. Dick', 1969) assert reponse_2[0] == ('La nuit des temps', 'Ren\u00e9', 'Barjavel', 1968) In\u00a0[\u00a0]: Copied! <pre>%sql SELECT Titre, Intitule FROM Livres JOIN RelationsLivreTheme USING (IdLivre) JOIN Themes USING (IdTheme)\n</pre> %sql SELECT Titre, Intitule FROM Livres JOIN RelationsLivreTheme USING (IdLivre) JOIN Themes USING (IdTheme) In\u00a0[\u00a0]: Copied! <pre># Utiliser la syntaxe courte \n# reponse = %sql VOTRE REQUETE\n</pre> # Utiliser la syntaxe courte  # reponse = %sql VOTRE REQUETE  In\u00a0[\u00a0]: Copied! <pre># Utilisez cette cellule en brouillon pour vos requetes\n</pre> # Utilisez cette cellule en brouillon pour vos requetes  In\u00a0[\u00a0]: Copied! <pre>assert result[0] == ('De la Terre \u00e0 la Lune', 'Verne', 'Fran\u00e7ais')\n</pre> assert result[0] == ('De la Terre \u00e0 la Lune', 'Verne', 'Fran\u00e7ais')"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_2/#sql-23","title":"SQL 2/3\u00b6","text":"<p>Cours NSI Terminale - Th\u00e8me 2.</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_2/#aller-plus-loin-en-sql","title":"Aller plus loin en SQL\u00b6","text":"<p>Dans ce classeur, nous poursuivrons l'\u00e9tude de l'exemple de la base de donn\u00e9es de livres de SF et nous verrons des requ\u00eates de s\u00e9lection avanc\u00e9es ainsi que la mani\u00e8re de fusionner plusieurs tables (Jointures).</p> <p>Commencez par valider les cellules suivantes afin d'activer la fonctionnalit\u00e9 SQL de Jupyter et de charger la base du TP pr\u00e9c\u00e9dent.</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_2/#aller-plus-loin-avec-select","title":"Aller plus loin avec SELECT\u00b6","text":""},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_2/#selection-simple","title":"S\u00e9lection simple\u00b6","text":"<p>Supposons que l'on veuille lister seulement les noms et pr\u00e9noms des auteurs n\u00e9s avant 1900, on utilisera une clause WHERE condition :</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_2/#selection-multiple","title":"S\u00e9lection multiple\u00b6","text":"<p>Il est possible de croiser plusieurs crit\u00e8res \u00e0 l'aide d'op\u00e9rateurs booleens : AND et OR. Voici la liste des auteurs fran\u00e7ais n\u00e9s apr\u00e8s 1900 :</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_2/#compter-le-nombre-de-reponses-dune-requete-select","title":"Compter le nombre de r\u00e9ponses d'une requ\u00eate SELECT\u00b6","text":"<p>Combien y a t-il d'auteurs n\u00e9s entre 1900 et 1915 ? Vous verrez \u00e0 l'occation l'utilisation de l'op\u00e9rateur BETWEEN pour tester l'appartenance \u00e0 un intervalle.</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_2/#trier-les-reponses","title":"Trier les r\u00e9ponses\u00b6","text":"<p>Nous allons lister tous les auteurs par ordre croissant d'ann\u00e9e de naissance</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_2/#eviter-les-occurrences-multiples","title":"\u00c9viter les occurrences multiples\u00b6","text":"<p>interrogeons la table Livres sur les ann\u00e9es de publication, rang\u00e9es par ordre croissant :</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_2/#a-vous-de-jouer","title":"A vous de jouer\u00b6","text":"<ol> <li>Donner la liste de tous les titres des livres \u00e9crits entre 1920 et 1950.</li> <li>Combien y en a t-il ?</li> </ol>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_2/#requetes-portant-sur-plusieurs-tables","title":"Requ\u00eates portant sur plusieurs tables\u00b6","text":"<p>Jusqu'\u00e0 pr\u00e9sent, nos requ\u00eates ne portaient que sur une seule table. N\u00e9anmoins notre liste de livres comporte des don\u00e9es en provenance de plusieurs tables simultan\u00e9ment. Nous allons voir comment effectuer des requ\u00eates pour croiser des donn\u00e9es en provenance de plusieurs tables.</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_2/#jointure","title":"Jointure\u00b6","text":"<p>La jonture consiste \u00e0 croiser les donn\u00e9es de plusieurs tables pour les pr\u00e9senter sous forme d'un seul tableau. On va utiliser ce m\u00e9canisme pour afficher clairement la langue de l'auteur plut\u00f4t qu'un num\u00e9ro qui n'est pas forc\u00e9ment tr\u00e8s parlant. Nous utiliserons pour cela l'op\u00e9rateur JOIN ... ON :</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_2/#a-vous-de-jouer","title":"A vous de jouer\u00b6","text":"<p>En croisant la table Livres avec la table Auteurs</p> <ol> <li>r\u00e9cup\u00e9rer dans la variable <code>reponse_1</code> une liste dont les attributs sont Titre, PrenomAuteur, NomAuteur et AnneePubli, tri\u00e9e du plus r\u00e9cent au plus ancien.</li> <li>r\u00e9cup\u00e9rer dans la variable <code>reponse_2</code> une liste dont les attributs sont Titre, PrenomAuteur, NomAuteur et AnneePubli \u00e9crits en fran\u00e7ais.</li> </ol>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_2/#le-cas-des-relations-de-n-a-n","title":"Le cas des relations de n \u00e0 n\u00b6","text":"<p>Parfois il arrive que les donn\u00e9es \u00e0 collecter se trouvent dans plus que deux tables : c'est le cas des Th\u00e8mes pour les livres qui n\u00e9cessitent l'analyse de 3 tables : Livres et Th\u00e8mes bien s\u00fbr, mais aussi la table de relation RelationsLivreTheme.</p> <p>Observez et \u00e9tudiez la requ\u00eate suivante : Le principe est d'encha\u00eener deux jointures JOIN ... USING en utilisant la table de Relation au milieu. En effet, la requ\u00eate se lit de la gauche vers la droite et on ne peut faire de jointure que si on a une cl\u00e9 externe en commun, ce qui n'est par exemple pas le cas entre Livres et Th\u00e8mes.</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_2/#a-vous-de-jouer","title":"A vous de jouer\u00b6","text":"<p>Ecrire une requ\u00eate permettant d'obtenir une liste dont les attributs sont Titre, NomAuteur et Langue tri\u00e9e par ordre croissant de date de naissance de l'auteur.</p> <p>Vous stockerez le r\u00e9sultat dans une variable <code>result</code></p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_3/","title":"SQL 3/3","text":"In\u00a0[\u00a0]: Copied! <pre>%load_ext sql\n\n%sql sqlite:///livres_db\n</pre> %load_ext sql  %sql sqlite:///livres_db In\u00a0[\u00a0]: Copied! <pre>%sql INSERT INTO Langues (Langue) VALUES('Klingon');\n</pre> %sql INSERT INTO Langues (Langue) VALUES('Klingon'); In\u00a0[\u00a0]: Copied! <pre># V\u00e9rifions :\n%sql SELECT * FROM Langues;\n</pre> # V\u00e9rifions : %sql SELECT * FROM Langues; In\u00a0[\u00a0]: Copied! <pre>%sql SELECT NomAuteur FROM Auteurs WHERE IdAuteur = 10;\n</pre> %sql SELECT NomAuteur FROM Auteurs WHERE IdAuteur = 10; <p>C'est bien lui !!</p> <p>Modifions le nom de l'auteur gr\u00e2ce \u00e0 une requ\u00eate de mise \u00e0 jour :</p> <p>UPDATE table SET attribut1 = valeur1, attribut2 = valeur2, ... WHERE crit\u00e8re;</p> In\u00a0[\u00a0]: Copied! <pre>%%sql \n\nUPDATE Auteurs \nSET NomAuteur = \"Ze Djloule\", PrenomAuteur = \"Juju\"\nWHERE IdAuteur=10;\n\nSELECT * FROM Auteurs ;\n</pre> %%sql   UPDATE Auteurs  SET NomAuteur = \"Ze Djloule\", PrenomAuteur = \"Juju\" WHERE IdAuteur=10;  SELECT * FROM Auteurs ; <p>supprimons vite cette entr\u00e9e ! Nous utiliserons une requ\u00eate DELETE FROM table WHERE critere</p> <p>Attention : soyez bien s\u00fbr de votre crit\u00e8re sous peine de perdre des donn\u00e9es importantes !</p> In\u00a0[\u00a0]: Copied! <pre>%%sql \n\nDELETE  FROM Auteurs  WHERE IdAuteur=10;\n\nSELECT * FROM Auteurs;\n</pre> %%sql   DELETE  FROM Auteurs  WHERE IdAuteur=10;  SELECT * FROM Auteurs; In\u00a0[\u00a0]: Copied! <pre>%%sql\nINSERT INTO Auteurs \n    (NomAuteur, PrenomAuteur, IdLangue, AnneeNaissance) \nVALUES\n    (\"Lecluse\", \"Olivier\", 2, 1850);\n    \nSELECT Titre, NomAuteur from Livres JOIN Auteurs USING (IdAuteur);\n</pre> %%sql INSERT INTO Auteurs      (NomAuteur, PrenomAuteur, IdLangue, AnneeNaissance)  VALUES     (\"Lecluse\", \"Olivier\", 2, 1850);      SELECT Titre, NomAuteur from Livres JOIN Auteurs USING (IdAuteur); In\u00a0[\u00a0]: Copied! <pre>%%sql\n\n/* \n# YOUR CODE HERE\n\n*/\n</pre> %%sql  /*  # YOUR CODE HERE  */ <p>result = %sql SELECT Titre, NomAuteur AnneePubli from Livres JOIN Auteurs USING (IdAuteur);</p> In\u00a0[\u00a0]: Copied! <pre>assert len(result) == 15\n</pre> assert len(result) == 15 In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_3/#sql-33","title":"SQL 3/3\u00b6","text":"<p>Cours NSI Terminale - Th\u00e8me 2.</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_3/#manipuler-les-donnees-avec-sql","title":"Manipuler les donn\u00e9es avec SQL\u00b6","text":"<p>Dans ce dernier TP, nous allons voir comment ins\u00e9rer, mettre \u00e0 jour ou supprimer des enregistrements dans des tables.</p> <p>Commencez par valider les cellules suivantes afin d'activer la fonctionnalit\u00e9 SQL de Jupyter et de charger la base du TP pr\u00e9c\u00e9dent.</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_3/#inserer-un-enregistrement-dans-une-table","title":"Ins\u00e9rer un enregistrement dans une table\u00b6","text":"<p>Nous avons d\u00e9j\u00e0 rencontr\u00e9 cerre requ\u00e8te INSERT. Elle s'applique que la table soit vide ou nom. On peut tr\u00e8s bien ajouter par exemple une troisi\u00e8me langue dans notre table Langues</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_3/#mise-a-jour-effacement-update-et-delete","title":"Mise a jour, effacement : UPDATE et DELETE\u00b6","text":"<p>Les requ\u00eates UPDATE et DELETE fonctionnent sur le m\u00eame mod\u00e8le que les requ\u00eates SELECT.  Attention, on a vite fait d'effacer toutes ses donn\u00e9es si on ne configure pas bien sa requ\u00eate. Une bonne habitude \u00e0 prendre est de tester d'abord ses crit\u00e8res \u00e0 l'aide d'un SELECT.</p> <p>Observez les exemples ci-dessous :</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_3/#attention-a-la-coherence-des-donnees","title":"Attention \u00e0 la coh\u00e9rence des donn\u00e9es\u00b6","text":"<p>Dans une base de donn\u00e9es relationnelle il faut \u00eatre vigilant lors de la suppression d'enregistrements : en effet la suppression d'un enregistrement entra\u00eene la suppression de sa cl\u00e9 primaire qui peut \u00eatre utilis\u00e9e en tant que cl\u00e9 externe dans une autre table. Cela entra\u00eene la corruption des donn\u00e9es. Observez l'exemple ci-dessous dans lequel je me suis attribu\u00e9 un livre c\u00e9l\u00e8bre sans toucher \u00e0 la table Livres</p> <p>Il existe en SQL des moyens pour se pr\u00e9munir de ce type de probl\u00e8mes mais cela d\u00e9passe le cadre de ce cours.</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_3/#a-vous-de-jouer","title":"A vous de jouer\u00b6","text":"<ol> <li>R\u00e9ins\u00e9rez l'auteur Jules Verne \u00e0 sa place !</li> <li>Supprimez tous les livres \u00e9crits au 19e sciecle</li> </ol>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_4_python/","title":"Bases de donn\u00e9es avec Python","text":"In\u00a0[1]: Copied! <pre>import sqlite3\n</pre> import sqlite3 <p>Le module \u00e9tant import\u00e9, nous devons r\u00e9aliser deux actions pour pouvoir commencer \u00e0 utiliser notre base :</p> <ul> <li>ouvrir le fichier de base de donn\u00e9es</li> <li>cr\u00e9er un curseur</li> </ul> <p>Le curseur est un objet python offrant des m\u00e9thodes pour ex\u00e9cuter des requ\u00eates et r\u00e9cup\u00e9rer le ou les r\u00e9sultats de ces requ\u00eates.</p> In\u00a0[2]: Copied! <pre>bdd = sqlite3.connect(\"livres_db\")\ncurseur = bdd.cursor()\n</pre> bdd = sqlite3.connect(\"livres_db\") curseur = bdd.cursor() <p>livres_db est le nom du fichier contenant la base de donn\u00e9ees SQLite que nous allons exploiter. Si le fichier n'existe pas, une nouvelle base de donn\u00e9es sera cr\u00e9\u00e9e.</p> In\u00a0[\u00a0]: Copied! <pre>requete = \"SELECT * FROM Livres;\"\ncurseur.execute(requete)\n</pre> requete = \"SELECT * FROM Livres;\" curseur.execute(requete) <p>Pour visualiser le r\u00e9sultat de notre requ\u00eate, nous utiliserons encore notre curseur. Deux m\u00e9thodes permettent principalement de le faire :</p> <ul> <li>fetchone() pour r\u00e9cup\u00e9rer un r\u00e9sultat puis avancer le curseur d'un cran</li> <li>fetchall() pour r\u00e9cup\u00e9rer d'un coup tous les r\u00e9sultats.</li> </ul> <p>Regardez les exemples ci-dessous pour mieux comprendre comment fonctionne le curseur : il s'agit litt\u00e9ralement d'un curseur que l'on d\u00e9place de r\u00e9sultat en r\u00e9sultat. Vous vous en rendrez compte en ex\u00e9cutant plusieurs fois la cellule ci-dessous.</p> In\u00a0[\u00a0]: Copied! <pre>curseur.fetchone()\n</pre> curseur.fetchone() <p>Vous constatez que le r\u00e9sultat est un tuple  dont les \u00e9l\u00e9ments correspondent aux attributs s\u00e9lectionn\u00e9s : ici c'est *. Il n'est pas facile de se rappeler de l'ordre des attributs. Pour cela vous pouvez faire appel \u00e0 la propri\u00e9t\u00e9 :</p> In\u00a0[\u00a0]: Copied! <pre>curseur.description\n</pre> curseur.description <p>et pour rendre la r\u00e9ponse plus lisible, une petite liste en compr\u00e9hension ;). Et voil\u00e0 les attributs de colonne en clair dans l'ordre ou ils apparaissent dans le r\u00e9sultat de la requ\u00eate !</p> In\u00a0[\u00a0]: Copied! <pre>[d[0] for d in curseur.description]\n</pre> [d[0] for d in curseur.description] <p>A pr\u00e9sent, le fonctionnement de fetchall() ne devrait pas vous \u00e9tonner : on r\u00e9cup\u00e8re logiquement un tuple avec tous les r\u00e9sultats.</p> In\u00a0[\u00a0]: Copied! <pre>curseur.fetchall()\n</pre> curseur.fetchall() <p>Si vous avez suivi les instructions pr\u00e9c\u00e9dentes, vous devriez constater qu'il manque des enregistrements. Pourquoi ? Un indice : si vous r\u00e9ex\u00e9cutez une nouvelle fois la m\u00e9thode fetchall() du curseur, celle-ci ne renverra rien !</p> <p>Et oui, c'est la notion de curseur qui se d\u00e9place au fur \u00e0 mesure qu'unb r\u00e9sultat est donn\u00e9 : les pr\u00e9c\u00e9dents appels de fetchone() ont fait avancer le curseur, et de m\u00eame, fetchall() positionne le curseur \u00e0 la toute fin.</p> <p>Pour retrouver tous les r\u00e9sultats \u00e0 nouveau, il faut r\u00e9ex\u00e9cuter la requ\u00eate. Evitez donc de m\u00e9langer fetchone() et fetchall() sous peine de ne plus trop savoir ou en est le curseur et ce que vous r\u00e9cup\u00e9rez.</p> <p>Voici donc le moyen le plus simple de r\u00e9cup\u00e9rer tous les r\u00e9sultats d'une requ\u00eate d'un coup.</p> In\u00a0[\u00a0]: Copied! <pre>curseur.execute(requete)\nresultats = curseur.fetchall()\nresultats\n</pre> curseur.execute(requete) resultats = curseur.fetchall() resultats In\u00a0[\u00a0]: Copied! <pre>def prenom(c, nom):\n    requete = \"SELECT PrenomAuteur FROM Auteurs WHERE NomAuteur = ?\"\n    c.execute(requete, [nom])\n    r = c.fetchall()\n    if len(r) == 0:\n        return None\n    elif len(r) == 1:\n        return r[0][0]\n</pre> def prenom(c, nom):     requete = \"SELECT PrenomAuteur FROM Auteurs WHERE NomAuteur = ?\"     c.execute(requete, [nom])     r = c.fetchall()     if len(r) == 0:         return None     elif len(r) == 1:         return r[0][0] In\u00a0[\u00a0]: Copied! <pre>prenom(curseur, \"Verne\")\n</pre> prenom(curseur, \"Verne\") In\u00a0[\u00a0]: Copied! <pre>def romans(c, nom):\n    # YOUR CODE HERE\n</pre> def romans(c, nom):     # YOUR CODE HERE In\u00a0[\u00a0]: Copied! <pre>assert romans(curseur, \"Asimov\") == ['Fondation', 'Les Robots', 'La Fin de l\u2019\u00e9ternit\u00e9']\nassert romans(curseur, \"Verne\") == ['De la Terre \u00e0 la Lune']\n</pre> assert romans(curseur, \"Asimov\") == ['Fondation', 'Les Robots', 'La Fin de l\u2019\u00e9ternit\u00e9'] assert romans(curseur, \"Verne\") == ['De la Terre \u00e0 la Lune'] In\u00a0[\u00a0]: Copied! <pre>requete = \"\"\"\nINSERT INTO Auteurs \n  (NomAuteur, PrenomAuteur, IdLangue, AnneeNaissance)\nVALUES\n  ('Lecluse', 'Olivier', 2, 1870);\n\"\"\"\n\ncurseur.execute(requete)\nbdd.commit()\n</pre> requete = \"\"\" INSERT INTO Auteurs    (NomAuteur, PrenomAuteur, IdLangue, AnneeNaissance) VALUES   ('Lecluse', 'Olivier', 2, 1870); \"\"\"  curseur.execute(requete) bdd.commit() <p>la propri\u00e9t\u00e9 lastrowid peut \u00eatre int\u00e9ressante car elle donne acc\u00e8s \u00e0 la cl\u00e9 primaire cr\u00e9\u00e9e automatiquement pour notre nouvel enregistrement. En voici une utilisation :</p> In\u00a0[\u00a0]: Copied! <pre>last_id = curseur.lastrowid\nlast_id\n</pre> last_id = curseur.lastrowid last_id  In\u00a0[\u00a0]: Copied! <pre>requete = \"SELECT * FROM Auteurs WHERE IdAuteur = ?\"\ncurseur.execute(requete, [last_id])\ncurseur.fetchone()\n</pre> requete = \"SELECT * FROM Auteurs WHERE IdAuteur = ?\" curseur.execute(requete, [last_id]) curseur.fetchone() In\u00a0[\u00a0]: Copied! <pre># YOUR CODE HERE\n</pre> # YOUR CODE HERE In\u00a0[\u00a0]: Copied! <pre>requete = \"SELECT COUNT(*) from Auteurs\"\ncurseur.execute(requete)\nassert curseur.fetchone()[0] == 10\n</pre> requete = \"SELECT COUNT(*) from Auteurs\" curseur.execute(requete) assert curseur.fetchone()[0] == 10 In\u00a0[\u00a0]: Copied! <pre>curseur.execute(\"SELECT * FROM Auteurs\")\ncurseur.fetchall()\n</pre> curseur.execute(\"SELECT * FROM Auteurs\") curseur.fetchall() In\u00a0[\u00a0]: Copied! <pre>bdd.close()\n</pre> bdd.close() In\u00a0[\u00a0]: Copied! <pre>curseur\n</pre> curseur <p>A partir de ce moment l\u00e0, plus acune op\u00e9ration n'est possible sur la base de donn\u00e9es comme le montre la cellule suivante :</p> In\u00a0[\u00a0]: Copied! <pre>requete = \"SELECT COUNT(*) from Auteurs\"\ncurseur.execute(requete)\n</pre> requete = \"SELECT COUNT(*) from Auteurs\" curseur.execute(requete)"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_4_python/#bases-de-donnees-avec-python","title":"Bases de donn\u00e9es avec Python\u00b6","text":"<p>Cours NSI Terminale - Th\u00e8me 2.</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_4_python/#exploiter-une-base-de-donnees-avec-python","title":"Exploiter une base de donn\u00e9es avec Python\u00b6","text":"<p>Dans ce TP, nous allons reprendre notre base de donn\u00e9es d'exemples sur les livres, mais nous allons utiliser Python pour ex\u00e9cuter et exploiter les requ\u00eates SQL.</p> <p>Notre SGBD sera toujours SQLite : le module python que nous utiliserons se nomme sqlite3.</p> <p>Si vous ne poss\u00e9dez pas cette base des TP pr\u00e9c\u00e9dents, vous pouvez la r\u00e9cup\u00e9rer ici.</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_4_python/#executer-des-requetes-de-selection","title":"Ex\u00e9cuter des requ\u00eates de s\u00e9lection\u00b6","text":""},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_4_python/#le-principe","title":"Le principe\u00b6","text":"<p>Reste ensuite \u00e0 ex\u00e9cuter notre premi\u00e8re requ\u00eate. Pour cela, nous utiliserons la m\u00e9thode execute() du curseur, la requ\u00eate \u00e9tant une cha\u00eene de caract\u00e8res pass\u00e9e en param\u00e8tre.</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_4_python/#construire-des-requetes-a-partir-de-variables-python","title":"Construire des requ\u00eates \u00e0 partir de variables python\u00b6","text":"<p>Nous allons dans l'exemple suivant \u00e9crire une fonction prenom()</p> <ul> <li>qui prend en param\u00e8tre un curseur et un nom d'auteur</li> <li>qui renvoie son pr\u00e9nom</li> </ul> <p>Si le nom de l'auteur ne figure pas dans la table Auteurs, la fonction renverra None.</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_4_python/#explications","title":"Explications\u00b6","text":"<p>Dans cet exemple, nous construisons une requ\u00eate \u00e0 partir d'une variable Python. SQLite propose un m\u00e9canisme de substitution s\u00e9curis\u00e9 permettant d'injecter une ou plusieurs variables \u00e0 l'int\u00e9rieur d'une requ\u00eate. C'est ce m\u00e9canisme que vous devez utiliser : ne construisez pas vous m\u00eame la cha\u00eene de caract\u00e8re contenant la requ\u00eate compl\u00e8te, c'est une mauvaise pratique qui vous conduira in\u00e9vitablement \u00e0 des probl\u00e8mes.</p> <p>Pour utiliser ce m\u00e9canisme de substitution, vous devez</p> <ul> <li>mettre des ? dans votre requ\u00eate \u00e0 l'emplacement de la variable \u00e0 ins\u00e9rer</li> <li>passer en second param\u00e8tre la liste des valeurs \u00e0 substituer dans la requ\u00eate</li> </ul> <p>C'est simple, fiable et s\u00e9curis\u00e9, en particulier contre les injections SQL !</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_4_python/#a-vous-de-jouer","title":"A vous de jouer\u00b6","text":"<p>Ecrivez une fonction romans()</p> <ul> <li>qui prend en param\u00e8tre un curseur et un nom d'auteur</li> <li>qui renvoie une liste de Titres de romans \u00e9crits par cet auteur</li> </ul> <p>Si le nom de l'auteur ne figure pas dans la table Auteurs, la fonction renverra None.</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_4_python/#inserer-de-nouveaux-enregistrements","title":"Ins\u00e9rer de nouveaux enregistrements\u00b6","text":"<p>Les requ\u00eates de modification sur la base se font de la m\u00eame mani\u00e8re que les requ\u00eates de s\u00e9lection, \u00e0 une petite subtilit\u00e9 pr\u00e8s : apr\u00e8s ex\u00e9cution de la requ\u00eate, il faudra faire appel \u00e0 la m\u00e9thode commit() de l'objet bdd (issu de la connexion) afin que les modifications soient prises en compte dans le fichier de base de donn\u00e9es.</p> <p>Attention : Si vous oubliez l'appel \u00e0 commit, vos modifications seront perdues lorsque vous quitterez votre programme car elles ne seront pas inscrites dans le fichier de la base de donn\u00e9es.</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_4_python/#a-vous-de-jouer","title":"A vous de jouer\u00b6","text":"<p>Effacez de la table auteur ce dernier enregistrement que nous avons cr\u00e9\u00e9.</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_4_python/#pour-finir","title":"Pour Finir\u00b6","text":"<p>Notre travail sur la BDD exemple est \u00e0 pr\u00e9sent termin\u00e9. Afin de fermer le fichier proprement et de s'assurer que les donn\u00e9es saisies seront bien inscrites dans le fichier, il faut imp\u00e9rativement appeler la m\u00e9thode close() sur l'objet bdd :</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_5_baseDataGouv/","title":"Exploiter un vrai jeu de donn\u00e9e","text":"In\u00a0[1]: Copied! <pre>import sqlite3\nbdd = sqlite3.connect(\"dis_db\")\ncurseur = bdd.cursor()\n</pre> import sqlite3 bdd = sqlite3.connect(\"dis_db\") curseur = bdd.cursor() In\u00a0[\u00a0]: Copied! <pre># Creation table Communes\nrequete = \"\"\"\nCREATE TABLE Communes\n(\n    IdCommune INTEGER  PRIMARY KEY,\n    inseecommune TEXT,\n    nomcommune TEXT,\n    quartier TEXT,\n    cdreseau TEXT,\n    nomreseau TEXT,\n    debutalim DATE\n);\"\"\"\ncurseur.execute(requete)\n\n# Creation des tables Prelevements et Resultats\n\n# YOUR CODE HERE\n\nbdd.commit()\n</pre> # Creation table Communes requete = \"\"\" CREATE TABLE Communes (     IdCommune INTEGER  PRIMARY KEY,     inseecommune TEXT,     nomcommune TEXT,     quartier TEXT,     cdreseau TEXT,     nomreseau TEXT,     debutalim DATE );\"\"\" curseur.execute(requete)  # Creation des tables Prelevements et Resultats  # YOUR CODE HERE  bdd.commit() In\u00a0[\u00a0]: Copied! <pre># Exemple d'import d'un fichier CSV dans une BDD\n\nimport csv\n\nwith open('DIS_COM_UDI_2020.txt', encoding='utf-8') as csvfile:\n    nb_lignes = 0\n    lignes = csv.reader(csvfile)\n    entete = True\n    for l in lignes:\n        if entete:\n            entete = False\n        else:\n            nb_lignes += 1\n            requete = f\"\"\"\n            INSERT INTO Communes\n                (inseecommune,nomcommune,quartier,cdreseau,nomreseau,debutalim)\n            VALUES\n                (?, ?, ?, ?, ?, ?)\n            \"\"\"\n            curseur.execute(requete, l)\n    bdd.commit()\n    print(f\"{nb_lignes} enregistrements cr\u00e9\u00e9s\")\n</pre> # Exemple d'import d'un fichier CSV dans une BDD  import csv  with open('DIS_COM_UDI_2020.txt', encoding='utf-8') as csvfile:     nb_lignes = 0     lignes = csv.reader(csvfile)     entete = True     for l in lignes:         if entete:             entete = False         else:             nb_lignes += 1             requete = f\"\"\"             INSERT INTO Communes                 (inseecommune,nomcommune,quartier,cdreseau,nomreseau,debutalim)             VALUES                 (?, ?, ?, ?, ?, ?)             \"\"\"             curseur.execute(requete, l)     bdd.commit()     print(f\"{nb_lignes} enregistrements cr\u00e9\u00e9s\") In\u00a0[\u00a0]: Copied! <pre># Proc\u00e9dez de m\u00eame pour le fichier pr\u00e9l\u00e8vement\n\n# YOUR CODE HERE\n</pre> # Proc\u00e9dez de m\u00eame pour le fichier pr\u00e9l\u00e8vement  # YOUR CODE HERE  In\u00a0[\u00a0]: Copied! <pre>curseur.execute(\"SELECT COUNT(*) FROM Prelevements;\")\nassert curseur.fetchone()[0] == 126730\n</pre> curseur.execute(\"SELECT COUNT(*) FROM Prelevements;\") assert curseur.fetchone()[0] == 126730 In\u00a0[\u00a0]: Copied! <pre># et enfin le fichier Resultat\n\n# YOUR CODE HERE\n</pre> # et enfin le fichier Resultat  # YOUR CODE HERE In\u00a0[\u00a0]: Copied! <pre>curseur.execute(\"SELECT COUNT(*) FROM Resultats;\")\nassert curseur.fetchone()[0] == 3683342\n</pre> curseur.execute(\"SELECT COUNT(*) FROM Resultats;\") assert curseur.fetchone()[0] == 3683342 In\u00a0[\u00a0]: Copied! <pre># YOUR CODE HERE\n</pre> # YOUR CODE HERE In\u00a0[\u00a0]: Copied! <pre>assert \"CAEN\" in liste_communes(curseur, 14)\n</pre> assert \"CAEN\" in liste_communes(curseur, 14) In\u00a0[\u00a0]: Copied! <pre># YOUR CODE HERE\n</pre> # YOUR CODE HERE In\u00a0[\u00a0]: Copied! <pre>anomalies(curseur, \"HEROUVILLE-SAINT-CLAIR\")\n</pre> anomalies(curseur, \"HEROUVILLE-SAINT-CLAIR\") In\u00a0[\u00a0]: Copied! <pre># YOUR CODE HERE\n</pre> # YOUR CODE HERE In\u00a0[\u00a0]: Copied! <pre>resultats(curseur, \"01400207768\")\n</pre> resultats(curseur, \"01400207768\") In\u00a0[\u00a0]: Copied! <pre># Amusez vous !\nliste_communes(curseur,14)\n</pre> # Amusez vous ! liste_communes(curseur,14) In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>bdd.close()\n</pre> bdd.close()"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_5_baseDataGouv/#exploiter-un-vrai-jeu-de-donnee","title":"Exploiter un vrai jeu de donn\u00e9e\u00b6","text":"<p>Cours NSI Terminale - Th\u00e8me 2.</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_5_baseDataGouv/#mise-en-pratique-sur-une-vraie-base","title":"Mise en pratique sur une vraie base\u00b6","text":"<p>A partir de maintenant, vous avez les connaissances pour r\u00e9aliser une application s'appuyant sur une base de donn\u00e9es. Il  ne reste plus qu'\u00e0 les appliquer dans le cadre d'un projet ou un mini projet. Un exemple de mini-projet possible dans le domaine du BigData consiste \u00e0 r\u00e9cup\u00e9rer des donn\u00e9es officielles et \u00e0 s'aider du langage SQL pour les exploiter.</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_5_baseDataGouv/#exemple-de-jeu-de-donnees","title":"Exemple de jeu de donn\u00e9es\u00b6","text":"<p>Une source int\u00e9ressante pour r\u00e9cup\u00e9rer des donn\u00e9es est data.gouv.fr. Voici un exemple de jeu de donn\u00e9es : https://www.data.gouv.fr/fr/datasets/resultats-du-controle-sanitaire-de-leau-distribuee-commune-par-commune/#_</p> <p>La description de chacun des fichiers se trouve ici : https://static.data.gouv.fr/resources/resultats-du-controle-sanitaire-de-leau-distribuee-commune-par-commune/20190710-030936/20190708-eau-distrib-documentation-v4.pdf</p> <ol> <li>T\u00e9l\u00e9chargez le fichier dis-* le plus r\u00e9cent. D\u00e9compressez le et analysez sa structure.</li> <li>Cr\u00e9ez une nouvelle base de donn\u00e9es et 3 tables \u00e0 l'int\u00e9rieur :<ul> <li>Communes</li> <li>Prelevements</li> <li>Resultats</li> </ul> </li> <li>Cr\u00e9ez dans chacune des tables une cl\u00e9 primaire nomm\u00e9e IdNomTable ainsi que des attributs correspondants aux intitul\u00e9s de colonne</li> <li>A l'aide de Python, lisez chacun des fichiers et peuplez les tables correspondantes.</li> <li>Cr\u00e9ez des requ\u00eates SQL afin de vous renseigner sur la qualit\u00e9 de l'eau dans les communes proches de chez vous.</li> </ol>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_5_baseDataGouv/#creation-des-tables","title":"Cr\u00e9ation des tables\u00b6","text":""},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_5_baseDataGouv/#alimentation-de-la-base-de-donnees","title":"Alimentation de la base de donn\u00e9es\u00b6","text":""},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_5_baseDataGouv/#interrogation-de-la-base-de-donnees","title":"Interrogation de la base de donn\u00e9es\u00b6","text":"<p>Nous avons \u00e0 pr\u00e9sent une vraie base de donn\u00e9es avec de vraies donn\u00e9es, en nombre cons\u00e9quent. Une petite requ\u00eate sur la table Resultats suffit pour s'en convaincre : Plus de 3 millions et demi d'enregistrements !</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_5_baseDataGouv/#quelques-idees-de-fonctions-a-creer","title":"Quelques id\u00e9es de fonctions \u00e0 cr\u00e9er !\u00b6","text":"<ul> <li><p>une fonction liste_communes prenant en entr\u00e9e un curseur et un num\u00e9ro de d\u00e9partement et renvoyant la liste des communes dans de d\u00e9partement pr\u00e9sentes dans la base.</p> <ul> <li>La fonction ne renverra pas plusieurs fois la m\u00eame commune</li> <li>Attention, pour un num\u00e9ro de d\u00e9partement inf\u00e9rieur \u00e0 10, if faut penser \u00e0 ajouter \"0\"...</li> <li>Le champ numeroinsee commence par le num\u00e9ro du d\u00e9partement mais est diff\u00e9rent du code postal.</li> </ul> </li> <li><p>une fonction anomalies() prenant un curseur et un nom de commune et qui renvoie la date et la conclusion du pr\u00e9l\u00e9vement (champ conclusionprel dans Prelevements dans la commune) et la r\u00e9f\u00e9rence du pr\u00e9l\u00e8vement (champ referenceprel dans Prelevements) en cas d'anomalie. Vous rep\u00e8rerez dans la base la phrase type lorsque tout va bien !</p> </li> <li><p>une fonction resultat() prenant en param\u00e8tres un curseur et une r\u00e9f\u00e9rence de pr\u00e9l\u00e8vement et qui renvoie les r\u00e9sultats d\u00e9taill\u00e9s de l'analyse avec les informations suivantes :</p> <ul> <li>libell\u00e9 associ\u00e9 \u00e0 chaque code param\u00e8tre, composant la d\u00e9nomination du param\u00e8tre sous forme de texte libre</li> <li>Le r\u00e9sultat de l\u2019analyse physico-chimique ou microbiologique du param\u00e8tre</li> <li>L'unit\u00e9 de mesure du param\u00e8tre</li> <li>La limite(s) de qualit\u00e9 du param\u00e8tre concern\u00e9 en vigueur  au moment du pr\u00e9l\u00e8vement</li> </ul> </li> </ul>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_5_baseDataGouv/#amusez-vous","title":"Amusez vous\u00b6","text":"<p>Interrogez la base de donn\u00e9es pour rechercher des anomalies dans votre commune ou les environs, et r\u00e9cup\u00e9rez les r\u00e9sultats d\u00e9taill\u00e9s des analyses en cas de probl\u00e8me pour identifier la source de l'anomalie.</p> <p>Au fil de votre parcours de la base, vous pouvez avoir envie de cr\u00e9er d'autres fonctions pour afficher d'autres informations. Ne vous privez pas !!!</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_5_baseDataGouv/#pour-aller-plus-loin","title":"Pour aller plus loin\u00b6","text":"<p>Vous avez les outils \u00e0 pr\u00e9sent pout construire une application graphique (avec TKInter par exemple) ou bien un site web (avec PHP ou Flask par exemple) mettant \u00e0 disposition ces r\u00e9sultats. Cela peut faire l'objet d'un projet.</p>"},{"location":"T4_Bases_de_donnees/4.2_mise_en_pratique/data/tnsi_BD_5_baseDataGouv/#fin-du-travail","title":"Fin du travail\u00b6","text":"<p>On n'oublie pas de fermer l'acc\u00e8s \u00e0 la base de donn\u00e9es :)</p> <p>Vous aurez pu constater au cours de vos requ\u00eates que les r\u00e9ponses de la base de donn\u00e9es sont imm\u00e9diates malgr\u00e9 les millions d'enregistrement que celle-ci contient !!</p> <p>Voici un petit aper\u00e7u de l'utilisation d'une base de donn\u00e9e dans le monde r\u00e9el.</p>"},{"location":"T5_Architecture_materielle/sommaire/","title":"Sommaire","text":"<ol> <li>Autour de GNU/Linux</li> <li>Syst\u00e8mes sur puce</li> <li>Gestion des processus </li> <li>Protocoles de routage </li> <li>Cryptographie</li> </ol>"},{"location":"T5_Architecture_materielle/5.0_Autour_de_GNU_Linux/cours/","title":"Cours","text":"<p>\u00e0 venir...</p>"},{"location":"T5_Architecture_materielle/5.1_Systemes_sur_puce/cours/","title":"Syst\u00e8mes sur puce","text":"<p>Cr\u00e9dits</p> <ul> <li>Gilles Lassus</li> </ul>"},{"location":"T5_Architecture_materielle/5.1_Systemes_sur_puce/cours/#1-loi-de-moore-et-miniaturisation-progressive","title":"1. Loi de Moore et miniaturisation progressive","text":""},{"location":"T5_Architecture_materielle/5.1_Systemes_sur_puce/cours/#11-la-loi-de-moore","title":"1.1 La Loi de Moore","text":"<p>En 1965, Gordon Moore postule que le nombre de transistors pr\u00e9sents sur une puce de microprocesseur doublera tous les deux ans.</p> <p>Cette pr\u00e9diction s'est r\u00e9v\u00e9l\u00e9e \u00e9tonnamment juste (\u00e0 quelques approximations pr\u00e8s) et les \u00e9quipements \u00e9lectroniques n'ont depuis jamais cess\u00e9 de devenir toujours plus performants / miniatures / \u00e9conomes en \u00e9nergie.</p> <p></p>"},{"location":"T5_Architecture_materielle/5.1_Systemes_sur_puce/cours/#12-evolution-de-la-taille-des-ordinateurs","title":"1.2  \u00c9volution de la taille des ordinateurs","text":""},{"location":"T5_Architecture_materielle/5.1_Systemes_sur_puce/cours/#121-ibm-650-le-premier-ordinateur-fabrique-en-serie-1955","title":"1.2.1 IBM 650, le premier ordinateur fabriqu\u00e9 en s\u00e9rie (1955)","text":"<p>Cet ordinateur n'a pas encore de transistors mais des tubes \u00e0 vide.</p>"},{"location":"T5_Architecture_materielle/5.1_Systemes_sur_puce/cours/#122-ibm-7090-le-premier-ordinateur-a-transistors-1959","title":"1.2.2 IBM 7090, le premier ordinateur \u00e0 transistors (1959)","text":"<p>Le transistor</p> <p>Le transistor est un composant \u00e9lectronique essentiel : il permet de laisser (ou non) passer un courant \u00e9lectrique. </p>"},{"location":"T5_Architecture_materielle/5.1_Systemes_sur_puce/cours/#123-le-role-crucial-de-la-taille-des-transistors","title":"1.2.3 Le r\u00f4le crucial de la taille des transistors","text":"<p>Ainsi que l'avait pr\u00e9dit Moore, c'est la progression du nombre de transistors gravables sur le processeur qui guidera pendant des ann\u00e9es l'\u00e9volution de l'informatique :</p> <p></p>"},{"location":"T5_Architecture_materielle/5.1_Systemes_sur_puce/cours/#2-composition-dun-pc-actuel","title":"2. Composition d'un pc actuel","text":"<p>Chaque composant a un r\u00f4le sp\u00e9cifique. Ils communiquent entre eux par des bus de diff\u00e9rentes vitesses. Chaque composant est rempla\u00e7able, et il est possible d'ajouter de nouveaux composants sur la carte m\u00e8re qui poss\u00e8de des slots d'extension.</p>"},{"location":"T5_Architecture_materielle/5.1_Systemes_sur_puce/cours/#3-tout-un-pc-sur-une-seule-puce-les-soc","title":"3. Tout un pc sur une seule puce : les SoC","text":""},{"location":"T5_Architecture_materielle/5.1_Systemes_sur_puce/cours/#31-lintegration-de-composants-differents-au-sein-dune-meme-puce","title":"3.1 L'int\u00e9gration de composants diff\u00e9rents au sein d'une m\u00eame puce","text":"<p>Le principe d'un syst\u00e8me sur puce ou System On a Chip (SoC) est d'int\u00e9grer au sein d'une puce unique un ensemble de composants habituellement physiquement dissoci\u00e9s dans un ordinateur classique (ordinateur de bureau ou ordinateur portable).</p> <p>On peut retrouver ainsi au sein d'une m\u00eame puce :</p> <ul> <li>le microprocesseur (CPU)</li> <li>la carte graphique (GPU)</li> <li>la m\u00e9moire RAM</li> </ul> <p>+ \u00e9ventuellement des composants de communication (WiFi, Bluetooth...)</p> <p>Avantages et inconv\u00e9nients d'un SoC </p> <p> Avantages</p> <ul> <li>moindre consommation \u00e9lectrique</li> <li>moindre encombrement</li> <li>pas besoin de refroidissement</li> <li>meilleure s\u00e9curit\u00e9 (vue globale sur la s\u00e9curit\u00e9 qui n'est plus d\u00e9pendante d'une multitude de composants)</li> <li>moindre co\u00fbt (forte automisation du processus, gros volumes de production)</li> </ul> <p> Inconv\u00e9nients</p> <ul> <li>Impossibilit\u00e9 de choisir ind\u00e9pendamment ses composants</li> <li>Pas de mise \u00e0 jour possible / remplacement / ajout d'un composant</li> <li>La panne d'un seul composant entra\u00eene la panne totale du SoC</li> </ul>"},{"location":"T5_Architecture_materielle/5.1_Systemes_sur_puce/cours/#32-exemple-a15-bionic","title":"3.2 Exemple : A15 Bionic","text":"<p>Observons par exemple la puce Apple A15 Bionic, qui \u00e9quipe les iPhone 13. Cette puce est fabriqu\u00e9e par TSMC.</p> <p></p> <p></p> <p>Cette puce contient :</p> <ul> <li>15 milliards de transistors (grav\u00e9s \u00e0 5 nm)</li> <li>un processeur central \u00e0 6 c\u0153urs (2 c\u0153urs hautes performances + 4 c\u0153urs plus \u00e9conomes en \u00e9nergie)</li> <li>un GPU (processeur d\u00e9di\u00e9 uniquement au calcul du rendu graphique) de 5 c\u0153urs.</li> <li>une puce d\u00e9di\u00e9e au Machine Learning (Neural Engine)</li> </ul>"},{"location":"T5_Architecture_materielle/5.1_Systemes_sur_puce/cours/#4-des-puces-dediees-a-des-taches-specifiques","title":"4. Des puces d\u00e9di\u00e9es \u00e0 des t\u00e2ches sp\u00e9cifiques","text":"<p>L'int\u00e9gration dans un SoC n'est pas totale : il reste des puces d\u00e9di\u00e9es \u00e0 des t\u00e2ches tr\u00e8s sp\u00e9cifiques qui ne sont pas forc\u00e9ment int\u00e9gr\u00e9es dans le SoC.</p>"},{"location":"T5_Architecture_materielle/5.1_Systemes_sur_puce/cours/#41-au-sein-dun-telephone","title":"4.1 Au sein d'un t\u00e9l\u00e9phone","text":"<p>Ainsi, d'apr\u00e8s le site iFixit, on peut retrouver ceci dans l'iPhone Pro 13, au c\u00f4t\u00e9 de la puce A15 \u00e9voqu\u00e9e plus haut :</p> <p> </p> <p>On voit que (par exemple) qu'il existe une puce sp\u00e9cifique pour g\u00e9rer l'audio, une puce sp\u00e9cifique pour le module WiFi, une puce sp\u00e9cifique pour le module Modem 5G...</p>"},{"location":"T5_Architecture_materielle/5.1_Systemes_sur_puce/cours/#42-en-electronique-grand-public","title":"4.2 En \u00e9lectronique \u00abgrand public\u00bb","text":"<p>Ce composant (pouvant \u00eatre utilis\u00e9 dans un montage personnel, sur un Arduino par exemple) ne sert qu'\u00e0 faire des calculs cryptographiques.</p>"},{"location":"T5_Architecture_materielle/5.1_Systemes_sur_puce/cours/#43-un-principe-general","title":"4.3 Un principe g\u00e9n\u00e9ral","text":"<p>Il est important de comprendre que certains processeurs sont optimis\u00e9s pour un certains types de calcul. C'est le cas par exemple d'une carte graphique, qui excelle dans le calcul de rendus de polygones.</p> <p>On s'est aper\u00e7u que cette aptitude \u00e0 faire des calculs \u00abb\u00eates et r\u00e9p\u00e9titifs\u00bb \u00e9tait parfaite pour faire les calculs math\u00e9matiques (inutiles) n\u00e9cessaires au minage des cryptomonnaies. Les cartes graphiques ont donc \u00e9t\u00e9 d\u00e9tourn\u00e9es de leur usage originel, \u00e0 cause de la sp\u00e9cificit\u00e9 de l'impl\u00e9mentation de leur puce.</p> <p>De m\u00eame, les calculs sur les r\u00e9seaux de neurones (essentiels en IA) n\u00e9cessitent une grande rapidit\u00e9 dans les multiplications de matrices. Pour cette raison, Apple a int\u00e9gr\u00e9 directement dans son SoC A15 une puce sp\u00e9calis\u00e9e dans ces calculs (voir plus haut).</p>"},{"location":"T5_Architecture_materielle/5.1_Systemes_sur_puce/cours/#44-conclusion","title":"4.4 Conclusion","text":"<p>L'orientation actuelle de l'\u00e9lectronique est donc \u00e0 la fois :</p> <ul> <li>une int\u00e9gration toujours plus grande dans des SoC multi-t\u00e2ches.</li> <li>des puces toujours plus sp\u00e9cifiques qui excellent dans un domaine particulier.</li> </ul>"},{"location":"T5_Architecture_materielle/5.1_Systemes_sur_puce/cours/#5-exercice","title":"5. Exercice","text":"<p>Exercice (Polyn\u00e9sie 2021)</p> \u00c9nonc\u00e9Correction <p>Un constructeur automobile int\u00e8gre \u00e0 ses v\u00e9hicules des syst\u00e8mes embarqu\u00e9s, comme par exemple un syst\u00e8me de guidage par satellites (GPS), un syst\u00e8me de freinage antiblocage (ABS)... </p> <p>Ces dispositifs utilisent des syst\u00e8mes sur puces (SoC : System on a Chip).</p> <p>Citer deux avantages \u00e0 utiliser ces syst\u00e8mes sur puces plut\u00f4t qu'une architecture classique d'ordinateur.</p> <p>@G\u00e9n\u00e9r\u00e9 par ChatGPT L'utilisation de syst\u00e8mes sur puces (SoC) plut\u00f4t que des architectures classiques d'ordinateurs pr\u00e9sente plusieurs avantages dans le contexte des dispositifs embarqu\u00e9s, tels que ceux int\u00e9gr\u00e9s dans les v\u00e9hicules automobiles. Voici deux avantages majeurs :</p> <p>Taille et Int\u00e9gration : Les SoC int\u00e8grent plusieurs composants sur une seule puce, ce qui r\u00e9duit consid\u00e9rablement la taille physique du syst\u00e8me. Cette int\u00e9gration inclut g\u00e9n\u00e9ralement le processeur central, la m\u00e9moire, les interfaces d'E/S (Entr\u00e9es/Sorties) et d'autres composants n\u00e9cessaires. La compacit\u00e9 r\u00e9sultante est cruciale pour les applications embarqu\u00e9es, o\u00f9 l'espace est souvent limit\u00e9.</p> <p>Consommation d'\u00c9nergie : Les SoC sont con\u00e7us pour \u00eatre \u00e9conomes en \u00e9nergie, adapt\u00e9s aux contraintes d'alimentation des dispositifs embarqu\u00e9s. En int\u00e9grant uniquement les composants n\u00e9cessaires et en optimisant leur fonctionnement, les SoC peuvent fournir des performances ad\u00e9quates tout en conservant une consommation d'\u00e9nergie relativement faible. Cela est particuli\u00e8rement important dans le domaine automobile, o\u00f9 l'efficacit\u00e9 \u00e9nerg\u00e9tique contribue \u00e0 la dur\u00e9e de vie de la batterie et \u00e0 la r\u00e9duction de la consommation de carburant.</p> <p>En r\u00e9sum\u00e9, l'utilisation de SoC offre des avantages tels que la compacit\u00e9, l'int\u00e9gration de plusieurs composants sur une seule puce, et une consommation d'\u00e9nergie optimis\u00e9e, ce qui en fait un choix efficace pour les syst\u00e8mes embarqu\u00e9s dans les v\u00e9hicules et d'autres applications similaires.</p> Bibliographie / Sitographie <ul> <li>Num\u00e9rique et Sciences Informatiques, Terminale, T. BALABONSKI, S. CONCHON, J.-C. FILLIATRE, K. NGUYEN, \u00e9ditions ELLIPSES.</li> <li>Pr\u00e9pabac NSI, Terminale, G.CONNAN, V.PETROV, G.ROZSAVOLGYI, L.SIGNAC, \u00e9ditions HATIER.</li> <li>https://fr.wikipedia.org/wiki/Loi_de_Moore</li> <li>https://blog.iakaa.com/lordinateur-fete-ses-60-ans/</li> <li>https://www.thewindowsclub.com/history-of-computers</li> <li>https://perso-etis.ensea.fr//lorandel/M2_SoC/s1.pdf</li> <li>https://www.hawkpointtechnologies.com/about/blog/computer-components</li> <li>https://www.tremplin-numerique.org/apple-a15-vs-a14-quoi-de-neuf-dans-la-puce-de-liphone-13</li> <li>https://www.distrelec.be/fr/cryptoprocesseur-breakout-atecc608a-sparkfun-electronics-dev-18077/p/30241877</li> </ul>"},{"location":"T5_Architecture_materielle/5.2_Gestion_des_processus/Exercices/","title":"Exercices","text":""},{"location":"T5_Architecture_materielle/5.2_Gestion_des_processus/Exercices/#exercice-1","title":"Exercice 1","text":"<p>2021, sujet Am\u00e9rique du Nord</p> <p>Un constructeur automobile utilise des ordinateurs pour la conception de ses v\u00e9hicules. Ceux-ci sont munis d'un syst\u00e8me d'exploitation ainsi que de nombreuses applications parmi lesquelles on peut citer :</p> <ul> <li>un logiciel de traitement de texte ;</li> <li>un tableur ;</li> <li>un logiciel de Conception Assist\u00e9e par Ordinateur (CAO) ;</li> <li>un syst\u00e8me de gestion de base de donn\u00e9es (SGBD)</li> </ul> <p>Chaque ordinateur est \u00e9quip\u00e9 des p\u00e9riph\u00e9riques classiques : clavier, souris, \u00e9cran et est reli\u00e9 \u00e0 une imprimante r\u00e9seau.</p> <ol> <li>(question System On Chip)</li> <li>Un ing\u00e9nieur travaille sur son ordinateur et utilise les quatre applications cit\u00e9es au d\u00e9but de l'\u00e9nonc\u00e9. Pendant l'ex\u00e9cution de ces applications, des processus mobilisent des donn\u00e9es et sont en attente d'autres donn\u00e9es mobilis\u00e9es par d'autres processus. On donne ci-dessous un tableau indiquant \u00e0 un instant pr\u00e9cis l'\u00e9tat des processus en cours d'ex\u00e9cution et dans lequel D1, D2, D3, D4 et D5 sont des donn\u00e9es.</li> </ol> <p>La lettre M signifie que la donn\u00e9e est mobilis\u00e9e par l'application ; la lettre A signifie que l'application est en attente de cette donn\u00e9e.</p> <p>Lecture du tableau : le logiciel de traitement de texte mobilise (M) la donn\u00e9e D1 et est en attente (A) de la donn\u00e9e D2.</p> D1 D2 D3 D4 D5 Traitement de texte M A - - - Tableur A - - - M SGBD - M A A - CAO - - A M A <p>Montrer que les applications s'attendent mutuellement. Comment s'appelle cette situation ?</p> Correction <p> Le cycle en pointill\u00e9s montre que les applications s'attendent mutuellement : cette situation s'appelle un interblocage.</p>"},{"location":"T5_Architecture_materielle/5.2_Gestion_des_processus/Exercices/#exercice-2","title":"Exercice 2","text":"<p>2021, M\u00e9tropole sujet 1</p> <p>Partie A Cette partie est un questionnaire \u00e0 choix mutiples (QCM). Pour chacune des questions, une seule des quatre r\u00e9ponses est exacte.</p> <ol> <li>Parmi les commandes ci-dessous, laquelle permet d\u2019afficher les processus en cours d\u2019ex\u00e9cution ?<ul> <li>a. <code>dir</code></li> <li>b. <code>ps</code> </li> <li>c. <code>man</code> </li> <li>d.   <code>ls</code></li> </ul> </li> <li>Quelle abr\u00e9viation d\u00e9signe l\u2019identifiant d\u2019un processus dans un syst\u00e8me d\u2019exploitation de type UNIX ?<ul> <li>a. PIX</li> <li>b. SIG </li> <li>c. PID </li> <li>d. SID</li> </ul> </li> <li>Comment s'appelle la gestion du partage de processeur entre les diff\u00e9rents processus ?<ul> <li>a. L'interblocage</li> <li>b. L'ordonnancement</li> <li>c. La planification</li> <li>d. La priorisation</li> </ul> </li> <li>Quelle commande permet d\u2019interrompre un processus dans un syst\u00e8me d\u2019exploitation de type UNIX ?<ul> <li>a. <code>stop</code></li> <li>b. <code>interrupt</code> </li> <li>c. <code>end</code> </li> <li>d.   <code>kill</code></li> </ul> </li> </ol> correction <ol> <li>b</li> <li>c</li> <li>b</li> <li>d</li> </ol> <p>Partie B</p> <p>Q1. Un processeur choisit \u00e0 chaque cycle d\u2019ex\u00e9cution le processus qui doit \u00eatre ex\u00e9cut\u00e9. Le tableau ci-dessous donne pour trois processus P1, P2, P3 :</p> <ul> <li>la dur\u00e9e d\u2019ex\u00e9cution (en nombre de cycles),</li> <li>l\u2019instant d\u2019arriv\u00e9e sur le processeur (exprim\u00e9 en nombre de cycles \u00e0 partir de 0),</li> <li>le num\u00e9ro de priorit\u00e9.</li> </ul> <p>Le num\u00e9ro de priorit\u00e9 est d\u2019autant plus petit que la priorit\u00e9 est grande. On suppose qu\u2019\u00e0 chaque instant, c\u2019est le processus qui a le plus petit num\u00e9ro de priorit\u00e9 qui est ex\u00e9cut\u00e9, ce qui peut provoquer la suspension d\u2019un autre processus, lequel reprendra lorsqu\u2019il sera le plus prioritaire.</p> <p> Reproduire le tableau ci-dessous sur la copie et indiquer dans chacune des cases le processus ex\u00e9cut\u00e9 \u00e0 chaque cycle. </p> correction <p></p> <p>Q2. On suppose maintenant que les trois processus pr\u00e9c\u00e9dents s\u2019ex\u00e9cutent et utilisent une ou plusieurs ressources parmi R1, R2 et R3. Parmi les sc\u00e9narios suivants, lequel provoque un interblocage ? Justifier.</p> <p></p> correction <p> Seul le scenario 2 pr\u00e9sente un cycle d'interd\u00e9pendance : seul le sc\u00e9nario 2 va donc provoquer un interblocage.</p>"},{"location":"T5_Architecture_materielle/5.2_Gestion_des_processus/Exercices/#exercice-3","title":"Exercice 3","text":"<p>2021, M\u00e9tropole sujet 2</p> <p>Partie A</p> <p>Dans un bureau d\u2019architectes, on dispose de certaines ressources qui ne peuvent \u00eatre utilis\u00e9es simultan\u00e9ment par plus d\u2019un processus, comme l\u2019imprimante, la table tra\u00e7ante, le modem. Chaque programme, lorsqu\u2019il s\u2019ex\u00e9cute, demande l\u2019allocation des ressources qui lui sont n\u00e9cessaires. Lorsqu\u2019il a fini de s\u2019ex\u00e9cuter, il lib\u00e8re ses ressources.</p> <p></p> <p>On appelle p1, p2 et p3 les processus associ\u00e9s respectivement aux programmes 1, 2 et 3</p> <ol> <li>Les processus s'ex\u00e9cutent de mani\u00e8re concurrente. Justifier qu'une situation d'interblocage peut se produire.</li> <li>Modifier l'ordre des instructions du programme 3 pour qu'une telle situation ne puisse pas se produire. Aucune justification n'est attendue.</li> <li>Supposons que le processus p1 demande la table tra\u00e7ante alors qu'elle est en cours d'utilisation par le processus p3. Parmi les \u00e9tats suivants, quel sera l'\u00e9tat du processus p1 tant que la table tra\u00e7ante n'est pas disponible :<ul> <li>a. \u00e9lu</li> <li>b. bloqu\u00e9</li> <li>c. pr\u00eat</li> <li>d. termin\u00e9</li> </ul> </li> </ol> <p>Partie B</p> <p>Avec une ligne de commande dans un terminal sous Linux, on obtient l'affichage suivant :</p> <p></p> <p>La documentation Linux donne la signification des diff\u00e9rents champs :</p> <ul> <li><code>UID</code> : identifiant utilisateur effectif ;</li> <li><code>PID</code> : identifiant de processus ;</li> <li><code>PPID</code> : <code>PID</code> du processus parent ;</li> <li><code>C</code> : partie enti\u00e8re du pourcentage d'utilisation du processeur par rapport au temps de vie des processus ;</li> <li><code>STIME</code> : l'heure de lancement du processus ;</li> <li><code>TTY</code> : terminal de contr\u00f4le</li> <li><code>TIME</code> : temps d'ex\u00e9cution</li> <li><code>CMD</code> : nom de la commande du processus</li> </ul> <p>Q1. Parmi les quatre commandes suivantes, laquelle a permis cet affichage ?</p> <ul> <li>a. <code>ls -l</code> </li> <li>b. <code>ps -ef</code> </li> <li>c. <code>cd ..</code> </li> <li>d. <code>chmod 741 processus.txt</code> </li> </ul> <p>Q2. Quel est l'identifiant du processus parent \u00e0 l'origine de tous les processus concernant le navigateur Web (chromium-browser) ?</p> <p>Q3. Quel est l'identifiant du processus dont le temps d'ex\u00e9cution est le plus long ?</p> correction <p>Q1. b.</p> <p>Q2. 6211</p> <p>Q3. 6211</p>"},{"location":"T5_Architecture_materielle/5.2_Gestion_des_processus/Exercices/#exercice-4","title":"Exercice 4","text":"<p>2021, M\u00e9tropole Candidats Libres sujet 2</p> <p>Q1. Les \u00e9tats possibles d\u2019un processus sont : pr\u00eat, \u00e9lu, termin\u00e9 et bloqu\u00e9.</p> <p>Q1.a. Expliquer \u00e0 quoi correspond l\u2019\u00e9tat \u00e9lu. Q1.b. Proposer un sch\u00e9ma illustrant les passages entre les diff\u00e9rents \u00e9tats.</p> <p>Q2. On suppose que quatre processus C\u2081, C\u2082, C\u2083 et C\u2084 sont cr\u00e9\u00e9s sur un ordinateur, et qu\u2019aucun autre processus n\u2019est lanc\u00e9 sur celui-ci, ni pr\u00e9alablement ni pendant l\u2019ex\u00e9cution des quatre processus. L\u2019ordonnanceur, pour ex\u00e9cuter les diff\u00e9rents processus pr\u00eats, les place dans une structure de donn\u00e9es de type file. Un processus pr\u00eat est enfil\u00e9 et un processus \u00e9lu est d\u00e9fil\u00e9.</p> correction <p>Q1a. \u00c9lu signifie que le processus est actuellement en cours d'ex\u00e9cution par le processeur.</p> <p>Q1b. </p> <p>Q2.a. Parmi les propositions suivantes, recopier celle qui d\u00e9crit le fonctionnement des entr\u00e9es/sorties dans une file :  </p> <ul> <li>i.Premier entr\u00e9, dernier sorti</li> <li>ii. Premier entr\u00e9, premier sorti</li> <li>iii. Dernier entr\u00e9, premier sorti</li> </ul> correction <p>Q2a. ii. Premier entr\u00e9, premier sorti</p> <p>Q2.b. On suppose que les quatre processus arrivent dans la file et y sont plac\u00e9s dans l\u2019ordre C\u2081, C\u2082, C\u2083 et C\u2084.</p> <ul> <li>Les temps d\u2019ex\u00e9cution totaux de C\u2081, C\u2082, C\u2083 et C\u2084 sont respectivement 100 ms, 150 ms, 80 ms et 60 ms.</li> <li>Apr\u00e8s 40 ms d\u2019ex\u00e9cution, le processus C\u2081 demande une op\u00e9ration d\u2019\u00e9criture disque, op\u00e9ration qui dure 200 ms. Pendant cette op\u00e9ration d\u2019\u00e9criture, le processus C\u2081 passe \u00e0 l\u2019\u00e9tat bloqu\u00e9.</li> <li>Apr\u00e8s 20 ms d\u2019ex\u00e9cution, le processus C\u2083 demande une op\u00e9ration d\u2019\u00e9criture disque, op\u00e9ration qui dure 10 ms. Pendant cette op\u00e9ration d\u2019\u00e9criture, le processus C\u2083 passe \u00e0 l\u2019\u00e9tat bloqu\u00e9.</li> </ul> <p>Sur la frise chronologique ci-dessous, les \u00e9tats du processus C\u2082 sont donn\u00e9s. Compl\u00e9ter la frise avec les \u00e9tats des processus C\u2081, C\u2083 et C\u2084.</p> <p></p> correction <p></p>"},{"location":"T5_Architecture_materielle/5.2_Gestion_des_processus/cours/","title":"Gestion des processus","text":"<p>Cr\u00e9dits</p> <ul> <li>Gilles Lassus</li> </ul>"},{"location":"T5_Architecture_materielle/5.2_Gestion_des_processus/cours/#1-notion-de-processus","title":"1. Notion de processus","text":""},{"location":"T5_Architecture_materielle/5.2_Gestion_des_processus/cours/#11-definition-dun-processus","title":"1.1 D\u00e9finition d'un processus","text":"<p>Lorsqu'un programme est ex\u00e9cut\u00e9 sur un ordinateur, celui-ci va cr\u00e9er un (ou plusieurs) processus.</p> <p>On dit que ce processus est une instance d'ex\u00e9cution de ce programme.</p> <p>Un processus est caract\u00e9ris\u00e9 par :</p> <ul> <li>l'ensemble des instructions qu'il va devoir accomplir (\u00e9crites dans le fichier ex\u00e9cutable obtenu par la compilation du code-source du programme)</li> <li>les ressources que le programme va mobiliser (fichier en ouverture, carte son...)</li> <li>l'\u00e9tat des registres du processeur </li> </ul>"},{"location":"T5_Architecture_materielle/5.2_Gestion_des_processus/cours/#12-observation-des-processus-sous-linux","title":"1.2 Observation des processus sous Linux","text":""},{"location":"T5_Architecture_materielle/5.2_Gestion_des_processus/cours/#121-la-commande-ps","title":"1.2.1 La commande <code>ps</code>","text":"<p>Dans un terminal, la commande <code>ps</code> va permettre d'afficher la liste des processus actifs. </p> <p>Plus pr\u00e9cis\u00e9ment, nous allons utiliser la commande <code>ps -lu nom_user</code>. L'option <code>l</code> permet d'afficher un grand nombre de renseignements et l'option <code>u</code> permet de sp\u00e9cifier l'utilisateur propri\u00e9taire des processus.</p> <p></p> <p>On retrouve notamment dans ce tableau les colonnes :</p> <ul> <li> <p><code>CMD</code>  (Command) : le nom de la commande qui a cr\u00e9\u00e9 le processus. Vous pouvez y retrouver par ordre chronologique le nom de tous les programmes actifs. Certains sont ceux que vous avez ouverts volontairement (navigateur...) mais on y trouve surtout tous les programmes n\u00e9cessaires au bon fonctionnement du syst\u00e8me d'exploitation. Le dernier processus en bas de la liste est forc\u00e9ment <code>ps</code>, puisque vous venez de l'appeler.</p> </li> <li> <p><code>PID</code> (Process Identifier) : le num\u00e9ro unique d'identification, affect\u00e9 chronologiquement par le syst\u00e8me d'exploitation. Le processus de PID \u00e9gal \u00e0 1 est <code>systemd</code>, qui est le tout premier programme lanc\u00e9 par le noyau Linux au d\u00e9marrage. </p> </li> <li> <p><code>PPID</code> (Parent PID) : certains processus vont eux-m\u00eames lancer plusieurs processus-fils, qui porteront le m\u00eame nom. C'est ainsi qu'on peut retrouver de multiples processus s'appelant <code>chrome</code> :</p> </li> </ul> <p></p> <p>Ici, l'instance \u00abprincipale\u00bb de Chrome (<code>PID</code> 1453) a g\u00e9n\u00e9r\u00e9 6 autres instances de <code>PID</code> diff\u00e9rents, dont le <code>PPID</code> vaut 1453.</p> <p>Dans Chrome/Chromium, vous pouvez comprendre le r\u00f4le de chaque processus en le retrouvant dans le gestionnaire des t\u00e2ches (clic-droit sur une zone vide de la barre d'onglets)</p>"},{"location":"T5_Architecture_materielle/5.2_Gestion_des_processus/cours/#122-la-commande-pstree","title":"1.2.2 La commande <code>pstree</code>","text":"<p>\u00c0 noter que la commande <code>pstree</code> permet d'afficher les processus sous forme d'arborescence : </p> <p></p>"},{"location":"T5_Architecture_materielle/5.2_Gestion_des_processus/cours/#123-la-commande-top","title":"1.2.3 La commande <code>top</code>","text":"<p>La commande <code>top</code> permet de conna\u00eetre en temps r\u00e9el la liste des processus, class\u00e9s par ordre d\u00e9croissant de consommation de CPU. </p> <p>On ferme <code>top</code> par la combinaison de touches <code>Ctrl-C</code>.</p> <p>Si on rep\u00e8re alors un processus qui consomme beaucoup trop de ressources, on peut utiliser...</p>"},{"location":"T5_Architecture_materielle/5.2_Gestion_des_processus/cours/#124-la-commande-kill","title":"1.2.4 La commande <code>kill</code>","text":"<p>La commande <code>kill</code> permet de fermer un processus, en donnant son <code>PID</code>  en argument.</p> <p>Exemple : <code>kill 1453</code> tuera Chrome (voir la capture du 1.2.1)</p> <p></p>"},{"location":"T5_Architecture_materielle/5.2_Gestion_des_processus/cours/#2-ordonnancement","title":"2. Ordonnancement","text":""},{"location":"T5_Architecture_materielle/5.2_Gestion_des_processus/cours/#21-experience-les-processus-fonctionnent-simultanement-a-tour-de-role","title":"2.1 Exp\u00e9rience : les processus fonctionnent simultan\u00e9ment \u00e0 tour de r\u00f4le.","text":"<p>Un ordinateur donne l'illusion de r\u00e9aliser plusieurs t\u00e2ches simultan\u00e9ment. Hormis pour les processeurs fonctionnant avec plusieurs c\u0153urs, il n'en est rien.</p> <p>Comme nous l'avons vu, ces processus sont lanc\u00e9s s\u00e9quentiellement par le syst\u00e8me d'exploitation, et sont ensuite en apparence tous \u00abactifs en m\u00eame temps\u00bb (les guillemets sont importants) : on parle de programmation concurrente.</p> <p>Revenons sur l'expression \u00abactifs en m\u00eame temps\u00bb, car elle v\u00e9hicule une fausse id\u00e9e : ces processus sont bien vivants dans un m\u00eame laps de temps, mais ils s'ex\u00e9cutent LES UNS APR\u00c8S LES AUTRES, le processeur ne pouvant en traiter qu'un seul \u00e0 la fois.</p> <p>Un cadencement extr\u00eamement rapide et efficace donne l'apparence d'une (fausse) simultan\u00e9it\u00e9. Nous allons la mettre en \u00e9vidence :</p> <p>Consid\u00e9rons les fichiers <code>progA.py</code> et <code>progB.py</code> ci-dessous :</p> progA.py<pre><code>import time\n\nfor i in range(10):\n    print(\"programme A en cours, it\u00e9ration\", i)\n    time.sleep(0.02)  \n</code></pre> progB.py<pre><code>import time\ntime.sleep(0.01)\nfor i in range(10):\n    print(\"programme B en cours, it\u00e9ration\", i)\n    time.sleep(0.02)  \n</code></pre> <p>Le programme <code>progB.py</code> est l\u00e9g\u00e8rement retard\u00e9 au d\u00e9marrage par le <code>time.sleep(0.01)</code>. Il devrait donc en r\u00e9sulter un entrelacement entre les phrases <code>programme A en cours</code> et <code>programme B en cours</code>.  </p> <p>L'ex\u00e9cution \u00abd'apparence simultan\u00e9e\u00bb de ces deux programmes peut se faire dans un Terminal via la commande <code>python3 progA.py &amp; python3 progB.py</code>.</p> <p>Il en r\u00e9sulte ceci :</p> <p></p> <p>Nous retrouvons bien l'alternance pr\u00e9vue \u00e0 la lecture du code. Tout se passe donc comme si les deux processus avaient \u00e9t\u00e9 lanc\u00e9s et trait\u00e9s simultan\u00e9ment.</p> <p>R\u00e9duisons maintenant les temporisations (en passant du centi\u00e8me de seconde \u00e0 la milliseconde): </p> progA.py<pre><code>import time\n\nfor i in range(10):\n    print(\"programme A en cours, it\u00e9ration\", i)\n    time.sleep(0.002)  \n</code></pre> progB.py<pre><code>import time\ntime.sleep(0.001)\nfor i in range(10):\n    print(\"programme B en cours, it\u00e9ration\", i)\n    time.sleep(0.002)  \n</code></pre> <p>Il en r\u00e9sulte maintenant ceci :</p> <p></p> <p>L'alternance pr\u00e9vue n'est plus respect\u00e9e (et les r\u00e9sultats deviennent non-reproductibles).</p> <p>Si la gestion des processus \u00e9tait r\u00e9ellement simultan\u00e9e, m\u00eame en consid\u00e9rant des ralentissements du processeur par des sollicitations ext\u00e9rieures, chaque processus serait ralenti de la m\u00eame mani\u00e8re : l'entrelacement des phrases serait toujours le m\u00eame. </p> <p>En r\u00e9alit\u00e9, le processeur passe son temps \u00e0 alterner entre les divers processus qu'il a \u00e0 g\u00e9rer, et les met en attente quand il ne peut pas s'occuper d'eux. Il ob\u00e9it pour cela aux instructions de son ordonnanceur.</p>"},{"location":"T5_Architecture_materielle/5.2_Gestion_des_processus/cours/#22-lordonnancement-des-processus","title":"2.2 L'ordonnancement des processus","text":""},{"location":"T5_Architecture_materielle/5.2_Gestion_des_processus/cours/#221-differents-types-dordonnancement","title":"2.2.1 Diff\u00e9rents types d'ordonnancement","text":"<p>Si on vous donne 4 t\u00e2ches A, B, C et D \u00e0 accomplir, vous pouvez d\u00e9cider :</p> <ul> <li>de faire la t\u00e2che prioritaire d'abord ;</li> <li>de faire la t\u00e2che la plus rapide d'abord ;</li> <li>de faire la t\u00e2che la plus longue d'abord ;</li> <li>de les faire dans l'ordre o\u00f9 elles vous ont \u00e9t\u00e9 donn\u00e9es ;</li> <li>de faire \u00e0 tour de r\u00f4le chaque t\u00e2che pendant un temps fixe jusqu'\u00e0 ce qu'elles soient toutes termin\u00e9es;</li> <li>...</li> </ul> <p>Un processeur est confront\u00e9 aux m\u00eames choix : comment d\u00e9terminer quel processus doit \u00eatre trait\u00e9 \u00e0 quel moment ?</p> <p>Le sch\u00e9ma ci-dessous (issu de ce site) pr\u00e9sente quelques politiques d'ordonnancement :</p> <p></p> <p>Sous Linux, l'ordonnancement est effectu\u00e9 par un syst\u00e8me hybride o\u00f9 les processus sont ex\u00e9cut\u00e9s \u00e0 tour de r\u00f4le (on parle de tourniquet ou de Round Robin) suivant un ordre de priorit\u00e9 dynamique.</p> <p>Dans le cas (tr\u00e8s fr\u00e9quent maintenant) d'un processeur multi-c\u0153urs, le probl\u00e8me reste identique. Certes, sur 4 c\u0153urs, 4 processus pourront \u00eatre trait\u00e9s simultan\u00e9ment (une r\u00e9elle simultan\u00e9it\u00e9) mais il reste toujours beaucoup plus de processus \u00e0 traiter que de c\u0153urs dans le processeur... et un ordonnancement est donc toujours n\u00e9cessaire.</p>"},{"location":"T5_Architecture_materielle/5.2_Gestion_des_processus/cours/#222-les-differents-etats-dun-processus","title":"2.2.2 Les diff\u00e9rents \u00e9tats d'un processus","text":"<p>Selon que l'ordonnanceur aura d\u00e9cid\u00e9 de le confier ou non au processeur pour son ex\u00e9cution, un processus peut donc se trouver dans 3 \u00e9tats :</p> <ul> <li>Pr\u00eat : il attend qu'arrive le moment de son ex\u00e9cution.</li> <li>\u00c9lu : il est en cours d'ex\u00e9cution par le processeur.</li> <li>Bloqu\u00e9 : pendant son ex\u00e9cution (\u00e9tat \u00c9lu), le processus r\u00e9clame une ressource qui n'est pas imm\u00e9diatement disponible. Son ex\u00e9cution s'interrompt. Lorsque la ressource sera disponible, le processus repassera par l'\u00e9tat Pr\u00eat et attendra \u00e0 nouveau son tour. </li> </ul> <p></p> <p>On peut utiliser la m\u00e9taphore suivante :</p> <p>Sur le bureau d'un professeur, il y a 3 paquets de copies, correspondant aux classes A, B, et C. Ces paquets sont Pr\u00eats \u00e0 \u00eatre corrig\u00e9s. Si le professeur ram\u00e8ne devant lui le paquet A, celui-ci devient \u00c9lu, et le professeur peut commencer \u00e0 le corriger. Pour se changer les id\u00e9es, il peut interrompre la correction du paquet A (qui va passer \u00e0 l'\u00e9tat Bloqu\u00e9) et ramener vers lui le paquet C. Il pourra ensuite prendre le paquet B, puis \u00e0 nouveau le C, puis le A, ainsi de suite jusqu'\u00e0 ce que tous les paquets soient totalement corrig\u00e9s. Ces paquets seront alors Termin\u00e9s.   Au cours de cette proc\u00e9dure, le professeur n'a toujours eu devant lui qu'un seul paquet de copies (soit A, soit B, soit C).</p> <p>Pourquoi l'acc\u00e8s \u00e0 une ressource peut bloquer un processus ?</p> <p>Pendant son ex\u00e9cution, un processus peut avoir besoin d'acc\u00e9der \u00e0 une ressource d\u00e9j\u00e0 occup\u00e9e (un fichier d\u00e9j\u00e0 ouvert, par exemple) ou \u00eatre en attente d'une entr\u00e9e-utilisateur (un <code>input()</code> dans un code <code>Python</code> par exemple). Dans ce cas-l\u00e0, le processeur va passer ce processus \u00e0 l'\u00e9tat Bloqu\u00e9, pour pouvoir ainsi se consacrer \u00e0 un autre processus.</p> <p>Une fois d\u00e9bloqu\u00e9, le processus va repasser \u00e0 l'\u00e9tat Pr\u00eat et rejoindre (par exemple) la file d'attente des processus avant d'\u00eatre \u00e0 nouveau \u00c9lu et donc ex\u00e9cut\u00e9.</p>"},{"location":"T5_Architecture_materielle/5.2_Gestion_des_processus/cours/#3-interblocage","title":"3. Interblocage","text":""},{"location":"T5_Architecture_materielle/5.2_Gestion_des_processus/cours/#31-definition-et-exemple","title":"3.1 D\u00e9finition et exemple","text":"<p>Comme nous venons de le voir, un processus peut \u00eatre dans l'\u00e9tat bloqu\u00e9 dans l'attente de la lib\u00e9ration d'une ressource. </p> <p>Ces ressources (l'acc\u00e8s en \u00e9criture \u00e0 un fichier, \u00e0 un registre de la m\u00e9moire...) ne peuvent \u00eatre donn\u00e9es \u00e0 deux processus \u00e0 la fois. Des processus souhaitant acc\u00e9der \u00e0 cette ressource sont donc en concurrence sur cette ressource. Un processus peut donc devoir attendre qu'une ressource se lib\u00e8re avant de pouvoir y acc\u00e9der (et ainsi passer de l'\u00e9tat Bloqu\u00e9 \u00e0 l'\u00e9tat Pr\u00eat).</p> <p>Probl\u00e8me : Et si deux processus se bloquent mutuellement la ressource dont ils ont besoin ?</p> <p>Exemple : Consid\u00e9rons 2 processus A et B, et deux ressources R et S. L'action des processus A et B est d\u00e9crite ci-dessous :</p> <p></p> <p>D\u00e9roulement des processus A et B :</p> <ul> <li>A et B sont cr\u00e9\u00e9s et passent \u00e0 l'\u00e9tat Pr\u00eat.</li> <li>L'ordonnanceur d\u00e9clare \u00c9lu le processus A (ou bien B, cela ne change rien).</li> <li>L'\u00e9tape A1 de A est r\u00e9alis\u00e9e : la ressource R est donc affect\u00e9e \u00e0 A.</li> <li>L'ordonnanceur d\u00e9clare maintenant \u00c9lu le processus B. A est donc pass\u00e9 \u00e0 Bloqu\u00e9 en attendant que son tour revienne.</li> <li>L'\u00e9tape B1 de B est r\u00e9alis\u00e9e : la ressource S est donc affect\u00e9e \u00e0 B.</li> <li>L'ordonnanceur d\u00e9clare \u00e0 nouveau \u00c9lu le processus A. B est donc pass\u00e9 \u00e0 Bloqu\u00e9 en attendant que son tour revienne.</li> <li>L'\u00e9tape A2 de A est donc enclench\u00e9e : probl\u00e8me, il faut pour cela pouvoir acc\u00e8der \u00e0 la ressource S, qui n'est pas disponible. L'ordonnanceur va donc passer A \u00e0 Bloqu\u00e9 et va revenir au processus B qui redevient \u00c9lu.</li> <li>L'\u00e9tape B2 de B est donc enclench\u00e9e : probl\u00e8me, il faut pour cela pouvoir acc\u00e8der \u00e0 la ressource R, qui n'est pas disponible. L'ordonnanceur va donc passer B \u00e0 Bloqu\u00e9.</li> </ul> <p>Les deux processus A et B sont donc dans l'\u00e9tat Bloqu\u00e9, chacun en attente de la lib\u00e9ration d'une ressource bloqu\u00e9e par l'autre : ils se bloquent mutuellement.</p> <p>Cette situation (critique) est appel\u00e9e interblocage ou deadlock.</p>"},{"location":"T5_Architecture_materielle/5.2_Gestion_des_processus/cours/#33-representation-schematique","title":"3.3 Repr\u00e9sentation sch\u00e9matique","text":"<ul> <li>les processus seront repr\u00e9sent\u00e9s par des cercles, les ressources par des carr\u00e9s.</li> <li>Si \u00e0 l'\u00e9tape A1 le processus A a demand\u00e9 et re\u00e7u la ressource R, la repr\u00e9sentation sera : </li> <li>Si \u00e0 l'\u00e9tape A2 le processus A est en attente de la ressource S, la repr\u00e9sentation sera : </li> </ul> <p>Avec ces conventions, la situation pr\u00e9c\u00e9dente peut donc se sch\u00e9matiser par :</p> <p></p> <p>Ce type de sch\u00e9ma fait appara\u00eetre un cycle d'interd\u00e9pendance, qui caract\u00e9rise ici la situation de deadlock.</p>"},{"location":"T5_Architecture_materielle/5.2_Gestion_des_processus/cours/#34-comment-sen-premunir-hp","title":"3.4 Comment s'en pr\u00e9munir ? (HP)","text":"<p>Il existe trois strat\u00e9gies pour \u00e9viter les interblocages :</p> <ul> <li>la pr\u00e9vention : on oblige le processus \u00e0 d\u00e9clarer \u00e0 l'avance la liste de toutes les ressources auxquelles il va acc\u00e9der.</li> <li>l'\u00e9vitement : on fait en sorte qu'\u00e0 chaque \u00e9tape il reste une possibilit\u00e9 d'attribution de ressources qui \u00e9vite le deadlock.</li> <li>la d\u00e9tection/r\u00e9solution : on laisse la situation arriver jusqu'au deadlock, puis un algorithme de r\u00e9solution d\u00e9termine quelle ressource lib\u00e9rer pour mettre fin \u00e0 l'interblocage.</li> </ul>"},{"location":"T5_Architecture_materielle/5.2_Gestion_des_processus/cours/#35-le-deadlock-dans-la-vie-courante","title":"3.5 Le deadlock dans la vie courante","text":""},{"location":"T5_Architecture_materielle/5.2_Gestion_des_processus/cours/#351-lemballage-diabolique","title":"3.5.1 L'emballage diabolique","text":""},{"location":"T5_Architecture_materielle/5.2_Gestion_des_processus/cours/#352-le-carrefour-maudit","title":"3.5.2 Le carrefour maudit","text":""},{"location":"T5_Architecture_materielle/5.2_Gestion_des_processus/cours/#353-le-chomage-eternel","title":"3.5.3 Le ch\u00f4mage \u00e9ternel","text":"Sources <ul> <li>http://info-mounier.fr/terminale_nsi/archi_se_reseaux/processus.php</li> <li>http://lycee.educinfo.org/index.php?page=creation_thread&amp;activite=processus</li> <li>https://www.lecluse.fr/nsi/NSI_T/archi/process/</li> <li>http://www.uqac.ca/pguerin/8INF341/Cours9_Interblocage.html}</li> <li>http://www-inf.it-sudparis.eu/cours/AlgoRep/Web/8.25.html</li> </ul>"},{"location":"T5_Architecture_materielle/5.3_Protocoles_de_routage/Exercices/","title":"Exercices","text":"<p>Exercice 5 du sujet La R\u00e9union J1 2022</p> \u00c9nonc\u00e9 <p>Exercice 5 du sujet La R\u00e9union J1 2022</p> Correction Q1.a. <p>Une adresse IPv4 se code \u00e0 l'aide de 4 octets.</p> Correction Q1.b. <p>Le PC3 a pour adresse <code>172.150.4.30 / 24</code>. Cela signfie que son masque, en notation CIDR, est 24. Ses 24 premiers bits sont donc \u00e0 1. Cela correspond au masque <code>255.255.255.0</code> en notation d\u00e9cimale.</p> Correction Q2. <p></p> Correction Q3.a. <p>Pour \u00eatre dans le r\u00e9seau 1, il faut que le &amp; logique entre l'IP de la machine et l'adresse du masque donne l'adresse r\u00e9seau (<code>172.150.4.0</code> ).</p> <p>Le r\u00e9seau \u00e9tant en <code>/24</code> (\u00e9quivalent au masque <code>255.255.255.0</code>), cela signifie que l'adresse IP de la machine soit de la forme <code>172.150.4.???</code>.</p> <p>Attention, il faut en plus s'assurer que l'adresse ne soit pas d\u00e9j\u00e0 utilis\u00e9e, et qu'elle ne soit pas l'adresse du r\u00e9seau (<code>172.150.4.0</code>) ou de broadcast (<code>172.150.4.255</code>).</p> <p>Il reste alors les adresses 4) et 6). (<code>172.150.4.11</code> et <code>172.150.4.200</code>)</p> Correction Q3.b. <p>La commande permettant de conna\u00eetre son adresse IP est <code>ifconfig</code> ou <code>ip addr</code> sous Linux / MacOS. Ou bien <code>ipconfig</code> sous Windows.  </p> Correction Q4. <p>La solution de relier les switchs entre eux n'est pas satisfaisante. Les deux r\u00e9seaux ne pourront pas communiquer entre eux, \u00e0 moins d'\u00e9largir (beaucoup) leur masque de sous-r\u00e9seau.</p> <p>La meilleure solution est d'installer un routeur entre les deux switchs, de lui attribuer une adresse IP dans chaque sous-r\u00e9seau, et de renseigner cette adresse IP comme adresse de passerelle sur chacun des PCs des deux sous-r\u00e9seaux. </p> Correction Q5. \ud83d\udc0d Script Python<pre><code>def adresse(IP, liste_IP):\n    if IP in liste_IP:\n        print(\"trouv\u00e9e\")\n    else:\n        liste_IP.append(IP)\n        print(\"pas trouv\u00e9e, ajout\u00e9e\")\n</code></pre> <p>Exercice du sujet 0 de 2020</p> \u00c9nonc\u00e9Correction <p>2020, sujet 0</p> <p>On consid\u00e8re un r\u00e9seau compos\u00e9 de plusieurs routeurs reli\u00e9s de la fa\u00e7on suivante :</p> <p></p> <p>Le protocole RIP permet de construire les tables de routage des diff\u00e9rents routeurs, en indiquant pour chaque routeur la distance, en nombre de sauts, qui le s\u00e9pare d\u2019un autre routeur. Pour le r\u00e9seau ci-dessus, on dispose des tables de routage suivantes :</p> <p></p> <p>Question 1</p> <ol> <li>Le routeur A doit transmettre un message au routeur G, en effectuant un nombre minimal de sauts. D\u00e9terminer le trajet parcouru.</li> <li>D\u00e9terminer une table de routage possible pour le routeur G obtenu \u00e0 l\u2019aide du protocole RIP.</li> </ol> <p>Question 2</p> <p>Le routeur C tombe en panne. Reconstruire la table de routage du routeur A en suivant le protocole RIP.</p> <p>Q1.1. Le trajet parcouru de A \u00e0 G est A-C-F-G Q1.2.  Table de routage de G :  </p> Destination Routeur suivant Distance A F 3 B E 3 C E 2 D E 2 E E 1 F F 1 <p>Q2 Nouvelle table de routage de A :  </p> Destination Routeur suivant Distance B B 1 D D 1 E D 2 G D 3 F D 4 <p>Exercice du sujet M\u00e9tropole J1 2021</p> \u00c9nonc\u00e9Correction <p>2021, sujet M\u00e9tropole 1</p> <p>On repr\u00e9sente ci-dessous un r\u00e9seau dans lequel R1, R2, R3, R4, R5 et R6 sont des routeurs. Le r\u00e9seau local L1 est reli\u00e9 au routeur R1 et le r\u00e9seau local L2 au routeur R6.</p> <p></p> <p>Dans cet exercice, les adresses IP sont compos\u00e9es de 4 octets, soit 32 bits. Elles sont not\u00e9es X1.X2.X3.X4, o\u00f9 X1, X2, X3 et X4 sont les valeurs des 4 octets, convertis en notation d\u00e9cimale. La notation X1.X2.X3.X4/n signifie que les n premiers bits de poids forts de l\u2019adresse IP repr\u00e9sentent la partie \u00ab r\u00e9seau \u00bb, les bits suivants repr\u00e9sentent la partie \u00ab h\u00f4te \u00bb. Toutes les adresses des h\u00f4tes connect\u00e9s \u00e0 un r\u00e9seau local ont la m\u00eame partie r\u00e9seau et peuvent donc communiquer directement. L\u2019adresse IP dont tous les bits de la partie \u00ab h\u00f4te \u00bb sont \u00e0 0 est appel\u00e9e \u00ab adresse du r\u00e9seau \u00bb.</p> <p>On donne \u00e9galement des extraits de la table de routage des routeurs R1 \u00e0 R5 dans le tableau suivant :</p> <p></p> <p>1/ Un paquet part du r\u00e9seau local L1 \u00e0 destination du r\u00e9seau local L2.</p> <p>1.a. En utilisant l\u2019extrait de la table de routage de R1, vers quel routeur R1 envoie-t-il ce paquet : R2 ou R3 ? Justifier.</p> <p>1.b. A l\u2019aide des extraits de tables de routage ci-dessus, nommer les routeurs travers\u00e9s par ce paquet, lorsqu\u2019il va du r\u00e9seau L1 au r\u00e9seau L2.</p> <p>2/ La liaison entre R1 et R2 est rompue.</p> <p>2.a. Sachant que ce r\u00e9seau utilise le protocole RIP (distance en nombre de sauts), donner l\u2019un des deux chemins possibles que pourra suivre un paquet allant de L1 vers L2.</p> <p>2.b. Dans les extraits de tables de routage ci-dessus, pour le chemin de la question 2.a, quelle(s) ligne(s) sera (seront) modifi\u00e9e(s) ?</p> <p>3/ On a r\u00e9tabli la liaison entre R1 et R2. Par ailleurs, pour tenir compte du d\u00e9bit des liaisons, on d\u00e9cide d\u2019utiliser le protocole OSPF (distance li\u00e9e au co\u00fbt minimal des liaisons) pour effectuer le routage. Le co\u00fbt des liaisons entre les routeurs est donn\u00e9 par le tableau suivant :</p> <p></p> <p>a. Le co\u00fbt C d\u2019une liaison est donn\u00e9 ici par la formule \\(C = \\frac{10^9}{BP}\\)</p> <p>o\u00f9 \\(BP\\) est la bande passante de la connexion en bps (bits par seconde). Sachant que la bande passante de la liaison R2-R3 est de 10 Mbps, calculer le co\u00fbt correspondant.</p> <p>b. D\u00e9terminer le chemin parcouru par un paquet partant du r\u00e9seau L1 et arrivant au r\u00e9seau L2, en utilisant le protocole OSPF.</p> <p>c. Indiquer pour quel(s) routeur(s) l\u2019extrait de la table de routage sera modifi\u00e9 pour un paquet \u00e0 destination de L2, avec la m\u00e9trique OSPF.</p> <p>1.a. D'apr\u00e8s la table, R1 doit passer par la passerelle 86.154.10.1 qui correspond au routeur R2. 1.b. Le paquet va traverser R1, R2, R6 avant d'arriver \u00e0 L2. 2.a. RIP doit minimiser le nombre de sauts, donc les deux chemins minimaux possibles sont R1-R3-R4-R6 et R1-R3-R2-R6. 2.b. La ligne R1 sera modifi\u00e9e, il faudra partir vers R3 (et son r\u00e9seau 112.44.65.0/24). Les autres lignes n'ont pas \u00e0 \u00eatre modifi\u00e9es puisque R3 am\u00e8ne en R4 qui am\u00e8ne en R6. 3.a \\(\\dfrac{10^9}{10 \\times 10^6}=100\\) donc le co\u00fbt R2-R3 est 100. 3.b. Avec OSPF, le chemin qui minimise le co\u00fbt est le chemin R1-R2-R4-R5-R6 (co\u00fbt 103) :  3.c. Dans la table de routage initiale, il faut modifier R2 pour qu'elle envoie sur R4 (et non sur R6), mais aussi R4 pour qu'elle envoie sur R5 (et non sur R6).</p> <p>Exercice du sujet M\u00e9tropole J2 2021</p> \u00c9nonc\u00e9Correction <p>2021, sujet M\u00e9tropole 2 (sujet modifi\u00e9, correction d'erreurs sur les adresses passerelles)</p> Figure 1 <p>La figure 1 ci-dessus repr\u00e9sente le sch\u00e9ma d\u2019un r\u00e9seau d\u2019entreprise. Il y figure deux r\u00e9seaux locaux L1 et L2. Ces deux r\u00e9seaux locaux sont interconnect\u00e9s par les routeurs R2, R3, R4 et R5. Le r\u00e9seau local L1 est constitu\u00e9 des PC portables P1 et P2 connect\u00e9s \u00e0 la passerelle R1 par le switch Sw1. Les serveurs S1 et S2 sont connect\u00e9s \u00e0 la passerelle R6 par le switch Sw2.</p> <p>Le tableau 1 suivant indique les adresses IPv4 des machines constituants le r\u00e9seau de l\u2019entreprise.</p> Tableau 1 : adresses IPv4 des machines <p>Rappels et notations</p> <p>Rappelons qu\u2019une adresse IP est compos\u00e9e de 4 octets, soit 32 bits. Elle est not\u00e9e X1.X2.X3.X4, o\u00f9 X1, X2, X3 et X4 sont les valeurs des 4 octets. Dans le tableau 1, les valeurs des 4 octets ont \u00e9t\u00e9 converties en notation d\u00e9cimale.</p> <p>La notation X1.X2.X3.X4/n signifie que les n premiers bits de poids forts de l\u2019adresse IP repr\u00e9sentent la partie \u00ab r\u00e9seau \u00bb, les bits suivants de poids faibles repr\u00e9sentent la partie \u00ab machine \u00bb.</p> <p>Toutes les adresses des machines connect\u00e9es \u00e0 un r\u00e9seau local ont la m\u00eame partie r\u00e9seau. L\u2019adresse IP dont tous les bits de la partie \u00ab machine \u00bb sont \u00e0 0 est appel\u00e9e \u00ab adresse du r\u00e9seau \u00bb. L\u2019adresse IP dont tous les bits de la partie \u00ab machine \u00bb sont \u00e0 1 est appel\u00e9e \u00ab adresse de diffusion \u00bb.</p> <p>1/  1.a. Quelles sont les adresses des r\u00e9seaux locaux L1 et L2 ?</p> <p>1.b. Donner la plus petite et la plus grande adresse IP valides pouvant \u00eatre attribu\u00e9es \u00e0 un ordinateur portable ou un serveur sur chacun des r\u00e9seaux L1 et L2 sachant que l\u2019adresse du r\u00e9seau et l\u2019adresse de diffusion ne peuvent pas \u00eatre attribu\u00e9es \u00e0 une machine.</p> <p>1.c. Combien de machines peut-on connecter au maximum \u00e0 chacun des r\u00e9seaux locaux L1 et L2 ? </p> <p>2/  2.a. Expliquer l\u2019utilit\u00e9 d\u2019avoir plusieurs chemins possibles reliant les r\u00e9seaux L1 et L2.</p> <p>2.b. Quel est le chemin le plus court en nombre de sauts pour relier R1 et R6 ? Donner le nombre de sauts de ce chemin et pr\u00e9ciser les routeurs utilis\u00e9s.</p> <p>2.c. La bande passante d\u2019une liaison Ether (quantit\u00e9 d\u2019information qui peut \u00eatre transmise en bits/s) est de \\(10^7\\) bits/s et celle d\u2019une liaison FastEther est de \\(10^8\\) bits/s. Le co\u00fbt d\u2019une liaison est d\u00e9fini par \\(\\frac{10^8}{d}\\) , o\u00f9 \\(d\\) est sa bande passante en bits/s.</p> Tableau 2 : type des liaisons entre les routeurs <p>Quel est le chemin reliant R1 et R6 qui a le plus petit co\u00fbt ? Donner le co\u00fbt de ce chemin et pr\u00e9ciser les routeurs utilis\u00e9s.</p> <p>3/ Dans l\u2019annexe A figurent les tables de routages des routeurs R1, R2, R5 et R6 au d\u00e9marrage du r\u00e9seau. Indiquer sur votre copie ce qui doit figurer dans les lignes laiss\u00e9es vides des tables de routage des routeurs R5 et R6 pour que les \u00e9changes entre les ordinateurs des r\u00e9seaux L1 et L2 se fassent en empruntant le chemin le plus court en nombre de sauts.</p> <p></p> <p>1.a L'adresse du r\u00e9seau L1 est 192.168.1.0/24. L'adresse de L2 est 175.6.0.0/16.  1.b Pour le r\u00e9seau L1 (192.168.1.0/24), l'adresse min est 192.168.1.1/24, l'adresse max est 192.168.1.254/24. Pour le r\u00e9seau L2 (175.6.0.0/16), l'adresse min est 175.6.0.1/16 et l'adresse max est 175.6.255.254/16 1.c. Pour le r\u00e9seau L1, il y a donc 254 adresses (256 moins les deux interdites) Pour le r\u00e9seau L2, il y en a \\(256^2-2\\), soit 65534.</p> <p>2.a Il est utile d'avoir plusieurs chemins en cas de panne d'un routeur. 2.b En nombres de sauts (protocole RIP), le chemin le plus court est R1-R2-R5-R6, qui contient 3 sauts. 2.c Les liaisons Ether ont un co\u00fbt de 10, les liaisons FastEther ont un co\u00fbt de 1. Ce qui donne :  Le chemin le plus court est donc R1-R2-R3-R4-R5-R6, avec un co\u00fbt total de 23.</p> <ol> <li>On veut que le chemin soit le plus court en nombre de sauts, donc il faut que le chemin soit R1-R2-R5-R6.  Dans la table R5, il manque les lignes</li> </ol> IP destination Passerelle Interface 192.168.1.0/24 10.1.3.1 Interface 1 172.16.0.0/16 10.1.7.2 Interface 4 <p>Dans la table R6, on peut compl\u00e9ter comme ceci (il faudrait des lignes suppl\u00e9mentaires pour y inscrire tous les r\u00e9seaux)</p> IP destination Passerelle Interface 10.1.7.0/24 Interface 2 192.168.1.0/24 10.1.7.1 Interface 2 <p>Exercice du sujet Am\u00e9rique du Nord 2021</p> \u00c9nonc\u00e9Correction <p>2021, sujet Am\u00e9rique du Nord</p> <p>Un constructeur automobile poss\u00e8de six sites de production qui \u00e9changent des documents entre eux. Les sites de production sont reli\u00e9s entre eux par six routeurs A, B, C, D, E et F. On donne ci-dessous les tables de routage des routeurs A \u00e0 F obtenues avec le protocole RIP.</p> <p></p> <ol> <li>D\u00e9terminer \u00e0 l'aide de ces tables le chemin emprunt\u00e9 par un paquet de donn\u00e9es envoy\u00e9 du routeur A vers le routeur F.</li> <li>On veut repr\u00e9senter sch\u00e9matiquement le r\u00e9seau de routeur \u00e0 partir des tables de routage.  Recopier sur la copie le sch\u00e9ma ci-dessous : </li> </ol> <p></p> <p>En s'appuyant sur les tables de routage, tracer les liaisons entre les routeurs.</p> <ol> <li>A-B-E-F  </li> </ol> <p>2. </p>"},{"location":"T5_Architecture_materielle/5.3_Protocoles_de_routage/cours/","title":"Protocoles de routage","text":"<p>Cr\u00e9dits</p> <ul> <li>Gilles Lassus</li> </ul>"},{"location":"T5_Architecture_materielle/5.3_Protocoles_de_routage/cours/#0-resume-des-episodes-precedents","title":"0. R\u00e9sum\u00e9 des \u00e9pisodes pr\u00e9c\u00e9dents","text":"<ul> <li>cours de 1\u00e8re sur l'architecture d'un r\u00e9seau</li> <li>cours de 1\u00e8re sur les diff\u00e9rents protocoles de communication dans un r\u00e9seau.</li> </ul> <p>Notions essentielles  </p> <p>Lorsqu'une machine A, d'adresse IP_A veut discuter avec une machine B, d'adresse IP_B :</p> <ul> <li>La machine A calcule (gr\u00e2ce au masque de sous-r\u00e9seau) si B est dans le m\u00eame sous-r\u00e9seau qu'elle, ou pas.</li> <li>Si oui, elle peut donc conna\u00eetre l'adresse MAC de la carte r\u00e9seau de la machine B (soit elle la poss\u00e8de d\u00e9j\u00e0 dans sa table ARP, soit elle la demande en envoyant un message de broadcast \u00e0 tout le sous-r\u00e9seau : \u00abqui poss\u00e8de cette adresse IP_B ?\u00bb). Elle envoie donc dans le sous-r\u00e9seau une trame ayant pour ent\u00eate l'adresse MAC de B : le switch lit cette trame, sait sur quel port est branch\u00e9 la machine B et lui envoie sp\u00e9cifiquement donc le message.</li> <li>Si B n'est pas dans le m\u00eame sous-r\u00e9seau que A, A mettra en ent\u00eate de sa trame l'adresse MAC de la carte r\u00e9seau du routeur, qui joue le r\u00f4le de passerelle. Le routeur va ouvrir la trame et va observer l'IP_B, \u00e0 qui il doit remettre ce message. C'est maintenant que vont intervenir les protocoles de routage :<ul> <li>est-ce que B est dans le m\u00eame sous-r\u00e9seau que le routeur ?</li> <li>est-ce que B est dans un autre sous-r\u00e9seau connu du routeur ?</li> <li>est-ce que B est totalement inconnu du routeur ?</li> </ul> </li> </ul> <p>Ces questions trouveront des r\u00e9ponses gr\u00e2ce \u00e0 table de routage du routeur.</p> <p>Regarder la vid\u00e9o suivante sur les notions de routage : </p>"},{"location":"T5_Architecture_materielle/5.3_Protocoles_de_routage/cours/#1-tables-de-routage","title":"1. Tables de routage","text":"<p>Les tables de routage sont des informations stock\u00e9es dans le routeur permettant d'aiguiller intelligemment les donn\u00e9es qui lui sont transmises.</p> <p>Dans le r\u00e9seau ci-dessus, si l'ordinateur d'adresse <code>192.168.0.5</code> veut interroger le serveur <code>10.7.3.8</code> :</p> <ul> <li>l'adresse <code>10.7.3.8</code> n'\u00e9tant pas dans le sous-r\u00e9seau F (d'adresse <code>192.168.0.0 / 24</code>), la requ\u00eate est confi\u00e9e au routeur via son adresse passerelle dans le r\u00e9seau F (ici <code>192.168.0.254</code>).</li> <li>le routeur observe si l'IP recherch\u00e9e appartient \u00e0 un autre des sous-r\u00e9seaux auquel il est connect\u00e9. Ici, l'IP recherch\u00e9e <code>10.7.3.8</code> n'appartient ni au sous-r\u00e9seau A ou E. </li> <li>le routeur va donc regarder dans sa table de routage l'adresse passerelle d'un autre routeur vers qui elle doit rediriger les donn\u00e9es. Si le sous-r\u00e9seau C fait partie de sa table de routage, le routeur R1 saura alors que le meilleur chemin est (par exemple) de confier les donn\u00e9es au routeur R3.</li> <li>si le sous-r\u00e9seau C ne fait pas partie de la table de routage, le routeur R1 va alors le rediriger vers une route \u00abpar d\u00e9faut\u00bb (que l'on peut assimiler au panneau \u00abtoutes directions\u00bb sur les panneaux de signalisation).</li> </ul> <p>interface et passerelle  </p> <p>Les tables de routage des routeurs font tr\u00e8s souvent appara\u00eetre deux colonnes, interface et passerelle, dont il ne faut pas confondre l'utilit\u00e9 :</p> <ul> <li> <p>interface : c'est l'adresse IP de la carte r\u00e9seau du routeur par o\u00f9 va sortir le paquet \u00e0 envoyer. Il y a donc toujours une adresse d'interface \u00e0 renseigner (car un paquet sort bien de quelque part !). Parfois cette interface sera juste nomm\u00e9e interface1 ou interface2.</p> </li> <li> <p>passerelle : c'est l'adresse IP de la carte r\u00e9seau du routeur \u00e0 qui on va confier le paquet, si on n'est pas capable de le d\u00e9livrer directement (donc si l'adresse IP de destination n'est pas dans notre propre sous-r\u00e9seau). Cette adresse de passerelle n'est donc pas syst\u00e9matiquement mentionn\u00e9e. Quand elle l'est, elle donne le renseignement sur le prochain routeur \u00e0 qui le paquet est confi\u00e9.</p> </li> </ul> <p>Exemple: table de routage du routeur R1</p> <p></p> Destination Interface Passerelle F 192.168.0.254 A 10.0.5.152 E 172.17.1.254 B 172.17.1.254 172.17.1.123 C 10.0.5.152 10.0.5.135 <p>Les trois r\u00e9seaux F, A et E sont directement accessibles au routeur R1, puisqu'il en fait partie : il n'a donc pas besoin d'adresse passerelle pour communiquer avec ces r\u00e9seaux.</p> <p>Par contre, la communication avec le r\u00e9seau B n\u00e9cessite de confier le paquet au routeur R2 (c'est le choix de cette table de routage). Il faut donc mentionner l'adresse IP de ce routeur R2 (172.17.1.123), qu'on appelle adresse de passerelle.</p> <p>De la m\u00eame mani\u00e8re, la communication avec le r\u00e9seau C n\u00e9cessite de confier le paquet au routeur R3 (c'est le choix de cette table de routage). Il faut donc mentionner l'adresse IP de ce routeur R3 (10.0.5.135).</p>"},{"location":"T5_Architecture_materielle/5.3_Protocoles_de_routage/cours/#comment-sont-construites-les-tables-de-routage","title":"Comment sont construites les tables de routage ?","text":"<ul> <li>Soit \u00e0 la main par l'administrateur r\u00e9seau, quand le r\u00e9seau est petit : on parle alors de table statique.</li> <li>Soit de mani\u00e8re dynamique : les r\u00e9seaux s'envoient eux-m\u00eames des informations permettant de mettre \u00e0 jour leurs tables de routages respectives. Des algorithmes de d\u00e9termination de meilleur chemin sont alors utilis\u00e9s : nous allons en d\u00e9couvrir deux, le protocole RIP et le protocole OSPF.</li> </ul>"},{"location":"T5_Architecture_materielle/5.3_Protocoles_de_routage/cours/#2-le-protocole-rip","title":"2. Le protocole RIP","text":"<p>Le Routing Information Protocol est bas\u00e9 sur l'\u00e9change (toutes les 30 secondes) des tables de routage de chaque routeur. Au d\u00e9but, chaque routeur ne conna\u00eet que les r\u00e9seaux auquel il est directement connect\u00e9, associ\u00e9 \u00e0 la distance 1.</p> <p>Ensuite, chaque routeur re\u00e7oit p\u00e9riodiquement la table des r\u00e9seaux auquel il est connect\u00e9, suivant les r\u00e8gles ci-dessous :</p> <p>les r\u00e8gles du protocole RIP </p> <ul> <li> <p>s'il d\u00e9couvre une route vers un nouveau r\u00e9seau inconnu, il l'ajoute \u00e0 sa table en augmentant de 1 la distance annonc\u00e9e par le routeur qui lui a transmis sa table.</p> </li> <li> <p>s'il d\u00e9couvre une route vers un r\u00e9seau connu mais plus courte (en rajoutant 1) que celle qu'il poss\u00e8de dans sa table,  il actualise sa table.</p> </li> <li> <p>s'il d\u00e9couvre une route vers un r\u00e9seau connu mais plus longue que celle qu'il poss\u00e8de dans sa table, il ignore cette route.</p> </li> <li> <p>s'il re\u00e7oit une route vers un r\u00e9seau connu en provenance d'un routeur d\u00e9j\u00e0 existant dans sa table, s'il met \u00e0 jour sa table car la topologie du r\u00e9seau a \u00e9t\u00e9 modifi\u00e9e.</p> </li> <li> <p>si le r\u00e9seau n'\u00e9volue pas (panne ou ajout de nouveau mat\u00e9riel), les tables de routage convergent vers une valeur stable. Elles n'\u00e9voluent plus.</p> </li> <li> <p>si un routeur ne re\u00e7oit pas pendant 3 minutes d'information de la part d'un routeur qui lui avait auparavant communiqu\u00e9 sa table de routage, ce routeur est consid\u00e9r\u00e9 comme en panne, et toutes les routes passant par lui sont affect\u00e9es de la distance infinie : 16.</p> </li> </ul> <p>Remarques et inconv\u00e9nients: </p> <ul> <li> <p>Le protocole RIP n'admet qu'une distance maximale \u00e9gale \u00e0 15 (ceci explique que 16 soit consid\u00e9r\u00e9 comme la distance infinie), ce qui le limite aux r\u00e9seaux de petite taille.</p> </li> <li> <p>Chaque routeur n'a jamais connaissance de la topologie du r\u00e9seau tout entier : il ne le conna\u00eet que par ce que les autres routeurs lui ont racont\u00e9. On dit que ce protocole de routage est du routing by rumor.</p> </li> <li> <p>La m\u00e9trique utilis\u00e9e (le nombre de sauts) ne tient pas compte de la qualit\u00e9 de la liaison, contrairement au protocole OSPF.    </p> </li> </ul> <p>Application :</p> <p>Consid\u00e9rons le r\u00e9seau suivant qui relie deux r\u00e9seaux d'une entreprise :</p> <ul> <li>Le r\u00e9seau 1 contient des postes de travail dans un bureau.</li> <li>Le r\u00e9seau 2 contient un serveur dans un centre de donn\u00e9es.</li> </ul> <p>Image du sch\u00e9ma r\u00e9seau :  </p> <p>Maquette Filius  ici :fontawesome-solid-download: </p> <p>Les routeurs R1 et R6 permettent d'acc\u00e9der au r\u00e9seau de l'entreprise, R2, R3, R4 et R5, des routeurs internes au r\u00e9seau.  Nous allons nous int\u00e9resser \u00e0 l'\u00e9volution des tables de routage des routeurs R1 et R3 sur lesquels on a activ\u00e9 le protocole RIP.</p>"},{"location":"T5_Architecture_materielle/5.3_Protocoles_de_routage/cours/#etape-0","title":"\u00c9tape 0","text":"<p>Au d\u00e9marrage, les routeurs R1 et R3 ne connaissent que leurs voisins proches. Leurs tables peuvent donc ressembler \u00e0 ceci :</p> destination passerelle interface Nb sauts remarques 192.168.1.0 wifi0 1 ==&gt; vers les postes de travail 172.16.0.0 eth0 1 ==&gt; vers R3 <p>Au d\u00e9part, R1 ne peut atteindre que ses voisins imm\u00e9diats (nb Sauts vaut 1). Aucune passerelle n'est n\u00e9cessaire puisque la communication est directe. Chaque sous r\u00e9seau utilise une interface sp\u00e9cifique. Le r\u00e9seau local 1 contenant les postes de travail est accessible en wifi. En ce qui concerne le routeur 3, celui-ci poss\u00e8de 4 interfaces r\u00e9seau filaires, que nous nommerons eth0-3 qui permettent d'atteindre les routeurs imm\u00e9diats (R1, R2, R4 et R5). Voici \u00e0 quoi peut ressembler sa table de routage au d\u00e9marrage :</p> destination passerelle interface Nb sauts remarques 172.16.0.0 eth0 1 ==&gt; vers R1 172.16.1.0 eth1 1 ==&gt; vers R2 172.16.6.0 eth2 1 ==&gt; vers R5 172.16.3.0 eth3 1 ==&gt; vers R4"},{"location":"T5_Architecture_materielle/5.3_Protocoles_de_routage/cours/#etape-1","title":"\u00c9tape 1","text":"<p>Au bout de 30 secondes, un premier \u00e9change intervient avec les voisins imm\u00e9diats de chacun des routeurs. Le principe de l'algorithme Lorsqu'un routeur re\u00e7oit une nouvelle route de la part d'un voisin, 4 cas sont envisageables : </p> <ul> <li>Il d\u00e9couvre une route vers un nouveau r\u00e9seau inconnu      &gt; Il l'ajoute \u00e0 sa table.</li> <li>Il d\u00e9couvre une route vers un r\u00e9seau connu, plus courte que celle qu'il poss\u00e8de dans sa table      &gt; Il actualise sa table.</li> <li>Il d\u00e9couvre une route vers un r\u00e9seau connu, plus longue que celle qu'il poss\u00e8de dans sa table      &gt; Il ignore cette route.</li> <li>Il re\u00e7oit une route vers un r\u00e9seau connu en provenance d'un routeur d\u00e9j\u00e0 existant dans sa table      &gt; Il met \u00e0 jour sa table car la topologie du r\u00e9seau a \u00e9t\u00e9 modifi\u00e9e.</li> </ul> <p>En appliquant ces r\u00e8gles, voici la table de routage de R1 apr\u00e8s une \u00e9tape :</p> destination passerelle interface Nb sauts remarques 192.168.1.0 wifi0 1 ==&gt; vers les postes de travail 172.16.0.0 eth0 1 ==&gt; vers R3 172.16.1.0 172.16.0.3 eth0 2 Ces 3 routes 172.16.6.0 172.16.0.3 eth0 2 proviennent 172.16.3.0 172.16.0.3 eth0 2 de R3 <p>172.16.0.3 est l'adresse IP du routeur R3. On ajoute \u00e0 la table pr\u00e9c\u00e9dente les r\u00e9seaux atteignables par R3. On pense cependant \u00e0 ajouter 1 au nombre de sauts ! Si R1 veut atteindre le r\u00e9seau 172.16.3.0, il s'adressera \u00e0 R3 et atteindra le r\u00e9seau cible en 2 sauts. \u2003 Voici la table de R3 qui s'enrichit des informations envoy\u00e9es par R1 afin d'atteindre le r\u00e9seau local, mais aussi des informations en provenance de R2, R4 et R5. Il d\u00e9couvre ainsi 4 nouveaux r\u00e9seaux.</p> destination passerelle interface Nb sauts remarques 172.16.0.0 eth0 1 172.16.1.0 eth1 1 172.16.6.0 eth2 1 172.16.3.0 eth3 1 192.168.1.0 172.16.0.1 eth0 2 re\u00e7u de R1 172.16.2.0 172.16.1.2 eth1 2 re\u00e7u de R2 172.16.5.0 172.16.6.5 eth2 2 re\u00e7u de R5 172.16.4.0 172.16.3.4 eth3 2 re\u00e7u de R4"},{"location":"T5_Architecture_materielle/5.3_Protocoles_de_routage/cours/#etape-3","title":"\u00c9tape 3","text":"<p>Comme vous le voyez, les tables deviennent vite longues et \u00e9num\u00e9rer dans le d\u00e9tail chacune d'elle est trop long. On va donc passer directement \u00e0 l'\u00e9tape finale : l'\u00e9tape 3. </p> <p>Voici ce que contient la table de routage de R1 :</p> destination passerelle interface Nb sauts remarques 192.168.1.0 wifi0 1 ==&gt; vers les postes de travail 172.16.0.0 eth0 1 ==&gt; vers R3 172.16.1.0 172.16.0.3 eth0 2 172.16.6.0 172.16.0.3 eth0 2 172.16.3.0 172.16.0.3 eth0 2 172.16.5.0 172.16.0.3 eth0 3 obtenu \u00e0 l'\u00e9tape 2 192.168.2.0 172.16.0.3 eth0 4 obtenu \u00e0 l'\u00e9tape 3 <p>Comme vous le voyez, le routeur R1 est \u00e0 pr\u00e9sent en capacit\u00e9 d'acheminer un paquet du poste de travail du r\u00e9seau 1 vers le serveur se trouvant dans le r\u00e9seau 2.</p> <p>D\u00e9tection des pannes Le protocole RIP est en mesure de d\u00e9tecter des pannes : Si un routeur ne re\u00e7oit pas d'information de la part d'un de ses voisins au bout d'un temps de l'ordre de 3 minutes (configurable) il va consid\u00e9rer que ce lien est mort et en informer ses voisins en indiquant un nombre de sauts \u00e9gal \u00e0 16. Puisque RIP ne g\u00e8re que 15 sauts au maximum, 16 peut \u00eatre consid\u00e9r\u00e9 comme une distance infinie. De cette mani\u00e8re, les voisins vont pouvoir recalculer leurs routes en cons\u00e9quence en \u00e9vitant le lien qui est tomb\u00e9. \u2003</p> <p>D\u00e9tection des boucles RIP impl\u00e9mente d'autres m\u00e9canismes pour emp\u00eacher que se forment des boucles de routage. Une boucle est par exemple une route du type R2 -&gt; R3 -&gt; R5 -&gt; R2. Des exemples de tels m\u00e9canismes sont :</p> <ul> <li>Une dur\u00e9e de vie limit\u00e9e sur les paquets (TTL) afin qu'un paquet qui tourne en rond soit d\u00e9truit</li> <li>Ne pas renvoyer une information vers un routeur si celle-ci est d\u00e9j\u00e0 pass\u00e9e par ce routeur</li> </ul> <p>A vous de jouer :  \u00c9laborez au fil du temps la table de routage du routeur R4 de mani\u00e8re similaire \u00e0 ce que l'on vient de faire.</p>"},{"location":"T5_Architecture_materielle/5.3_Protocoles_de_routage/cours/#3-le-protocole-ospf","title":"3. Le protocole OSPF","text":"<p>OSPF : Open Shortest Path First</p> <p>Un inconv\u00e9nient majeur du protocole pr\u00e9c\u00e9dent est la non-prise en compte de la bande passante reliant les routeurs.</p> <p></p> <p>principe fondamental du protocole OSPF </p> <p>Le chemin le plus rapide n'est pas forc\u00e9ment le plus court.</p> <p></p>  En gris, le chemin RIP. En bleu, l'OSPF.  <p>Dans le protocole OSPF, les tables de routage vont prendre en consid\u00e9ration la vitesse de communication entre les routeurs.</p> <p>Dans une premi\u00e8re phase d'initialisation, chaque routeur va acqu\u00e9rir (par succession de messages envoy\u00e9s et re\u00e7us) la connaissance totale du r\u00e9seau (diff\u00e9rence fondamentale avec RIP) et de la qualit\u00e9 technique de la liaison entre chaque routeur.</p>"},{"location":"T5_Architecture_materielle/5.3_Protocoles_de_routage/cours/#31-les-differents-types-de-liaison-et-leur-cout","title":"3.1 Les diff\u00e9rents types de liaison et leur co\u00fbt","text":"<p>On peut, approximativement, classer les types de liaison suivant ce tableau de d\u00e9bits th\u00e9oriques :</p> Technologie BP descendante BP montante Modem 56 kbit/s 48 kbit/s Bluetooth 3 Mbit/s 3 Mbit/s Ethernet 10 Mbit/s 10 Mbit/s Wi-Fi 10 Mbit/s ~ 10 Gbits/s 10 Mbit/s ~ 10 Gbits/s ADSL 13 Mbit/s 1 Mbit/s 4G 100 Mbit/s 50 Mbit/s Satellite 50 Mbit/s 1 Mbit/s Fast Ethernet 100 Mbit/s 100 Mbit/s FFTH (fibre) 10 Gbit/s 10 Gbit/s 5G 20 Gbit/s 10 Gbit/s <p>L'id\u00e9e du protocole OSPF est de pond\u00e9rer chaque trajet entre routeurs (comptant simplement pour \u00ab1\u00bb dans le protocole RIP) par une valeur de co\u00fbt inversement proportionnelle au d\u00e9bit de transfert.</p> <p>Par exemple, si le d\u00e9bit \\(d\\) est exprim\u00e9 en bits/s, on peut calculer le co\u00fbt de chaque liaison par la formule :</p> \\[ \\text{co\u00fbt} = \\frac{10^8}{d} \\] <p>Cette formule de calcul peut \u00eatre diff\u00e9rente suivant les exercices, et sera syst\u00e9matiquement redonn\u00e9e. N\u00e9anmoins la valeur \\(d\\) sera toujours au d\u00e9nominateur, pour assurer la proportionnalit\u00e9 inverse du d\u00e9bit.</p> <p>Avec cette convention, un route entre deux routeurs reli\u00e9s en Fast Ethernet (100 Mbits/s) aura a un poids de 1, une liaison satellite de 20 Mbits/s aura un poids de 5, etc.</p>"},{"location":"T5_Architecture_materielle/5.3_Protocoles_de_routage/cours/#32-exemple","title":"3.2 Exemple","text":"<p>Reprenons le r\u00e9seau suivant :</p> <p></p> <p>et simplifions-le en ne gardant que les liens entre routeurs, en indiquant leur d\u00e9bit :</p> <p></p> <p>Notre r\u00e9seau est devenu un graphe. </p> <p>Nous allons pond\u00e9rer ses ar\u00eates avec la fonction co\u00fbt introduite pr\u00e9c\u00e9demment. L'unit\u00e9 \u00e9tant le Mbit/s, l'ar\u00eate entre R1 et R3 aura un poids de \\(\\frac{100}{20}=5\\).</p> <p>Le graphe pond\u00e9r\u00e9 est donc :</p> <p></p> <p>Le chemin le plus rapide pour aller de l'ordinateur au serveur est donc R1-R2-R4, et non plus R1-R3 comme l'aurait indiqu\u00e9 le protocole RIP.</p>"},{"location":"T5_Architecture_materielle/5.3_Protocoles_de_routage/cours/#33-trouver-le-plus-court-chemin-dans-un-graphe-pondere","title":"3.3 Trouver le plus court chemin dans un graphe pond\u00e9r\u00e9","text":"<p>L'exemple pr\u00e9c\u00e9dent \u00e9tait tr\u00e8s simple et de solution intuitive. Dans le cas d'un graphe pond\u00e9r\u00e9 complexe, existe-t-il un algorithme de d\u00e9termination du plus court chemin d'un point \u00e0 un autre ?</p> <p>La r\u00e9ponse est oui, depuis la d\u00e9couverte en 1959 par Edsger Dijkstra de l'algorithme qui porte son nom, l'algorithme de Dijkstra.</p> <p>Pour le comprendre, vous pouvez regarder la vid\u00e9o d'un c\u00e9l\u00e8bre YouTuber :</p> <p> </p> <p>Cet algorithme, ici ex\u00e9cut\u00e9 de mani\u00e8re manuelle, est bien s\u00fbr programmable. Et c'est donc gr\u00e2ce \u00e0 lui que chaque routeur calcule la route la plus rapide pour acheminer les donn\u00e9es qu'il re\u00e7oit.</p> <p>Calculs d'itin\u00e9raire</p> <p></p> <p>On souhaite aller de Rennes \u00e0 Paris. Compl\u00e9ter le tableau suivant en utilisant l\u2019algorithme de Dijkstra (suivre le remplissage du tableau dans la vid\u00e9o).</p> Rennes Le Mans Nantes Caen Tours Rouen Orl\u00e9ans Paris Choix Correction <p> Il faut Rennes, Le Mans, Paris, on annonce 359 km</p> <p>Exercice d'application de l'algorithme de Dijkstra (HP)</p> <p>Donner le plus court chemin pour aller de E \u00e0 F dans le graphe ci-dessous : </p> correction E A B C D F Choix 0 -- -- -- -- -- E(0) . 30vE -- 40vE 10vE -- D(10) . 20vD -- 40vE . 80vD A(20) . . 60vA 30vA . 80vD C(30) . . 50vC . . 80vD B(50) . . . . . 70vB F(70) <p>Le meilleur trajet est donc E-D-A-C-B-F. Attention ce trajet correspond \u00e0 la colonne choix (dans l'ordre) mais c'est un hasard.</p>"},{"location":"T5_Architecture_materielle/5.3_Protocoles_de_routage/cours/#34-exercice","title":"3.4 Exercice","text":"<p>(extrait du sujet 0)</p> <p>On consid\u00e8re le r\u00e9seau suivant :</p> <p></p> <p>On rappelle que le co\u00fbt d\u2019une liaison est donn\u00e9 par la formule suivante :</p> \\[ \\text{co\u00fbt} = \\frac{10^8}{d} \\] <p>Question 1</p> <ol> <li>V\u00e9rifier que le co\u00fbt de la liaison entre les routeurs A et B est 0,01.</li> <li>La liaison entre le routeur B et D a un co\u00fbt de 5. Quel est le d\u00e9bit de cette liaison ?</li> </ol> <p>Question 2</p> <p>Le routeur A doit transmettre un message au routeur G, en empruntant le chemin dont la somme des co\u00fbts sera la plus petite possible. D\u00e9terminer le chemin parcouru. On indiquera le raisonnement utilis\u00e9.</p> Correction <p>Q1 1. \\(\\text{co\u00fbt} = \\dfrac{10^8}{10 \\times 10^9}= \\dfrac{10^8}{10^{10}}= 10^{-2}=0,01\\) 2. \\(5=\\dfrac{10^8}{d}\\) donc \\(d=\\dfrac{10^8}{5}=20 \\times 10^6\\) = 20 Mb/s</p> <p>Q2 Le graphe pond\u00e9r\u00e9 par les co\u00fbts est : </p> <p>On peut y deviner le chemin de co\u00fbt minimal entre A et G, qui est A-D-E-G (co\u00fbt 1,011). Pour le justifier, on peut (non obligatoire) faire un algorithme de Dijkstra :  </p> <p>Bibliographie</p> <ul> <li>Num\u00e9rique et Sciences Informatiques, Terminale, T. BALABONSKI, S. CONCHON, J.-C. FILLIATRE, K. NGUYEN, \u00e9ditions ELLIPSES.</li> <li>Pr\u00e9pabac NSI, \u00e9dition Hatier, Terminale, G. CONNAN, V. PETROV, G. ROZSAVOLGYI, L. SIGNAC, \u00e9ditions HATIER.</li> <li></li> <li>David Roche : https://pixees.fr/informatiquelycee/n_site/nsi_term_archi_routage.html</li> <li>MOOC SNT / Internet, IP un protocole universel ? : </li> <li>Lumni : Histoire de l\u2019architecture des ordinateurs \u2013 </li> </ul>"},{"location":"T5_Architecture_materielle/5.4_Cryptographie/Exercices/","title":"Exercices","text":""},{"location":"T5_Architecture_materielle/5.4_Cryptographie/Exercices/#exercice-1","title":"Exercice 1","text":"<p>Utilisation des biblitoh\u00e8ques cryptographiques du module <code>sympy</code>.</p> <p>Documentation : https://docs.sympy.org/latest/modules/crypto.html</p> <p>D\u00e9coder la phrase <code>RYTVJKGCLJWRTZCVRMVTLEDFULCVHLZWRZKKFLKRMFKIVGCRTV</code>, sachant qu'elle a \u00e9t\u00e9 chiffr\u00e9e par d\u00e9calage.</p> correction \ud83d\udc0d Script Python<pre><code>from sympy.crypto.crypto import encipher_affine\n\nmsg = 'RYTVJKGCLJWRTZCVRMVTLEDFULCVHLZWRZKKFLKRMFKIVGCRTV'\n\nfor cle in range(26):\n    phrase = decipher_shift(msg, cle)\n    print(phrase)\n</code></pre>"},{"location":"T5_Architecture_materielle/5.4_Cryptographie/Exercices/#exercice-2","title":"Exercice 2","text":"<p>Chiffrage affine</p> <p>Principe du chiffrage affine :</p> <ul> <li>Chaque lettre est cod\u00e9e par son rang, en commen\u00e7ant \u00e0 0 (A-&gt;0, B-&gt;1, ..., Z-&gt;25)</li> <li>On applique \u00e0 chaque rang la transformation affine  \\(f(x) = (ax+b)\\, \\%26\\)</li> </ul> <p>o\u00f9 \\(a\\) et \\(b\\) sont deux nombres entiers. Attention, a doit \u00eatre premier avec 26.</p> <p>Q1. Codez votre fonction <code>affine(msg, a, b)</code></p> correction \ud83d\udc0d Script Python<pre><code>def rang(lettre):\n    return ord(lettre) - 65\n\ndef affine(msg, a, b):\n    sol = \"\"\n    for lettre in msg:\n        rg = rang(lettre)\n        nv_rg = (a*rg + b) % 26 #chiffrement affine\n        nv_lettre = chr(nv_rg + 65)\n        sol += nv_lettre\n    return sol\n</code></pre> <p>Q2. Comparez vos r\u00e9sultats avec ceux obtenus par la fonction <code>encipher_affine()</code> de <code>sympy</code>.</p> <p>Q3. D\u00e9codez la phrase <code>UCGXLODCMOXPMFMSRJCFQOGTCRSUSXC</code>, sachant qu'elle contient le mot <code>TRAVAIL</code> et que \\(a\\) et \\(b\\) sont inf\u00e9rieurs \u00e0 20.</p> correction \ud83d\udc0d Script Python<pre><code>from sympy.crypto.crypto import encipher_affine, decipher_affine\nfrom math import gcd\n\nfor a in range(1,20):\n    for b in range(1,20):\n        if gcd(a,26) == 1:\n            p = decipher_affine('UCGXLODCMOXPMFMSRJCFQOGTCRSUSXC', (a,b))\n            if 'TRAVAIL' in p:\n                print(p)\n</code></pre>"},{"location":"T5_Architecture_materielle/5.4_Cryptographie/Exercices/#exercice-3","title":"Exercice 3","text":"<p>Cryptographie RSA presque \u00e0 la main</p> \ud83d\udc0d Script Python<pre><code>import Crypto\nimport libnum\nfrom Crypto.Util.number import bytes_to_long, long_to_bytes\nfrom Crypto.Random import get_random_bytes \n\nbits = 256\nmsg = \"en NSI on fait de la crypto\"\n\np = Crypto.Util.number.getPrime(bits, randfunc=get_random_bytes)\nq = Crypto.Util.number.getPrime(bits, randfunc=get_random_bytes)\n\nn = p * q\nphi = (p - 1) * (q - 1)\n\ne = 65537  # 65537 est un nombre premier, donc forc\u00e9ment premier avec phi\nd = libnum.invmod(e, phi)  # on calcule l'inverse de e modulo phi\n\nM = bytes_to_long(msg.encode('utf-8'))\n\nc = pow(M, e, n) # M puissance e modulo n\nres = pow(c, d, n)\n\nprint(long_to_bytes(res))\n</code></pre> <ol> <li>Analysez le programme ci-dessous pour y retrouver chaque \u00e9tape du chiffrement RSA.</li> <li>Ex\u00e9cutez le programme et regardez en console le contenu des diff\u00e9rentes variables.</li> <li>Observez les deux lignes qui contiennent les op\u00e9rations de chiffrement et de d\u00e9chiffrement : que faut-il changer pour chiffrer avec la cl\u00e9 priv\u00e9e et d\u00e9chiffrer avec la cl\u00e9 publique ?</li> </ol> correction <p>Q3. Il suffit d'inverser <code>e</code> et <code>d</code>  dans les lignes 20 et 21.</p>"},{"location":"T5_Architecture_materielle/5.4_Cryptographie/Exercices/#exercice-4","title":"Exercice 4","text":"<p>En vous servant du code pr\u00e9c\u00e9dent, d\u00e9chiffrez le message <code>58152918114477529438769495136495430966050302170947748011925859233600631318929939319619808279389222131229963717435870597641010567365311762267359794338657867540621133550787677728203831932548041236152866441194127191404729294628415184239755221703677388875259927092794165578604353985011899152968982365630138088486380827379488939561996226754182</code>  sachant que :</p> <ul> <li>\\(e\\) vaut 65537.</li> <li>\\(p\\) et \\(q\\) sont respectivement les 13\u00e8mes et 14\u00e8mes nombres de Mersenne.</li> </ul> correction \ud83d\udc0d Script Python<pre><code>import Crypto\nimport libnum\nfrom Crypto.Util.number import bytes_to_long, long_to_bytes\nfrom Crypto.Random import get_random_bytes \n\nbits = 256\nmsg = \"en NSI on fait de la crypto\"\n\n# p = Crypto.Util.number.getPrime(bits, randfunc=get_random_bytes)\n# q = Crypto.Util.number.getPrime(bits, randfunc=get_random_bytes)\np = 2**521 - 1\nq = 2**607 - 1\n\n\nn = p * q\nphi = (p - 1) * (q - 1)\n\ne = 65537  # 65537 est un nombre premier, donc forc\u00e9ment premier avec phi\nd = libnum.invmod(e, phi)  # on calcule l'inverse de e modulo phi\n\n# M = bytes_to_long(msg.encode('utf-8'))\n# \n# c = pow(M, e, n) # M puissance e modulo n\n\nc = 58152918114477529438769495136495430966050302170947748011925859233600631318929939319619808279389222131229963717435870597641010567365311762267359794338657867540621133550787677728203831932548041236152866441194127191404729294628415184239755221703677388875259927092794165578604353985011899152968982365630138088486380827379488939561996226754182\nres = pow(c, d, n)\n\nprint(long_to_bytes(res))\n</code></pre> module RSA dans les r\u00e8gles de l'art \ud83d\udc0d Script Python<pre><code>from Crypto.PublicKey import RSA\nfrom Crypto.Cipher import PKCS1_OAEP\nimport binascii\n\nkeyPair = RSA.generate(1024)\n\npubKey = keyPair.publickey()\n\npubKeyPEM = pubKey.exportKey()\n\nprivKeyPEM = keyPair.exportKey()\n\n\nmsg = b'vive la crypto en NSI !'\nencryptor = PKCS1_OAEP.new(pubKey)\nencrypted = encryptor.encrypt(msg)\nprint(\"Encrypted:\", binascii.hexlify(encrypted))\n\n\ndecryptor = PKCS1_OAEP.new(keyPair)\ndecrypted = decryptor.decrypt(encrypted)\nprint('Decrypted:', decrypted)\n</code></pre>"},{"location":"T5_Architecture_materielle/5.4_Cryptographie/Exercices/#exercice-5","title":"Exercice 5","text":"<p>Source : Edition Ellipses : NSI 24 le\u00e7ons avec exercices corrig\u00e9s.</p> <p>On se place dans le contexte de la figure ci-dessous. Le client est un navigateur web classique (par exemple Firefox). Le serveur web est configur\u00e9 sur une machine dont le nom de domaine est www.monsite.fr . </p> <p> Dans chacune des situations suivantes, dire quelle \u00e9tape de la poign\u00e9e de main TLS \u00e9choue.</p> <p></p> <p>Les questions sont ind\u00e9pendantes.</p> <ol> <li>Le serveur web n\u2019est pas configur\u00e9 pour supporter le protocole HTTPS et ne sert que des pages en http</li> <li>Le fichier contenant le certificat c\u00f4t\u00e9 serveur est p\u00e9rim\u00e9</li> <li>L\u2019utilisateur du navigateur pointe ce dernier vers l\u2019URL http://www.monsite.fr:443</li> <li>L\u2019administrateur du serveur a cr\u00e9\u00e9 une paire de cl\u00e9 publique et priv\u00e9e, a sign\u00e9 le certificat que le serveur envoie aux clients et effac\u00e9s les cl\u00e9s</li> <li>Le navigateur commence \u00e0 afficher la page de garde du site. La c\u00e2ble connectant le serveur au r\u00e9seau est coup\u00e9</li> </ol> correction <ol> <li> <p>Le serveur web n\u2019est pas configur\u00e9 pour supporter le protocole HTTPS et ne sert que des pages en http. L\u2019\u00e9tape 1 \u00e9choue imm\u00e9diatement, le navigateur ne trouve aucun serveur en \u00e9coute sur le port 443, la connexion TCP ne peut pas se mettre en place</p> </li> <li> <p>Le fichier contenant le certificat c\u00f4t\u00e9 serveur est p\u00e9rim\u00e9 L\u2019\u00e9tape 3 \u00e9choue, le client ne proc\u00e8de pas \u00e0 la validation du certificat</p> </li> <li> <p>L\u2019utilisateur du navigateur pointe ce dernier vers l\u2019URL http://www.monsite.fr:443 L\u2019\u00e9tape 2 \u00e9choue car le client navigue vers le port HTTPS en http, il n\u2019envoie pas les bons paquets et le serveur ne peut donc pas r\u00e9pondre ou r\u00e9pond un message d\u2019erreur</p> </li> <li> <p>L\u2019administrateur du serveur a cr\u00e9\u00e9 une paire de cl\u00e9 publique et priv\u00e9e, a sign\u00e9 le certificat que le serveur envoie aux clients et effac\u00e9s les cl\u00e9s L\u2019\u00e9tape 3 \u00e9choue et le navigateur affiche un message d\u2019alerte de s\u00e9curit\u00e9. En effet, le navigateur ne pourra pas trouver une cl\u00e9 publique d\u2019AC lui permettant de v\u00e9rifier la signature</p> </li> <li> <p>Le navigateur commence \u00e0 afficher la page de garde du site. La c\u00e2ble connectant le serveur au r\u00e9seau est coup\u00e9 Si la page de garde du site s\u2019affiche, c\u2019est que la requ\u00eate http r\u00e9cup\u00e9rant la page a re\u00e7u une r\u00e9ponse du serveur. On est apr\u00e8s l\u2019\u00e9tape 5, la connexion TCP est interrompue (car tous les paquets sont perdus)</p> </li> </ol>"},{"location":"T5_Architecture_materielle/5.4_Cryptographie/Exercices/#exercice-6","title":"Exercice 6","text":"<p>Source :  Edition Ellipses, Sp\u00e9cialit\u00e9 NSI, serge Bays </p> <p>Consulter la page d\u2019accueil du site de la soci\u00e9t\u00e9 informatique de France https://www.societe-informatique-de-france.fr/ </p> <p> Pr\u00e9ciser les informations disponibles sur le certificat de s\u00e9curit\u00e9, quels sont les chiffrements utilis\u00e9s, synm\u00e9trique et asym\u00e9trique.</p> correction <p></p> <p>Lorsque la page est affich\u00e9e, on clique sur le cadenas figurant devant l\u2019adresse. On obtient les informations suivantes : Certificat v\u00e9rifi\u00e9 par l\u2019organisation Let\u2019s Encrypt Authority X3 Protocole TLS 1.2 Cl\u00e9s : voir d\u00e9tails techniques Cl\u00e9 publique : voir Afficher le certificat Algorithme RSA Avec une taille de cl\u00e9 de 256 octets (2048 bits). AES, Advanced Encryption Standart, algorithme de chiffrement sym\u00e9trique</p>"},{"location":"T5_Architecture_materielle/5.4_Cryptographie/cours/","title":"Cryptographie","text":""},{"location":"T5_Architecture_materielle/5.4_Cryptographie/cours/#1-chiffrement-symetrique","title":"1. Chiffrement sym\u00e9trique","text":""},{"location":"T5_Architecture_materielle/5.4_Cryptographie/cours/#11-activite-du-masque-jetable","title":"1.1 Activit\u00e9 du masque jetable","text":"<p>Exercice</p> \u00c9nonc\u00e9AideCorrection <p>On consid\u00e8re la variable suivante :</p> \ud83d\udc0d Script Python<pre><code>masque = \"CETTEPHRASEESTVRAIMENTTRESTRESLONGUEMAISCESTFAITEXPRES\"\n</code></pre> <ul> <li>Cr\u00e9er une fonction <code>chiffre(message, masque)</code> qui chiffre <code>message</code> en le XORant avec <code>masque</code>.</li> <li>Cette fonction doit pouvoir aussi servir \u00e0 d\u00e9chiffrer le message chiffr\u00e9.</li> </ul> <ul> <li>Le <code>XOR</code> (voir ici) est une op\u00e9ration sym\u00e9trique : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; 34 ^ 23\n53\n&gt;&gt;&gt; 53 ^ 23\n34\n</code></pre></li> <li>La fonction <code>ord</code> permet de renvoyer le code ASCII d'un caract\u00e8re. La fonction <code>chr</code> fait l'op\u00e9ration inverse. \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; ord('A')\n65\n&gt;&gt;&gt; chr(65)\n'A'\n</code></pre></li> </ul> \ud83d\udc0d Script Python<pre><code>masque = \"CETTEPHRASEESTVRAIMENTTRESTRESLONGUEMAISCESTFAITEXPRES\"\n\ndef chiffre(message, masque):\n    message_chiffre = \"\"\n    for i in range(len(message)):\n        lettre_chiffree = chr(ord(message[i]) ^ ord(masque[i]))\n        message_chiffre += lettre_chiffree\n    return message_chiffre\n</code></pre>"},{"location":"T5_Architecture_materielle/5.4_Cryptographie/cours/#12-principe-du-chiffrement-symetrique","title":"1.2 Principe du chiffrement sym\u00e9trique","text":"<p>Dans un chiffrement sym\u00e9trique, c'est la m\u00eame cl\u00e9 qui va servir au chiffrement et au d\u00e9chiffrement.</p> <p></p>"},{"location":"T5_Architecture_materielle/5.4_Cryptographie/cours/#quappelle-t-on-une-cle","title":"Qu'appelle-t-on une cl\u00e9 ?","text":"<p>La cl\u00e9 est un renseignement permettant de chiffrer ou d\u00e9chiffrer un message. Cela peut \u00eatre :</p> <ul> <li>un nombre (dans un simple d\u00e9calage des lettres de l'alphabet, comme le chiffre de C\u00e9sar)</li> <li>une phrase (dans la m\u00e9thode du masque jetable)</li> <li>une image (imaginez un chiffrement o\u00f9 on effectue un XOR par les pixels d'une image, comme dans cette \u00e9nigme)</li> </ul> <p>Un chiffrement est dit sym\u00e9trique lorsque la connaissance de la cl\u00e9 ayant servi au chiffrement permet de d\u00e9chiffrer le message. Par exemple, Alice chiffre son message en d\u00e9calant les lettres de 3 rangs vers la droite dans l'alphabet, Bob saura qu'il doit les d\u00e9caler de 3 rangs vers la gauche pour retrouver le message initial.</p>"},{"location":"T5_Architecture_materielle/5.4_Cryptographie/cours/#quel-est-lavantage-dun-chiffrement-symetrique","title":"Quel est l'avantage d'un chiffrement sym\u00e9trique ?","text":"<p>Les chiffrements sym\u00e9triques sont souvent rapides, consommant peu de ressources et donc adapt\u00e9s au chiffrement de flux important d'informations.</p> <p>Comme nous le verrons, la s\u00e9curisation des donn\u00e9es transitant par le protocole <code>https</code> est bas\u00e9e sur un chiffrement sym\u00e9trique.</p>"},{"location":"T5_Architecture_materielle/5.4_Cryptographie/cours/#quel-est-linconvenient-dun-chiffrement-symetrique","title":"Quel est l'inconv\u00e9nient d'un chiffrement sym\u00e9trique ?","text":"<p>La cl\u00e9 ! Si Alice et Bob ont besoin d'utiliser un chiffrement pour se parler, comment peuvent-ils \u00e9changer leurs cl\u00e9s  puisque leur canal de transmission n'est pas s\u00fbr ?</p> <p>Le chiffrement sym\u00e9trique impose qu'Alice et Bob aient pu se rencontrer physiquement au pr\u00e9alable pour convenir d'une cl\u00e9 secr\u00e8te, ou bien qu'ils aient r\u00e9ussi \u00e0 \u00e9tablir une connexion s\u00e9curis\u00e9e pour s'\u00e9changer cette cl\u00e9.</p>"},{"location":"T5_Architecture_materielle/5.4_Cryptographie/cours/#un-chiffrement-symetrique-est-il-un-chiffrement-de-mauvaise-qualite","title":"Un chiffrement sym\u00e9trique est-il un chiffrement de mauvaise qualit\u00e9 ?","text":"<p>Pas du tout ! S'il est associ\u00e9 naturellement \u00e0 des chiffrements simples et faibles (comme le d\u00e9calage de C\u00e9sar), un chiffrement sym\u00e9trique peut \u00eatre tr\u00e8s robuste... voire inviolable.</p> <p>C'est le cas du masque jetable. Si le masque avec lequel on effectue le XOR sur le message est aussi long que le message, alors il est impossible de retrouver le message initial. Pourquoi ?</p> <p>Imaginons qu'Alice veuille transmettre le message clair \"LUNDI\". Elle le chiffre avec un masque jetable (que connait aussi Bob), et Bob re\u00e7oit donc \"KHZOK\".  Si Marc a intercept\u00e9 le message \"KHZOK\", m\u00eame s'il sait que la m\u00e9thode de chiffrement utilis\u00e9e est celle du masque jetable (principe de Kerckhoffs), il n'a pas d'autre choix que de tester tous les masques de 5 lettres possibles. Ce qui lui donne \\(26^5\\) possibilit\u00e9s (plus de 11 millions) pour le masque, et par cons\u00e9quent (propri\u00e9t\u00e9 de bijectivit\u00e9 du XOR) \\(26^5\\) possibilit\u00e9s pour le message \u00abd\u00e9chiffr\u00e9\u00bb...</p> <p>Cela signifie que Marc verra appara\u00eetre, dans sa tentative de d\u00e9chiffrage, les mots \"MARDI\", \"JEUDI\", \"JOUDI\", \"STYLO\", \"FSDJK\", \"LUNDI, \"LUNDA\"...  Il n'a aucune possibilit\u00e9 de savoir o\u00f9 est le bon message original parmi toutes les propositions (on parle de s\u00e9curit\u00e9 s\u00e9mantique).</p> <p>Principe de Kerckhoffs : la s\u00e9curit\u00e9 d'un syst\u00e8me de chiffrement ne doit reposer que sur la s\u00e9curit\u00e9 de la cl\u00e9, et non pas sur la connaissance de l'algorithme de chiffrement. Cet algorithme peut m\u00eame \u00eatre public (ce qui est pratiquement toujours le cas).</p>"},{"location":"T5_Architecture_materielle/5.4_Cryptographie/cours/#quels-sont-les-chiffrements-symetriques-modernes","title":"Quels sont les chiffrements sym\u00e9triques modernes ?","text":"<p>L'algorithme de chiffrement sym\u00e9trique le plus utilis\u00e9 actuellement est le chiffrement AES, pour Advanced Encryption Standard.</p> <ul> <li>chiffrement par bloc de 128 bits, r\u00e9partis dans une matrice de 16 octets (matrice carr\u00e9e de taille 4).</li> <li>ces 128 bits sont transform\u00e9s par des rotations, multiplications, transpositions, [...] de la matrice initiale, en faisant intervenir dans ces transformations une cl\u00e9 de 128, 192 ou 256 bits.</li> <li>pour l'AES-256 (avec une cl\u00e9 de 256 bits), l'attaque par force brute n\u00e9cessiterait 2^256 op\u00e9rations, soit un nombre \u00e0 78 chiffres...</li> <li>il n'existe pas d'attaque connue efficace \u00e0 ce jour. Les seules attaques sont des attaques sur des faiblesses d'impl\u00e9mentation, ou par canal auxiliaire.</li> </ul>"},{"location":"T5_Architecture_materielle/5.4_Cryptographie/cours/#2-chiffrement-asymetrique","title":"2. Chiffrement asym\u00e9trique","text":"<p>Invent\u00e9 par Whitfield Diffie et Martin Hellman en 1976, le chiffrement asym\u00e9trique vient r\u00e9soudre l'inconv\u00e9nient essentiel du chiffrement sym\u00e9trique : le n\u00e9cessaire partage d'un secret (la cl\u00e9) avant l'\u00e9tablissement de la communication s\u00e9curis\u00e9e.</p>"},{"location":"T5_Architecture_materielle/5.4_Cryptographie/cours/#21-principe-du-chiffrement-asymetrique","title":"2.1 Principe du chiffrement asym\u00e9trique","text":"<p>Le principe de base est l'existence d'une cl\u00e9 publique, appel\u00e9e \u00e0 \u00eatre distribu\u00e9e largement, et d'une cl\u00e9 priv\u00e9e, qui ne quitte jamais son propri\u00e9taire. </p> <p></p>"},{"location":"T5_Architecture_materielle/5.4_Cryptographie/cours/#22-le-role-interchangeable-des-cles-publiques-et-privees","title":"2.2 Le r\u00f4le interchangeable des cl\u00e9s publiques et priv\u00e9es","text":"<p>L'illustration pr\u00e9c\u00e9dente associe :</p> <ul> <li>une image de cadenas \u00e0 la cl\u00e9 publique (car on s'en sert pour chiffrer les messages)</li> <li>une image de cl\u00e9 \u00e0 la cl\u00e9 priv\u00e9e (car on s'en sert pour d\u00e9chiffrer les messages)</li> </ul> <p>Concr\u00e8tement, (nous le verrons dans l'application par le chiffrement RSA), la cl\u00e9 priv\u00e9e et la cl\u00e9 publique sont deux nombres aux r\u00f4les identiques. Appelons-les A et B :</p> <ul> <li>il est impossible de trouver A en fonction de B. R\u00e9ciproquement, si on conna\u00eet A, il est impossible d'en d\u00e9duire B.</li> <li>si on chiffre un message avec A, on peut le d\u00e9chiffrer avec B. R\u00e9ciproquement, si on chiffre avec B, on peut d\u00e9chiffrer le message gr\u00e2ce \u00e0 A.</li> <li>on peut donc chiffrer avec une cl\u00e9 publique et d\u00e9chiffrer avec la cl\u00e9 priv\u00e9e associ\u00e9e (ce qui est fait dans l'exemple pr\u00e9c\u00e9dent). Mais on peut aussi chiffrer avec la cl\u00e9 priv\u00e9e, et d\u00e9chiffrer avec la cl\u00e9 publique associ\u00e9e.</li> </ul> <p>A et B ont donc des r\u00f4les interchangeables (chacun peut \u00eatre un cadenas, chacun peut \u00eatre une cl\u00e9), et ce n'est qu'en connaissant A et B qu'on peut d\u00e9chiffrer le message.</p> <p>Nous allons donc maintenant adopter une nouvelle convention infographique :</p> <ul> <li>Consid\u00e9rons ce message :</li> </ul> <p></p> <ul> <li> <p>Si ce message est chiffr\u00e9 avec la cl\u00e9 publique d'Alice, le message sera : </p> </li> <li> <p>Si on d\u00e9chiffre ce message avec la cl\u00e9 priv\u00e9e d'Alice, il deviendra  et donc </p> </li> </ul> <p>puisque l'application de la cl\u00e9 priv\u00e9e sur la cl\u00e9 publique, ou bien de la cl\u00e9 publique sur la cl\u00e9 priv\u00e9e, permet de retrouver le message en clair.</p> <p>De mani\u00e8re graphique, la connaissance des deux moiti\u00e9s du disque qui s'assemblent permet de les faire disparaitre, peu importe qu'on ait commenc\u00e9 par chiffrer avec la cl\u00e9 publique ou avec la cl\u00e9 priv\u00e9e.</p> <p></p>"},{"location":"T5_Architecture_materielle/5.4_Cryptographie/cours/#23-communication-authentifiee","title":"2.3 Communication authentifi\u00e9e.","text":"<p>Dans la situation du 2.1, Alice (qui a distribu\u00e9 largement sa cl\u00e9 publique) ne peut pas s'assurer que le message vient bien de Bob. Il peut avoir \u00e9t\u00e9 cr\u00e9\u00e9 par Marc, qui signe \u00abBob\u00bb et usurpe ainsi son identit\u00e9. </p> <p>Le protocole que nous allons d\u00e9crire ci-dessous permet :</p> <ul> <li>d'emp\u00eacher qu'un message intercept\u00e9 soit d\u00e9chiffr\u00e9 (ce qui \u00e9tait d\u00e9j\u00e0 le cas dans le 2.1)</li> <li>mais aussi de s'assurer que chaque personne est bien celle qu'elle pr\u00e9tend \u00eatre : on r\u00e9sout le probl\u00e8me d'authentification.</li> </ul> <p></p> <p>En r\u00e9sum\u00e9 :</p> <ul> <li>Alice est s\u00fbre que seul Bob pourra d\u00e9chiffrer le message qu'elle envoie.</li> <li>Bob est s\u00fbr que le message qu'il re\u00e7oit vient bien d'Alice.</li> </ul>"},{"location":"T5_Architecture_materielle/5.4_Cryptographie/cours/#23-un-exemple-de-chiffrement-asymetrique-le-chiffrement-rsa","title":"2.3 Un exemple de chiffrement asym\u00e9trique : le chiffrement RSA","text":""},{"location":"T5_Architecture_materielle/5.4_Cryptographie/cours/#231-histoire","title":"2.3.1 Histoire","text":"<p>Lorsqu'en 1976 Diffie et Hellman (chercheurs \u00e0 Stanford) pr\u00e9sentent le concept de chiffrement asym\u00e9trique (souvent appel\u00e9 cryptographie \u00e0 cl\u00e9s publiques), ils en proposent uniquement un mod\u00e8le th\u00e9orique, n'ayant pas trouv\u00e9 une r\u00e9elle impl\u00e9mentation de leur protocole.</p> <p>Trois chercheurs du MIT (Boston), Ron Rivest, Adi Shamir et Len Adleman se penchent alors sur ce protocole, convaincus qu'il est en effet impossible d'en trouver une impl\u00e9mentation pratique. En 1977, au cours de leurs recherches, ils d\u00e9montrent en fait l'inverse de ce qu'ils cherchaient : ils cr\u00e9ent le premier protocole concret de chiffrement asym\u00e9trique : le chiffrement RSA.</p> <p></p> <p>Au m\u00eame moment \u00e0 Londres, Clifford Cocks, (chercheur au tr\u00e8s secret GCHQ) apprend que Rivest Shamir et Adleman viennent de d\u00e9couvrir ce que lui-m\u00eame a d\u00e9couvert 3 ans auparavant mais qui est rest\u00e9 class\u00e9 Secret D\u00e9fense.</p> <p>Il est le v\u00e9ritable inventeur du RSA... mais le reste du monde ne l'apprendra qu'en 1997 au moment de la d\u00e9classification de cette information. </p> <p></p>"},{"location":"T5_Architecture_materielle/5.4_Cryptographie/cours/#231-description","title":"2.3.1 Description","text":"<p>Le chiffrement RSA est bas\u00e9 sur l'arithm\u00e9tique modulaire. Faire des calculs modulo un entier \\(n\\), c'est ne garder que le reste de la division euclidienne par \\(n\\).</p> <p>Le fait que 15 soit \u00e9gal \u00e0 1 modulo 7 (car \\(15=2 \\times 7+1\\)) s'\u00e9crira \\(15 \\equiv 1 [7]\\).</p> <p>De m\u00eame, \\(10 \\equiv  3 [7]\\), \\(25 \\equiv 4 [7]\\), \\(32 \\equiv 2 [10]\\), etc.</p>"},{"location":"T5_Architecture_materielle/5.4_Cryptographie/cours/#etape-1","title":"\u00c9tape 1","text":"<p>Alice choisit 2 grands nombres premiers \\(p\\) et \\(q\\). Dans la r\u00e9alit\u00e9 ces nombres seront vraiment tr\u00e8s grands (plus de 100 chiffres). Dans notre exemple, nous prendrons \\(p = 3\\) et \\(q = 11\\).</p>"},{"location":"T5_Architecture_materielle/5.4_Cryptographie/cours/#etape-2","title":"\u00c9tape 2","text":"<p>Alice multiplie ces deux nombres \\(p\\) et \\(q\\) et obtient ainsi un nombre \\(n\\).</p> <p>Il est tr\u00e8s facile pour Alice de calculer \\(n\\) en connaissant \\(p\\) et \\(q\\), mais il  extr\u00eamement difficile pour Marc de faire le travail inverse : trouver \\(p\\) et \\(q\\) en connaissant \\(n\\) prend un temps exponentiel avec la taille de \\(n\\). C'est sur cette difficult\u00e9 (appel\u00e9e difficult\u00e9 de factorisation) que repose la robustesse du syst\u00e8me RSA.</p>"},{"location":"T5_Architecture_materielle/5.4_Cryptographie/cours/#etape-3","title":"\u00c9tape 3","text":"<p>Alice choisit un nombre \\(e\\) qui doit \u00eatre premier avec \\((p-1)(q-1)\\).  On note \\(\\phi(n)\\) le nombre \\((p-1)(q-1)\\).</p> <p>Dans notre exemple, \\((p-1)(q-1) = 20\\), Alice choisit donc \\(e = 3\\). (mais elle aurait pu aussi choisir 7, 9, 13...).</p> <p>Le couple \\((e, n)\\) sera la cl\u00e9 publique d'Alice. Elle la diffuse \u00e0 qui veut lui \u00e9crire.</p> <p>Dans notre exemple, la cl\u00e9 publique d'Alice est \\((3, 33)\\).</p>"},{"location":"T5_Architecture_materielle/5.4_Cryptographie/cours/#etape-4","title":"\u00c9tape 4","text":"<p>Alice calcule maintenant sa cl\u00e9 priv\u00e9e : elle doit trouver un nombre d qui v\u00e9rifie l'\u00e9galit\u00e9 \\(e d \\equiv 1 [\\phi(n)]\\).</p> <p>Dans notre exemple, comme \\(7 \\times 3  \\equiv 1 [20]\\), ce nombre \\(d\\) est \u00e9gal \u00e0 7.</p> <p>En pratique, il existe un algorithme simple (algorithme d'Euclide \u00e9tendu) pour trouver cette valeur \\(d\\), appel\u00e9e inverse de e.</p> <p>Le couple \\((d, n)\\) sera la cl\u00e9 priv\u00e9e d'Alice. Elle ne la diffuse \u00e0 personne.</p> <p>Dans notre exemple, la cl\u00e9 priv\u00e9e d'Alice est \\((7, 33)\\).</p>"},{"location":"T5_Architecture_materielle/5.4_Cryptographie/cours/#etape-5","title":"\u00c9tape 5","text":"<p>Supposons que Bob veuille \u00e9crire \u00e0 Alice pour lui envoyer le nombre 4.  Il poss\u00e8de la cl\u00e9 publique d'Alice, qui est \\((3, 33)\\).</p> <p>Il calcule donc \\(4^3\\) modulo 33, qui vaut 31. C'est cette valeur 31 qu'il transmet \u00e0 Alice.</p> \\[4^3 \\equiv 31 [33]\\] <p>Si Marc intercepte cette valeur 31, m\u00eame en connaissant la cl\u00e9 publique d'Alice (3,33), il ne peut pas r\u00e9soudre l'\u00e9quation \\(x^3 \\equiv 31 [33]\\) de mani\u00e8re efficace.</p>"},{"location":"T5_Architecture_materielle/5.4_Cryptographie/cours/#etape-6","title":"\u00c9tape 6","text":"<p>Alice re\u00e7oit la valeur 31. Il lui suffit alors d'\u00e9lever 31 \u00e0 la puissance 7 (sa cl\u00e9 priv\u00e9e), et de calculer le reste modulo 33 :</p> <p>\\(31^7 = 27512614111\\)</p> <p>\\(27512614111 \\equiv 4 [33]\\)</p> <p>Elle r\u00e9cup\u00e8re la valeur 4, qui est bien le message original de Bob.</p> <p>Comment \u00e7a marche ? Gr\u00e2ce au Petit Th\u00e9or\u00e8me de Fermat, on d\u00e9montre (voir ici) assez facilement que \\(M^{ed} \\equiv M [n]\\).</p> <p>Il faut remarquer que \\(M^{ed} = M^{de}\\). On voit que les r\u00f4les de la cl\u00e9 publique et de la cl\u00e9 priv\u00e9e sont sym\u00e9triques : un message chiffr\u00e9 avec la cl\u00e9 publique se d\u00e9chiffrera en le chiffrant avec la cl\u00e9 priv\u00e9e, tout comme un message chiffr\u00e9 avec la cl\u00e9 priv\u00e9e se d\u00e9chiffrera en le chiffrant avec la cl\u00e9 publique.</p> <p>Animation interactive voir https://animations.interstices.info/interstices-rsa/rsa.html</p>"},{"location":"T5_Architecture_materielle/5.4_Cryptographie/cours/#rsa-un-systeme-inviolable","title":"RSA, un syst\u00e8me inviolable ?","text":"<p>Le chiffrement RSA a des d\u00e9fauts (notamment une grande consommation des ressources, due \u00e0 la manipulation de tr\u00e8s grands nombres). Mais le choix d'une cl\u00e9 publique de grande taille (actuellement 1024 ou 2048 bits) le rend pour l'instant inviolable. </p> <p>Actuellement, il n'existe pas d'algorithme efficace pour factoriser un nombre ayant plusieurs centaines de chiffres.</p> <p>Deux \u00e9v\u00e8nements pourraient faire s'\u00e9crouler la s\u00e9curit\u00e9 du RSA :</p> <ul> <li>la d\u00e9couverte d'un algorithme efficace de factorisation, capable de tourner sur les ordinateurs actuels. Cette annonce est r\u00e9guli\u00e8rement faite, et tout aussi r\u00e9guli\u00e8rement contredite par la communaut\u00e9 scientifique. (voir, le 05/03/2021,  https://www.schneier.com/blog/archives/2021/03/no-rsa-is-not-broken.html)</li> <li>l'av\u00e8nement d'ordinateurs quantiques, dont la vitesse d'ex\u00e9cution permettrait une factorisation rapide. Il est \u00e0 noter que l'algorithme de factorisation destin\u00e9 \u00e0 tourner sur un ordinateur quantique existe d\u00e9j\u00e0 : l'algorithme de Schor.</li> </ul>"},{"location":"T5_Architecture_materielle/5.4_Cryptographie/cours/#3-https-exemple-dutilisation-conjointe-dun-chiffrement-asymetrique-et-dun-chiffrement-symetrique","title":"3. HTTPS : exemple d'utilisation conjointe d'un chiffrement asym\u00e9trique et d'un chiffrement sym\u00e9trique.","text":""},{"location":"T5_Architecture_materielle/5.4_Cryptographie/cours/#31-principe-general","title":"3.1 Principe g\u00e9n\u00e9ral","text":"<p>Aujourd'hui, plus de 90 % du trafic sur internet est chiffr\u00e9 : les donn\u00e9es ne transitent plus en clair (protocole <code>http</code>) mais de mani\u00e8re chiffr\u00e9e (protocole <code>https</code>), ce qui emp\u00eache la lecture de paquets \u00e9ventuellements intercept\u00e9s.</p> <p>Le protocole <code>https</code> est la r\u00e9union de deux protocoles :</p> <ul> <li>le protocole <code>TLS</code> (Transport Layer Security, qui a succ\u00e9d\u00e9 au SSL) : ce protocole, bas\u00e9 sur du chiffrement asym\u00e9trique, va conduire \u00e0 la g\u00e9n\u00e9ration d'une cl\u00e9 identique chez le client et chez le serveur.</li> <li>le (bon vieux) protocole  <code>http</code>, mais qui convoiera maintenant des donn\u00e9es chiffr\u00e9es avec la cl\u00e9 g\u00e9n\u00e9r\u00e9e \u00e0 l'\u00e9tape pr\u00e9c\u00e9dente. Les donn\u00e9es peuvent toujours \u00eatre intercept\u00e9es, mais sont illisibles. Le chiffrement sym\u00e9trique utilis\u00e9 est actuellement le chiffrement AES.</li> </ul> <p>Pourquoi ne pas utiliser que le chiffrement asym\u00e9trique, RSA par exemple ? Car il est tr\u00e8s gourmand en ressources ! Le chiffrement/d\u00e9chiffrement doit \u00eatre rapide pour ne pas ralentir les communications ou l'exploitation des donn\u00e9es. Le chiffrement asym\u00e9trique est donc r\u00e9serv\u00e9 \u00e0 l'\u00e9change de cl\u00e9s (au d\u00e9but de la communication). Le chiffrement sym\u00e9trique, bien plus rapide, prend ensuite le relais pour l'ensemble de la communication.</p> <p></p>"},{"location":"T5_Architecture_materielle/5.4_Cryptographie/cours/#32-hp-fonctionnement-du-tls-explication-du-handshake","title":"3.2 (HP) Fonctionnement du TLS : explication du handshake","text":"<p>Observons en d\u00e9tail le fonctionnement du protocole <code>TLS</code>, dont le r\u00f4le est de g\u00e9n\u00e9rer de mani\u00e8re s\u00e9curis\u00e9e une cl\u00e9 dont disposeront \u00e0 la fois le client et le serveur, leur permettant ainsi d'appliquer un chiffrement sym\u00e9trique \u00e0 leurs \u00e9changes.</p> <p></p> <ul> <li> <p>\u00e9tape 1 : le \u00abclient Hello\u00bb. Le client envoie sa version de TLS utilis\u00e9e. </p> </li> <li> <p>\u00e9tape 2 : le \u00abserver Hello\u00bb. Le serveur r\u00e9pond en renvoyant son certificat prouvant son identit\u00e9, ainsi que sa cl\u00e9 publique.</p> </li> <li> <p>\u00e9tape 3 : le client interroge l'autorit\u00e9 de certification pour valider le fait que le certificat est bien valide et que le serveur est bien celui qu'il pr\u00e9tend \u00eatre. Cette v\u00e9rification est faite gr\u00e2ce \u00e0 un m\u00e9canisme de chiffrement asym\u00e9trique.</p> </li> </ul> <p>La pr\u00e9sentation du certificat \u00e0 l'autorit\u00e9 de certification peut se repr\u00e9senter comme le scan d'une pi\u00e8ce d'identit\u00e9 dans un a\u00e9roport. L'autorit\u00e9 de certification est alors l'\u00c9tat (dont la base de donn\u00e9es est interrog\u00e9e par un logiciel) qui valide que la pi\u00e8ce d'identit\u00e9 est bien un document officiel.</p> <ul> <li>\u00e9tape 4 : une fois v\u00e9rifi\u00e9e l'authenticit\u00e9 du serveur et que son certificat est valide, le client calcule ce qui sera la future cl\u00e9 de chiffrement sym\u00e9trique (appel\u00e9e \u00abcl\u00e9 AES\u00bb dans l'infographie). Cette cl\u00e9 est chiffr\u00e9e avec la cl\u00e9 publique du server (transmise \u00e0 l'\u00e9tape 1), ce qui assure la s\u00e9curit\u00e9 de son transfert. Le serveur d\u00e9chiffre cette cl\u00e9 gr\u00e2ce \u00e0 sa cl\u00e9 priv\u00e9e, et dispose ainsi lui aussi de la cl\u00e9. </li> </ul> <p>Le transmission par protocole <code>http</code> de donn\u00e9es chiffr\u00e9es au pr\u00e9alable avec la cl\u00e9 AES peut commencer. </p> <p>Remarque : en r\u00e9alit\u00e9, ce n'est pas la cl\u00e9 AES qui est transmise \u00e0 l'\u00e9tape 4, mais un nombre choisi par le client, qui permettra, avec deux autres nombres choisis par le client (\u00e9tape 1) et le serveur (\u00e9tape 2) de reconstituer la cl\u00e9 AES, qui sera donc identique c\u00f4t\u00e9 client et c\u00f4t\u00e9 serveur.</p>"},{"location":"T5_Architecture_materielle/5.4_Cryptographie/cours/#bibliographie","title":"Bibliographie","text":"<ul> <li>Num\u00e9rique et Sciences Informatiques, Terminale, T. BALABONSKI, S. CONCHON, J.-C. FILLIATRE, K. NGUYEN, \u00e9ditions ELLIPSES.</li> <li>Pr\u00e9pabac NSI, Terminale, G. CONNAN, V. PETROV, G. ROZSAVOLGYI, L. SIGNAC, \u00e9ditions HATIER.</li> <li>https://www.cloudflare.com/fr-fr/learning/ssl/what-happens-in-a-tls-handshake/</li> </ul>"},{"location":"T6_5_algos_coeur/sommaire/","title":"Sommaire","text":"<ol> <li>Algorithmes de premi\u00e8re</li> <li>R\u00e9cursivit\u00e9</li> <li>Tri</li> </ol>"},{"location":"T6_5_algos_coeur/6.1_algos_premiere/cours/","title":"algos de premi\u00e8re 1\ufe0f\u20e3","text":""},{"location":"T6_5_algos_coeur/6.1_algos_premiere/cours/#minimum","title":"Minimum","text":"Minimun <p>Fonction qui renvoie le minimum d'une liste de nombres ou None si vide.</p> solution it\u00e9rative 1solution it\u00e9rative 2solution r\u00e9cursive <p>Parcours \u00e9l\u00e9ment par \u00e9l\u00e9ment</p> \ud83d\udc0d Script Python<pre><code>def minimum(liste):\nif liste != []:\n    minimum = liste[0]\n    for element in liste:\n        if element &lt; minimum:\n            minimum = element\n    return minimum\n</code></pre> <p>Parcours \u00e0 l'aide des indices</p> \ud83d\udc0d Script Python<pre><code>    def minimum(liste):\n        if liste != []:\n            indice_minimum = 0\n            for indice in range(len(liste):\n                if liste[indice] &lt; liste[indice_minimum]:\n                    indice_minimum = indice\n        return liste[indice_minimum]\n</code></pre> <p>Informatiom : \"liste.pop()\" supprime le dernier \u00e9l\u00e9ment de la liste et le renvoie. La liste est, ici, suppos\u00e9e non vide.</p> \ud83d\udccb Texte<pre><code>```python\ndef minimum(liste):\n    \"\"\"Renvoie le minimum de la liste d'entiers, suppos\u00e9e non vide\n\n    Parameters\n    ----------\n        liste : list(int)\n\n    Returns\n    -------\n        int\n\n    exemple\n    -------\n    &gt;&gt;&gt; minimum([15,7,8,9])\n    7\n    &gt;&gt;&gt; minimum([6])\n    6\n\n    \"\"\"\n    assert liste != [], \"Une liste vide n'a pas de minimum\"\n    l = liste[:]\n    if len(l) == 1:\n        return l[0]\n    else:\n        min1 = l.pop()\n        min2 = minimum(l)\n        if min1 &lt; min2:\n            return min1\n        else:\n            return min2\n```\n</code></pre>"},{"location":"T6_5_algos_coeur/6.1_algos_premiere/cours/#maximum","title":"Maximum","text":"Maximum <p>Fonction qui renvoie le maximum d'une liste de nombres ou None si vide.</p> \ud83d\udc0d Script Python<pre><code>def maximum(liste):\n    if liste != []:\n        maximum = liste[0]\n        for i in range(len(liste)):\n            if liste[i] &gt; maximum:\n                maximum = liste[i]\n        return maximum\n</code></pre>"},{"location":"T6_5_algos_coeur/6.1_algos_premiere/cours/#indice-du-minimum-et-du-maximum","title":"Indice du minimum et du maximum","text":"Indice du minimum et du maximum <p>Fonction qui renvoie un tuple (indice du minimum, indice du maximum) d'une liste de nombres ou None si la liste est vide.</p> \ud83d\udc0d Script Python<pre><code>def indice_mini_maxi(liste):\n    if liste != []:\n        indice_minimum, indice_maximum = 0, 0\n        for indice in range(len(liste)):\n            if liste[indice] &lt; liste[indice_minimum]:\n                indice_minimum = indice\n            elif liste[indice] &gt; liste[indice_maximum]:\n                indice_maximum = indice\n        return (indicice_minimum, indice_maximum)\n</code></pre>"},{"location":"T6_5_algos_coeur/6.1_algos_premiere/cours/#chaine-a-lenvers","title":"Cha\u00eene \u00e0 l'envers","text":"A l'envers <p>Fonction qui renvoie une cha\u00eene de caract\u00e8re \u00e0 l'envers.</p> \ud83d\udc0d Script Python<pre><code>def renverse(chaine):\n    \"\"\"Renvoie la cha\u00eene de caract\u00e8re renvers\u00e9e, le dernier caract\u00e8re devient le premier, l'avant dernier\n    le deuxi\u00e8me et ainsi de suite...\n\n    param : \n        chaine : str\n    return :\n        str\n\n    exemple :\n    &gt;&gt;&gt; renverse(\"Bonjour\")\n    'ruojnoB'\n\n    &gt;&gt;&gt; renverse(\"\")\n    ''\n    \"\"\"\n    renverse = \"\"\n    for caractere in chaine:\n        renverse = caractere + renverse\n    return renverse\n</code></pre>"},{"location":"T6_5_algos_coeur/6.1_algos_premiere/cours/#nombre-doccurrence","title":"Nombre d'occurrence","text":"Compter le nombre d'occurrences <p>Fonction qui compte le nombre d'occurrences d'un caract\u00e8re dans une cha\u00eene.</p> \ud83d\udc0d Script Python<pre><code>def nombre_occurrences(chaine, carac):\n    '''Renvoie le nombre d'occurrences de carac dans chaine\n\n    param : \n        chaine : str\n        carac : str\n    return :\n        int\n\n    exemple :\n    &gt;&gt;&gt; nombre_occurences(\"bonjour\",\"o\")\n    2\n    &gt;&gt;&gt; nombre_occurences(\"bonjour\",\"z\")\n    0\n    '''\n    compteur = 0\n    for car in chaine:\n        if car == carac:\n            compteur = compteur +1\n    return compteur\n</code></pre>"},{"location":"T6_5_algos_coeur/6.1_algos_premiere/cours/#indice-de-la-premiere-occurrence","title":"Indice de la premi\u00e8re occurrence","text":"Indice de la premi\u00e8re occurrence <p>Fonction qui renvoie l'indice de la premi\u00e8re occurrence d'un caract\u00e8re dans une cha\u00eene. Retourne -1 si la valeur n'est pas dans la cha\u00eene.</p> solution 1solution 2 <p>Avec une boucle  <code>for</code></p> \ud83d\udccb Texte<pre><code>```python\ndef indice(car, string):\n\"\"\"Renvoie l'indice de la premi\u00e8re occurrence du caract\u00e8re car dans la chaine string. \nRenvoie -1 si car n'est pas dans string.\n\nparam :\n    string : str\n    car : str\nreturn :\n    int\n\nexemple : \n&gt;&gt;&gt; indice(\"o\", \"Bonjour\")\n1\n&gt;&gt;&gt; indice(\"a\", \"Bonjour\")\n-1\n\"\"\"\n\nfor indice in range(len(string)):\n    if string[indice] == car:\n        return indice\nreturn -1\n```\n</code></pre> <p>Avec une boucle <code>while</code></p> \ud83d\udccb Texte<pre><code>```python\ndef indice(car, string):\n    \"\"\"Renvoie l'indice de la premi\u00e8re occurrence du caract\u00e8re car dans la chaine string. Renvoie -1 si car n'est pas dans string.\n\n    param :\n        string : str\n        car : str\n    return :\n        int\n\n    exemple : \n    &gt;&gt;&gt; indice(\"o\", \"Bonjour\")\n    1\n    &gt;&gt;&gt; indice(\"a\", \"Bonjour\")\n    -1\n    \"\"\"\n\n    indice = 0\n    while indice &lt; len(string):\n        if string[indice] == car:\n            return indice\n        indice = indice + 1\n    return -1\n```\n</code></pre>"},{"location":"T6_5_algos_coeur/6.1_algos_premiere/cours/#recherche-dichotomique","title":"Recherche dichotomique","text":"Recherche dichotomique <p>Fonction qui renvoie la position d'un \u00e9l\u00e9ment dans une liste, ou False si l'\u00e9l\u00e9ment ne s'y trouve pas. Le principe de dichotomie est utilis\u00e9.</p> \ud83d\udc0d Script Python<pre><code>def recherche_dicho(val, table):\n    '''\n    recherche la position de la valeur  dans la table\n\n    param :\n        table : list : liste ordonn\u00e9e de valeurs\n        val : type identique aux \u00e9l\u00e9ments de la liste\n\n    return : \n        int : position de la valeur dans table\n        False : si valeur n'est pas dans table\n\n    Exemple :\n    &gt;&gt;&gt; recherche_dicho(14, [10, 11, 11, 12, 13, 15, 18, 23, 41])\n    &gt;&gt;&gt; recherche_dicho(23, [10, 11, 11, 12, 13, 15, 18, 23, 41])\n    7\n\n    '''\n    d = 0\n    f = len(table)-1\n    while d&lt;=f:\n        m = (d+f) // 2\n        if table[m] == val :\n            return m\n        elif val &gt; table[m]:\n            d = m+1\n        else:\n            f = m -1\n    return False\n</code></pre>"},{"location":"T6_5_algos_coeur/6.1_algos_premiere/cours/#conversion-decimal-vers-binaire","title":"Conversion d\u00e9cimal vers binaire","text":"Conversion d\u00e9cimal vers binaire <p>Fonction qui \u00e0 partir d'un entier sous la forme d\u00e9cimal renvoie sa version binaire</p> version 1version 2 \ud83d\udc0d Script Python<pre><code>def conv_dec_bin(entier):\n    \"\"\" cette fonction permet de convertir un nombre entier en binaire\n\n    param\n    -----\n    entier : int\n\n    return\n    ------\n    str : chaine de caract\u00e8res compos\u00e9e de 0 et de 1 \n\n    exemples:\n    ---------\n    &gt;&gt;&gt; conv_dec_bin(13)\n    '1101'\n\n    &gt;&gt;&gt; conv_dec_bin(192)\n    '11000000'\n\n    \"\"\"\n    reponse = \"\"\n    if entier == 0:\n        return \"0\"\n    else:\n        while entier !=0:\n            reste = entier%2\n            reponse = str(reste) + reponse \n            entier = entier//2\n    return reponse\n</code></pre> \ud83d\udc0d Script Python<pre><code>def conv_dec_bin(entier):\n    \"\"\" cette fonction permet de convertir un nombre entier en binaire\n\n    param\n    -----\n    entier : int\n\n    return\n    ------\n    str : chaine de caract\u00e8res compos\u00e9e de 0 et de 1 \n\n    exemples:\n    ---------\n    &gt;&gt;&gt; conv_dec_bin(13)\n    '1101'\n\n    &gt;&gt;&gt; conv_dec_bin(192)\n    '11000000'\n\n    \"\"\"\n    exposant = 0\n    reponse = \"\"\n    while 2**exposant &lt; entier:\n        exposant += 1\n    while entier != 0:\n        exposant = exposant -1\n        if 2**exposant &gt; entier:\n            reponse = reponse + \"0\"\n        else:\n            reponse = reponse + \"1\"\n            entier = entier - 2**exposant\n\n    reponse = reponse +\"0\"*exposant\n    return reponse\n</code></pre>"},{"location":"T6_5_algos_coeur/6.1_algos_premiere/cours/#conversion-binaire-vers-decimal","title":"Conversion binaire vers d\u00e9cimal","text":"Conversion binaire vers d\u00e9cimal <p>Fonction qui \u00e0 partir d'un nombre \u00e9crit sous forme binaire renvoie sa forme d\u00e9cimal</p> version 1version 2 \ud83d\udc0d Script Python<pre><code>def conv_bin_dec(binaire):\n    \"\"\" cette fonction permet de convertir un nombre en binaire en d\u00e9cimal.\n\n        param\n        -----\n        binaire : str\n\n        return\n        ------\n        int \n\n        exemples:\n        ---------\n        &gt;&gt;&gt; conv_bin_dec('1101')\n        13\n        &gt;&gt;&gt; conv_bin_dec('11000000')\n        192\n\n        \"\"\"\n    assert binaire != \"\",\"La cha\u00eene doit \u00eatre non vide\"\n    resultat = 0\n    for chiffre in binaire:\n        resultat = 2 * resultat + int(chiffre)\n    return resultat\n</code></pre> \ud83d\udc0d Script Python<pre><code>def conv_bin_dec(binaire):\n    \"\"\" cette fonction permet de convertir un nombre en binaire en d\u00e9cimal.\n\n        param\n        -----\n        binaire : str\n\n        return\n        ------\n        int \n\n        exemples:\n        ---------\n        &gt;&gt;&gt; conv_bin_dec('1101')\n        13\n        &gt;&gt;&gt; conv_bin_dec('11000000')\n        192\n\n        \"\"\"\n    assert binaire != \"\",\"La cha\u00eene doit \u00eatre non vide\"\n    longueur = len(binaire)\n    resultat = 0\n    for indice in range(longueur):\n        resultat = resultat + int(binaire[indice])*2**(longueur - 1- indice)\n    return resultat\n</code></pre>"},{"location":"T6_5_algos_coeur/6.1_algos_premiere/cours/#moyenne-dune-liste-de-nombres","title":"Moyenne d'une liste de nombres","text":"Moyenne d'une liste de nombres <p>Fonction qui renvoie la moyenne d'une liste de nombres et None si la liste est vide</p> \ud83d\udc0d Script Python<pre><code>def moyenne(liste):\n    \"\"\"renvoie la valeur moyenne d'une liste de nombres et None en cas de liste vide.\n\n    param:\n        liste : list\n    return :\n        float\n\n    exemple :\n\n    &gt;&gt;&gt; moyenne([1,2,4])\n    3.5\n    &gt;&gt;&gt; moyenne([])\n\n    \"\"\"\n    if liste != []:\n        somme = 0\n        for elt in liste:\n            somme = somme +elt\n        return somme/len(liste)\n</code></pre>"},{"location":"T6_5_algos_coeur/6.2_recursivite/cours/","title":"Algos r\u00e9cursif \ud83d\udd02","text":""},{"location":"T6_5_algos_coeur/6.2_recursivite/cours/#factorielle-recursive","title":"Factorielle r\u00e9cursive","text":"Factorielle r\u00e9cursive \ud83d\udc0d Script Python<pre><code>def factorielle(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorielle(n - 1)\n</code></pre>"},{"location":"T6_5_algos_coeur/6.2_recursivite/cours/#pgcd-recursif","title":"PGCD r\u00e9cursif","text":"PGCD r\u00e9cursif \ud83d\udc0d Script Python<pre><code>def pgcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return pgcd(b, a%b)\n</code></pre>"},{"location":"T6_5_algos_coeur/6.2_recursivite/cours/#puissance-recursive-simple","title":"Puissance r\u00e9cursive (simple)","text":"Puissance r\u00e9cursive  \ud83d\udc0d Script Python<pre><code>def puissance(x, n):\n    if n == 0:\n        return 1\n    else:\n        return x * puissance(x, n-1)\n</code></pre>"},{"location":"T6_5_algos_coeur/6.2_recursivite/cours/#puissance-recursive-optimisee","title":"Puissance r\u00e9cursive (optimis\u00e9e)","text":"Puissance r\u00e9cursive \ud83d\udc0d Script Python<pre><code>def puissance(x, n):\n    if n == 0:\n        return 1\n    else:\n        if n % 2 == 0:\n            return puissance(x*x, n//2)\n        else :\n            return x*puissance(x*x, (n-1)//2)\n</code></pre>"},{"location":"T6_5_algos_coeur/6.2_recursivite/cours/#recherche-dichotomique-recursive-avec-slicing","title":"Recherche dichotomique r\u00e9cursive (avec slicing)","text":"<p>Note : le slicing de liste n'est pas au programme de NSI.</p> Recherche dichotomique r\u00e9cursive \ud83d\udc0d Script Python<pre><code>def recherche(lst, m):\n    if len(lst) == 1: \n        if lst[0] == m:\n            return True\n        else :\n            return False\n    else:              \n        mid = len(lst)//2\n        if lst[mid] &gt; m:\n            return recherche(lst[:mid], m)\n        else :\n            return recherche(lst[mid:], m)\n</code></pre>"},{"location":"T6_5_algos_coeur/6.3_Tri/cours/","title":"Algos de tris \u267b\ufe0f","text":""},{"location":"T6_5_algos_coeur/6.3_Tri/cours/#comparaison-des-tris","title":"Comparaison des Tris","text":""},{"location":"T6_5_algos_coeur/6.3_Tri/cours/#tri-par-insertion","title":"Tri par insertion","text":"Tri par insertion <p>Fonction qui prend comme param\u00e8tre une liste et trie cette liste en place (c'est-\u00e0-dire que la liste initiale est modifi\u00e9e) en utilisant l'algorithme de tri par insertion. Plusieurs versions propos\u00e9es .</p> Version1Version 2Version 3 <p>Tri en place, it\u00e9ratif</p> \ud83d\udc0d Script Python<pre><code>def insere(donnees, indice):\n    \"\"\"insere la donnee d'indice indice \u00e0 sa bonne place dans la liste form\u00e9e des\n    \u00e9l\u00e9ments d'indice inf\u00e9rieur ou \u00e9gaux \u00e0 indice.\n    Le d\u00e9but de la liste est sens\u00e9 \u00eatre tri\u00e9.\n    LA MODIFICATION SE FAIT EN PLACE\n\n    param :\n        donnees : list\n        indice : int\n\n    exemple :\n    &gt;&gt;&gt; a = [3, 9, 5, 6, 4, 1]\n    &gt;&gt;&gt; insere(a, 2)\n    &gt;&gt;&gt; a\n    [3, 5, 9, 6, 4, 1]\n\n    \"\"\"\n    while indice&gt;0 and donnees[indice]&lt;donnees[indice-1]:\n        donnees[indice-1], donnees[indice] = donnees[indice], donnees[indice-1]\n        indice = indice -1\n\ndef tri_insertion(donnees):\n    \"\"\"tri la liste donn\u00e9es en place, avec l'algorithme de tri par insertion\n    LE TRI SE FAIT EN PLACE.\n\n    param :\n        donnees : list\n\n    exemple :\n    &gt;&gt;&gt; liste3 = [ \"ruby\", \"python\", \"logo\", \"elan\", \"rust\"]\n    &gt;&gt;&gt; tri_insertion(liste3)\n    &gt;&gt;&gt; liste3\n    ['elan', 'logo', 'python', 'ruby', 'rust']\n\n    \"\"\"\n    for ind in range(len(donnees)):\n        insere(donnees,ind)\n</code></pre> <p>Tri it\u00e9ratif qui renvoie une nouvelle liste</p> \ud83d\udc0d Script Python<pre><code>def insere2(liste, valeur):\n    \"\"\"Ins\u00e8re la valeur dans la liste, suppos\u00e9e tri\u00e9e. la modification est en place\n\n    param :\n        liste : list : liste de nombres\n        valeur : float/int\n        return :\n            list : nouvelle liste avec la valeur ins\u00e9r\u00e9e\n\n    Exemple:\n        &gt;&gt;&gt; liste1 = [3,5.2,6]\n        &gt;&gt;&gt; insere2(liste1, 4)\n        &gt;&gt;&gt; liste1\n        [3, 4, 5.2, 6]\n        \"\"\"\n    liste.append(valeur)\n    indice = len(liste)-1\n    while indice&gt;0 and liste[indice-1] &gt; liste[indice]:\n        liste[indice],liste[indice-1] = liste[indice-1],liste[indice]\n        indice = indice - 1\n\n\ndef tri_insertion2(liste):\n    \"\"\"renvoie une nouvelle liste qui est une version tri\u00e9e de liste\n\n     param :\n            liste : list\n    return :\n            liste\n\n    Exemple :\n        &gt;&gt;&gt; tri_insertion2([8,2,6,5])\n        [2, 5, 6, 8]\n        \"\"\"\n    liste_triee = []\n    for element in liste:\n        insere2(liste_triee, element)\n    return liste_triee\n</code></pre> <p>Tri r\u00e9cursif qui renvoie une nouvelle liste</p> \ud83d\udc0d Script Python<pre><code>def insere3(liste, valeur):\n\"\"\"Ins\u00e8re la valeur dans la liste, suppos\u00e9e tri\u00e9e\n\n    param :\n        liste : list : liste de nombres\n           valeur : float/int\n    return :\n         list : nouvelle liste avec la valeur ins\u00e9r\u00e9e\n\n    Exemple:\n        &gt;&gt;&gt; liste1 = [3,5.2,6]\n        &gt;&gt;&gt; liste2 = insere3(liste1, 4)\n        &gt;&gt;&gt; liste2\n        [3, 4, 5.2, 6]\n\"\"\"\n    if liste == []:\n        return [valeur]\n    elif liste[-1]&gt;valeur:\n        return insere3(liste[:-1],valeur) + [liste[-1]]\n    else:\n        return liste + [valeur]\n\n def tri_recursif_insertion3(liste):\n\"\"\"renvoie une nouvelle liste qui est une version tri\u00e9e de liste. M\u00e9thode r\u00e9cursive.\n\n    param :\n        liste : list\n    return :\n        liste\n\n    Exemple :\n    &gt;&gt;&gt; tri_recursif_insertion3([8,2,6,5])\n        [2, 5, 6, 8]\n \"\"\"\n    if liste == []:\n        return []\n    else:\n        return insere3(tri_recursif_insertion3(liste[:-1]),liste[-1])\n</code></pre>"},{"location":"T6_5_algos_coeur/6.3_Tri/cours/#tri-par-selection","title":"Tri par s\u00e9lection","text":"Tri par s\u00e9lection <p>Fonction qui renvoie la liste tri\u00e9e par ordre croissant.</p> \ud83d\udc0d Script Python<pre><code>def index_min(donnees, indice):\n    \"\"\"retourne l'indice du plus petit \u00e9l\u00e9ment d'une liste, \u00e0 partir d'un indice donn\u00e9\n    Exemple:  \n    &gt;&gt;&gt; index_min([\"curl\", \"bash\", \"python\", \"cilk\", \"nesl\"], 0)\n    1\n    &gt;&gt;&gt; index_min([\"curl\", \"bash\", \"python\", \"cilk\", \"nesl\"], 2)\n    3 \n    \"\"\"\n    pos = indice\n    for i in range(indice, len(donnees)):\n        if donnees[i]&lt;donnees[pos] :\n            pos = i\n    return pos\n\ndef tri_selection(donnees):\n    \"\"\"tri la liste donnees en place, avec l'algorithme de tri par s\u00e9lection\n    &gt;&gt;&gt; liste3 = [ \"ruby\", \"python\", \"logo\", \"elan\", \"rust\"]\n    &gt;&gt;&gt; tri_selection(liste3)\n    &gt;&gt;&gt; liste3\n    ['elan', 'logo', 'python', 'ruby', 'rust'] \n    \"\"\"\n    for i in range(len(donnees)-1):\n        j = index_min(donnees,i)\n        donnees[i], donnees[j] = donnees[j], donnees[i]\n</code></pre>"},{"location":"T6_5_algos_coeur/6.3_Tri/cours/#tri-fusion","title":"Tri fusion","text":"Algorithme de tri fusion (merge sort)  \ud83d\udc0d Script Python<pre><code>def interclassement(lst1, lst2):\n    lst_totale = []\n    n1, n2 = len(lst1), len(lst2)\n    i1, i2 = 0, 0\n    while i1 &lt; n1 and i2 &lt; n2:\n        if lst1[i1] &lt; lst2[i2]:\n            lst_totale.append(lst1[i1])\n            i1 += 1\n        else:\n            lst_totale.append(lst2[i2])\n            i2 += 1\n    return lst_totale + lst1[i1:] + lst2[i2:]\n\ndef tri_fusion(lst):\n    if len(lst) &lt;= 1:\n        return lst\n    else:\n        m = len(lst) // 2\n        return interclassement(tri_fusion(lst[:m]), tri_fusion(lst[m:]))\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/","title":"\u00c9preuve pratique \ud83d\udcbb","text":"<p>Cr\u00e9dit</p> <p>Les pages de synth\u00e8se et de correction ont \u00e9t\u00e9 r\u00e9alis\u00e9es par G. Lassus - acad\u00e9mie de Bordeaux</p> <p>Vous trouverez ci-dessous l'int\u00e9gralit\u00e9 des sujets de l'\u00e9preuve pratique, disponibles publiquement sur la Banque Nationale des Sujets (novembre 2021). </p> <p>Une nouvelle version (qui sera a priori en grande partie semblable \u00e0 celle-ci) sera publi\u00e9e en janvier 2022 sur le site Eduscol.</p> <ul> <li>Pdf de l'int\u00e9gralit\u00e9 des exercices.</li> </ul>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-011","title":"Exercice 01.1 \u25a1","text":"<p>Exercice 01.1</p> \u00c9nonc\u00e9Correction <p>Programmer la fonction <code>recherche</code>, prenant en param\u00e8tre un tableau non vide <code>tab</code> (type <code>list</code>) d'entiers et un entier <code>n</code>, et qui renvoie l'indice de la derni\u00e8re occurrence de l'\u00e9l\u00e9ment cherch\u00e9. Si l'\u00e9l\u00e9ment n'est pas pr\u00e9sent, la fonction renvoie la longueur du tableau.</p> <p>Exemples \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche([5, 3],1)\n2\n&gt;&gt;&gt; recherche([2,4],2)\n0\n&gt;&gt;&gt; recherche([2,3,5,2,4],2)\n3\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(tab, n):\n    indice_solution = len(tab)\n    for i in range(len(tab)):\n        if tab[i] == n:\n            indice_solution = i\n    return indice_solution\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-012","title":"Exercice 01.2 \u25a1","text":"<p>Exercice 01.2</p> \u00c9nonc\u00e9Correction <p>On souhaite programmer une fonction donnant la distance la plus courte entre un point de d\u00e9part et une liste de points. Les points sont tous \u00e0 coordonn\u00e9es enti\u00e8res. Les points sont donn\u00e9s sous la forme d'un tuple de deux entiers. La liste des points \u00e0 traiter est donc un tableau de tuples.</p> <p>On rappelle que la distance entre deux points du plan de coordonn\u00e9es \\((x;y)\\) et \\((x';y')\\) est donn\u00e9e par la formule :</p> \\[d=\\sqrt{(x-x')^2+(y-y')^2}\\] <p>On importe pour cela la fonction racine carr\u00e9e (<code>sqrt</code>) du module <code>math</code> de Python.</p> <p>On dispose d'une fonction <code>distance</code> et d'une fonction <code>plus_courte_distance</code> :</p> <p>\ud83d\udc0d Script Python<pre><code>from math import sqrt     # import de la fonction racine carr\u00e9e\n\ndef distance(point1, point2):\n    \"\"\" Calcule et renvoie la distance entre deux points. \"\"\"\n    return sqrt((...)**2 + (...)**2)\n\nassert distance((1, 0), (5, 3)) == 5.0, \"erreur de calcul\"\n\ndef plus_courte_distance(tab, depart):\n    \"\"\" Renvoie le point du tableau tab se trouvant \u00e0 la plus courte distance du point depart.\"\"\"\n    point = tab[0]\n    min_dist = ...\n    for i in range (1, ...):\n        if distance(tab[i], depart)...:\n            point = ...\n            min_dist = ...\n    return point\n\nassert plus_courte_distance([(7, 9), (2, 5), (5, 2)], (0, 0)) == (2, 5), \"erreur\"\n</code></pre> Recopier sous Python (sans les commentaires) ces deux fonctions puis compl\u00e9ter leur code et ajouter une ou des d\u00e9clarations (<code>assert</code>) \u00e0 la fonction <code>distance</code> permettant de v\u00e9rifier la ou les pr\u00e9conditions.</p> \ud83d\udc0d Script Python<pre><code>from math import sqrt\n\ndef distance(point1, point2):\n    \"\"\" Calcule et renvoie la distance entre deux points. \"\"\"\n    return sqrt((point1[0] - point2[0])**2 + ((point1[1] - point2[1]))**2)\n\nassert distance((1, 0), (5, 3)) == 5.0, \"erreur de calcul\"\n\n\ndef plus_courte_distance(tab, depart):\n    \"\"\" Renvoie le point du tableau tab se trouvant \u00e0 la plus courte distance du point depart.\"\"\"\n    point = tab[0]\n    min_dist = distance(point, depart)\n    for i in range (1, len(tab)):\n        if distance(tab[i], depart) &lt; min_dist:\n            point = tab[i]\n            min_dist = distance(tab[i], depart)\n    return point\n\nassert plus_courte_distance([(7, 9), (2, 5), (5, 2)], (0, 0)) == (2, 5), \"erreur\"\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-021","title":"Exercice 02.1 \u25a1","text":"<p>Exercice 02.1</p> \u00c9nonc\u00e9Correction <p>Programmer la fonction <code>moyenne</code>   prenant en param\u00e8tre un tableau d'entiers <code>tab</code>   (type <code>list</code>) qui renvoie la moyenne de ses \u00e9l\u00e9ments si le tableau est non vide et affiche 'erreur' si le tableau est vide.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; moyenne([5,3,8])\n5.333333333333333\n&gt;&gt;&gt; moyenne([1,2,3,4,5,6,7,8,9,10])\n5.5\n&gt;&gt;&gt; moyenne([])\n'erreur'\n</code></pre></p> <p>L'\u00e9nonc\u00e9 n'est pas tr\u00e8s clair quand il dit \u00abd'afficher 'erreur'\u00bb (ce qui suppose un <code>print</code> et non un <code>return</code>). Nous choississons donc dans ce cas de renvoyer <code>None</code>.</p> \ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    if tab == []:\n        print('erreur')\n        return None\n    else:\n        somme = 0\n        for elt in tab:\n            somme += elt\n        return somme / len(tab)\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-022","title":"Exercice 02.2 \u25a1","text":"<p>Exercice 02.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re un tableau d'entiers <code>tab</code> (type <code>list</code> dont les \u00e9l\u00e9ments sont des <code>0</code> ou des <code>1</code>). On se propose de trier ce tableau selon l'algorithme suivant : \u00e0 chaque \u00e9tape du tri,le tableau est constitu\u00e9 de trois zones cons\u00e9cutives, la premi\u00e8re ne contenant que des <code>0</code>, la seconde n'\u00e9tant pas tri\u00e9e et la derni\u00e8re ne contenant que des <code>1</code>.</p> <p> Zone de 0Zone non tri\u00e9eZone de 1 </p> <p>Tant que la zone non tri\u00e9e n'est pas r\u00e9duite \u00e0 un seul \u00e9l\u00e9ment, on regarde son premier \u00e9l\u00e9ment :</p> <ul> <li>si cet \u00e9l\u00e9ment vaut 0, on consid\u00e8re qu'il appartient d\u00e9sormais \u00e0 la zone ne contenant que des 0 ;</li> <li>si cet \u00e9l\u00e9ment vaut 1, il est \u00e9chang\u00e9 avec le dernier \u00e9l\u00e9ment de la zone non tri\u00e9e et on consid\u00e8re alors qu\u2019il appartient \u00e0 la zone ne contenant que des 1.</li> </ul> <p>Dans tous les cas, la longueur de la zone non tri\u00e9e diminue de 1.</p> <p>Recopier sous Python en la compl\u00e9tant la fonction <code>tri</code> suivante :</p> \ud83d\udc0d Script Python<pre><code>def tri(tab):\n    #i est le premier indice de la zone non triee, j le dernier indice.\n    #Au debut, la zone non triee est le tableau entier.\n    i = ...\n    j = ...\n    while i != j :\n        if tab[i]== 0:\n            i = ...\n        else :\n            valeur = tab[j]\n            tab[j] = ...\n            ...\n            j = ...\n    ...\n</code></pre> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tri([0,1,0,1,0,1,0,1,0])\n[0, 0, 0, 0, 0, 1, 1, 1, 1]       \n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def tri(tab):\n    #i est le premier indice de la zone non triee, j le dernier indice.\n    #Au debut, la zone non triee est le tableau entier.\n    i = 0\n    j = len(tab) - 1\n    while i != j :\n        if tab[i]== 0:\n            i = i + 1\n        else :\n            valeur = tab[j]\n            tab[j] = tab[i]\n            tab[i] = valeur\n            j = j - 1\n    return tab\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-031","title":"Exercice 03.1","text":"<p>Exercice 03.1</p> \u00c9nonc\u00e9Correction <p>Programmer la fonction <code>multiplication</code>, prenant en param\u00e8tres deux nombres entiers <code>n1</code> et <code>n2</code>, et qui renvoie le produit de ces deux nombres. Les seules op\u00e9rations autoris\u00e9es sont l\u2019addition et la soustraction. </p> <p>\u00c9nonc\u00e9 peu clair, on ne sait pas si <code>n1</code> et <code>n2</code> sont entiers naturels ou relatifs. Nous d\u00e9cidons qu'ils sont relatifs et donc qu'ils peuvent \u00eatre n\u00e9gatifs, auquel cas on utilise le fait que \\(5 \\\\times (-6)= - (5 \\\\times 6)\\). \ud83d\udc0d Script Python<pre><code>def multiplication(n1, n2):\n    if n1 &lt; 0:\n        return -multiplication(-n1, n2)\n    if n2 &lt; 0:\n        return -multiplication(n1, -n2)\n    resultat = 0\n    for _ in range(n2):\n        resultat += n1\n    return resultat\n</code></pre></p>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-032","title":"Exercice 03.2 \u25a1","text":"<p>Exercice 03.2</p> \u00c9nonc\u00e9Correction <p>Recopier et compl\u00e9ter sous Python la fonction suivante en respectant la sp\u00e9cification. On ne recopiera pas les commentaires.</p> \ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n    \"\"\"\n    tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = ...\n        if x == tab[m]:\n            return ...\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = ...\n    return ...\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],28)\nTrue\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],27)\nFalse\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n    \"\"\"\n    tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = (debut + fin) // 2\n        if x == tab[m]:\n            return True\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = m - 1\n    return False\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-041","title":"Exercice 04.1","text":"<p>Exercice 04.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction qui prend en param\u00e8tre un tableau d'entiers non vide et qui renvoie la moyenne de ces entiers. La fonction est sp\u00e9cifi\u00e9e ci-apr\u00e8s et doit passer les assertions fournies. \ud83d\udc0d Script Python<pre><code>def moyenne (tab):\n    '''\n    moyenne(list) -&gt; float\n    Entr\u00e9e : un tableau non vide d'entiers\n    Sortie : nombre de type float\n    Correspondant \u00e0 la moyenne des valeurs pr\u00e9sentes dans le\n    tableau\n    '''\n\nassert moyenne([1]) == 1\nassert moyenne([1,2,3,4,5,6,7] == 4\nassert moyenne([1,2]) == 1.5\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    '''\n    moyenne(list) -&gt; float\n    Entr\u00e9e : un tableau non vide d'entiers\n    Sortie : nombre de type float\n    Correspondant \u00e0 la moyenne des valeurs pr\u00e9sentes dans le\n    tableau\n    '''\n    somme = 0\n    for elt in tab:\n        somme += elt\n    return somme / len(tab)\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-042","title":"Exercice 04.2","text":"<p>Exercice 04.2</p> \u00c9nonc\u00e9Correction <p>Le but de l'exercice est de compl\u00e9ter une fonction qui d\u00e9termine si une valeur est pr\u00e9sente dans un tableau de valeurs tri\u00e9es dans l'ordre croissant.</p> <p>L'algorithme traite le cas du tableau vide.</p> <p>L'algorithme est \u00e9crit pour que la recherche dichotomique ne se fasse que dans le cas o\u00f9 la valeur est comprise entre les valeurs extr\u00eames du tableau.</p> <p>On distingue les trois cas qui renvoient <code>False</code> en renvoyant <code>False,1</code> , <code>False,2</code> et <code>False,3</code>.</p> <p>Compl\u00e9ter l'algorithme de dichotomie donn\u00e9 ci-apr\u00e8s.</p> \ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n    \"\"\"\n    tab : tableau tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    # cas du tableau vide\n    if ...:\n        return False,1\n    # cas o\u00f9 x n'est pas compris entre les valeurs extr\u00eames\n    if (x &lt; tab[0]) or ...:\n        return False,2\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = ...\n        if x == tab[m]:\n            return ...\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = ...\n    return ...\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],28)\nTrue\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],27)\n(False, 3)\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],1)\n(False, 2)\n&gt;&gt;&gt; dichotomie([],28)\n(False, 1)\n</code></pre> \ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n    \"\"\"\n    tab : tableau tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    # cas du tableau vide\n    if tab = []:\n        return False,1\n    # cas o\u00f9 x n'est pas compris entre les valeurs extr\u00eames\n    if (x &lt; tab[0]) or (x &gt; tab[-1]):\n        return False,2\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = (debut + fin) // 2\n        if x == tab[m]:\n            return True\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = m - 1\n    return False\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-051","title":"Exercice 05.1","text":"<p>Exercice 05.1</p> \u00c9nonc\u00e9Correction <p>On mod\u00e9lise la repr\u00e9sentation binaire d'un entier non sign\u00e9 par un tableau d'entiers dont les \u00e9l\u00e9ments sont 0 ou 1. Par exemple, le tableau <code>[1, 0, 1, 0, 0, 1, 1]</code> repr\u00e9sente l'\u00e9criture binaire de l'entier dont l'\u00e9criture d\u00e9cimale est <code>2**6 + 2**4 + 2**1 + 2**0 = 83</code>.</p> <p>\u00c0 l'aide d'un parcours s\u00e9quentiel, \u00e9crire la fonction convertir r\u00e9pondant aux sp\u00e9cifications suivantes :</p> <p>\ud83d\udc0d Script Python<pre><code>def convertir(T):\n    \"\"\"\n    T est un tableau d'entiers, dont les \u00e9l\u00e9ments sont 0 ou 1 et\n    repr\u00e9sentant un entier \u00e9crit en binaire. Renvoie l'\u00e9criture\n    d\u00e9cimale de l'entier positif dont la repr\u00e9sentation binaire\n    est donn\u00e9e par le tableau T\n    \"\"\"\n</code></pre> Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; convertir([1, 0, 1, 0, 0, 1, 1])\n83\n&gt;&gt;&gt; convertir([1, 0, 0, 0, 0, 0, 1, 0])\n130\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def convertir(T):\n    puissance = 0\n    total = 0\n    for i in range(len(T)-1, -1, -1):\n        total += T[i]*(2**puissance)\n        puissance += 1\n    return total\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-052","title":"Exercice 05.2","text":"<p>Exercice 05.2</p> \u00c9nonc\u00e9Correction <p>La fonction <code>tri_insertion</code> suivante prend en argument une liste <code>L</code> et trie cette liste en utilisant la m\u00e9thode du tri par insertion. Compl\u00e9ter cette fonction pour qu'elle r\u00e9ponde \u00e0 la sp\u00e9cification demand\u00e9e.</p> \ud83d\udc0d Script Python<pre><code>def tri_insertion(L):\n    n = len(L)\n\n    # cas du tableau vide\n    if ...:\n        return L\n    for j in range(1,n):\n        e = L[j]\n        i = j\n\n    # A l'\u00e9tape j, le sous-tableau L[0,j-1] est tri\u00e9\n    # et on ins\u00e8re L[j] dans ce sous-tableau en d\u00e9terminant\n    # le plus petit i tel que 0 &lt;= i &lt;= j et L[i-1] &gt; L[j].\n\n        while i &gt; 0 and L[i-1] &gt; ...:\n            i = ...\n\n    # si i != j, on d\u00e9cale le sous tableau L[i,j-1] d\u2019un cran\n    # vers la droite et on place L[j] en position i\n\n        if i != j:\n            for k in range(j,i,...):\n                L[k] = L[...]\n            L[i] = ...\n    return L\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tri_insertion([2,5,-1,7,0,28])\n[-1, 0, 2, 5, 7, 28]\n&gt;&gt;&gt; tri_insertion([10,9,8,7,6,5,4,3,2,1,0])\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def tri_insertion(L):\n    n = len(L)\n\n    # cas du tableau vide\n    if L == []:\n        return L\n\n    for j in range(1,n):\n        e = L[j]\n        i = j\n\n    # A l'\u00e9tape j, le sous-tableau L[0,j-1] est tri\u00e9\n    # et on ins\u00e8re L[j] dans ce sous-tableau en d\u00e9terminant\n    # le plus petit i tel que 0 &lt;= i &lt;= j et L[i-1] &gt; L[j].\n\n        while i &gt; 0 and L[i-1] &gt; e:\n            i = i - 1\n\n        # si i != j, on d\u00e9cale le sous tableau L[i,j-1] d\u2019un cran\n    # vers la droite et on place L[j] en position i\n\n        if i != j:\n            for k in range(j,i,-1):\n                L[k] = L[k-1]\n            L[i] = e\n    return L\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-061","title":"Exercice 06.1 \u25a1","text":"<p>Exercice 06.1</p> \u00c9nonc\u00e9Correction <p>On s\u2019int\u00e9resse au probl\u00e8me du rendu de monnaie. On suppose qu\u2019on dispose d\u2019un nombre infini de billets de 5 euros, de pi\u00e8ces de 2 euros et de pi\u00e8ces de 1 euro. Le but est d\u2019\u00e9crire une fonction nomm\u00e9e <code>rendu</code> dont le param\u00e8tre est un entier positif non nul <code>somme_a_rendre</code> et qui retourne une liste de trois entiers <code>n1</code>, <code>n2</code> et <code>n3</code> qui correspondent aux nombres de billets de 5 euros (<code>n1</code>) de pi\u00e8ces de 2 euros (<code>n2</code>) et de pi\u00e8ces de 1 euro (<code>n3</code>) \u00e0 rendre afin que le total rendu soit \u00e9gal \u00e0 <code>somme_a_rendre</code>.</p> <p>On utilisera un algorithme glouton : on commencera par rendre le nombre maximal de billets de 5 euros, puis celui des pi\u00e8ces de 2 euros et enfin celui des pi\u00e8ces de 1 euros.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; rendu(13)\n[2,1,1]\n&gt;&gt;&gt; rendu(64)\n[12,2,0]\n&gt;&gt;&gt; rendu(89)\n[17,2,0]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def rendu(somme_a_rendre):\n    pieces = [5, 2, 1]\n    retour = [0, 0, 0]\n    reste_a_rendre = somme_a_rendre\n    for i in range(3):\n        retour[i] = reste_a_rendre // pieces[i]\n        reste_a_rendre = reste_a_rendre % pieces[i]\n    return retour\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-062","title":"Exercice 06.2 \u25a1","text":"<p>\u00e0 noter une erreur dans la version officielle, sur la m\u00e9thode <code>enfile()</code> </p> <p>Exercice 06.2</p> \u00c9nonc\u00e9Correction <p>On veut \u00e9crire une classe pour g\u00e9rer une file \u00e0 l\u2019aide d\u2019une liste cha\u00een\u00e9e. On dispose d\u2019une classe <code>Maillon</code> permettant la cr\u00e9ation d\u2019un maillon de la cha\u00eene, celui-ci \u00e9tant constitu\u00e9 d\u2019une valeur et d\u2019une r\u00e9f\u00e9rence au maillon suivant de la cha\u00eene :</p> <p>\ud83d\udc0d Script Python<pre><code>class Maillon :\n    def __init__(self,v) :\n        self.valeur = v\n        self.suivant = None\n</code></pre> Compl\u00e9ter la classe <code>File suivante</code> o\u00f9 l\u2019attribut <code>dernier_file</code> contient le maillon correspondant \u00e0 l\u2019\u00e9l\u00e9ment arriv\u00e9 en dernier dans la file :</p> <p>\ud83d\udc0d Script Python<pre><code>class File :\n    def __init__(self) :\n        self.dernier_file = None\n\n    def enfile(self,element) :\n        nouveau_maillon = Maillon(...)\n        nouveau_maillon.suivant = self.dernier_file\n        self.dernier_file = ...\n\n    def est_vide(self) :\n        return self.dernier_file == None\n\n    def affiche(self) :\n        maillon = self.dernier_file\n        while maillon != ... :\n            print(maillon.valeur)\n            maillon = ...\n\n    def defile(self) :\n        if not self.est_vide() :\n            if self.dernier_file.suivant == None :\n                resultat = self.dernier_file.valeur\n                self.dernier_file = None\n                return resultat\n            maillon = ...\n            while maillon.suivant.suivant != None :\n                maillon = maillon.suivant\n            resultat = ...\n            maillon.suivant = None\n            return resultat\n        return None\n</code></pre> On pourra tester le fonctionnement de la classe en utilisant les commandes suivantes dans la console Python : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; F = File()\n&gt;&gt;&gt; F.est_vide()\nTrue\n&gt;&gt;&gt; F.enfile(2)\n&gt;&gt;&gt; F.affiche()\n2\n&gt;&gt;&gt; F.est_vide()\nFalse\n&gt;&gt;&gt; F.enfile(5)\n&gt;&gt;&gt; F.enfile(7)\n&gt;&gt;&gt; F.affiche()\n7\n5\n2\n&gt;&gt;&gt; F.defile()\n2\n&gt;&gt;&gt; F.defile()\n5\n&gt;&gt;&gt; F.affiche()\n7\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>class Maillon :\n    def __init__(self,v) :\n        self.valeur = v\n        self.suivant = None\n\nclass File :\n    def __init__(self) :\n        self.dernier_file = None\n\n    def enfile(self,element) :\n        nouveau_maillon = Maillon(element)\n        nouveau_maillon.suivant =  self.dernier_file\n        self.dernier_file = nouveau_maillon\n\n    def est_vide(self) :\n        return self.dernier_file == None\n\n    def affiche(self) :\n        maillon = self.dernier_file\n        while maillon != None :\n            print(maillon.valeur)\n            maillon = maillon.suivant\n\n    def defile(self) :\n        if not self.est_vide() :\n            if self.dernier_file.suivant == None :\n                resultat = self.dernier_file.valeur\n                self.dernier_file = None\n                return resultat\n            maillon = self.dernier_file\n            while maillon.suivant.suivant != None :\n                maillon = maillon.suivant\n            resultat = maillon.suivant.valeur\n            maillon.suivant = None\n            return resultat\n        return None\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-071","title":"Exercice 07.1 \ud83d\uddf9","text":"<p>Exercice 07.1</p> \u00c9nonc\u00e9Correction <p>On s\u2019int\u00e9resse \u00e0 la suite d\u2019entiers d\u00e9finie par <code>U1 = 1</code>, <code>U2 = 1</code> et, pour tout entier naturel <code>n</code>, par <code>Un+2 = Un+1 + Un</code>.</p> <p>Elle s\u2019appelle la suite de Fibonacci.</p> <p>\u00c9crire la fonction <code>fibonacci</code> qui prend un entier <code>n &gt; 0</code> et qui renvoie l\u2019\u00e9l\u00e9ment d\u2019indice <code>n</code> de cette suite.</p> <p>On utilisera une programmation dynamique (pas de r\u00e9cursivit\u00e9).</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; fibonacci(1)\n1\n&gt;&gt;&gt; fibonacci(2)\n1\n&gt;&gt;&gt; fibonacci(25)\n75025\n&gt;&gt;&gt; fibonacci(45)\n1134903170\n</code></pre> <p>On utilise un dictionnaire pour stocker au fur et \u00e0 mesure les valeurs. \ud83d\udc0d Script Python<pre><code>def fibonnaci(n):\n    d = {}\n    d[1] = 1\n    d[2] = 1\n    for k in range(3, n+1):\n        d[k] = d[k-1] + d[k-2]\n    return d[n]\n</code></pre></p>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-072","title":"Exercice 07.2 \u25a1","text":"<p>Exercice 07.2</p> \u00c9nonc\u00e9Correction <p>Les variables <code>liste_eleves</code> et <code>liste_notes</code> ayant \u00e9t\u00e9 pr\u00e9alablement d\u00e9finies et \u00e9tant de m\u00eame longueur, la fonction <code>meilleures_notes</code> renvoie la note maximale qui a \u00e9t\u00e9 attribu\u00e9e, le nombre d\u2019\u00e9l\u00e8ves ayant obtenu cette note et la liste des noms de ces \u00e9l\u00e8ves.</p> <p>Compl\u00e9ter le code Python de la fonction <code>meilleures_notes</code> ci-dessous.</p> \ud83d\udc0d Script Python<pre><code>liste_eleves = ['a','b','c','d','e','f','g','h','i','j']\nliste_notes = [1, 40, 80, 60, 58, 80, 75, 80, 60, 24]\n\ndef meilleures_notes():\n    note_maxi = 0\n    nb_eleves_note_maxi = ...\n    liste_maxi = ...\n\n    for compteur in range(...):\n        if liste_notes[compteur] == ...:\n            nb_eleves_note_maxi = nb_eleves_note_maxi + 1\n            liste_maxi.append(liste_eleves[...])\n        if liste_notes[compteur] &gt; note_maxi:\n            note_maxi = liste_notes[compteur]\n            nb_eleves_note_maxi = ...\n            liste_maxi = [...]\n\n    return (note_maxi,nb_eleves_note_maxi,liste_maxi)\n</code></pre> <p>Une fois compl\u00e9t\u00e9, le code ci-dessus donne</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; meilleures_notes()\n(80, 3, ['c', 'f', 'h'])\n</code></pre> \ud83d\udc0d Script Python<pre><code>liste_eleves = ['a','b','c','d','e','f','g','h','i','j']\nliste_notes = [1, 40, 80, 60, 58, 80, 75, 80, 60, 24]\n\ndef meilleures_notes():\n    note_maxi = 0\n    nb_eleves_note_maxi = 0\n    liste_maxi = []\n\n    for compteur in range(len(liste_eleves)):\n        if liste_notes[compteur] == note_maxi:\n            nb_eleves_note_maxi = nb_eleves_note_maxi + 1\n            liste_maxi.append(liste_eleves[compteur])\n        if liste_notes[compteur] &gt; note_maxi:\n            note_maxi = liste_notes[compteur]\n            nb_eleves_note_maxi = 1\n            liste_maxi = [liste_eleves[compteur]]\n\n    return (note_maxi,nb_eleves_note_maxi,liste_maxi)\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-081","title":"Exercice 08.1 \ud83d\uddf9","text":"<p>Exercice 08.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>caractere</code>, un caract\u00e8re, et <code>mot</code>, une cha\u00eene de caract\u00e8res, et qui renvoie le nombre d\u2019occurrences de <code>caractere</code> dans <code>mot</code>, c\u2019est-\u00e0-dire le nombre de fois o\u00f9 <code>caractere</code> appara\u00eet dans <code>mot</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche('e', \"sciences\")\n2\n&gt;&gt;&gt; recherche('i',\"mississippi\")\n4\n&gt;&gt;&gt; recherche('a',\"mississippi\")\n0\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(caractere, mot):\n    somme = 0\n    for lettre in mot:\n        if lettre == caractere:\n            somme += 1\n    return somme\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-082","title":"Exercice 08.2 \u25a1","text":"<p>Exercice 08.2</p> \u00c9nonc\u00e9Correction <p>On s\u2019int\u00e9resse \u00e0 un algorithme r\u00e9cursif qui permet de rendre la monnaie \u00e0 partir d\u2019une liste donn\u00e9e de valeurs de pi\u00e8ces et de billets - le syst\u00e8me mon\u00e9taire est donn\u00e9 sous forme d\u2019une liste <code>pieces=[100, 50, 20, 10, 5, 2, 1]</code> - (on supposera qu\u2019il n\u2019y a pas de limitation quant \u00e0 leur nombre), on cherche \u00e0 donner la liste de pi\u00e8ces \u00e0 rendre pour une somme donn\u00e9e en argument. Compl\u00e9ter le code Python ci-dessous de la fonction <code>rendu_glouton</code> qui impl\u00e9mente cet algorithme et renvoie la liste des pi\u00e8ces \u00e0 rendre.</p> <p>\ud83d\udc0d Script Python<pre><code>pieces = [100,50,20,10,5,2,1]\n\ndef rendu_glouton(arendre, solution=[], i=0):\n    if arendre == 0:\n        return ...\n    p = pieces[i]\n    if p &lt;= ... :\n        solution.append(...)\n        return rendu_glouton(arendre - p, solution,i)\n    else :\n        return rendu_glouton(arendre, solution, ...)\n</code></pre> On devra obtenir :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt;rendu_glouton(68,[],0)\n[50, 10, 5, 2, 1]\n&gt;&gt;&gt;rendu_glouton(291,[],0)\n[100, 100, 50, 20, 20, 1]\n</code></pre> \ud83d\udc0d Script Python<pre><code>pieces = [100,50,20,10,5,2,1]\n\ndef rendu_glouton(arendre, solution=[], i=0):\n    if arendre == 0:\n        return solution\n    p = pieces[i]\n    if p &lt;= arendre :\n        solution.append(p)\n        return rendu_glouton(arendre - p, solution,i)\n    else :\n        return rendu_glouton(arendre, solution, i+1)\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-091","title":"Exercice 09.1 \u25a1","text":"<p>Exercice 09.1</p> \u00c9nonc\u00e9Correction <p>Soit le couple (<code>note</code>,<code>coefficient</code>):</p> <ul> <li><code>note</code> est un nombre de type flottant (<code>float</code>) compris entre 0 et 20 ;</li> <li><code>coefficient</code> est un nombre entier positif.</li> </ul> <p>Les r\u00e9sultats aux \u00e9valuations d'un \u00e9l\u00e8ve sont regroup\u00e9s dans une liste compos\u00e9e de couples (<code>note</code>,<code>coefficient</code>).</p> <p>\u00c9crire une fonction moyenne qui renvoie la moyenne pond\u00e9r\u00e9e de cette liste donn\u00e9e en param\u00e8tre.</p> <p>Par exemple, l\u2019expression <code>moyenne([(15,2),(9,1),(12,3)])</code> devra renvoyer le r\u00e9sultat du calcul suivant :</p> <p>\\(\\dfrac{2 \\times 15 + 1 \\times 9 + 3 \\times 12 }{2+1+3}=12,5\\)</p> \ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    somme_notes = 0\n    somme_coeffs = 0\n    for devoir in tab:\n        note = devoir[0]\n        coeff = devoir[1]\n        somme_notes += note * coeff\n        somme_coeffs += coeff\n    return somme_notes / somme_coeffs\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-092","title":"Exercice 09.2 \u25a1","text":"<p>Exercice 09.2</p> \u00c9nonc\u00e9Correction <p>On cherche \u00e0 d\u00e9terminer les valeurs du triangle de Pascal. Dans ce tableau de forme triangulaire, chaque ligne commence et se termine par le nombre 1. Par ailleurs, la valeur qui occupe une case situ\u00e9e \u00e0 l\u2019int\u00e9rieur du tableau s\u2019obtient en ajoutant les valeurs des deux cases situ\u00e9es juste au-dessus, comme l\u2019indique la figure suivante :</p> <p></p> <p>Compl\u00e9ter la fonction <code>pascal</code> ci-apr\u00e8s. Elle doit renvoyer une liste correspondant au triangle de Pascal de la ligne <code>1</code> \u00e0 la ligne <code>n</code> o\u00f9 <code>n</code> est un nombre entier sup\u00e9rieur ou \u00e9gal \u00e0 <code>2</code> (le tableau sera contenu dans la variable <code>C</code>). La variable <code>Ck</code> doit, quant \u00e0 elle, contenir, \u00e0 l\u2019\u00e9tape num\u00e9ro <code>k</code>, la <code>k</code>-i\u00e8me ligne du tableau.</p> \ud83d\udc0d Script Python<pre><code>def pascal(n):\n    C= [[1]]\n    for k in range(1,...):\n        Ck = [...]\n        for i in range(1,k):\n            Ck.append(C[...][i-1]+C[...][...] )\n        Ck.append(...)\n        C.append(Ck)\n    return C\n</code></pre> <p>Pour <code>n = 4</code>, voici ce qu'on devra obtenir : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; pascal(4)\n[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n</code></pre> Pour <code>n = 5</code>, voici ce qu'on devra obtenir : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; pascal(5)\n[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1]]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def pascal(n):\n    C = [[1]]\n    for k in range(1,n+1):\n        Ck = [1]\n        for i in range(1,k):\n            Ck.append(C[k-1][i-1]+C[k-1][i] )\n        Ck.append(1)\n        C.append(Ck)\n    return C\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-101","title":"Exercice 10.1 \ud83d\uddf9","text":"<p>Exercice 10.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>maxi</code> qui prend en param\u00e8tre une liste <code>tab</code> de nombres entiers et renvoie un couple donnant le plus grand \u00e9l\u00e9ment de cette liste, ainsi que l\u2019indice de la premi\u00e8re apparition de ce maximum dans la liste.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; maxi([1,5,6,9,1,2,3,7,9,8])\n(9,3)\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def maxi(tab):\n    val_max = tab[0]\n    pos_max = 0\n    for i in range(len(tab)):\n        if tab[i] &gt; val_max:\n            val_max = tab[i]\n            pos_max = i\n    return (val_max, pos_max)\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-102","title":"Exercice 10.2 \ud83d\uddf9","text":"<p>Exercice 10.2</p> \u00c9nonc\u00e9Correction <p>Cet exercice utilise des piles qui seront repr\u00e9sent\u00e9es en Python par des listes (type <code>list</code>).</p> <p>On rappelle que l\u2019expression <code>T1 = list(T)</code> fait une copie de <code>T</code>ind\u00e9pendante de <code>T</code>, que l\u2019expression <code>x = T.pop()</code> enl\u00e8ve le sommet de la pile <code>T</code> et le place dans la variable <code>x</code> et, enfin, que l\u2019expression <code>T.append(v)</code> place la valeur <code>v</code> au sommet de la pile <code>T</code>.</p> <p>Compl\u00e9ter le code Python de la fonction <code>positif</code> ci-dessous qui prend une pile <code>T</code> de nombres entiers en param\u00e8tre et qui renvoie la pile des entiers positifs dans le m\u00eame ordre, sans modifier la variable <code>T</code>.</p> \ud83d\udc0d Script Python<pre><code>def positif(T):\n    T2 = ...(T)\n    T3 = ...\n    while T2 != []:\n        x = ...\n        if ... &gt;= 0:\n            T3.append(...)\n    T2 = []\n    while T3 != ...:\n        x = T3.pop()\n        ...\n    print('T = ',T)\n    return T2\n</code></pre> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; positif([-1,0,5,-3,4,-6,10,9,-8 ])\nT = [-1, 0, 5, -3, 4, -6, 10, 9, -8]\n[0, 5, 4, 10, 9]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def positif(T):\n    T2 = list(T)\n    T3 = []\n    while T2 != []:\n        x = T2.pop()\n        if x &gt;= 0:\n            T3.append(x)\n    T2 = [] # &lt;- NB : cette ligne est inutile\n    while T3 != []:\n        x = T3.pop()\n        T2.append(x)\n    print('T = ',T)\n    return T2\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-111","title":"Exercice 11.1 \u25a1","text":"<p>Exercice 11.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>conv_bin</code> qui prend en param\u00e8tre un entier positif <code>n</code> et renvoie un couple (<code>b,bit)</code> o\u00f9 :</p> <ul> <li><code>b</code> est une liste d'entiers correspondant \u00e0 la repr\u00e9sentation binaire de <code>n</code>;</li> <li><code>bit</code> correspond aux nombre de bits qui constituent <code>b</code>.</li> </ul> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; conv_bin(9)\n([1,0,0,1],4)\n</code></pre></p> <p>Aide :</p> <ul> <li>l'op\u00e9rateur <code>//</code> donne le quotient de la division euclidienne : <code>5//2</code> donne <code>2</code> ;</li> <li>l'op\u00e9rateur <code>%</code> donne le reste de la division euclidienne :<code>5%2</code> donne <code>1</code> ;</li> <li><code>append</code> est une m\u00e9thode qui ajoute un \u00e9l\u00e9ment \u00e0 une liste existante : Soit <code>T=[5,2,4]</code>, alors <code>T.append(10)</code> ajoute <code>10</code> \u00e0 la liste <code>T</code>. Ainsi, <code>T</code> devient <code>[5,2,4,10]</code>.</li> <li><code>reverse</code> est une m\u00e9thode qui renverse les \u00e9l\u00e9ments d'une liste. Soit <code>T=[5,2,4,10]</code>. Apr\u00e8s <code>T.reverse()</code>, la liste devient <code>[10,4,2,5]</code>.</li> </ul> <p>On remarquera qu\u2019on r\u00e9cup\u00e8re la repr\u00e9sentation binaire d\u2019un entier <code>n</code> en partant de la gauche en appliquant successivement les instructions :</p> <p><code>b = n%2</code></p> <p><code>n = n//2</code></p> <p>r\u00e9p\u00e9t\u00e9es autant que n\u00e9cessaire.</p> \ud83d\udc0d Script Python<pre><code>def conv_bin(n):\n    b = []\n    bits = 0\n    while n != 0:\n        b.append(n % 2)\n        bits += 1\n        n = n // 2\n    b.reverse()\n    return (b, bits)\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-112","title":"Exercice 11.2 \u25a1","text":"<p>Exercice 11.2</p> \u00c9nonc\u00e9Correction <p>La fonction <code>tri_bulles</code> prend en param\u00e8tre une liste <code>T</code> d\u2019entiers non tri\u00e9s et renvoie la liste tri\u00e9e par ordre croissant. Compl\u00e9ter le code Python ci-dessous qui impl\u00e9mente la fonction <code>tri_bulles</code>.</p> <p>\ud83d\udc0d Script Python<pre><code>def tri_bulles(T):\n    n = len(T)\n    for i in range(...,...,-1):\n        for j in range(i):\n            if T[j] &gt; T[...]:\n                ... = T[j]\n                T[j] = T[...]\n                T[j+1] = temp\n    return T\n</code></pre> \u00c9crire une autre version de l\u2019algorithme avec</p> <p>\ud83d\udc0d Script Python<pre><code>for i in range(n-1):\n</code></pre> en lieu et place de la troisi\u00e8me ligne du code pr\u00e9c\u00e9dent.</p> \ud83d\udc0d Script Python<pre><code>def tri_bulles(T):\n    n = len(T)\n    for i in range(n-1,0,-1):\n        for j in range(i):\n            if T[j] &gt; T[j+1]:\n                temp = T[j]\n                T[j] = T[j+1]\n                T[j+1] = temp\n    return T\n\n#version 2\n\ndef tri_bulles(T):\n    n = len(T)\n    for i in range(n-1):\n        for j in range(n-1,i,-1):\n            if T[j] &lt; T[j-1]:\n                temp = T[j]\n                T[j] = T[j-1]\n                T[j-1] = temp\n    return T\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-121","title":"Exercice 12.1 \u25a1","text":"<p>Ce sujet est le m\u00eame que le 10.1...  \u00af\\_(\u30c4)_/\u00af</p> <p>Exercice 12.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>maxi</code> qui prend en param\u00e8tre une liste <code>tab</code> de nombres entiers et renvoie un couple donnant le plus grand \u00e9l\u00e9ment de cette liste, ainsi que l\u2019indice de la premi\u00e8re apparition de ce maximum dans la liste.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; maxi([1,5,6,9,1,2,3,7,9,8])\n(9,3)\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def maxi(tab):\n    val_max = tab[0]\n    pos_max = 0\n    for i in range(len(tab)):\n        if tab[i] &gt; val_max:\n            val_max = tab[i]\n            pos_max = i\n    return (val_max, pos_max)\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-122","title":"Exercice 12.2 \ud83d\uddf9","text":"<p>Exercice 12.2</p> \u00c9nonc\u00e9Correction <p>La fonction <code>recherche</code> prend en param\u00e8tres deux chaines de caract\u00e8res <code>gene</code> et <code>seq_adn</code> et renvoie <code>True</code> si on retrouve <code>gene</code> dans <code>seq_adn</code> et <code>False</code> sinon. Compl\u00e9ter le code Python ci-dessous pour qu\u2019il impl\u00e9mente la fonction <code>recherche</code>.</p> \ud83d\udc0d Script Python<pre><code>def recherche(gene, seq_adn):\n    n = len(seq_adn)\n    g = len(gene)\n    i = ...\n    trouve = False\n    while i &lt; ... and trouve == ... :\n        j = 0\n        while j &lt; g and gene[j] == seq_adn[i+j]:\n            ...\n        if j == g:\n            trouve = True\n        ...\n    return trouve\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(\"AATC\", \"GTACAAATCTTGCC\")\nTrue\n&gt;&gt;&gt; recherche(\"AGTC\", \"GTACAAATCTTGCC\")\nFalse\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(gene, seq_adn):\n    n = len(seq_adn)\n    g = len(gene)\n    i = 0\n    trouve = False\n    while i &lt; n-g and trouve == False :\n        j = 0\n        while j &lt; g and gene[j] == seq_adn[i+j]:\n            j += 1\n        if j == g:\n            trouve = True\n        i += 1\n    return trouve\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-131","title":"Exercice 13.1 \u25a1","text":"<p>Exercice 13.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>tri_selection</code> qui prend en param\u00e8tre une liste <code>tab</code> de nombres entiers et qui renvoie le tableau tri\u00e9 par ordre croissant.</p> <p>On utilisera l\u2019algorithme suivant :</p> <ul> <li>on recherche le plus petit \u00e9l\u00e9ment du tableau, et on l'\u00e9change avec l'\u00e9l\u00e9ment d'indice 0 ;</li> <li>on recherche le second plus petit \u00e9l\u00e9ment du tableau, et on l'\u00e9change avec l'\u00e9l\u00e9ment d'indice 1 ;</li> <li>on continue de cette fa\u00e7on jusqu'\u00e0 ce que le tableau soit enti\u00e8rement tri\u00e9.</li> </ul> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tri_selection([1,52,6,-9,12])\n[-9, 1, 6, 12, 52]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def tri_selection(tab):\n    for i in range(len(tab)-1):\n        indice_min = i\n        for j in range(i+1, len(tab)):\n            if tab[j] &lt; tab[indice_min]:\n                indice_min = j\n        tab[i], tab[indice_min] = tab[indice_min], tab[i]\n    return tab\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-132","title":"Exercice 13.2 \u25a1","text":"<p>Exercice 13.2</p> \u00c9nonc\u00e9Correction <p>Le jeu du \u00ab plus ou moins \u00bb consiste \u00e0 deviner un nombre entier choisi entre 1 et 99. Un \u00e9l\u00e8ve de NSI d\u00e9cide de le coder en langage Python de la mani\u00e8re suivante :</p> <ul> <li>le programme g\u00e9n\u00e8re un nombre entier al\u00e9atoire compris entre 1 et 99 ;</li> <li>si la proposition de l\u2019utilisateur est plus petite que le nombre cherch\u00e9, l\u2019utilisateur en est averti. Il peut alors en tester un autre ;</li> <li>si la proposition de l\u2019utilisateur est plus grande que le nombre cherch\u00e9, l\u2019utilisateur en est averti. Il peut alors en tester un autre ;</li> <li>si l\u2019utilisateur trouve le bon nombre en 10 essais ou moins, il gagne ;</li> <li>si l\u2019utilisateur a fait plus de 10 essais sans trouver le bon nombre, il perd.</li> </ul> <p>La fonction <code>randint</code> est utilis\u00e9e. Si a et b sont des entiers, <code>randint(a,b)</code> renvoie un nombre entier compris entre <code>a</code> et <code>b</code>. Compl\u00e9ter le code ci-dessous et le tester :</p> \ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef plus_ou_moins():\n    nb_mystere = randint(1,...)\n    nb_test = int(input(\"Proposez un nombre entre 1 et 99 : \"))\n    compteur = ...\n\n    while nb_mystere != ... and compteur &lt; ... :\n        compteur = compteur + ...\n        if nb_mystere ... nb_test:\n            nb_test = int(input(\"Trop petit ! Testez encore : \"))\n        else:\n            nb_test = int(input(\"Trop grand ! Testez encore : \"))\n\n    if nb_mystere == nb_test:\n        print (\"Bravo ! Le nombre \u00e9tait \",...)\n        print(\"Nombre d'essais: \",...)\n    else:\n        print (\"Perdu ! Le nombre \u00e9tait \",...)\n</code></pre> \ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef plus_ou_moins():\n    nb_mystere = randint(1,100)\n    nb_test = int(input('Proposez un nombre entre 1 et 99 : '))\n    compteur = 0\n\n    while nb_mystere != nb_test and compteur &lt; 10 :\n        compteur = compteur + 1\n        if nb_mystere &gt; nb_test:\n            nb_test = int(input('Trop petit ! Testez encore : '))\n        else:\n            nb_test = int(input('Trop grand ! Testez encore : '))\n\n    if nb_mystere == nb_test:\n        print ('Bravo ! Le nombre \u00e9tait ', nb_mystere)\n        print('Nombre d essais: ', compteur)\n    else:\n        print ('Perdu ! Le nombre \u00e9tait ', nb_mystere)\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-141","title":"Exercice 14.1 \u25a1","text":"<p>Exercice 14.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>elt</code> un nombre et <code>tab</code> un tableau de nombres, et qui renvoie le tableau des indices de <code>elt</code> dans <code>tab</code> si <code>elt</code> est dans <code>tab</code> et le tableau vide <code>[]</code> sinon.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(3, [3, 2, 1, 3, 2, 1])\n[0, 3]\n&gt;&gt;&gt; recherche(4, [1, 2, 3])\n[]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(elt, tab):\n    tab_indices = []\n    for i in range(len(tab)):\n        if tab[i] == elt:\n            tab_indices.append(i)\n    return tab_indices        \n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-142","title":"Exercice 14.2 \u25a1","text":"<p>Exercice 14.2</p> \u00c9nonc\u00e9Correction <p>Un professeur de NSI d\u00e9cide de g\u00e9rer les r\u00e9sultats de sa classe sous la forme d\u2019un dictionnaire :</p> <ul> <li>les clefs sont les noms des \u00e9l\u00e8ves ;</li> <li>les valeurs sont des dictionnaires dont les clefs sont les types d\u2019\u00e9preuves et les valeurs sont les notes obtenues associ\u00e9es \u00e0 leurs coefficients.</li> </ul> <p>Avec :</p> \ud83d\udc0d Script Python<pre><code>resultats = {'Dupont':{ 'DS1' : [15.5, 4],\n                        'DM1' : [14.5, 1],\n                        'DS2' : [13, 4],\n                        'PROJET1' : [16, 3],\n                        'DS3' : [14, 4]},\n            'Durand':{  'DS1' : [6 , 4],\n                        'DM1' : [14.5, 1],\n                        'DS2' : [8, 4],\n                        'PROJET1' : [9, 3],\n                        'IE1' : [7, 2],\n                        'DS3' : [8, 4],\n                        'DS4' :[15, 4]}}\n</code></pre> <p>L\u2019\u00e9l\u00e8ve dont le nom est Durand a ainsi obtenu au DS2 la note de 8 avec un coefficient 4. Le professeur cr\u00e9e une fonction <code>moyenne</code> qui prend en param\u00e8tre le nom d\u2019un de ces \u00e9l\u00e8ves et lui renvoie sa moyenne arrondie au dixi\u00e8me.</p> <p>Compl\u00e9ter le code du professeur ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def moyenne(nom):\n    if nom in ...:\n        notes = resultats[nom]\n        total_points = ...\n        total_coefficients = ...\n        for ... in notes.values():\n            note , coefficient = valeurs\n            total_points = total_points + ... * coefficient\n            total_coefficients = ... + coefficient\n        return round( ... / total_coefficients , 1 )\n    else:\n        return -1\n</code></pre> \ud83d\udc0d Script Python<pre><code>resultats = {'Dupont':{ 'DS1' : [15.5, 4],\n                        'DM1' : [14.5, 1],\n                        'DS2' : [13, 4],\n                        'PROJET1' : [16, 3],\n                        'DS3' : [14, 4]},\n            'Durand':{  'DS1' : [6 , 4],\n                        'DM1' : [14.5, 1],\n                        'DS2' : [8, 4],\n                        'PROJET1' : [9, 3],\n                        'IE1' : [7, 2],\n                        'DS3' : [8, 4],\n                        'DS4' :[15, 4]}}\n\ndef moyenne(nom):\n    if nom in resultats:\n        notes = resultats[nom]\n        total_points = 0\n        total_coefficients = 0\n        for valeurs in notes.values():\n            note , coefficient = valeurs\n            total_points = total_points + note * coefficient\n            total_coefficients = total_coefficients + coefficient\n        return round( total_points / total_coefficients , 1 )\n    else:\n        return -1\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-151","title":"Exercice 15.1 \u25a1","text":"<p>Exercice 15.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>rechercheMinMax</code> qui prend en param\u00e8tre un tableau de nombres non tri\u00e9s <code>tab</code>, et qui renvoie la plus petite et la plus grande valeur du tableau sous la forme d\u2019un dictionnaire \u00e0 deux cl\u00e9s \u2018min\u2019 et \u2018max\u2019. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tableau = [0, 1, 4, 2, -2, 9, 3, 1, 7, 1]\n&gt;&gt;&gt; resultat = rechercheMinMax(tableau)\n&gt;&gt;&gt; resultat\n{'min': -2, 'max': 9}\n&gt;&gt;&gt; tableau = []\n&gt;&gt;&gt; resultat = rechercheMinMax(tableau)\n&gt;&gt;&gt; resultat\n{'min': None, 'max': None}\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def rechercheMinMax(tab):\n    if tab == []:\n        return {'min': None, 'max': None}\n    d = {}\n    d['min'] = None\n    d['max'] = None\n    for val in tab:\n        if val &lt; d['min']:\n            d['min'] = val\n        if val &gt; d['max']:\n            d['max'] = val\n    return d\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-152","title":"Exercice 15.2 \u25a1","text":"<p>Exercice 15.2</p> \u00c9nonc\u00e9Correction <p>On dispose d\u2019un programme permettant de cr\u00e9er un objet de type <code>PaquetDeCarte</code>, selon les \u00e9l\u00e9ments indiqu\u00e9s dans le code ci-dessous. Compl\u00e9ter ce code aux endroits indiqu\u00e9s par <code>#A compl\u00e9ter</code>, puis ajouter des assertions dans l\u2019initialiseur de <code>Carte</code>, ainsi que dans la m\u00e9thode <code>getCarteAt()</code>.</p> <p>\ud83d\udc0d Script Python<pre><code>class Carte:\n    \"\"\"Initialise Couleur (entre 1 \u00e0 4), et Valeur (entre 1 \u00e0 13)\"\"\"\n    def __init__(self, c, v):\n        self.Couleur = c\n        self.Valeur = v\n\n    \"\"\"Renvoie le nom de la Carte As, 2, ... 10, Valet, Dame, Roi\"\"\"\n    def getNom(self):\n        if (self.Valeur &gt; 1 and self.Valeur &lt; 11):\n            return str(self.Valeur)\n        elif self.Valeur == 11:\n            return \"Valet\"\n        elif self.Valeur == 12:\n            return \"Dame\"\n        elif self.Valeur == 13:\n            return \"Roi\"\n        else:\n            return \"As\"\n\n    \"\"\"Renvoie la couleur de la Carte (parmi pique, coeur, carreau, trefle\"\"\"\n    def getCouleur(self):\n        return ['pique', 'coeur', 'carreau', 'trefle'][self.Couleur - 1]\n\nclass PaquetDeCarte:\n    def __init__(self):\n        self.contenu = []\n\n    \"\"\"Remplit le paquet de cartes\"\"\"\n    def remplir(self):\n        #A compl\u00e9ter\n\n    \"\"\"Renvoie la Carte qui se trouve \u00e0 la position donn\u00e9e\"\"\"\n    def getCarteAt(self, pos):\n        #A compl\u00e9ter\n</code></pre> Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; unPaquet = PaquetDeCarte()\n&gt;&gt;&gt; unPaquet.remplir()\n&gt;&gt;&gt; uneCarte = unPaquet.getCarteAt(20)\n&gt;&gt;&gt; print(uneCarte.getNom() + \" de \" + uneCarte.getCouleur())\n</code></pre> <p>Attention, le code propos\u00e9 ne respecte pas les standards de notation :</p> <ul> <li>il ne faut pas de majuscules sur les noms des attributs</li> <li>la docstring se place \u00e0 l'int\u00e9rieur de la fonction et non au dessus.</li> </ul> \ud83d\udc0d Script Python<pre><code>class Carte:\n    \"\"\"Initialise Couleur (entre 1 \u00e0 4), et Valeur (entre 1 \u00e0 13)\"\"\"\n    def __init__(self, c, v):\n        assert c in range(1,5)\n        assert v in range(1,14)\n        self.Couleur = c\n        self.Valeur = v\n\n    \"\"\"Renvoie le nom de la Carte As, 2, ... 10, Valet, Dame, Roi\"\"\"\n    def getNom(self):\n        if (self.Valeur &gt; 1 and self.Valeur &lt; 11):\n            return str( self.Valeur)\n        elif self.Valeur == 11:\n            return \"Valet\"\n        elif self.Valeur == 12:\n            return \"Dame\"\n        elif self.Valeur == 13:\n            return \"Roi\"\n        else:\n            return \"As\"\n\n    \"\"\"Renvoie la couleur de la Carte (parmi pique, coeur, carreau, trefle\"\"\"\n    def getCouleur(self):\n        return ['pique', 'coeur', 'carreau', 'trefle'][self.Couleur]\n\nclass PaquetDeCarte:\n    def __init__(self):\n        self.contenu = []\n\n    \"\"\"Remplit le paquet de cartes\"\"\"\n    def remplir(self):\n        for nb_coul in range(1,5):\n            for val in range(1,14):\n                self.contenu.append(Carte(nb_coul, val))\n\n    \"\"\"Renvoie la Carte qui se trouve \u00e0 la position donn\u00e9e\"\"\"\n    def getCarteAt(self, pos):\n        assert pos in range(56)\n        return self.contenu[pos]\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-161","title":"Exercice 16.1 \u25a1","text":"<p>Exercice 16.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>moyenne</code> qui prend en param\u00e8tre un tableau non vide de nombres flottants et qui renvoie la moyenne des valeurs du tableau. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; moyenne([1.0])\n1.0\n&gt;&gt;&gt; moyenne([1.0, 2.0, 4.0])\n2.3333333333333335\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    somme = 0\n    for val in tab:\n        somme += val\n    return somme / len(tab)\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-162","title":"Exercice 16.2 \u25a1","text":"<p>Exercice 16.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re la fonction <code>dec_to_bin</code> ci-dessous qui prend en param\u00e8tre un entier positif <code>a</code> en \u00e9criture d\u00e9cimale et qui renvoie son \u00e9criture binaire sous la forme d'une chaine de caract\u00e8res.</p> <p>\ud83d\udc0d Script Python<pre><code>def dec_to_bin(a):\n    bin_a = ...\n    a = a//2\n    while a ... :\n        bin_a = ... + bin_a\n        a = ...\n    return bin_a\n</code></pre> Compl\u00e9ter la fonction <code>dec_to_bin</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dec_to_bin(83)\n'1010011'\n&gt;&gt;&gt; dec_to_bin(127)\n'1111111'\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def dec_to_bin(a):\n    bin_a = ''\n    a = a // 2\n    while a != 0 :\n        bin_a = str(a%2) + bin_a\n        a = a // 2\n    return bin_a\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-171","title":"Exercice 17.1 \ud83d\uddf9","text":"<p>Exercice 17.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>indice_du_min</code> qui prend en param\u00e8tre un tableau de nombres non tri\u00e9 <code>tab</code>, et qui renvoie l'indice de la premi\u00e8re occurrence du minimum de ce tableau. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; indice_du_min([5])\n0\n&gt;&gt;&gt; indice_du_min([2, 4, 1])\n2\n&gt;&gt;&gt; indice_du_min([5, 3, 2, 2, 4])\n2\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def indice_du_min(tab):\n    indice_min = 0\n    for i in range(len(tab)):\n        if tab[i] &lt; tab[indice_min]:\n            indice_min = i\n    return indice_min\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-172","title":"Exercice 17.2 \ud83d\uddf9","text":"<p>Exercice 17.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re la fonction <code>separe</code> ci-dessous qui prend en argument un tableau <code>tab</code> dont les \u00e9l\u00e9ments sont des <code>0</code> et des <code>1</code> et qui s\u00e9pare les <code>0</code> des <code>1</code> en pla\u00e7ant les <code>0</code> en d\u00e9but de tableau et les <code>1</code> \u00e0 la suite.</p> \ud83d\udc0d Script Python<pre><code>def separe(tab):\n    i = 0\n    j = ...\n    while i &lt; j :\n        if tab[i] == 0 :\n            i = ...\n        else :\n            tab[i], tab[j] = ...\n            j = ...\n    return tab\n</code></pre> <p>Compl\u00e9ter la fonction <code>separe</code> ci-dessus.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; separe([1, 0, 1, 0, 1, 0, 1, 0])\n[0, 0, 0, 0, 1, 1, 1, 1]\n&gt;&gt;&gt; separe([1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0])\n[0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n</code></pre> \ud83d\udc0d Script Python<pre><code>def separe(tab):\n    i = 0\n    j = len(tab) - 1\n    while i &lt; j :\n        if tab[i] == 0 :\n            i = i + 1\n        else :\n            tab[i], tab[j] = tab[j], tab[i]\n            j = j - 1\n    return tab\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-181","title":"Exercice 18.1 \u25a1","text":"<p>Exercice 18.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>elt</code> un nombre entier et <code>tab</code> un tableau de nombres entiers, et qui renvoie l\u2019indice de la premi\u00e8re occurrence de <code>elt</code> dans <code>tab</code> si <code>elt</code> est dans <code>tab</code> et <code>-1</code> sinon.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(1, [2, 3, 4])\n-1\n&gt;&gt;&gt; recherche(1, [10, 12, 1, 56])\n2\n&gt;&gt;&gt; recherche(50, [1, 50, 1])\n1\n&gt;&gt;&gt; recherche(15, [8, 9, 10, 15])\n3\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(elt, tab):\n    for i in range(len(tab)):\n        if tab[i] == elt:\n            return i        \n    return -1         \n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-182","title":"Exercice 18.2 \u25a1","text":"<p>Exercice 18.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re la fonction <code>insere</code> ci-dessous qui prend en argument un entier <code>a</code> et un tableau <code>tab</code> d'entiers tri\u00e9s par ordre croissant. Cette fonction ins\u00e8re la valeur <code>a</code> dans le tableau et renvoie le nouveau tableau. Les tableaux seront repr\u00e9sent\u00e9s sous la forme de listes python.</p> <p>Sujet l\u00e9g\u00e8rement modifi\u00e9</p> \ud83d\udc0d Script Python<pre><code>def insere(a, tab):\n    l = list(tab) #l contient les m\u00eames \u00e9l\u00e9ments que tab\n    l.append(a)\n    i = ...\n    while a &lt; ... and i &gt;= ...:\n        l[i+1] = ...\n        l[i] = a\n        i = ...\n    return l\n</code></pre> <p>Compl\u00e9ter la fonction <code>insere</code> ci-dessus.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; insere(3,[1,2,4,5])\n[1, 2, 3, 4, 5]\n&gt;&gt;&gt; insere(10,[1,2,7,12,14,25])\n[1, 2, 7, 10, 12, 14, 25]\n&gt;&gt;&gt; insere(1,[2,3,4])\n[1, 2, 3, 4]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def insere(a, tab):\n    l = list(tab) #l contient les m\u00eames \u00e9l\u00e9ments que tab\n    l.append(a)\n    i = len(l) - 2\n    while a &lt; l[i] and i &gt;= 0:\n        l[i+1] = l[i]\n        l[i] = a\n        i = i - 1\n    return l\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-191","title":"Exercice 19.1 \u25a1","text":"<p>Exercice 19.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres un tableau <code>tab</code> de nombres entiers tri\u00e9s par ordre croissant et un nombre entier <code>n</code>, et qui effectue une recherche dichotomique du nombre entier <code>n</code> dans le tableau non vide <code>tab</code>. Cette fonction doit renvoyer un indice correspondant au nombre cherch\u00e9 s\u2019il est dans le tableau, <code>-1</code> sinon.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche([2, 3, 4, 5, 6], 5)\n3\n&gt;&gt;&gt; recherche([2, 3, 4, 6, 7], 5)\n-1\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(tab, n):\n    ind_debut = 0\n    ind_fin = len(tab) - 1\n    while ind_debut &lt;= ind_fin:\n        ind_milieu = (ind_debut + ind_fin) // 2\n        if tab[ind_milieu] == n:\n            return ind_milieu\n        elif tab[ind_milieu] &lt; n:\n            ind_debut = ind_milieu + 1\n        else:\n            ind_fin = ind_milieu - 1\n    return -1\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-192","title":"Exercice 19.2 \u25a1","text":"<p>Exercice 19.2</p> \u00c9nonc\u00e9Correction <p>Le codage de C\u00e9sar transforme un message en changeant chaque lettre en la d\u00e9calant dans l\u2019alphabet. Par exemple, avec un d\u00e9calage de 3, le A se transforme en D, le B en E, ..., le X en A, le Y en B et le Z en C. Les autres caract\u00e8res (\u2018!\u2019,\u2019 ?\u2019\u2026) ne sont pas cod\u00e9s.</p> <p>La fonction <code>position_alphabet</code> ci-dessous prend en param\u00e8tre un caract\u00e8re <code>lettre</code> et renvoie la position de <code>lettre</code> dans la cha\u00eene de caract\u00e8res <code>ALPHABET</code> s\u2019il s\u2019y trouve et <code>-1</code> sinon. La fonction <code>cesar</code> prend en param\u00e8tre une cha\u00eene de caract\u00e8res <code>message</code> et un nombre entier <code>decalage</code> et renvoie le nouveau message cod\u00e9 avec le codage de C\u00e9sar utilisant le d\u00e9calage <code>decalage</code>.</p> \ud83d\udc0d Script Python<pre><code>ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef position_alphabet(lettre):\n    return ALPHABET.find(lettre)\n\ndef cesar(message, decalage):\n    resultat = ''\n    for ... in message:\n        if lettre in ALPHABET:\n            indice = ( ... ) % 26\n            resultat = resultat + ALPHABET[indice]\n        else:\n            resultat = ...\n    return resultat\n</code></pre> <p>Compl\u00e9ter la fonction <code>cesar</code>.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; cesar('BONJOUR A TOUS. VIVE LA MATIERE NSI !',4)\n'FSRNSYV E XSYW. ZMZI PE QEXMIVI RWM !'\n&gt;&gt;&gt; cesar('GTSOTZW F YTZX. ANAJ QF RFYNJWJ SXN !',-5)\n'BONJOUR A TOUS. VIVE LA MATIERE NSI !'\n</code></pre> \ud83d\udc0d Script Python<pre><code>ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef position_alphabet(lettre):\n    return ALPHABET.find(lettre)\n\ndef cesar(message, decalage):\n    resultat = ''\n    for lettre in message:\n        if lettre in ALPHABET:\n            indice = (position_alphabet(lettre) + decalage) % 26\n            resultat = resultat + ALPHABET[indice]\n        else:\n            resultat = resultat + lettre\n    return resultat\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-201","title":"Exercice 20.1 \ud83d\uddf9","text":"<p>Exercice 20.1</p> \u00c9nonc\u00e9Correction <p>On a relev\u00e9 les valeurs moyennes annuelles des temp\u00e9ratures \u00e0 Paris pour la p\u00e9riode allant de 2013 \u00e0 2019. Les r\u00e9sultats ont \u00e9t\u00e9 r\u00e9cup\u00e9r\u00e9s sous la forme de deux listes : l\u2019une pour les temp\u00e9ratures, l\u2019autre pour les ann\u00e9es : \ud83d\udc0d Script Python<pre><code>t_moy = [14.9, 13.3, 13.1, 12.5, 13.0, 13.6, 13.7]\nannees = [2013, 2014, 2015, 2016, 2017, 2018, 2019]\n</code></pre></p> <p>\u00c9crire la fonction <code>mini</code> qui prend en param\u00e8tres le tableau <code>releve</code> des relev\u00e9s et le tableau <code>date</code> des dates et qui renvoie la plus petite valeur relev\u00e9e au cours de la p\u00e9riode et l\u2019ann\u00e9e correspondante.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; mini(t_moy, annees)\n(12.5, 2016)\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>t_moy = [14.9, 13.3, 13.1, 12.5, 13.0, 13.6, 13.7]\nannees = [2013, 2014, 2015, 2016, 2017, 2018, 2019]\n\ndef mini(releve, date):\n    temp_mini = releve[0]\n    date_mini = date[0]\n    for i in range(len(releve)):\n        if releve[i] &lt; temp_mini:\n            temp_mini = releve[i]\n            date_mini = date[i]\n    return temp_mini, date_mini\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-202","title":"Exercice 20.2 \ud83d\uddf9","text":"<p>Exercice 20.2</p> \u00c9nonc\u00e9Correction <p>Un mot palindrome peut se lire de la m\u00eame fa\u00e7on de gauche \u00e0 droite ou de droite \u00e0 gauche : bob, radar, et non sont des mots palindromes.</p> <p>De m\u00eame certains nombres sont eux aussi des palindromes : 33, 121, 345543.</p> <p>L\u2019objectif de cet exercice est d\u2019obtenir un programme Python permettant de tester si un nombre est un nombre palindrome.</p> <p>Pour remplir cette t\u00e2che, on vous demande de compl\u00e9ter le code des trois fonctions ci- dessous sachant que la fonction <code>est_nbre_palindrome</code> s\u2019appuiera sur la fonction <code>est_palindrome</code> qui elle-m\u00eame s\u2019appuiera sur la fonction <code>inverse_chaine</code>.</p> <p>La fonction <code>inverse_chaine</code> inverse l'ordre des caract\u00e8res d'une cha\u00eene de caract\u00e8res <code>chaine</code> et renvoie la cha\u00eene invers\u00e9e.</p> <p>La fonction <code>est_palindrome</code> teste si une chaine de caract\u00e8res <code>chaine</code> est un palindrome. Elle renvoie <code>True</code> si c\u2019est le cas et <code>False</code> sinon. Cette fonction s\u2019appuie sur la fonction pr\u00e9c\u00e9dente.</p> <p>La fonction <code>est_nbre_palindrome</code> teste si un nombre <code>nbre</code> est un palindrome. Elle renvoie <code>True</code> si c\u2019est le cas et <code>False</code> sinon. Cette fonction s\u2019appuie sur la fonction pr\u00e9c\u00e9dente.</p> <p>Compl\u00e9ter le code des trois fonctions ci-dessous.</p> <p>\ud83d\udc0d Script Python<pre><code>def inverse_chaine(chaine):\n    result = ...\n    for caractere in chaine:\n        result = ...\n    return result\n\ndef est_palindrome(chaine):\n    inverse = inverse_chaine(chaine)\n    return ...\n\ndef est_nbre_palindrome(nbre):\n    chaine = ...\n    return est_palindrome(chaine)\n</code></pre> Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; inverse_chaine('bac')\n'cab'\n&gt;&gt;&gt; est_palindrome('NSI')\nFalse\n&gt;&gt;&gt; est_palindrome('ISN-NSI')\nTrue\n&gt;&gt;&gt; est_nbre_palindrome(214312)\nFalse\n&gt;&gt;&gt; est_nbre_palindrome(213312)\nTrue\n</code></pre> \ud83d\udc0d Script Python<pre><code>def inverse_chaine(chaine):\n    result = ''\n    for caractere in chaine:\n        result = caractere + result\n    return result\n\ndef est_palindrome(chaine):\n    inverse = inverse_chaine(chaine)\n    return chaine == inverse\n\ndef est_nbre_palindrome(nbre):\n    chaine = str(nbre)\n    return est_palindrome(chaine)\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-211","title":"Exercice 21.1 \u25a1","text":"<p>Exercice 21.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction python appel\u00e9e <code>nb_repetitions</code> qui prend en param\u00e8tres un \u00e9l\u00e9ment <code>elt</code> et une liste <code>tab</code> et renvoie le nombre de fois o\u00f9 l\u2019\u00e9l\u00e9ment appara\u00eet dans la liste.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; nb_repetitions(5,[2,5,3,5,6,9,5])\n3\n&gt;&gt;&gt; nb_repetitions('A',[ 'B', 'A', 'B', 'A', 'R'])\n2\n&gt;&gt;&gt; nb_repetitions(12,[1, '! ',7,21,36,44])\n0\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def nb_repetitions(elt, tab):\n    nb = 0\n    for element in tab:\n        if element == elt:\n            nb += 1\n    return nb\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-212","title":"Exercice 21.2 \u25a1","text":"<p>Exercice 21.2</p> \u00c9nonc\u00e9Correction <p>Pour rappel, la conversion d\u2019un nombre entier positif en binaire peut s\u2019effectuer \u00e0 l\u2019aide des divisions successives comme illustr\u00e9 ici :</p> <p></p> <p>Voici une fonction Python bas\u00e9e sur la m\u00e9thode des divisions successives permettant de convertir un nombre entier positif en binaire : \ud83d\udc0d Script Python<pre><code>def binaire(a):\n    bin_a = str(...)\n    a = a // 2\n    while a ... :\n        bin_a = ...(a%2) + ...\n        a = ...\n    return bin_a\n</code></pre> Compl\u00e9ter la fonction <code>binaire</code>.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; binaire(0)\n'0'\n&gt;&gt;&gt; binaire(77)\n'1001101'\n</code></pre> \ud83d\udc0d Script Python<pre><code>def binaire(a):\n    bin_a = str(a%2)\n    a = a // 2\n    while a != 0 :\n        bin_a = str(a%2) + bin_a\n        a = a // 2\n    return bin_a\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-221","title":"Exercice 22.1 \u25a1","text":"<p>Exercice 22.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire en langage Python une fonction <code>recherche</code> prenant comme param\u00e8tres une variable <code>a</code> de type num\u00e9rique (<code>float</code> ou <code>int</code>) et un tableau <code>t</code> (type <code>list</code>) et qui renvoie le nombre d'occurrences de <code>a</code> dans <code>t</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(5,[])\n0\n&gt;&gt;&gt; recherche(5,[-2, 3, 4, 8])\n0\n&gt;&gt;&gt; recherche(5,[-2, 3, 1, 5, 3, 7, 4])\n1\n&gt;&gt;&gt; recherche(5,[-2, 5, 3, 5, 4, 5])\n3\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(a, t):\n    nb = 0\n    for element in t:\n        if element == a:\n            nb += 1\n    return nb\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-222","title":"Exercice 22.2 \u25a1","text":"<p>Exercice 22.2</p> \u00c9nonc\u00e9Correction <p>La fonction <code>rendu_monnaie_centimes</code> prend en param\u00e8tres deux nombres entiers positifs <code>s_due</code> et<code>s_versee</code> et elle permet de proc\u00e9der au rendu de monnaie de la diff\u00e9rence <code>s_versee \u2013 s_due</code> pour des achats effectu\u00e9s avec le syst\u00e8me de pi\u00e8ces de la zone Euro. On utilise pour cela un algorithme qui commence par rendre le maximum de pi\u00e8ces de plus grandes valeurs et ainsi de suite. La fonction renvoie la liste des pi\u00e8ces qui composent le rendu.</p> <p>Toutes les sommes sont exprim\u00e9es en centimes d\u2019euros. Les valeurs possibles pour les pi\u00e8ces sont donc <code>[1, 2, 5, 10, 20, 50, 100, 200]</code>.</p> <p>Ainsi, l\u2019instruction <code>rendu_monnaie_centimes(452, 500)</code> renverra <code>[20, 20, 5, 2, 1]</code>.</p> <p>En effet, la somme \u00e0 rendre est de <code>48</code> centimes soit <code>20 + 20 + 5 + 2 + 1</code>. Le code de la fonction est donn\u00e9 ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def rendu_monnaie_centimes(s_due, s_versee):\n    pieces = [1, 2, 5, 10, 20, 50, 100, 200]\n    rendu = ...\n    a_rendre = ...\n    i = len(pieces) - 1\n    while a_rendre &gt; ... :\n        if pieces[i] &lt;= a_rendre :\n            rendu.append(...)\n            a_rendre = ...\n        else :\n            i = ...\n    return rendu\n</code></pre> <p>Compl\u00e9ter ce code pour qu'il donne : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; rendu_monnaie_centimes(700,700)\n[]\n&gt;&gt;&gt; rendu_monnaie_centimes(112,500)\n[200, 100, 50, 20, 10, 5, 2, 1]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def rendu_monnaie_centimes(s_due, s_versee):\n    pieces = [1, 2, 5, 10, 20, 50, 100, 200]\n    rendu = []\n    a_rendre = s_versee - s_due\n    i = len(pieces) - 1\n    while a_rendre &gt; 0 :\n        if pieces[i] &lt;= a_rendre :\n            rendu.append(pieces[i])\n            a_rendre = a_rendre - pieces[i]\n        else :\n            i = i - 1\n    return rendu\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-231","title":"Exercice 23.1 \u25a1","text":"<p>Exercice 23.1</p> \u00c9nonc\u00e9Correction <p>L\u2019occurrence d\u2019un caract\u00e8re dans un phrase est le nombre de fois o\u00f9 ce caract\u00e8re est pr\u00e9sent.</p> <p>Exemples :</p> <ul> <li>l\u2019occurrence du caract\u00e8re \u2018o\u2019 dans \u2018bonjour\u2019 est 2 ;</li> <li>l\u2019occurrence du caract\u00e8re \u2018b\u2019 dans \u2018B\u00e9b\u00e9\u2019 est 1 ;</li> <li>l\u2019occurrence du caract\u00e8re \u2018B\u2019 dans \u2018B\u00e9b\u00e9\u2019 est 1 ;</li> <li>l\u2019occurrence du caract\u00e8re \u2018 \u2018 dans \u2018Hello world !\u2019 est 2.</li> </ul> <p>On cherche les occurrences des caract\u00e8res dans une phrase. On souhaite stocker ces occurrences dans un dictionnaire dont les clefs seraient les caract\u00e8res de la phrase et les valeurs l\u2019occurrence de ces caract\u00e8res.</p> <p>Par exemple : avec la phrase 'Hello world !' le dictionnaire est le suivant :</p> <p><code>{'H': 1,'e': 1,'l': 3,'o': 2,' ': 2,'w': 1,'r': 1,'d': 1,'!': 1}</code></p> <p>\u00c9crire une fonction <code>occurence_lettres</code> prenant comme param\u00e8tre une variable <code>phrase</code> de type <code>str</code>. Cette fonction doit renvoyer un dictionnaire de type constitu\u00e9 des occurrences des caract\u00e8res pr\u00e9sents dans la phrase.</p> \ud83d\udc0d Script Python<pre><code>def occurence_lettres(phrase):\n    occ = {}\n    for caractere in phrase:\n        if caractere in occ:\n            occ[caractere] += 1\n        else:\n            occ[caractere] = 1\n    return occ\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-232","title":"Exercice 23.2 \u25a1","text":"<p>Exercice 23.2</p> \u00c9nonc\u00e9Correction <p>La fonction <code>fusion</code> prend deux listes <code>L1</code>, <code>L2</code> d\u2019entiers tri\u00e9es par ordre croissant et les fusionne en une liste tri\u00e9e <code>L12</code> qu\u2019elle renvoie.</p> <p>Le code Python de la fonction est</p> \ud83d\udc0d Script Python<pre><code>def fusion(L1,L2):\n    n1 = len(L1)\n    n2 = len(L2)\n    L12 = [0]*(n1+n2)\n    i1 = 0\n    i2 = 0\n    i = 0\n    while i1 &lt; n1 and ... :\n        if L1[i1] &lt; L2[i2]:\n            L12[i] = ...\n            i1 = ...\n        else:\n            L12[i] = L2[i2]\n            i2 = ...\n        i += 1\n    while i1 &lt; n1:\n        L12[i] = ...\n        i1 = i1 + 1\n        i = ...\n    while i2 &lt; n2:\n        L12[i] = ...\n        i2 = i2 + 1\n        i = ...\n    return L12\n</code></pre> <p>Compl\u00e9ter le code.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; fusion([1,6,10],[0,7,8,9])\n[0, 1, 6, 7, 8, 9, 10]\n</code></pre> \ud83d\udc0d Script Python<pre><code>def fusion(L1,L2):\n    n1 = len(L1)\n    n2 = len(L2)\n    L12 = [0]*(n1+n2)\n    i1 = 0\n    i2 = 0\n    i = 0\n    while i1 &lt; n1 and i2 &lt; n2 :\n        if L1[i1] &lt; L2[i2]:\n            L12[i] = L1[i1]\n            i1 = i1 + 1\n        else:\n            L12[i] = L2[i2]\n            i2 = i2 + 1\n        i += 1\n    while i1 &lt; n1:\n        L12[i] = L1[i1]\n        i1 = i1 + 1\n        i = i + 1\n    while i2 &lt; n2:\n        L12[i] = L2[i2]\n        i2 = i2 + 1\n        i = i + 1\n    return L12\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-241","title":"Exercice 24.1 \u25a1","text":"<p>identique au 18.1</p> <p>Exercice 24.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>elt</code> un nombre entier et <code>tab</code> un tableau de nombres entiers, et qui renvoie l\u2019indice de la premi\u00e8re occurrence de <code>elt</code> dans <code>tab</code> si <code>elt</code> est dans <code>tab</code> et <code>-1</code> sinon.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(1, [2, 3, 4])\n-1\n&gt;&gt;&gt; recherche(1, [10, 12, 1, 56])\n2\n&gt;&gt;&gt; recherche(50, [1, 50, 1])\n1\n&gt;&gt;&gt; recherche(15, [8, 9, 10, 15])\n3\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(tab, n):\n    ind_debut = 0\n    ind_fin = len(tab) - 1\n    while ind_debut &lt;= ind_fin:\n        ind_milieu = (ind_debut + ind_fin) // 2\n        if tab[ind_milieu] == n:\n            return ind_milieu\n        elif tab[ind_milieu] &lt; n:\n            ind_debut = ind_milieu + 1\n        else:\n            ind_fin = ind_milieu - 1\n    return -1\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-242","title":"Exercice 24.2 \u25a1","text":"<p>Exercice 24.2</p> \u00c9nonc\u00e9Correction <p>On d\u00e9finit une classe g\u00e9rant une adresse IPv4. On rappelle qu\u2019une adresse IPv4 est une adresse de longueur 4 octets, not\u00e9e en d\u00e9cimale \u00e0 point, en s\u00e9parant chacun des octets par un point. On consid\u00e8re un r\u00e9seau priv\u00e9 avec une plage d\u2019adresses IP de <code>192.168.0.0</code> \u00e0 <code>192.168.0.255</code>.</p> <p>On consid\u00e8re que les adresses IP saisies sont valides.</p> <p>Les adresses IP <code>192.168.0.0</code> et <code>192.168.0.255</code> sont des adresses r\u00e9serv\u00e9es.</p> <p>Le code ci-dessous impl\u00e9mente la classe <code>AdresseIP</code>.</p> <p>\ud83d\udc0d Script Python<pre><code>class AdresseIP:\n    def __init__(self, adresse):\n        self.adresse = ...\n\n    def liste_octet(self):\n        \"\"\"renvoie une liste de nombres entiers,\n        la liste des octets de l'adresse IP\"\"\"\n        return [int(i) for i in self.adresse.split(\".\")]\n\n    def est_reservee(self):\n        \"\"\"renvoie True si l'adresse IP est une adresse\n        r\u00e9serv\u00e9e, False sinon\"\"\"\n        return ... or ...\n\n    def adresse_suivante(self):\n        \"\"\"renvoie un objet de AdresseIP avec l'adresse\n        IP qui suit l\u2019adresse self\n        si elle existe et False sinon\"\"\"\n        if ... &lt; 254:\n            octet_nouveau = ... + ...\n            return AdresseIP('192.168.0.' + ...)\n        else:\n            return False\n</code></pre> Compl\u00e9ter le code ci-dessus et instancier trois objets : <code>adresse1</code>, <code>adresse2</code>, <code>adresse3</code> avec respectivement les arguments suivants :</p> <p><code>'192.168.0.1'</code>, <code>'192.168.0.2'</code>, <code>'192.168.0.0'</code></p> <p>V\u00e9rifier que :  \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; adresse1.est_reservee()\nFalse\n&gt;&gt;&gt; adresse3.est_reservee()\nTrue\n&gt;&gt;&gt; adresse2.adresse_suivante().adresse\n'192.168.0.3'\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>class AdresseIP:\n    def __init__(self, adresse):\n        self.adresse = adresse\n\n    def liste_octet(self):\n        \"\"\"renvoie une liste de nombres entiers,\n        la liste des octets de l'adresse IP\"\"\"\n        return [int(i) for i in self.adresse.split(\".\")]\n\n    def est_reservee(self):\n        \"\"\"renvoie True si l'adresse IP est une adresse\n        r\u00e9serv\u00e9e, False sinon\"\"\"\n        return self.liste_octet()[3] == 0 or self.liste_octet()[3] == 255\n\n    def adresse_suivante(self):\n        \"\"\"renvoie un objet de AdresseIP avec l'adresse\n        IP qui suit l\u2019adresse self\n        si elle existe et False sinon\"\"\"\n        if self.liste_octet()[3] &lt; 254:\n            octet_nouveau = self.liste_octet()[3] + 1\n            return AdresseIP('192.168.0.' + str(octet_nouveau))\n        else:\n            return False\n\nadresse1 = AdresseIP('192.168.0.1')\nadresse2 = AdresseIP('192.168.0.2')\nadresse3 = AdresseIP('192.168.0.0')\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-251","title":"Exercice 25.1 \u25a1","text":"<p>Exercice 25.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tre un tableau de nombres entiers <code>tab</code>, et qui renvoie la liste (\u00e9ventuellement vide) des couples d'entiers cons\u00e9cutifs successifs qu'il peut y avoir dans <code>tab</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche([1, 4, 3, 5])\n[]\n&gt;&gt;&gt; recherche([1, 4, 5, 3])\n[(4, 5)]\n&gt;&gt;&gt; recherche([7, 1, 2, 5, 3, 4])\n[(1, 2), (3, 4)]\n&gt;&gt;&gt; recherche([5, 1, 2, 3, 8, -5, -4, 7])\n[(1, 2), (2, 3), (-5, -4)]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(tab):\n    solution = []\n    for i in range(len(tab)-1):\n        if tab[i] + 1 == tab[i+1]:\n            solution.append((tab[i], tab[i+1]))\n    return solution\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-252","title":"Exercice 25.2 \u25a1","text":"<p>Exercice 25.2</p> \u00c9nonc\u00e9Correction <p>Soit une image binaire repr\u00e9sent\u00e9e dans un tableau \u00e0 2 dimensions. Les \u00e9l\u00e9ments <code>M[i][j]</code>, appel\u00e9s pixels, sont \u00e9gaux soit \u00e0 <code>0</code> soit \u00e0 <code>1</code>.</p> <p>Une composante d\u2019une image est un sous-ensemble de l\u2019image constitu\u00e9 uniquement de <code>1</code> et de <code>0</code> qui sont c\u00f4te \u00e0 c\u00f4te, soit horizontalement soit verticalement.</p> <p>Par exemple, les composantes de  sont </p> <p>On souhaite, \u00e0 partir d\u2019un pixel \u00e9gal \u00e0 <code>1</code> dans une image <code>M</code>, donner la valeur <code>val</code> \u00e0 tous les pixels de la composante \u00e0 laquelle appartient ce pixel.</p> <p>La fonction <code>propager</code> prend pour param\u00e8tre une image <code>M</code>, deux entiers <code>i</code> et <code>j</code> et une valeur enti\u00e8re <code>val</code>. Elle met \u00e0 la valeur <code>val</code> tous les pixels de la composante du pixel <code>M[i][j]</code> s\u2019il vaut <code>1</code> et ne fait rien s\u2019il vaut <code>0</code>.</p> <p>Par exemple, <code>propager(M,2,1,3)</code> donne </p> <p>Compl\u00e9ter le code r\u00e9cursif de la fonction <code>propager</code> donn\u00e9 ci-dessous :</p> <p>\ud83d\udc0d Script Python<pre><code>def propager(M, i, j, val):\n    if M[i][j]== ...:\n        return None\n\n    M[i][j] = val\n\n    # l'\u00e9l\u00e9ment en haut fait partie de la composante\n    if ((i-1) &gt;= 0 and M[i-1][j] == ...):\n        propager(M, i-1, j, val)\n\n    # l'\u00e9l\u00e9ment en bas fait partie de la composante\n    if ((...) &lt; len(M) and M[i+1][j] == 1):\n        propager(M, ..., j, val)\n\n    # l'\u00e9l\u00e9ment \u00e0 gauche fait partie de la composante\n    if ((...) &gt;= 0 and M[i][j-1] == 1):\n        propager(M, i, ..., val)\n\n    # l'\u00e9l\u00e9ment \u00e0 droite fait partie de la composante\n    if ((...) &lt; len(M) and M[i][j+1] == 1):\n        propager(M, i, ..., val)\n</code></pre> Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; M = [[0,0,1,0],[0,1,0,1],[1,1,1,0],[0,1,1,0]]\n&gt;&gt;&gt; propager(M,2,1,3)\n&gt;&gt;&gt; M\n[[0, 0, 1, 0], [0, 3, 0, 1], [3, 3, 3, 0], [0, 3, 3, 0]]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def propager(M, i, j, val):\n    if M[i][j]== 0 :\n        return None\n\n    M[i][j] = val\n\n    # l'\u00e9l\u00e9ment en haut fait partie de la composante\n    if ((i-1) &gt;= 0 and M[i-1][j] == 1):\n        propager(M, i-1, j, val)\n\n    # l'\u00e9l\u00e9ment en bas fait partie de la composante\n    if ((i+1) &lt; len(M) and M[i+1][j] == 1):\n        propager(M, i+1, j, val)\n\n    # l'\u00e9l\u00e9ment \u00e0 gauche fait partie de la composante\n    if ((j-1) &gt;= 0 and M[i][j-1] == 1):\n        propager(M, i, j-1, val)\n\n    # l'\u00e9l\u00e9ment \u00e0 droite fait partie de la composante\n    if ((j+1) &lt; len(M) and M[i][j+1] == 1):\n        propager(M, i, j+1, val)\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-261","title":"Exercice 26.1 \u25a1","text":"<p>Exercice 26.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>occurrence_max</code> prenant en param\u00e8tres une cha\u00eene de caract\u00e8res <code>chaine</code> et qui renvoie le caract\u00e8re le plus fr\u00e9quent de la cha\u00eene. La chaine ne contient que des lettres en minuscules sans accent. On pourra s\u2019aider du tableau</p> <p><code>alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o,','p','q','r','s','t','u','v','w','x','y','z']</code></p> <p>et du tableau <code>occurrence</code> de 26 \u00e9l\u00e9ments o\u00f9 l\u2019on mettra dans <code>occurrence[i]</code> le nombre d\u2019apparitions de <code>alphabet[i]</code> dans la chaine. Puis on calculera l\u2019indice <code>k</code> d\u2019un maximum du tableau <code>occurrence</code> et on affichera <code>alphabet[k]</code>.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; ch = 'je suis en terminale et je passe le bac et je souhaite poursuivre des etudes pour devenir expert en informatique'\n&gt;&gt;&gt; occurrence_max(ch)\n\u2018e\u2019\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o,','p','q','r','s','t','u','v','w','x','y','z']\n\ndef occurrence_max(chaine):\n    occurence = [0] *  26\n    for i in range(26):\n        compteur = 0\n        for caractere in chaine:\n            if caractere == alphabet[i]:\n                compteur += 1\n        occurence[i] = compteur\n    ind_max = 0\n    for i in range(26):\n        if occurence[i] &gt; occurence[ind_max]:\n            ind_max = i\n    return alphabet[ind_max]\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-262","title":"Exercice 26.2 \u25a1","text":"<p>Exercice 26.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re une image en 256 niveaux de gris que l\u2019on repr\u00e9sente par une grille de nombres, c\u2019est-\u00e0-dire une liste compos\u00e9e de sous-listes toutes de longueurs identiques. La largeur de l\u2019image est donc la longueur d\u2019une sous-liste et la hauteur de l\u2019image est le nombre de sous-listes.</p> <p>Chaque sous-liste repr\u00e9sente une ligne de l\u2019image et chaque \u00e9l\u00e9ment des sous-listes est un entier compris entre 0 et 255, repr\u00e9sentant l\u2019intensit\u00e9 lumineuse du pixel.</p> <p>Compl\u00e9ter le programme ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def nbLig(image):\n    '''renvoie le nombre de lignes de l'image'''\n    return ...\n\ndef nbCol(image):\n    '''renvoie la largeur de l'image'''\n    return ...\n\ndef negatif(image):\n    '''renvoie le n\u00e9gatif de l'image sous la forme d'une liste de listes'''\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))] # on cr\u00e9\u00e9 une image de 0 aux m\u00eames dimensions que le param\u00e8tre image\n    for i in range(len(image)):\n        for j in range(...):\n            L[i][j] = ...\n    return L\n\ndef binaire(image, seuil):\n    '''renvoie une image binaris\u00e9e de l'image sous la forme\n    d'une liste de listes contenant des 0 si la valeur\n    du pixel est strictement inf\u00e9rieure au seuil\n    et 1 sinon'''\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))] # on cr\u00e9e une image de 0 aux m\u00eames dimensions que le param\u00e8tre image\n    for i in range(len(image)):\n        for j in range(...):\n            if image[i][j] &lt; ... :\n                L[i][j] = ...\n            else:\n                L[i][j] = ...\n    return L    \n</code></pre> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; img = [[20, 34, 254, 145, 6], [23, 124, 287, 225, 69], [197, 174, 207, 25, 87], [255, 0, 24, 197, 189]]\n&gt;&gt;&gt; nbLig(img)\n4\n&gt;&gt;&gt; nbCol(img)\n5\n&gt;&gt;&gt; negatif(img)\n[[235, 221, 1, 110, 249], [232, 131, -32, 30, 186], [58, 81, 48, 230, 168], [0, 255, 231, 58, 66]]\n&gt;&gt;&gt; binaire(negatif(img),120)\n[[1, 1, 0, 0, 1], [1, 1, 0, 0, 1], [0, 0, 0, 1, 1], [0, 1, 1, 0, 0]]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def nbLig(image):\n    '''renvoie le nombre de lignes de l'image'''\n    return len(image)\n\ndef nbCol(image):\n    '''renvoie la largeur de l'image'''\n    return len(image[0])\n\ndef negatif(image):\n    '''renvoie le n\u00e9gatif de l'image sous la forme d'une liste de listes'''\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))] # on cr\u00e9\u00e9 une image de 0 aux m\u00eames dimensions que le param\u00e8tre image\n    for i in range(len(image)):\n        for j in range(nbCol(image)):\n            L[i][j] = 255-image[i][j]\n    return L\n\ndef binaire(image, seuil):\n    '''renvoie une image binaris\u00e9e de l'image sous la forme\n    d'une liste de listes contenant des 0 si la valeur\n    du pixel est strictement inf\u00e9rieure au seuil\n    et 1 sinon'''\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))] # on cr\u00e9e une image de 0 aux m\u00eames dimensions que le param\u00e8tre image\n    for i in range(len(image)):\n        for j in range(nbCol(image)):\n            if image[i][j] &lt; seuil :\n                L[i][j] = 0\n            else:\n                L[i][j] = 1\n    return L    \n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-271","title":"Exercice 27.1 \u25a1","text":"<p>Exercice 27.1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>moyenne</code> prenant en param\u00e8tres une liste d\u2019entiers et qui renvoie la moyenne des valeurs de cette liste.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; moyenne([10,20,30,40,60,110])\n45.0\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    somme = 0\n    for val in tab:\n        somme += val\n    return somme / len(tab)\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-272","title":"Exercice 27.2 \u25a1","text":"<p>Exercice 27.2</p> \u00c9nonc\u00e9Correction <p> On travaille sur des dessins en noir et blanc obtenu \u00e0 partir de pixels noirs et blancs : La figure \u00ab c\u0153ur \u00bb ci-dessus va servir d\u2019exemple. On la repr\u00e9sente par une grille de nombres, c\u2019est-\u00e0-dire par une liste compos\u00e9e de sous-listes de m\u00eame longueurs. Chaque sous-liste repr\u00e9sentera donc une ligne du dessin.</p> <p>Dans le code ci-dessous, la fonction <code>affiche</code> permet d\u2019afficher le dessin. Les pixels noirs (1 dans la grille) seront repr\u00e9sent\u00e9s par le caract\u00e8re \"*\" et les blancs (0 dans la grille) par deux espaces.</p> <p>La fonction <code>zoomListe</code> prend en argument une liste <code>liste_depart</code> et un entier <code>k</code>. Elle renvoie une liste o\u00f9 chaque \u00e9l\u00e9ment de <code>liste_depart</code> est dupliqu\u00e9 <code>k</code> fois.</p> <p>La fonction <code>zoomDessin</code> prend en argument la grille <code>dessin</code> et renvoie une grille o\u00f9 toutes les lignes de <code>dessin</code> sont zoom\u00e9es <code>k</code> fois et r\u00e9p\u00e9t\u00e9es <code>k</code> fois.</p> <p>Soit le code ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>coeur = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], \\\n        [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], \\\n        [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], \\\n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], \\\n        [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], \\\n        [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n\ndef affiche(dessin):\n    ''' affichage d'une grille : les 1 sont repr\u00e9sent\u00e9s par \n        des \" *\" , les 0 par deux espaces \"  \" '''\n    for ligne in dessin:\n        for col in ligne:\n            if col == 1:\n                print(\" *\", end=\"\")\n            else:\n                print(\"  \", end=\"\")\n        print()\n\n\ndef zoomListe(liste_depart,k):\n    '''renvoie une liste contenant k fois chaque \n    \u00e9l\u00e9ment de liste_depart'''\n    liste_zoom = ...\n    for elt in ... :\n        for i in range(k):\n            ...\n    return liste_zoom\n\ndef zoomDessin(grille,k):\n    '''renvoie une grille o\u00f9 les lignes sont zoom\u00e9es k fois \n    ET r\u00e9p\u00e9t\u00e9es k fois'''\n    grille_zoom=[]\n    for elt in grille:\n        liste_zoom = ...\n        for i in range(k):\n            ... .append(...)\n    return grille_zoom\n</code></pre> <p>R\u00e9sultats \u00e0 obtenir :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; affiche(coeur)\n</code></pre> </p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; affiche(zoomDessin(coeur,3))\n</code></pre> \ud83d\udccb Texte<pre><code>            * * * * * *                   * * * * * *                  \n            * * * * * *                   * * * * * *                  \n            * * * * * *                   * * * * * *                  \n      * * *             * * *       * * *             * * *            \n      * * *             * * *       * * *             * * *            \n      * * *             * * *       * * *             * * *            \n* * *                         * * *                         * * *      \n* * *                         * * *                         * * *      \n* * *                         * * *                         * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n      * * *                                           * * *            \n      * * *                                           * * *            \n      * * *                                           * * *            \n            * * *                               * * *                  \n            * * *                               * * *                  \n            * * *                               * * *                  \n                  * * *                   * * *                        \n                  * * *                   * * *                        \n                  * * *                   * * *                        \n                        * * *       * * *                              \n                        * * *       * * *                              \n                        * * *       * * *                              \n                              * * *                                    \n                              * * *                                    \n                              * * *\n</code></pre> \ud83d\udc0d Script Python<pre><code>coeur = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], \\\n        [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], \\\n        [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], \\\n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], \\\n        [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], \\\n        [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n\ndef affiche(dessin):\n    for ligne in dessin:\n        for col in ligne:\n            if col == 1:\n                print(' *',end='')\n            else:\n                print('  ',end='')\n        print()\n\n\ndef zoomListe(liste_depart, k):\n    liste_zoom = []\n    for elt in liste_depart:\n        for i in range(k):\n            liste_zoom.append(elt)\n    return liste_zoom\n\ndef zoomDessin(grille, k):\n    grille_zoom = []\n    for elt in grille:\n        liste_zoom = zoomListe(elt, k)\n        for i in range(k):\n            grille_zoom.append(liste_zoom)\n    return grille_zoom\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-281","title":"Exercice 28.1 \u25a1","text":"<p>Exercice 28.1</p> \u00c9nonc\u00e9Correction <p>Dans cet exercice, un arbre binaire de caract\u00e8res est stock\u00e9 sous la forme d\u2019un dictionnaire o\u00f9 les clefs sont les caract\u00e8res des n\u0153uds de l\u2019arbre et les valeurs, pour chaque clef, la liste des caract\u00e8res des fils gauche et droit du n\u0153ud.</p> <p>Par exemple, l\u2019arbre</p> <p></p> <p>est stock\u00e9 dans</p> \ud83d\udc0d Script Python<pre><code>a = {'F':['B','G'], 'B':['A','D'], 'A':['',''], 'D':['C','E'], \\\n'C':['',''], 'E':['',''], 'G':['','I'], 'I':['','H'], \\\n'H':['','']}\n</code></pre> <p>\u00c9crire une fonction r\u00e9cursive <code>taille</code> prenant en param\u00e8tres un arbre binaire <code>arbre</code> sous la forme d\u2019un dictionnaire et un caract\u00e8re <code>lettre</code> qui est la valeur du sommet de l\u2019arbre, et qui renvoie la taille de l\u2019arbre \u00e0 savoir le nombre total de n\u0153ud. On pourra distinguer les 4 cas o\u00f9 les deux \u00ab fils \u00bb du n\u0153ud sont <code>''</code>, le fils gauche seulement est <code>''</code>, le fils droit seulement est <code>''</code>, aucun des deux fils n\u2019est <code>''</code>.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; taille(a, \u2019F\u2019)\n9\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>a = {'F':['B','G'], 'B':['A','D'], 'A':['',''], 'D':['C','E'], 'C':['',''], 'E':['',''], 'G':['','I'], 'I':['','H'], 'H':['','']}\n\ndef taille(arbre, lettre):\n    fils_gauche = arbre[lettre][0]\n    fils_droit = arbre[lettre][1]\n\n    if fils_gauche != '' and fils_droit != '':\n        return 1 + taille(arbre, fils_gauche) + taille(arbre, fils_droit)\n\n    if fils_gauche != '' and fils_droit == '':\n        return 1 + taille(arbre, fils_gauche)\n\n    if fils_gauche == '' and fils_droit != '':\n        return 1 + taille(arbre, fils_droit)\n\n    else:\n        return 1\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-282","title":"Exercice 28.2 \u25a1","text":"<p>Exercice 28.2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re l'algorithme de tri de tableau suivant : \u00e0 chaque \u00e9tape, on parcourt depuis le d\u00e9but du tableau tous les \u00e9l\u00e9ments non rang\u00e9s et on place en derni\u00e8re position le plus grand \u00e9l\u00e9ment.</p> <p>Exemple avec le tableau : <code>t = [41, 55, 21, 18, 12, 6, 25]</code> </p> <ul> <li>\u00c9tape 1 : on parcourt tous les \u00e9l\u00e9ments du tableau, on permute le plus grand \u00e9l\u00e9ment avec le dernier.</li> </ul> <p>Le tableau devient <code>t = [41, 25, 21, 18, 12, 6, 55]</code></p> <ul> <li>\u00c9tape 2 : on parcourt tous les \u00e9l\u00e9ments sauf le dernier, on permute le plus grand \u00e9l\u00e9ment trouv\u00e9 avec l'avant dernier.</li> </ul> <p>Le tableau devient : <code>t = [6, 25, 21, 18, 12, 41, 55]</code> </p> <p>Et ainsi de suite. La code de la fonction <code>tri_iteratif</code> qui impl\u00e9mente cet algorithme est donn\u00e9 ci- dessous.</p> \ud83d\udc0d Script Python<pre><code>def tri_iteratif(tab):\n    for k in range(..., 0 ,-1):\n        imax = ...\n        for i in range(0, ...):\n            if tab[i] &gt; ... :\n                imax = i\n        if tab[max] &gt; ... :\n            ..., tab[imax] = tab[imax], ...\n    return tab\n</code></pre> <p>Compl\u00e9ter le code qui doit donner :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tri_iteratif([41, 55, 21, 18, 12, 6, 25])\n[6, 12, 18, 21, 25, 41, 55]\n</code></pre> <p>On rappelle que l'instruction <code>a, b = b, a</code> \u00e9change les contenus de <code>a</code> et <code>b</code>.</p> \ud83d\udc0d Script Python<pre><code>def tri_iteratif(tab):\n    for k in range(len(tab)-1, 0, -1):\n        imax = 0\n        for i in range(0, k):\n            if tab[i] &gt; tab[imax] :\n                imax = i\n        if tab[imax] &gt; tab[k] :\n            tab[k], tab[imax] = tab[imax], tab[k] \n    return tab\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-291","title":"Exercice 29.1 \u25a1","text":"<p>Exercice 29.1</p> \u00c9nonc\u00e9Correction <p>Soit un nombre entier sup\u00e9rieur ou \u00e9gal \u00e0 1 :</p> <ul> <li>s'il est pair, on le divise par 2 ;</li> <li>s\u2019il est impair, on le multiplie par 3 et on ajoute 1.</li> </ul> <p>Puis on recommence ces \u00e9tapes avec le nombre entier obtenu, jusqu\u2019\u00e0 ce que l\u2019on obtienne la valeur 1.</p> <p>On d\u00e9finit ainsi la suite \\((U_n)\\) par :</p> <ul> <li>\\(U_0=k\\), o\u00f9 \\(k\\) est un entier choisi initialement;</li> <li>\\(U_{n+1} = \\dfrac{U_n}{2}\\) si \\(U_n\\) est pair;</li> <li>\\(U_{n+1} = 3 \\times U_n + 1\\) si \\(U_n\\) est impair.</li> </ul> <p>On admet que, quel que soit l'entier <code>k</code> choisi au d\u00e9part, la suite finit toujours sur la valeur 1.</p> <p>\u00c9crire une fonction <code>calcul</code> prenant en param\u00e8tres un entier <code>n</code> strictement positif et qui renvoie la liste des valeurs de la suite, en partant de <code>n</code> et jusqu'\u00e0 atteindre 1.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; calcul(7)\n[7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1]\n</code></pre></p>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-292","title":"Exercice 29.2 \u25a1","text":"<p>Exercice 29.2</p> \u00c9nonc\u00e9Correction <p>On affecte \u00e0 chaque lettre de l'alphabet un code selon le tableau ci-dessous :</p> A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 <p>Pour un mot donn\u00e9, on d\u00e9termine d\u2019une part son code alphab\u00e9tique concat\u00e9n\u00e9, obtenu par la juxtaposition des codes de chacun de ses caract\u00e8res, et d\u2019autre part, son code additionn\u00e9, qui est la somme des codes de chacun de ses caract\u00e8res.</p> <p>Par ailleurs, on dit que ce mot est \u00ab parfait \u00bb si le code additionn\u00e9 divise le code concat\u00e9n\u00e9.</p> <p>Exemples :</p> <ul> <li> <p>Pour le mot <code>\"PAUL\"</code>, le code concat\u00e9n\u00e9 est la cha\u00eene <code>'1612112'</code>, soit l\u2019entier 1 612 112. Son code additionn\u00e9 est l\u2019entier 50 car 16 + 1 + 21 + 12 = 50. 50 ne divise pas l\u2019entier 1 612 112 ; par cons\u00e9quent, le mot <code>\"PAUL\"</code> n\u2019est pas parfait.</p> </li> <li> <p>Pour le mot <code>\"ALAIN\"</code>, le code concat\u00e9n\u00e9 est la cha\u00eene <code>'1121914'</code>, soit l\u2019entier 1 121 914. Le code additionn\u00e9 est l\u2019entier 37 car 1 + 12 + 1 + 9 + 14 = 37. 37 divise l\u2019entier 1 121 914 ; par cons\u00e9quent, le mot <code>\"ALAIN\"</code> est parfait.</p> </li> </ul> <p>Compl\u00e9ter la fonction <code>est_parfait</code> ci-dessous qui prend comme argument une cha\u00eene de caract\u00e8res <code>mot</code> (en lettres majuscules) et qui renvoie le code alphab\u00e9tique concat\u00e9n\u00e9, le code additionn\u00e9 de <code>mot</code>, ainsi qu\u2019un bool\u00e9en qui indique si <code>mot</code> est parfait ou pas.</p> \ud83d\udc0d Script Python<pre><code>dico = {\"A\":1, \"B\":2, \"C\":3, \"D\":4, \"E\":5, \"F\":6, \"G\":7, \\\n\"H\":8, \"I\":9, \"J\":10, \"K\":11, \"L\":12, \"M\":13, \\\n\"N\":14, \"O\":15, \"P\":16, \"Q\":17, \"R\":18, \"S\":19, \\\n\"T\":20, \"U\":21,\"V\":22, \"W\":23, \"X\":24, \"Y\":25, \"Z\":26}\n\ndef est_parfait(mot) :\n    #mot est une cha\u00eene de caract\u00e8res (en lettres majuscules)\n    code_c = \"\"\n    code_a = ???\n    for c in mot :\n        code_c = code_c + ???\n        code_a = ???\n    code_c = int(code_c)\n    if ??? :\n        mot_est_parfait = True\n    else :\n        mot_est_parfait = False\n    return [code_a, code_c, mot_est_parfait]\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; est_parfait(\"PAUL\")\n[50, 1612112, False]\n&gt;&gt;&gt; est_parfait(\"ALAIN\")\n[37, 1121914, True]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>dico = {\"A\":1, \"B\":2, \"C\":3, \"D\":4, \"E\":5, \"F\":6, \"G\":7, \\\n\"H\":8, \"I\":9, \"J\":10, \"K\":11, \"L\":12, \"M\":13, \\\n\"N\":14, \"O\":15, \"P\":16, \"Q\":17, \"R\":18, \"S\":19, \\\n\"T\":20, \"U\":21,\"V\":22, \"W\":23, \"X\":24, \"Y\":25, \"Z\":26}\n\ndef est_parfait(mot) :\n    #mot est une cha\u00eene de caract\u00e8res (en lettres majuscules)\n    code_c = \"\"\n    code_a = 0\n    for c in mot :\n        code_c = code_c + str(dico[c])\n        code_a = code_a + dico[c]\n    code_c = int(code_c)\n    if code_c % code_a == 0:\n        mot_est_parfait = True\n    else :\n        mot_est_parfait = False\n    return [code_a, code_c, mot_est_parfait]\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-301","title":"Exercice 30.1 \u25a1","text":"<p>Exercice 30.1</p> \u00c9nonc\u00e9Correction <p>Programmer la fonction <code>multiplication</code>, prenant en param\u00e8tres deux nombres entiers <code>n1</code> et <code>n2</code>, et qui renvoie le produit de ces deux nombres. Les seules op\u00e9rations autoris\u00e9es sont l\u2019addition et la soustraction. </p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; multiplication(3,5)\n15\n&gt;&gt;&gt; multiplication(-4,-8)\n32\n&gt;&gt;&gt; multiplication(-2,6)\n-12\n&gt;&gt;&gt; multiplication(-2,0)\n0\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def multiplication(n1, n2):\n    if n1 &lt; 0:\n        return -multiplication(-n1, n2)\n    if n2 &lt; 0:\n        return -multiplication(n1, -n2)\n    resultat = 0\n    for _ in range(n2):\n        resultat += n1\n    return resultat\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2021/#exercice-302","title":"Exercice 30.2 \u25a1","text":"<p>Exercice 30.2</p> \u00c9nonc\u00e9CorrectionSources en Markdown <p>Soit <code>T</code> un tableau non vide d'entiers tri\u00e9s dans l'ordre croissant et <code>n</code> un entier. La fonction <code>chercher</code>, donn\u00e9e \u00e0 la page suivante, doit renvoyer un indice o\u00f9 la valeur <code>n</code> appara\u00eet \u00e9ventuellement dans <code>T</code>, et <code>None</code> sinon. </p> <p>Les param\u00e8tres de la fonction sont :</p> <ul> <li><code>T</code>, le tableau dans lequel s'effectue la recherche ;</li> <li><code>n</code>, l'entier \u00e0 chercher dans le tableau ;</li> <li><code>i</code>, l'indice de d\u00e9but de la partie du tableau o\u00f9 s'effectue la recherche ;</li> <li><code>j</code>, l'indice de fin de la partie du tableau o\u00f9 s'effectue la recherche.</li> </ul> <p>La fonction <code>chercher</code> est une fonction r\u00e9cursive bas\u00e9e sur le principe \u00ab diviser pour r\u00e9gner \u00bb.</p> <p>Le code de la fonction commence par v\u00e9rifier si <code>0 &lt;= i</code> et <code>j &lt; len(T)</code>. Si cette condition n\u2019est pas v\u00e9rifi\u00e9e, elle affiche <code>\"Erreur\"</code> puis renvoie <code>None</code>.</p> <p>Recopier et compl\u00e9ter le code de la fonction <code>chercher</code> propos\u00e9e ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def chercher(T, n, i, j):\n    if i &lt; 0 or ??? :\n        print(\"Erreur\")\n        return None\n    if i &gt; j :\n        return None\n    m = (i + j) // ???\n    if T[m] &lt; ??? :\n        return chercher(T, n, ??? , ???)\n    elif ??? :\n        return chercher(T, n, ??? , ??? )\n    else :\n        return ???\n</code></pre> <p>L'ex\u00e9cution du code doit donner : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; chercher([1,5,6,6,9,12],7,0,10)\nErreur\n&gt;&gt;&gt; chercher([1,5,6,6,9,12],7,0,5)\n&gt;&gt;&gt; chercher([1,5,6,6,9,12],9,0,5)\n4\n&gt;&gt;&gt; chercher([1,5,6,6,9,12],6,0,5)\n2\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def chercher(T, n, i, j):\n    if i &lt; 0 or j &gt;= len(T) :\n        print('Erreur')\n        return None\n    if i &gt; j :\n        return None\n    m = (i + j) // 2\n    if T[m] &lt; n :\n        return chercher(T, n, m + 1, j)\n    elif T[m] &gt; n :\n        return chercher(T, n, i, m - 1 )\n    else :\n        return m\n</code></pre> <p><code>``` Soit</code>T<code>un tableau non vide d'entiers tri\u00e9s dans l'ordre croissant et</code>n<code>un entier. La fonction</code>chercher<code>, donn\u00e9e \u00e0 la page suivante, doit renvoyer un indice o\u00f9 la valeur</code>n<code>appara\u00eet \u00e9ventuellement dans</code>T<code>, et</code>None` sinon. </p> <p>Les param\u00e8tres de la fonction sont :</p> <ul> <li><code>T</code>, le tableau dans lequel s'effectue la recherche ;</li> <li><code>n</code>, l'entier \u00e0 chercher dans le tableau ;</li> <li><code>i</code>, l'indice de d\u00e9but de la partie du tableau o\u00f9 s'effectue la recherche ;</li> <li><code>j</code>, l'indice de fin de la partie du tableau o\u00f9 s'effectue la recherche.</li> </ul> <p>La fonction <code>chercher</code> est une fonction r\u00e9cursive bas\u00e9e sur le principe \u00ab diviser pour r\u00e9gner \u00bb.</p> <p>Le code de la fonction commence par v\u00e9rifier si <code>0 &lt;= i</code> et <code>j &lt; len(T)</code>. Si cette condition n\u2019est pas v\u00e9rifi\u00e9e, elle affiche <code>\"Erreur\"</code> puis renvoie <code>None</code>.</p> <p>Recopier et compl\u00e9ter le code de la fonction <code>chercher</code> propos\u00e9e ci-dessous :</p> <p><code>python linenums='1' def chercher(T, n, i, j):     if i &lt; 0 or ??? :         print(\"Erreur\")         return None     if i &gt; j :         return None     m = (i + j) // ???     if T[m] &lt; ??? :         return chercher(T, n, ??? , ???)     elif ??? :         return chercher(T, n, ??? , ??? )     else :         return ???</code></p> <p>L'ex\u00e9cution du code doit donner : ```python</p> <p>chercher([1,5,6,6,9,12],7,0,10) Erreur chercher([1,5,6,6,9,12],7,0,5) chercher([1,5,6,6,9,12],9,0,5) 4 chercher([1,5,6,6,9,12],6,0,5) 2 ```</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/","title":"\u00c9preuve Pratique BNS 2022","text":"<p>Cr\u00e9dit</p> <p>Les pages de synth\u00e8se et de correction ont \u00e9t\u00e9 r\u00e9alis\u00e9es par G. Lassus - acad\u00e9mie de Bordeaux</p> <p> \u00c0 lire</p> <ul> <li>Les sujets ci-dessous correspondent \u00e0 la derni\u00e8re version officielle, publi\u00e9e le 24/02/2022. </li> <li>Certains sujets (ceux de l'ann\u00e9e derni\u00e8re reconduits cette ann\u00e9e) ont parfois \u00e9t\u00e9 l\u00e9g\u00e8rement modifi\u00e9s par rapport \u00e0 la version 2021. La correspondance des num\u00e9rotations entre la BNS 2021 et la BNS 2022 peut se retrouver ici</li> <li>Certains de ces sujets comportent des erreurs, corrig\u00e9es ou non. Dans le doute, comparer avec la version originale du sujet.</li> <li>Les versions originales de ces sujets sont disponibles en pdf au d\u00e9but de chaque sujet. (pour t\u00e9l\u00e9charger les 40 sujets en un seul fichier, c'est ici)</li> </ul> <p> Pourquoi proposer une correction ? </p> <ul> <li>La BNS est une banque de sujets publique, publi\u00e9e bien en amont de l'\u00c9preuve Pratique, afin que les futurs candidats puissent s'entra\u00eener \u00e0 la r\u00e9solution des exercices.</li> <li>Pour que les \u00e9l\u00e8ves puissent travailler en autonomie, une proposition de corrig\u00e9 figure en regard de l'\u00e9nonc\u00e9.</li> <li>Pour que d'autres puissent aussi travailler ces sujets et ces corrig\u00e9s, \u00e9ventuellement me signaler des erreurs, les corriger, et les partager \u00e0 leur tour, ces corrections sont accessibles \u00e0 tous. </li> </ul>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-01","title":"\u25b6 Sujet 01","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-011","title":"Exercice 01.1 \u25a1","text":"<p>Exercice 01.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>caractere</code>, un caract\u00e8re, et <code>mot</code>, une cha\u00eene de caract\u00e8res, et qui renvoie le nombre d\u2019occurrences de <code>caractere</code> dans <code>mot</code>, c\u2019est-\u00e0-dire le nombre de fois o\u00f9 <code>caractere</code> appara\u00eet dans <code>mot</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche('e', \"sciences\")\n2\n&gt;&gt;&gt; recherche('i',\"mississippi\")\n4\n&gt;&gt;&gt; recherche('a',\"mississippi\")\n0\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(caractere, mot):\n    somme = 0\n    for lettre in mot:\n        if lettre == caractere:\n            somme += 1\n    return somme\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `recherche` qui prend en param\u00e8tres `caractere`, un caract\u00e8re, et\n`mot`, une cha\u00eene de caract\u00e8res, et qui renvoie le nombre d\u2019occurrences de `caractere`\ndans `mot`, c\u2019est-\u00e0-dire le nombre de fois o\u00f9 `caractere` appara\u00eet dans `mot`.\n\nExemples :\n```python\n&gt;&gt;&gt; recherche('e', \"sciences\")\n2\n&gt;&gt;&gt; recherche('i',\"mississippi\")\n4\n&gt;&gt;&gt; recherche('a',\"mississippi\")\n0\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-012","title":"Exercice 01.2 \u25a1","text":"<p>Exercice 01.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On s\u2019int\u00e9resse \u00e0 un algorithme r\u00e9cursif qui permet de rendre la monnaie \u00e0 partir d\u2019une liste donn\u00e9e de valeurs de pi\u00e8ces et de billets.</p> <p>Le syst\u00e8me mon\u00e9taire est donn\u00e9 sous forme d\u2019une liste <code>pieces=[100, 50, 20, 10, 5, 2, 1]</code>. (on supposera qu\u2019il n\u2019y a pas de limitation quant \u00e0 leur nombre).</p> <p>On cherche \u00e0 donner la liste de pi\u00e8ces \u00e0 rendre pour une somme donn\u00e9e en argument. Compl\u00e9ter le code Python ci-dessous de la fonction <code>rendu_glouton</code> qui impl\u00e9mente cet algorithme et renvoie la liste des pi\u00e8ces \u00e0 rendre.</p> \ud83d\udc0d Script Python<pre><code>pieces = [100,50,20,10,5,2,1] # (1)\n\ndef rendu_glouton(arendre, solution=[], i=0):\n    if arendre == 0:\n        return ...\n    p = pieces[i]\n    if p &lt;= ... :\n        solution.append(...)\n        return rendu_glouton(arendre - p, solution,i)\n    else :\n        return rendu_glouton(arendre, solution, ...)\n</code></pre> <ol> <li>Erreur dans l'\u00e9nonc\u00e9 officiel : <code>Pieces</code></li> </ol> <p>On devra obtenir :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; rendu_glouton(68, [], 0) \n[50, 10, 5, 2, 1]\n&gt;&gt;&gt; rendu_glouton(291, [], 0) \n[100, 100, 50, 20, 20, 1]\n</code></pre> \ud83d\udc0d Script Python<pre><code>pieces = [100,50,20,10,5,2,1]\n\ndef rendu_glouton(arendre, solution=[], i=0):\n    if arendre == 0:\n        return solution\n    p = pieces[i]\n    if p &lt;= arendre :\n        solution.append(p)\n        return rendu_glouton(arendre - p, solution,i)\n    else :\n        return rendu_glouton(arendre, solution, i+1)\n</code></pre> Markdown<pre><code>On s\u2019int\u00e9resse \u00e0 un algorithme r\u00e9cursif qui permet de rendre la monnaie \u00e0 partir d\u2019une\nliste donn\u00e9e de valeurs de pi\u00e8ces et de billets.\n\nLe syst\u00e8me mon\u00e9taire est donn\u00e9 sous\nforme d\u2019une liste `pieces=[100, 50, 20, 10, 5, 2, 1]`.\n(on supposera qu\u2019il n\u2019y a\npas de limitation quant \u00e0 leur nombre).\n\nOn cherche \u00e0 donner la liste de pi\u00e8ces \u00e0 rendre\npour une somme donn\u00e9e en argument.\nCompl\u00e9ter le code Python ci-dessous de la fonction `rendu_glouton` qui impl\u00e9mente cet\nalgorithme et renvoie la liste des pi\u00e8ces \u00e0 rendre.\n\n```python linenums='1'\npieces = [100,50,20,10,5,2,1] # (1)\n\ndef rendu_glouton(arendre, solution=[], i=0):\n    if arendre == 0:\n        return ...\n    p = pieces[i]\n    if p &lt;= ... :\n        solution.append(...)\n        return rendu_glouton(arendre - p, solution,i)\n    else :\n        return rendu_glouton(arendre, solution, ...)\n</code></pre> <ol> <li>Erreur dans l'\u00e9nonc\u00e9 officiel : <code>Pieces</code></li> </ol> <p>On devra obtenir :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; rendu_glouton(68, [], 0) \n[50, 10, 5, 2, 1]\n&gt;&gt;&gt; rendu_glouton(291, [], 0) \n[100, 100, 50, 20, 20, 1]\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-02","title":"\u25b6 Sujet 02","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-021","title":"Exercice 02.1 \u25a1","text":"<p>Exercice 02.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Soit le couple (<code>note</code>,<code>coefficient</code>):</p> <ul> <li><code>note</code> est un nombre de type flottant (<code>float</code>) compris entre 0 et 20 ;</li> <li><code>coefficient</code> est un nombre entier positif.</li> </ul> <p>Les r\u00e9sultats aux \u00e9valuations d'un \u00e9l\u00e8ve sont regroup\u00e9s dans une liste compos\u00e9e de couples (<code>note</code>,<code>coefficient</code>).</p> <p>\u00c9crire une fonction moyenne qui renvoie la moyenne pond\u00e9r\u00e9e de cette liste donn\u00e9e en param\u00e8tre.</p> <p>Par exemple, l\u2019expression <code>moyenne([(15,2),(9,1),(12,3)])</code> devra renvoyer le r\u00e9sultat du calcul suivant :</p> <p>\\(\\dfrac{2 \\times 15 + 1 \\times 9 + 3 \\times 12 }{2+1+3}=12,5\\)</p> \ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    somme_notes = 0\n    somme_coeffs = 0\n    for devoir in tab:\n        note = devoir[0]\n        coeff = devoir[1]\n        somme_notes += note * coeff\n        somme_coeffs += coeff\n    return somme_notes / somme_coeffs\n</code></pre> \ud83d\udccb Texte<pre><code>Soit le couple (`note`,`coefficient`):\n\n- `note` est un nombre de type flottant (`float`) compris entre 0 et 20 ;\n- `coefficient` est un nombre entier positif.\n\nLes r\u00e9sultats aux \u00e9valuations d'un \u00e9l\u00e8ve sont regroup\u00e9s dans une liste compos\u00e9e de\ncouples (`note`,`coefficient`).\n\n\u00c9crire une fonction moyenne qui renvoie la moyenne pond\u00e9r\u00e9e de cette liste donn\u00e9e en\nparam\u00e8tre.\n\nPar exemple, l\u2019expression `moyenne([(15,2),(9,1),(12,3)])` devra renvoyer le\nr\u00e9sultat du calcul suivant :\n\n$\\dfrac{2 \\times 15 + 1 \\times 9 + 3 \\times 12 }{2+1+3}=12,5$\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-022","title":"Exercice 02.2 \u25a1","text":"<p>Exercice 02.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On cherche \u00e0 d\u00e9terminer les valeurs du triangle de Pascal. Dans ce tableau de forme triangulaire, chaque ligne commence et se termine par le nombre 1. Par ailleurs, la valeur qui occupe une case situ\u00e9e \u00e0 l\u2019int\u00e9rieur du tableau s\u2019obtient en ajoutant les valeurs des deux cases situ\u00e9es juste au-dessus, comme l\u2019indique la figure suivante :</p> <p></p> <p>Compl\u00e9ter la fonction <code>pascal</code> ci-apr\u00e8s. Elle doit renvoyer une liste correspondant au triangle de Pascal de la ligne <code>1</code> \u00e0 la ligne <code>n</code> o\u00f9 <code>n</code> est un nombre entier sup\u00e9rieur ou \u00e9gal \u00e0 <code>2</code> (le tableau sera contenu dans la variable <code>C</code>). La variable <code>Ck</code> doit, quant \u00e0 elle, contenir, \u00e0 l\u2019\u00e9tape num\u00e9ro <code>k</code>, la <code>k</code>-i\u00e8me ligne du tableau.</p> \ud83d\udc0d Script Python<pre><code>def pascal(n):\n    C= [[1]]\n    for k in range(1,...):\n        Ck = [...]\n        for i in range(1,k):\n            Ck.append(C[...][i-1]+C[...][...] )\n        Ck.append(...)\n        C.append(Ck)\n    return C\n</code></pre> <p>Pour <code>n = 4</code>, voici ce qu'on devra obtenir : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; pascal(4)\n[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n</code></pre> Pour <code>n = 5</code>, voici ce qu'on devra obtenir : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; pascal(5)\n[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1]]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def pascal(n):\n    C = [[1]]\n    for k in range(1,n+1):\n        Ck = [1]\n        for i in range(1,k):\n            Ck.append(C[k-1][i-1]+C[k-1][i] )\n        Ck.append(1)\n        C.append(Ck)\n    return C\n</code></pre> Markdown<pre><code>On cherche \u00e0 d\u00e9terminer les valeurs du triangle de Pascal. Dans ce tableau de forme\ntriangulaire, chaque ligne commence et se termine par le nombre 1. Par ailleurs, la valeur\nqui occupe une case situ\u00e9e \u00e0 l\u2019int\u00e9rieur du tableau s\u2019obtient en ajoutant les valeurs des\ndeux cases situ\u00e9es juste au-dessus, comme l\u2019indique la figure suivante :\n\n![image](data/img9_2t.png){: .center width=60%}\n\nCompl\u00e9ter la fonction `pascal` ci-apr\u00e8s. Elle doit renvoyer une liste correspondant au\ntriangle de Pascal de la ligne `1` \u00e0 la ligne `n` o\u00f9 `n` est un nombre entier sup\u00e9rieur ou \u00e9gal \u00e0\n`2` (le tableau sera contenu dans la variable `C`). La variable `Ck` doit, quant \u00e0 elle, contenir,\n\u00e0 l\u2019\u00e9tape num\u00e9ro `k`, la `k`-i\u00e8me ligne du tableau.\n\n```python linenums='1'\ndef pascal(n):\n    C= [[1]]\n    for k in range(1,...):\n        Ck = [...]\n        for i in range(1,k):\n            Ck.append(C[...][i-1]+C[...][...] )\n        Ck.append(...)\n        C.append(Ck)\n    return C\n</code></pre> <p>Pour <code>n = 4</code>, voici ce qu'on devra obtenir : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; pascal(4)\n[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n</code></pre> Pour <code>n = 5</code>, voici ce qu'on devra obtenir : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; pascal(5)\n[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1]]\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-03","title":"\u25b6 Sujet 03","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-031","title":"Exercice 03.1 \u25a1","text":"<p>Exercice 03.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Le codage par diff\u00e9rence (delta encoding en anglais) permet de compresser un tableau de donn\u00e9es en indiquant pour chaque donn\u00e9e, sa diff\u00e9rence avec la pr\u00e9c\u00e9dente (plut\u00f4t que la donn\u00e9e elle-m\u00eame). On se retrouve alors avec un tableau de donn\u00e9es assez petites n\u00e9cessitant moins de place en m\u00e9moire. Cette m\u00e9thode se r\u00e9v\u00e8le efficace lorsque les valeurs cons\u00e9cutives sont proches. </p> <p>Programmer la fonction <code>delta</code> qui prend en param\u00e8tre un tableau non vide de nombres entiers et qui renvoie un tableau contenant les valeurs enti\u00e8res compress\u00e9es \u00e0 l\u2019aide cette technique.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; delta([1000, 800, 802, 1000, 1003])\n[1000, -200, 2, 198, 3]\n&gt;&gt;&gt; delta([42])\n[42] \n</code></pre> \ud83d\udc0d Script Python<pre><code>def delta(tab):\n    diff = [tab[0]]\n    for i in range(1, len(tab)):\n        diff.append(tab[i] - tab[i-1])\n    return diff\n</code></pre> \ud83d\udccb Texte<pre><code>Le codage par diff\u00e9rence (delta encoding en anglais) permet de compresser un tableau de\ndonn\u00e9es en indiquant pour chaque donn\u00e9e, sa diff\u00e9rence avec la pr\u00e9c\u00e9dente (plut\u00f4t que la\ndonn\u00e9e elle-m\u00eame). On se retrouve alors avec un tableau de donn\u00e9es assez petites n\u00e9cessitant\nmoins de place en m\u00e9moire. Cette m\u00e9thode se r\u00e9v\u00e8le efficace lorsque les valeurs cons\u00e9cutives\nsont proches.\n\nProgrammer la fonction `delta` qui prend en param\u00e8tre un tableau non vide de nombres entiers\net qui renvoie un tableau contenant les valeurs enti\u00e8res compress\u00e9es \u00e0 l\u2019aide cette technique.\n\nExemples :\n\n```python\n&gt;&gt;&gt; delta([1000, 800, 802, 1000, 1003])\n[1000, -200, 2, 198, 3]\n&gt;&gt;&gt; delta([42])\n[42] \n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-032","title":"Exercice 03.2 \u25a1","text":"<p>Exercice 03.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Une expression arithm\u00e9tique ne comportant que les quatre op\u00e9rations +, \u2212,\u00d7,\u00f7 peut \u00eatre repr\u00e9sent\u00e9e sous forme d\u2019arbre binaire. Les n\u0153uds internes sont des op\u00e9rateurs et les feuilles sont des nombres. Dans un tel arbre, la disposition des n\u0153uds joue le r\u00f4le des parenth\u00e8ses que nous connaissons bien.  </p> <p></p> <p>En parcourant en profondeur infixe l\u2019arbre binaire ci-dessus, on retrouve l\u2019expression not\u00e9e habituellement :  </p> \\[3 \\times (8 + 7) \u2212 (2 + 1)\\] <p>La classe <code>Noeud</code> ci-apr\u00e8s permet d\u2019impl\u00e9menter une structure d\u2019arbre binaire. Compl\u00e9ter la fonction r\u00e9cursive <code>expression_infixe</code> qui prend en param\u00e8tre un objet de la classe <code>Noeud</code> et qui renvoie l\u2019expression arithm\u00e9tique repr\u00e9sent\u00e9e par l\u2019arbre binaire pass\u00e9 en param\u00e8tre, sous forme d\u2019une cha\u00eene de caract\u00e8res contenant des parenth\u00e8ses.  </p> <p>R\u00e9sultat attendu avec l\u2019arbre ci-dessus :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; e = Noeud(Noeud(Noeud(None, 3, None), '*', Noeud(Noeud(None, 8, None),\n'+', Noeud(None, 7, None))), '-', Noeud(Noeud(None, 2, None), '+',\nNoeud(None, 1, None)))\n\n&gt;&gt;&gt; expression_infixe(e)\n'((3*(8+7))-(2+1))'\n</code></pre> \ud83d\udc0d Script Python<pre><code>class Noeud:\n    '''\n    Classe impl\u00e9mentant un noeud d'arbre binaire disposant de 3\n    attributs :\n    - valeur : la valeur de l'\u00e9tiquette,\n    - gauche : le sous-arbre gauche.\n    - droit : le sous-arbre droit.\n    '''\n    def __init__(self, g, v, d):\n        self.gauche = g\n        self.valeur = v\n        self.droit = d\n\n    def est_une_feuille(self):\n        '''Renvoie True si et seulement si le noeud est une feuille'''\n        return self.gauche is None and self.droit is None\n\ndef expression_infixe(e):\n    s = ...\n    if e.gauche is not None:\n        s = '(' + s + expression_infixe(...)\n    s = s + ...\n    if ... is not None:\n        s = s + ... + ...\n    return s # (1)\n</code></pre> <ol> <li>Attention, l'\u00e9nonc\u00e9 original fait pr\u00e9c\u00e9der ce <code>return</code> d'un <code>if ...</code> qui a \u00e9t\u00e9 supprim\u00e9 ici. Il faudrait \u00e9crire <code>if True:</code>, ce qui est inutile...   </li> </ol> \ud83d\udc0d Script Python<pre><code>class Noeud:\n    '''\n    Classe impl\u00e9mentant un noeud d'arbre binaire disposant de 3\n    attributs :\n    - valeur : la valeur de l'\u00e9tiquette,\n    - gauche : le sous-arbre gauche.\n    - droit : le sous-arbre droit.\n    '''\n    def __init__(self, g, v, d):\n        self.gauche = g\n        self.valeur = v\n        self.droit = d\n\n    def est_une_feuille(self):\n        '''Renvoie True si et seulement si le noeud est une feuille'''\n        return self.gauche is None and self.droit is None\n\ne = Noeud(Noeud(Noeud(None, 3, None), '*', Noeud(Noeud(None, 8, None),\n'+', Noeud(None, 7, None))), '-', Noeud(Noeud(None, 2, None), '+',\nNoeud(None, 1, None)))\n\ndef expression_infixe(e):\n    s = ''\n    if e.gauche is not None:\n        s = '(' + s + expression_infixe(e.gauche)\n    s = s + str(e.valeur)\n    if e.droit is not None:\n        s = s + expression_infixe(e.droit) + ')'\n    return s\n</code></pre> Markdown<pre><code>Une expression arithm\u00e9tique ne comportant que les quatre op\u00e9rations +, \u2212,\u00d7,\u00f7 peut \u00eatre\nrepr\u00e9sent\u00e9e sous forme d\u2019arbre binaire. Les n\u0153uds internes sont des op\u00e9rateurs et les feuilles\nsont des nombres. Dans un tel arbre, la disposition des n\u0153uds joue le r\u00f4le des parenth\u00e8ses que\nnous connaissons bien.  \n\n![image](data/img3_2.png){: .center width=30%}\n\nEn parcourant en profondeur infixe l\u2019arbre binaire ci-dessus, on\nretrouve l\u2019expression not\u00e9e habituellement :  \n\n\n$$3 \\times (8 + 7) \u2212 (2 + 1)$$\n\n\nLa classe `Noeud` ci-apr\u00e8s permet d\u2019impl\u00e9menter une structure\nd\u2019arbre binaire.\nCompl\u00e9ter la fonction r\u00e9cursive `expression_infixe` qui prend\nen param\u00e8tre un objet de la classe `Noeud` et qui renvoie\nl\u2019expression arithm\u00e9tique repr\u00e9sent\u00e9e par l\u2019arbre binaire pass\u00e9\nen param\u00e8tre, sous forme d\u2019une cha\u00eene de caract\u00e8res contenant\ndes parenth\u00e8ses.  \n\nR\u00e9sultat attendu avec l\u2019arbre ci-dessus :\n\n```python\n&gt;&gt;&gt; e = Noeud(Noeud(Noeud(None, 3, None), '*', Noeud(Noeud(None, 8, None),\n'+', Noeud(None, 7, None))), '-', Noeud(Noeud(None, 2, None), '+',\nNoeud(None, 1, None)))\n\n&gt;&gt;&gt; expression_infixe(e)\n'((3*(8+7))-(2+1))'\n</code></pre> \ud83d\udc0d Script Python<pre><code>class Noeud:\n    '''\n    Classe impl\u00e9mentant un noeud d'arbre binaire disposant de 3\n    attributs :\n    - valeur : la valeur de l'\u00e9tiquette,\n    - gauche : le sous-arbre gauche.\n    - droit : le sous-arbre droit.\n    '''\n    def __init__(self, g, v, d):\n        self.gauche = g\n        self.valeur = v\n        self.droit = d\n\n    def est_une_feuille(self):\n        '''Renvoie True si et seulement si le noeud est une feuille'''\n        return self.gauche is None and self.droit is None\n\ndef expression_infixe(e):\n    s = ...\n    if e.gauche is not None:\n        s = '(' + s + expression_infixe(...)\n    s = s + ...\n    if ... is not None:\n        s = s + ... + ...\n    return s # (1)\n</code></pre> <ol> <li>Attention, l'\u00e9nonc\u00e9 original fait pr\u00e9c\u00e9der ce <code>return</code> d'un <code>if ...</code> qui a \u00e9t\u00e9 supprim\u00e9 ici. Il faudrait \u00e9crire <code>if True:</code>, ce qui est inutile...  ```             </li> </ol>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-04","title":"\u25b6 Sujet 04","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-041","title":"Exercice 04.1 \u25a1","text":"<p>Exercice 04.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tre un tableau de nombres entiers <code>tab</code>, et qui renvoie la liste (\u00e9ventuellement vide) des couples d'entiers cons\u00e9cutifs successifs qu'il peut y avoir dans <code>tab</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche([1, 4, 3, 5])\n[]\n&gt;&gt;&gt; recherche([1, 4, 5, 3])\n[(4, 5)]\n&gt;&gt;&gt; recherche([7, 1, 2, 5, 3, 4])\n[(1, 2), (3, 4)]\n&gt;&gt;&gt; recherche([5, 1, 2, 3, 8, -5, -4, 7])\n[(1, 2), (2, 3), (-5, -4)]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(tab):\n    solution = []\n    for i in range(len(tab)-1):\n        if tab[i] + 1 == tab[i+1]:\n            solution.append((tab[i], tab[i+1]))\n    return solution\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `recherche` qui prend en param\u00e8tre un tableau de nombres entiers\n`tab`, et qui renvoie la liste (\u00e9ventuellement vide) des couples d'entiers cons\u00e9cutifs\nsuccessifs qu'il peut y avoir dans `tab`.\n\nExemples :\n```python\n&gt;&gt;&gt; recherche([1, 4, 3, 5])\n[]\n&gt;&gt;&gt; recherche([1, 4, 5, 3])\n[(4, 5)]\n&gt;&gt;&gt; recherche([7, 1, 2, 5, 3, 4])\n[(1, 2), (3, 4)]\n&gt;&gt;&gt; recherche([5, 1, 2, 3, 8, -5, -4, 7])\n[(1, 2), (2, 3), (-5, -4)]\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-042","title":"Exercice 04.2 \u25a1","text":"<p>Exercice 04.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Soit une image binaire repr\u00e9sent\u00e9e dans un tableau \u00e0 2 dimensions. Les \u00e9l\u00e9ments <code>M[i][j]</code>, appel\u00e9s pixels, sont \u00e9gaux soit \u00e0 <code>0</code> soit \u00e0 <code>1</code>.</p> <p>Une composante d\u2019une image est un sous-ensemble de l\u2019image constitu\u00e9 uniquement de <code>1</code> et de <code>0</code> qui sont c\u00f4te \u00e0 c\u00f4te, soit horizontalement soit verticalement.</p> <p>Par exemple, les composantes de  sont </p> <p>On souhaite, \u00e0 partir d\u2019un pixel \u00e9gal \u00e0 <code>1</code> dans une image <code>M</code>, donner la valeur <code>val</code> \u00e0 tous les pixels de la composante \u00e0 laquelle appartient ce pixel.</p> <p>La fonction <code>propager</code> prend pour param\u00e8tre une image <code>M</code>, deux entiers <code>i</code> et <code>j</code> et une valeur enti\u00e8re <code>val</code>. Elle met \u00e0 la valeur <code>val</code> tous les pixels de la composante du pixel <code>M[i][j]</code> s\u2019il vaut <code>1</code> et ne fait rien s\u2019il vaut <code>0</code>.</p> <p>Par exemple, <code>propager(M,2,1,3)</code> donne </p> <p>Compl\u00e9ter le code r\u00e9cursif de la fonction <code>propager</code> donn\u00e9 ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def propager(M, i, j, val):\n    if M[i][j]== ...:\n        return None # (1)\n\n    M[i][j] = val\n\n    # l'\u00e9l\u00e9ment en haut fait partie de la composante\n    if ((i-1) &gt;= 0 and M[i-1][j] == ...):\n        propager(M, i-1, j, val)\n\n    # l'\u00e9l\u00e9ment en bas fait partie de la composante\n    if ((...) &lt; len(M) and M[i+1][j] == 1):\n        propager(M, ..., j, val)\n\n    # l'\u00e9l\u00e9ment \u00e0 gauche fait partie de la composante\n    if ((...) &gt;= 0 and M[i][j-1] == 1):\n        propager(M, i, ..., val)\n\n    # l'\u00e9l\u00e9ment \u00e0 droite fait partie de la composante\n    if ((...) &lt; len(M) and M[i][j+1] == 1): # (2)\n        propager(M, i, ..., val)\n</code></pre> <ol> <li>Dans l'\u00e9nonc\u00e9 original, il n'y a rien apr\u00e8s le <code>return</code>. </li> <li>Il faudrait \u00e9crire <code>len(M[0])</code> plut\u00f4t que  <code>len(M)</code>. (\u00e9quivalent ici car l'image est carr\u00e9e...)</li> </ol> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; M = [[0,0,1,0],[0,1,0,1],[1,1,1,0],[0,1,1,0]]\n&gt;&gt;&gt; propager(M,2,1,3)\n&gt;&gt;&gt; M\n[[0, 0, 1, 0], [0, 3, 0, 1], [3, 3, 3, 0], [0, 3, 3, 0]]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def propager(M, i, j, val):\n    if M[i][j]== 0 :\n        return None\n\n    M[i][j] = val\n\n    # l'\u00e9l\u00e9ment en haut fait partie de la composante\n    if ((i-1) &gt;= 0 and M[i-1][j] == 1):\n        propager(M, i-1, j, val)\n\n    # l'\u00e9l\u00e9ment en bas fait partie de la composante\n    if ((i+1) &lt; len(M) and M[i+1][j] == 1):\n        propager(M, i+1, j, val)\n\n    # l'\u00e9l\u00e9ment \u00e0 gauche fait partie de la composante\n    if ((j-1) &gt;= 0 and M[i][j-1] == 1):\n        propager(M, i, j-1, val)\n\n    # l'\u00e9l\u00e9ment \u00e0 droite fait partie de la composante\n    if ((j+1) &lt; len(M) and M[i][j+1] == 1):\n        propager(M, i, j+1, val)\n</code></pre> Markdown<pre><code>Soit une image binaire repr\u00e9sent\u00e9e dans un tableau \u00e0 2 dimensions. Les \u00e9l\u00e9ments\n`M[i][j]`, appel\u00e9s pixels, sont \u00e9gaux soit \u00e0 `0` soit \u00e0 `1`.\n\nUne composante d\u2019une image est un sous-ensemble de l\u2019image constitu\u00e9 uniquement de\n`1` et de `0` qui sont c\u00f4te \u00e0 c\u00f4te, soit horizontalement soit verticalement.\n\nPar exemple, les composantes de\n![image](data/252a.png){: .center width=30%}\nsont\n![image](data/252b.png){: .center width=30%}\n\nOn souhaite, \u00e0 partir d\u2019un pixel \u00e9gal \u00e0 `1` dans une image `M`, donner la valeur `val` \u00e0 tous\nles pixels de la composante \u00e0 laquelle appartient ce pixel.\n\nLa fonction `propager` prend pour param\u00e8tre une image `M`, deux entiers `i` et `j` et une\nvaleur enti\u00e8re `val`. Elle met \u00e0 la valeur `val` tous les pixels de la composante du pixel\n`M[i][j]` s\u2019il vaut `1` et ne fait rien s\u2019il vaut `0`.\n\nPar exemple, `propager(M,2,1,3)` donne\n![image](data/252c.png){: .center width=30%}\n\nCompl\u00e9ter le code r\u00e9cursif de la fonction `propager` donn\u00e9 ci-dessous :\n\n```python linenums='1'\ndef propager(M, i, j, val):\n    if M[i][j]== ...:\n        return None # (1)\n\n    M[i][j] = val\n\n    # l'\u00e9l\u00e9ment en haut fait partie de la composante\n    if ((i-1) &gt;= 0 and M[i-1][j] == ...):\n        propager(M, i-1, j, val)\n\n    # l'\u00e9l\u00e9ment en bas fait partie de la composante\n    if ((...) &lt; len(M) and M[i+1][j] == 1):\n        propager(M, ..., j, val)\n\n    # l'\u00e9l\u00e9ment \u00e0 gauche fait partie de la composante\n    if ((...) &gt;= 0 and M[i][j-1] == 1):\n        propager(M, i, ..., val)\n\n    # l'\u00e9l\u00e9ment \u00e0 droite fait partie de la composante\n    if ((...) &lt; len(M) and M[i][j+1] == 1): # (2)\n        propager(M, i, ..., val)\n</code></pre> <ol> <li>Dans l'\u00e9nonc\u00e9 original, il n'y a rien apr\u00e8s le <code>return</code>. </li> <li>Il faudrait \u00e9crire <code>len(M[0])</code> plut\u00f4t que  <code>len(M)</code>. (\u00e9quivalent ici car l'image est carr\u00e9e...)</li> </ol> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; M = [[0,0,1,0],[0,1,0,1],[1,1,1,0],[0,1,1,0]]\n&gt;&gt;&gt; propager(M,2,1,3)\n&gt;&gt;&gt; M\n[[0, 0, 1, 0], [0, 3, 0, 1], [3, 3, 3, 0], [0, 3, 3, 0]]\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-05","title":"\u25b6 Sujet 05","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-051","title":"Exercice 05.1 \u25a1","text":"<p>Exercice 05.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>rechercheMinMax</code> qui prend en param\u00e8tre un tableau de nombres non tri\u00e9s <code>tab</code>, et qui renvoie la plus petite et la plus grande valeur du tableau sous la forme d\u2019un dictionnaire \u00e0 deux cl\u00e9s \u2018min\u2019 et \u2018max\u2019. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tableau = [0, 1, 4, 2, -2, 9, 3, 1, 7, 1]\n&gt;&gt;&gt; resultat = rechercheMinMax(tableau)\n&gt;&gt;&gt; resultat\n{'min': -2, 'max': 9}\n&gt;&gt;&gt; tableau = []\n&gt;&gt;&gt; resultat = rechercheMinMax(tableau)\n&gt;&gt;&gt; resultat\n{'min': None, 'max': None}\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def rechercheMinMax(tab):\n    if tab == []:\n        return {'min': None, 'max': None}\n    d = {}\n    d['min'] = tab[0]\n    d['max'] = tab[0]\n    for val in tab:\n        if val &lt; d['min']:\n            d['min'] = val\n        if val &gt; d['max']:\n            d['max'] = val\n    return d\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `rechercheMinMax` qui prend en param\u00e8tre un tableau de nombres\nnon tri\u00e9s `tab`, et qui renvoie la plus petite et la plus grande valeur du tableau sous la\nforme d\u2019un dictionnaire \u00e0 deux cl\u00e9s \u2018min\u2019 et \u2018max\u2019. Les tableaux seront repr\u00e9sent\u00e9s sous\nforme de liste Python.\n\nExemples :\n```python\n&gt;&gt;&gt; tableau = [0, 1, 4, 2, -2, 9, 3, 1, 7, 1]\n&gt;&gt;&gt; resultat = rechercheMinMax(tableau)\n&gt;&gt;&gt; resultat\n{'min': -2, 'max': 9}\n&gt;&gt;&gt; tableau = []\n&gt;&gt;&gt; resultat = rechercheMinMax(tableau)\n&gt;&gt;&gt; resultat\n{'min': None, 'max': None}\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-052","title":"Exercice 05.2 \u25a1","text":"<p>Exercice 05.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On dispose d\u2019un programme permettant de cr\u00e9er un objet de type <code>PaquetDeCarte</code>, selon les \u00e9l\u00e9ments indiqu\u00e9s dans le code ci-dessous. Compl\u00e9ter ce code aux endroits indiqu\u00e9s par <code>#A compl\u00e9ter</code>, puis ajouter des assertions dans l\u2019initialiseur de <code>Carte</code>, ainsi que dans la m\u00e9thode <code>getCarteAt()</code>.</p> <p>\ud83d\udc0d Script Python<pre><code>class Carte:\n    \"\"\"Initialise Couleur (entre 1 a 4), et Valeur (entre 1 a 13)\"\"\"\n    def __init__(self, c, v):\n        self.Couleur = c\n        self.Valeur = v\n\n    \"\"\"Renvoie le nom de la Carte As, 2, ... 10, \n       Valet, Dame, Roi\"\"\"\n    def getNom(self):\n        if ( self.Valeur &gt; 1 and self.Valeur &lt; 11):\n            return str( self.Valeur)\n        elif self.Valeur == 11:\n            return \"Valet\"\n        elif self.Valeur == 12:\n            return \"Dame\"\n        elif self.Valeur == 13:\n            return \"Roi\"\n        else:\n            return \"As\"\n\n    \"\"\"Renvoie la couleur de la Carte (parmi pique, coeur, carreau, trefle\"\"\"\n    def getCouleur(self):\n        return ['pique', 'coeur', 'carreau', 'trefle' ][self.Couleur - 1]\n\nclass PaquetDeCarte:\n    def __init__(self):\n        self.contenu = []\n\n    \"\"\"Remplit le paquet de cartes\"\"\"\n    def remplir(self):\n        ??? = [ ??? for couleur in range(1, ???) for valeur in range( 1, ???)]\n\n    \"\"\"Renvoie la Carte qui se trouve a\u00a0 la position donnee\"\"\"\n    def getCarteAt(self, pos):\n        if 0 &lt;= pos &lt; ??? :\n            return ???\n</code></pre> Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; unPaquet = PaquetDeCarte()\n&gt;&gt;&gt; unPaquet.remplir()\n&gt;&gt;&gt; uneCarte = unPaquet.getCarteAt(20)\n&gt;&gt;&gt; print(uneCarte.getNom() + \" de \" + uneCarte.getCouleur())\n  8 de coeur\n</code></pre> <p>Attention, le code propos\u00e9 ne respecte pas les standards de notation :</p> <ul> <li>il ne faut pas de majuscules sur les noms des attributs</li> <li>la docstring se place \u00e0 l'int\u00e9rieur de la fonction et non au dessus.</li> </ul> \ud83d\udc0d Script Python<pre><code>class Carte:\n    \"\"\"Initialise Couleur (entre 1 \u00e0 4), et Valeur (entre 1 \u00e0 13)\"\"\"\n    def __init__(self, c, v):\n        assert c in range(1, 5)\n        assert v in range(1, 14)\n        self.Couleur = c\n        self.Valeur = v\n\n    \"\"\"Renvoie le nom de la Carte As, 2, ... 10, Valet, Dame, Roi\"\"\"\n    def getNom(self):\n        if (self.Valeur &gt; 1 and self.Valeur &lt; 11):\n            return str( self.Valeur)\n        elif self.Valeur == 11:\n            return \"Valet\"\n        elif self.Valeur == 12:\n            return \"Dame\"\n        elif self.Valeur == 13:\n            return \"Roi\"\n        else:\n            return \"As\"\n\n    \"\"\"Renvoie la couleur de la Carte (parmi pique, coeur, carreau, trefle\"\"\"\n    def getCouleur(self):\n        return ['pique', 'coeur', 'carreau', 'trefle'][self.Couleur - 1]\n\nclass PaquetDeCarte:\n    def __init__(self):\n        self.contenu = []\n\n    \"\"\"Remplit le paquet de cartes\"\"\"\n    def remplir(self):\n        self.contenu = [Carte(couleur, valeur) for couleur in range(1, 5) for valeur in range(1, 14)]\n\n    \"\"\"Renvoie la Carte qui se trouve \u00e0 la position donn\u00e9e\"\"\"\n    def getCarteAt(self, pos):\n        assert pos in range(0, 52)\n        if 0 &lt;= pos &lt; len(self.contenu) :\n            return self.contenu[pos]\n</code></pre> <p>Markdown<pre><code>On dispose d\u2019un programme permettant de cr\u00e9er un objet de type `PaquetDeCarte`,\nselon les \u00e9l\u00e9ments indiqu\u00e9s dans le code ci-dessous.\nCompl\u00e9ter ce code aux endroits indiqu\u00e9s par `#A compl\u00e9ter`, puis ajouter des\nassertions dans l\u2019initialiseur de `Carte`, ainsi que dans la m\u00e9thode `getCarteAt()`.\n\n```python linenums='1'\nclass Carte:\n    \"\"\"Initialise Couleur (entre 1 a 4), et Valeur (entre 1 a 13)\"\"\"\n    def __init__(self, c, v):\n        self.Couleur = c\n        self.Valeur = v\n\n    \"\"\"Renvoie le nom de la Carte As, 2, ... 10, \n       Valet, Dame, Roi\"\"\"\n    def getNom(self):\n        if ( self.Valeur &gt; 1 and self.Valeur &lt; 11):\n            return str( self.Valeur)\n        elif self.Valeur == 11:\n            return \"Valet\"\n        elif self.Valeur == 12:\n            return \"Dame\"\n        elif self.Valeur == 13:\n            return \"Roi\"\n        else:\n            return \"As\"\n\n    \"\"\"Renvoie la couleur de la Carte (parmi pique, coeur, carreau, trefle\"\"\"\n    def getCouleur(self):\n        return ['pique', 'coeur', 'carreau', 'trefle' ][self.Couleur - 1]\n\nclass PaquetDeCarte:\n    def __init__(self):\n        self.contenu = []\n\n    \"\"\"Remplit le paquet de cartes\"\"\"\n    def remplir(self):\n        ??? = [ ??? for couleur in range(1, ???) for valeur in range( 1, ???)]\n\n    \"\"\"Renvoie la Carte qui se trouve a\u00a0 la position donnee\"\"\"\n    def getCarteAt(self, pos):\n        if 0 &lt;= pos &lt; ??? :\n            return ???\n</code></pre> Exemple :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; unPaquet = PaquetDeCarte()\n&gt;&gt;&gt; unPaquet.remplir()\n&gt;&gt;&gt; uneCarte = unPaquet.getCarteAt(20)\n&gt;&gt;&gt; print(uneCarte.getNom() + \" de \" + uneCarte.getCouleur())\n  8 de coeur\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-06","title":"\u25b6 Sujet 06","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-061","title":"Exercice 06.1 \u25a1","text":"<p>Exercice 06.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>maxi</code> qui prend en param\u00e8tre une liste <code>tab</code> de nombres entiers et renvoie un couple donnant le plus grand \u00e9l\u00e9ment de cette liste, ainsi que l\u2019indice de la premi\u00e8re apparition de ce maximum dans la liste.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; maxi([1,5,6,9,1,2,3,7,9,8])\n(9,3)\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def maxi(tab):\n    val_max = tab[0]\n    pos_max = 0\n    for i in range(len(tab)):\n        if tab[i] &gt; val_max:\n            val_max = tab[i]\n            pos_max = i\n    return (val_max, pos_max)\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `maxi` qui prend en param\u00e8tre une liste `tab` de nombres entiers et renvoie un couple donnant le plus grand \u00e9l\u00e9ment de cette liste, ainsi que l\u2019indice de la premi\u00e8re apparition de ce maximum dans la liste.\n\nExemple :\n```python\n&gt;&gt;&gt; maxi([1,5,6,9,1,2,3,7,9,8])\n(9,3)\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-062","title":"Exercice 06.2 \u25a1","text":"<p>Exercice 06.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>La fonction <code>recherche</code> prend en param\u00e8tres deux chaines de caract\u00e8res <code>gene</code> et <code>seq_adn</code> et renvoie <code>True</code> si on retrouve <code>gene</code> dans <code>seq_adn</code> et <code>False</code> sinon. Compl\u00e9ter le code Python ci-dessous pour qu\u2019il impl\u00e9mente la fonction <code>recherche</code>.</p> \ud83d\udc0d Script Python<pre><code>def recherche(gene, seq_adn):\n    n = len(seq_adn)\n    g = len(gene)\n    i = ...\n    trouve = False\n    while i &lt; ... and trouve == ... :\n        j = 0\n        while j &lt; g and gene[j] == seq_adn[i+j]:\n            ...\n        if j == g:\n            trouve = True\n        ...\n    return trouve\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(\"AATC\", \"GTACAAATCTTGCC\")\nTrue\n&gt;&gt;&gt; recherche(\"AGTC\", \"GTACAAATCTTGCC\")\nFalse\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(gene, seq_adn):\n    n = len(seq_adn)\n    g = len(gene)\n    i = 0\n    trouve = False\n    while i &lt; n-g+1 and trouve == False :\n        j = 0\n        while j &lt; g and gene[j] == seq_adn[i+j]:\n            j += 1\n        if j == g:\n            trouve = True\n        i += 1\n    return trouve\n</code></pre> Markdown<pre><code>La fonction `recherche` prend en param\u00e8tres deux chaines de caract\u00e8res `gene` et\n`seq_adn` et renvoie `True` si on retrouve `gene` dans `seq_adn` et `False` sinon.\nCompl\u00e9ter le code Python ci-dessous pour qu\u2019il impl\u00e9mente la fonction `recherche`.\n\n```python linenums='1'\ndef recherche(gene, seq_adn):\n    n = len(seq_adn)\n    g = len(gene)\n    i = ...\n    trouve = False\n    while i &lt; ... and trouve == ... :\n        j = 0\n        while j &lt; g and gene[j] == seq_adn[i+j]:\n            ...\n        if j == g:\n            trouve = True\n        ...\n    return trouve\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(\"AATC\", \"GTACAAATCTTGCC\")\nTrue\n&gt;&gt;&gt; recherche(\"AGTC\", \"GTACAAATCTTGCC\")\nFalse\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-07","title":"\u25b6 Sujet 07","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-071","title":"Exercice 07.1 \u25a1","text":"<p>Exercice 07.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>conv_bin</code> qui prend en param\u00e8tre un entier positif <code>n</code> et renvoie un couple (<code>b,bit)</code> o\u00f9 :</p> <ul> <li><code>b</code> est une liste d'entiers correspondant \u00e0 la repr\u00e9sentation binaire de <code>n</code>;</li> <li><code>bit</code> correspond aux nombre de bits qui constituent <code>b</code>.</li> </ul> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; conv_bin(9)\n([1,0,0,1],4)\n</code></pre></p> <p>Aide :</p> <ul> <li>l'op\u00e9rateur <code>//</code> donne le quotient de la division euclidienne : <code>5//2</code> donne <code>2</code> ;</li> <li>l'op\u00e9rateur <code>%</code> donne le reste de la division euclidienne :<code>5%2</code> donne <code>1</code> ;</li> <li><code>append</code> est une m\u00e9thode qui ajoute un \u00e9l\u00e9ment \u00e0 une liste existante : Soit <code>T=[5,2,4]</code>, alors <code>T.append(10)</code> ajoute <code>10</code> \u00e0 la liste <code>T</code>. Ainsi, <code>T</code> devient <code>[5,2,4,10]</code>.</li> <li><code>reverse</code> est une m\u00e9thode qui renverse les \u00e9l\u00e9ments d'une liste. Soit <code>T=[5,2,4,10]</code>. Apr\u00e8s <code>T.reverse()</code>, la liste devient <code>[10,4,2,5]</code>.</li> </ul> <p>On remarquera qu\u2019on r\u00e9cup\u00e8re la repr\u00e9sentation binaire d\u2019un entier <code>n</code> en partant de la gauche en appliquant successivement les instructions :</p> <p><code>b = n%2</code></p> <p><code>n = n//2</code></p> <p>r\u00e9p\u00e9t\u00e9es autant que n\u00e9cessaire.</p> \ud83d\udc0d Script Python<pre><code>def conv_bin(n):\n    # cas particulier pour n = 0\n    if n == 0:\n        return ([0], 1)\n    # cas g\u00e9n\u00e9ral\n    b = []\n    bits = 0\n    while n != 0:\n        b.append(n % 2)\n        bits += 1\n        n = n // 2\n    b.reverse()\n    return (b, bits)\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `conv_bin` qui prend en param\u00e8tre un entier positif `n` et renvoie un\ncouple (`b,bit)` o\u00f9 :\n\n- `b` est une liste d'entiers correspondant \u00e0 la repr\u00e9sentation binaire de `n`;\n- `bit` correspond aux nombre de bits qui constituent `b`.\n\nExemple :\n```python\n&gt;&gt;&gt; conv_bin(9)\n([1,0,0,1],4)\n```\n\nAide :\n\n- l'op\u00e9rateur `//` donne le quotient de la division euclidienne : `5//2` donne `2` ;\n- l'op\u00e9rateur `%` donne le reste de la division euclidienne :` 5%2` donne `1` ;\n- `append` est une m\u00e9thode qui ajoute un \u00e9l\u00e9ment \u00e0 une liste existante :\nSoit `T=[5,2,4]`, alors `T.append(10)` ajoute `10` \u00e0 la liste `T`. Ainsi, `T` devient\n`[5,2,4,10]`.\n- `reverse` est une m\u00e9thode qui renverse les \u00e9l\u00e9ments d'une liste.\nSoit `T=[5,2,4,10]`. Apr\u00e8s `T.reverse()`, la liste devient `[10,4,2,5]`.\n\nOn remarquera qu\u2019on r\u00e9cup\u00e8re la repr\u00e9sentation binaire d\u2019un entier `n` en partant de la gauche en appliquant successivement les instructions :\n\n`b = n%2`\n\n`n = n//2`\n\nr\u00e9p\u00e9t\u00e9es autant que n\u00e9cessaire.\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-072","title":"Exercice 07.2 \u25a1","text":"<p>Exercice 07.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>La fonction <code>tri_bulles</code> prend en param\u00e8tre une liste <code>T</code> d\u2019entiers non tri\u00e9s et renvoie la liste tri\u00e9e par ordre croissant. Compl\u00e9ter le code Python ci-dessous qui impl\u00e9mente la fonction <code>tri_bulles</code>.</p> \ud83d\udc0d Script Python<pre><code>def tri_bulles(T):\n    n = len(T)\n    for i in range(...,...,-1):\n        for j in range(i):\n            if T[j] &gt; T[...]:\n                ... = T[j]\n                T[j] = T[...]\n                T[j+1] = temp\n    return T\n</code></pre> \ud83d\udc0d Script Python<pre><code>def tri_bulles(T):\n    n = len(T)\n    for i in range(n-1,0,-1):\n        for j in range(i):\n            if T[j] &gt; T[j+1]:\n                temp = T[j]\n                T[j] = T[j+1]\n                T[j+1] = temp\n    return T\n</code></pre> <p>Markdown<pre><code>La fonction `tri_bulles` prend en param\u00e8tre une liste `T` d\u2019entiers non tri\u00e9s et renvoie la liste tri\u00e9e par ordre croissant.\nCompl\u00e9ter le code Python ci-dessous qui impl\u00e9mente la fonction `tri_bulles`.\n\n```python linenums='1'\ndef tri_bulles(T):\n    n = len(T)\n    for i in range(...,...,-1):\n        for j in range(i):\n            if T[j] &gt; T[...]:\n                ... = T[j]\n                T[j] = T[...]\n                T[j+1] = temp\n    return T\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-08","title":"\u25b6 Sujet 08","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-081","title":"Exercice 08.1 \u25a1","text":"<p>Exercice 08.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>elt</code> un nombre entier et <code>tab</code> un tableau de nombres entiers, et qui renvoie l\u2019indice de la premi\u00e8re occurrence de <code>elt</code> dans <code>tab</code> si <code>elt</code> est dans <code>tab</code> et <code>-1</code> sinon.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(1, [2, 3, 4])\n-1\n&gt;&gt;&gt; recherche(1, [10, 12, 1, 56])\n2\n&gt;&gt;&gt; recherche(50, [1, 50, 1])\n1\n&gt;&gt;&gt; recherche(15, [8, 9, 10, 15])\n3\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(elt, tab):\n    for i in range(len(tab)):\n        if tab[i] == elt:\n            return i        \n    return -1         \n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `recherche` qui prend en param\u00e8tres `elt` un nombre entier et `tab`\nun tableau de nombres entiers, et qui renvoie l\u2019indice de la premi\u00e8re occurrence de `elt`\ndans `tab` si `elt` est dans `tab` et `-1` sinon.\n\nExemples :\n```python\n&gt;&gt;&gt; recherche(1, [2, 3, 4])\n-1\n&gt;&gt;&gt; recherche(1, [10, 12, 1, 56])\n2\n&gt;&gt;&gt; recherche(50, [1, 50, 1])\n1\n&gt;&gt;&gt; recherche(15, [8, 9, 10, 15])\n3\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-082","title":"Exercice 08.2 \u25a1","text":"<p>Exercice 08.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On consid\u00e8re la fonction <code>insere</code> ci-dessous qui prend en argument un entier <code>a</code> et un tableau <code>tab</code> d'entiers tri\u00e9s par ordre croissant. Cette fonction ins\u00e8re la valeur <code>a</code> dans le tableau et renvoie le nouveau tableau. Les tableaux seront repr\u00e9sent\u00e9s sous la forme de listes python.</p> \ud83d\udc0d Script Python<pre><code>def insere(a, tab):\n    l = list(tab) #l contient les m\u00eames \u00e9l\u00e9ments que tab\n    l.append(a)\n    i = ...\n    while a &lt; ... and i &gt;= 0:\n        l[i+1] = ...\n        l[i] = a\n        i = ...\n    return l\n</code></pre> <p>Compl\u00e9ter la fonction <code>insere</code> ci-dessus.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; insere(3,[1,2,4,5])\n[1, 2, 3, 4, 5]\n&gt;&gt;&gt; insere(10,[1,2,7,12,14,25])\n[1, 2, 7, 10, 12, 14, 25]\n&gt;&gt;&gt; insere(1,[2,3,4])\n[1, 2, 3, 4]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def insere(a, tab):\n    l = list(tab) #l contient les m\u00eames \u00e9l\u00e9ments que tab\n    l.append(a)\n    i = len(l) - 2\n    while a &lt; l[i] and i &gt;= 0:\n        l[i+1] = l[i]\n        l[i] = a\n        i = i - 1\n    return l\n</code></pre> Markdown<pre><code>On consid\u00e8re la fonction `insere` ci-dessous qui prend en argument un entier `a` et un\ntableau `tab` d'entiers tri\u00e9s par ordre croissant. Cette fonction ins\u00e8re la valeur `a` dans le\ntableau et renvoie le nouveau tableau. Les tableaux seront repr\u00e9sent\u00e9s sous la forme de\nlistes python.\n\n\n```python linenums='1'\ndef insere(a, tab):\n    l = list(tab) #l contient les m\u00eames \u00e9l\u00e9ments que tab\n    l.append(a)\n    i = ...\n    while a &lt; ... and i &gt;= 0:\n        l[i+1] = ...\n        l[i] = a\n        i = ...\n    return l\n</code></pre> <p>Compl\u00e9ter la fonction <code>insere</code> ci-dessus.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; insere(3,[1,2,4,5])\n[1, 2, 3, 4, 5]\n&gt;&gt;&gt; insere(10,[1,2,7,12,14,25])\n[1, 2, 7, 10, 12, 14, 25]\n&gt;&gt;&gt; insere(1,[2,3,4])\n[1, 2, 3, 4]\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-09","title":"\u25b6 Sujet 09","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-091","title":"Exercice 09.1 \u25a1","text":"<p>Exercice 09.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Soit un nombre entier sup\u00e9rieur ou \u00e9gal \u00e0 1 :</p> <ul> <li>s'il est pair, on le divise par 2 ;</li> <li>s\u2019il est impair, on le multiplie par 3 et on ajoute 1.</li> </ul> <p>Puis on recommence ces \u00e9tapes avec le nombre entier obtenu, jusqu\u2019\u00e0 ce que l\u2019on obtienne la valeur 1.</p> <p>On d\u00e9finit ainsi la suite \\((U_n)\\) par :</p> <ul> <li>\\(U_0=k\\), o\u00f9 \\(k\\) est un entier choisi initialement;</li> <li>\\(U_{n+1} = \\dfrac{U_n}{2}\\) si \\(U_n\\) est pair;</li> <li>\\(U_{n+1} = 3 \\times U_n + 1\\) si \\(U_n\\) est impair.</li> </ul> <p>On admet que, quel que soit l'entier <code>k</code> choisi au d\u00e9part, la suite finit toujours sur la valeur 1.</p> <p>\u00c9crire une fonction <code>calcul</code> prenant en param\u00e8tres un entier <code>k</code> strictement positif et qui renvoie la liste des valeurs de la suite, en partant de <code>k</code> et jusqu'\u00e0 atteindre 1.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; calcul(7)\n[7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def calcul(k):\n    valeurs = []\n    n = k\n    valeurs.append(n)\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3*n + 1\n        valeurs.append(n)\n    return valeurs\n</code></pre> \ud83d\udccb Texte<pre><code>Soit un nombre entier sup\u00e9rieur ou \u00e9gal \u00e0 1 :\n\n- s'il est pair, on le divise par 2 ;\n- s\u2019il est impair, on le multiplie par 3 et on ajoute 1.\n\nPuis on recommence ces \u00e9tapes avec le nombre entier obtenu, jusqu\u2019\u00e0 ce que l\u2019on\nobtienne la valeur 1.\n\nOn d\u00e9finit ainsi la suite $(U_n)$ par :\n\n- $U_0=k$, o\u00f9 $k$ est un entier choisi initialement;\n- $U_{n+1} = \\dfrac{U_n}{2}$ si $U_n$ est pair;\n- $U_{n+1} = 3 \\times U_n + 1$ si $U_n$ est impair.\n\n**On admet que, quel que soit l'entier ```k``` choisi au d\u00e9part, la suite finit toujours sur la valeur 1.**\n\n\u00c9crire une fonction ```calcul``` prenant en param\u00e8tres un entier ```k``` strictement positif et qui renvoie la liste des valeurs de la suite, en partant de ```k``` et jusqu'\u00e0 atteindre 1.\n\nExemple :\n```python\n&gt;&gt;&gt; calcul(7)\n[7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1]\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-092","title":"Exercice 09.2 \u25a1","text":"<p>Exercice 09.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On affecte \u00e0 chaque lettre de l'alphabet un code selon le tableau ci-dessous :</p> A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 <p>Pour un mot donn\u00e9, on d\u00e9termine d\u2019une part son code alphab\u00e9tique concat\u00e9n\u00e9, obtenu par la juxtaposition des codes de chacun de ses caract\u00e8res, et d\u2019autre part, son code additionn\u00e9, qui est la somme des codes de chacun de ses caract\u00e8res.</p> <p>Par ailleurs, on dit que ce mot est \u00ab parfait \u00bb si le code additionn\u00e9 divise le code concat\u00e9n\u00e9.</p> <p>Exemples :</p> <ul> <li> <p>Pour le mot <code>\"PAUL\"</code>, le code concat\u00e9n\u00e9 est la cha\u00eene <code>'1612112'</code>, soit l\u2019entier 1 612 112. Son code additionn\u00e9 est l\u2019entier 50 car 16 + 1 + 21 + 12 = 50. 50 ne divise pas l\u2019entier 1 612 112 ; par cons\u00e9quent, le mot <code>\"PAUL\"</code> n\u2019est pas parfait.</p> </li> <li> <p>Pour le mot <code>\"ALAIN\"</code>, le code concat\u00e9n\u00e9 est la cha\u00eene <code>'1121914'</code>, soit l\u2019entier 1 121 914. Le code additionn\u00e9 est l\u2019entier 37 car 1 + 12 + 1 + 9 + 14 = 37. 37 divise l\u2019entier 1 121 914 ; par cons\u00e9quent, le mot <code>\"ALAIN\"</code> est parfait.</p> </li> </ul> <p>Compl\u00e9ter la fonction <code>est_parfait</code> ci-dessous qui prend comme argument une cha\u00eene de caract\u00e8res <code>mot</code> (en lettres majuscules) et qui renvoie le code alphab\u00e9tique concat\u00e9n\u00e9, le code additionn\u00e9 de <code>mot</code>, ainsi qu\u2019un bool\u00e9en qui indique si <code>mot</code> est parfait ou pas.</p> \ud83d\udc0d Script Python<pre><code>dico = {\"A\":1, \"B\":2, \"C\":3, \"D\":4, \"E\":5, \"F\":6, \"G\":7, \\\n\"H\":8, \"I\":9, \"J\":10, \"K\":11, \"L\":12, \"M\":13, \\\n\"N\":14, \"O\":15, \"P\":16, \"Q\":17, \"R\":18, \"S\":19, \\\n\"T\":20, \"U\":21,\"V\":22, \"W\":23, \"X\":24, \"Y\":25, \"Z\":26}\n\ndef est_parfait(mot) :\n    #mot est une cha\u00eene de caract\u00e8res (en lettres majuscules)\n    code_c = \"\"\n    code_a = ???\n    for c in mot :\n        code_c = code_c + ???\n        code_a = ???\n    code_c = int(code_c)\n    if ??? :\n        mot_est_parfait = True\n    else :\n        mot_est_parfait = False\n    return [code_a, code_c, mot_est_parfait]\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; est_parfait(\"PAUL\")\n[50, 1612112, False]\n&gt;&gt;&gt; est_parfait(\"ALAIN\")\n[37, 1121914, True]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>dico = {\"A\":1, \"B\":2, \"C\":3, \"D\":4, \"E\":5, \"F\":6, \"G\":7, \\\n\"H\":8, \"I\":9, \"J\":10, \"K\":11, \"L\":12, \"M\":13, \\\n\"N\":14, \"O\":15, \"P\":16, \"Q\":17, \"R\":18, \"S\":19, \\\n\"T\":20, \"U\":21,\"V\":22, \"W\":23, \"X\":24, \"Y\":25, \"Z\":26}\n\ndef est_parfait(mot) :\n    #mot est une cha\u00eene de caract\u00e8res (en lettres majuscules)\n    code_c = \"\"\n    code_a = 0\n    for c in mot :\n        code_c = code_c + str(dico[c])\n        code_a = code_a + dico[c]\n    code_c = int(code_c)\n    if code_c % code_a == 0:\n        mot_est_parfait = True\n    else :\n        mot_est_parfait = False\n    return [code_a, code_c, mot_est_parfait]\n</code></pre> Markdown<pre><code>On affecte \u00e0 chaque lettre de l'alphabet un code selon le tableau ci-dessous :\n\n| A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z | \n|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|\n| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | \n\n\nPour un mot donn\u00e9, on d\u00e9termine d\u2019une part son *code alphab\u00e9tique concat\u00e9n\u00e9*, obtenu\npar la juxtaposition des codes de chacun de ses caract\u00e8res, et d\u2019autre part, *son code\nadditionn\u00e9*, qui est la somme des codes de chacun de ses caract\u00e8res.\n\nPar ailleurs, on dit que ce mot est \u00ab *parfait* \u00bb si le code additionn\u00e9 divise le code concat\u00e9n\u00e9.\n\nExemples :\n\n- Pour le mot `\"PAUL\"`, le code concat\u00e9n\u00e9 est la cha\u00eene `'1612112'`, soit l\u2019entier 1 612 112.\nSon code additionn\u00e9 est l\u2019entier 50 car 16 + 1 + 21 + 12 = 50.\n50 ne divise pas l\u2019entier 1 612 112 ; par cons\u00e9quent, le mot `\"PAUL\"` n\u2019est pas\nparfait.\n\n- Pour le mot `\"ALAIN\"`, le code concat\u00e9n\u00e9 est la cha\u00eene `'1121914'`, soit l\u2019entier\n1 121 914. Le code additionn\u00e9 est l\u2019entier 37 car 1 + 12 + 1 + 9 + 14 = 37.\n37 divise l\u2019entier 1 121 914 ; par cons\u00e9quent, le mot `\"ALAIN\"` est parfait.\n\n\nCompl\u00e9ter la fonction `est_parfait` ci-dessous qui prend comme argument une cha\u00eene\nde caract\u00e8res `mot` (en lettres majuscules) et qui renvoie le code alphab\u00e9tique concat\u00e9n\u00e9,\nle code additionn\u00e9 de `mot`, ainsi qu\u2019un bool\u00e9en qui indique si `mot` est parfait ou pas.\n\n```python linenums='1'\ndico = {\"A\":1, \"B\":2, \"C\":3, \"D\":4, \"E\":5, \"F\":6, \"G\":7, \\\n\"H\":8, \"I\":9, \"J\":10, \"K\":11, \"L\":12, \"M\":13, \\\n\"N\":14, \"O\":15, \"P\":16, \"Q\":17, \"R\":18, \"S\":19, \\\n\"T\":20, \"U\":21,\"V\":22, \"W\":23, \"X\":24, \"Y\":25, \"Z\":26}\n\ndef est_parfait(mot) :\n    #mot est une cha\u00eene de caract\u00e8res (en lettres majuscules)\n    code_c = \"\"\n    code_a = ???\n    for c in mot :\n        code_c = code_c + ???\n        code_a = ???\n    code_c = int(code_c)\n    if ??? :\n        mot_est_parfait = True\n    else :\n        mot_est_parfait = False\n    return [code_a, code_c, mot_est_parfait]\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; est_parfait(\"PAUL\")\n[50, 1612112, False]\n&gt;&gt;&gt; est_parfait(\"ALAIN\")\n[37, 1121914, True]\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-10","title":"\u25b6 Sujet 10","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-101","title":"Exercice 10.1 \u25a1","text":"<p>Exercice 10.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>L\u2019occurrence d\u2019un caract\u00e8re dans un phrase est le nombre de fois o\u00f9 ce caract\u00e8re est pr\u00e9sent.</p> <p>Exemples :</p> <ul> <li>l\u2019occurrence du caract\u00e8re \u2018o\u2019 dans \u2018bonjour\u2019 est 2 ;</li> <li>l\u2019occurrence du caract\u00e8re \u2018b\u2019 dans \u2018B\u00e9b\u00e9\u2019 est 1 ;</li> <li>l\u2019occurrence du caract\u00e8re \u2018B\u2019 dans \u2018B\u00e9b\u00e9\u2019 est 1 ;</li> <li>l\u2019occurrence du caract\u00e8re \u2018 \u2018 dans \u2018Hello world !\u2019 est 2.</li> </ul> <p>On cherche les occurrences des caract\u00e8res dans une phrase. On souhaite stocker ces occurrences dans un dictionnaire dont les clefs seraient les caract\u00e8res de la phrase et les valeurs l\u2019occurrence de ces caract\u00e8res.</p> <p>Par exemple : avec la phrase 'Hello world !' le dictionnaire est le suivant :</p> <p><code>{'H': 1,'e': 1,'l': 3,'o': 2,' ': 2,'w': 1,'r': 1,'d': 1,'!': 1}</code></p> <p>\u00c9crire une fonction <code>occurrence_lettres</code> prenant comme param\u00e8tre une variable <code>phrase</code> de type <code>str</code>. Cette fonction doit renvoyer un dictionnaire de type constitu\u00e9 des occurrences des caract\u00e8res pr\u00e9sents dans la phrase.</p> \ud83d\udc0d Script Python<pre><code>def occurrence_lettres(phrase):\n    occ = {}\n    for caractere in phrase:\n        if caractere in occ:\n            occ[caractere] += 1\n        else:\n            occ[caractere] = 1\n    return occ\n</code></pre> \ud83d\udccb Texte<pre><code>L\u2019occurrence d\u2019un caract\u00e8re dans un phrase est le nombre de fois o\u00f9 ce caract\u00e8re est\npr\u00e9sent.\n\nExemples :\n\n- l\u2019occurrence du caract\u00e8re \u2018o\u2019 dans \u2018bonjour\u2019 est 2 ;\n- l\u2019occurrence du caract\u00e8re \u2018b\u2019 dans \u2018B\u00e9b\u00e9\u2019 est 1 ;\n- l\u2019occurrence du caract\u00e8re \u2018B\u2019 dans \u2018B\u00e9b\u00e9\u2019 est 1 ;\n- l\u2019occurrence du caract\u00e8re \u2018 \u2018 dans \u2018Hello world !\u2019 est 2.\n\nOn cherche les occurrences des caract\u00e8res dans une phrase. On souhaite stocker ces\noccurrences dans un dictionnaire dont les clefs seraient les caract\u00e8res de la phrase et\nles valeurs l\u2019occurrence de ces caract\u00e8res.\n\nPar exemple : avec la phrase 'Hello world !' le dictionnaire est le suivant :\n\n`{'H': 1,'e': 1,'l': 3,'o': 2,' ': 2,'w': 1,'r': 1,'d': 1,'!': 1}`\n\n\u00c9crire une fonction `occurrence_lettres` prenant comme param\u00e8tre une variable\n`phrase` de type `str`. Cette fonction doit renvoyer un dictionnaire de type constitu\u00e9 des\noccurrences des caract\u00e8res pr\u00e9sents dans la phrase.\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-102","title":"Exercice 10.2 \u25a1","text":"<p>Exercice 10.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>La fonction <code>fusion</code> prend deux listes <code>L1</code>, <code>L2</code> d\u2019entiers tri\u00e9es par ordre croissant et les fusionne en une liste tri\u00e9e <code>L12</code> qu\u2019elle renvoie.</p> <p>Le code Python de la fonction est</p> \ud83d\udc0d Script Python<pre><code>def fusion(L1,L2):\n    n1 = len(L1)\n    n2 = len(L2)\n    L12 = [0]*(n1+n2)\n    i1 = 0\n    i2 = 0\n    i = 0\n    while i1 &lt; n1 and ... :\n        if L1[i1] &lt; L2[i2]:\n            L12[i] = ...\n            i1 = ...\n        else:\n            L12[i] = L2[i2]\n            i2 = ...\n        i += 1\n    while i1 &lt; n1:\n        L12[i] = ...\n        i1 = i1 + 1\n        i = ...\n    while i2 &lt; n2:\n        L12[i] = ...\n        i2 = i2 + 1\n        i = ...\n    return L12\n</code></pre> <p>Compl\u00e9ter le code.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; fusion([1,6,10],[0,7,8,9])\n[0, 1, 6, 7, 8, 9, 10]\n</code></pre> \ud83d\udc0d Script Python<pre><code>def fusion(L1,L2):\n    n1 = len(L1)\n    n2 = len(L2)\n    L12 = [0]*(n1+n2)\n    i1 = 0\n    i2 = 0\n    i = 0\n    while i1 &lt; n1 and i2 &lt; n2 :\n        if L1[i1] &lt; L2[i2]:\n            L12[i] = L1[i1]\n            i1 = i1 + 1\n        else:\n            L12[i] = L2[i2]\n            i2 = i2 + 1\n        i += 1\n    while i1 &lt; n1:\n        L12[i] = L1[i1]\n        i1 = i1 + 1\n        i = i + 1\n    while i2 &lt; n2:\n        L12[i] = L2[i2]\n        i2 = i2 + 1\n        i = i + 1\n    return L12\n</code></pre> Markdown<pre><code>La fonction `fusion` prend deux listes `L1`, `L2` d\u2019entiers tri\u00e9es par ordre croissant et les\nfusionne en une liste tri\u00e9e `L12` qu\u2019elle renvoie.\n\nLe code Python de la fonction est\n\n```python linenums='1'\ndef fusion(L1,L2):\n    n1 = len(L1)\n    n2 = len(L2)\n    L12 = [0]*(n1+n2)\n    i1 = 0\n    i2 = 0\n    i = 0\n    while i1 &lt; n1 and ... :\n        if L1[i1] &lt; L2[i2]:\n            L12[i] = ...\n            i1 = ...\n        else:\n            L12[i] = L2[i2]\n            i2 = ...\n        i += 1\n    while i1 &lt; n1:\n        L12[i] = ...\n        i1 = i1 + 1\n        i = ...\n    while i2 &lt; n2:\n        L12[i] = ...\n        i2 = i2 + 1\n        i = ...\n    return L12\n</code></pre> <p>Compl\u00e9ter le code.</p> <p>Exemple :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; fusion([1,6,10],[0,7,8,9])\n[0, 1, 6, 7, 8, 9, 10]\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-11","title":"\u25b6 Sujet 11","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-111","title":"Exercice 11.1 \u25a1","text":"<p>Exercice 11.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres un tableau <code>tab</code> de nombres entiers tri\u00e9s par ordre croissant et un nombre entier <code>n</code>, et qui effectue une recherche dichotomique du nombre entier <code>n</code> dans le tableau non vide <code>tab</code>. Cette fonction doit renvoyer un indice correspondant au nombre cherch\u00e9 s\u2019il est dans le tableau, <code>-1</code> sinon.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche([2, 3, 4, 5, 6], 5)\n3\n&gt;&gt;&gt; recherche([2, 3, 4, 6, 7], 5)\n-1\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(tab, n):\n    ind_debut = 0\n    ind_fin = len(tab) - 1\n    while ind_debut &lt;= ind_fin:\n        ind_milieu = (ind_debut + ind_fin) // 2\n        if tab[ind_milieu] == n:\n            return ind_milieu\n        elif tab[ind_milieu] &lt; n:\n            ind_debut = ind_milieu + 1\n        else:\n            ind_fin = ind_milieu - 1\n    return -1\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `recherche` qui prend en param\u00e8tres un tableau `tab` de nombres\nentiers tri\u00e9s par ordre croissant et un nombre entier `n`, et qui effectue une recherche\ndichotomique du nombre entier `n` dans le tableau non vide `tab`.\nCette fonction doit renvoyer un indice correspondant au nombre cherch\u00e9 s\u2019il est dans le\ntableau, `-1` sinon.\n\nExemples :\n```python\n&gt;&gt;&gt; recherche([2, 3, 4, 5, 6], 5)\n3\n&gt;&gt;&gt; recherche([2, 3, 4, 6, 7], 5)\n-1\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-112","title":"Exercice 11.2 \u25a1","text":"<p>Exercice 11.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Le codage de C\u00e9sar transforme un message en changeant chaque lettre en la d\u00e9calant dans l\u2019alphabet. Par exemple, avec un d\u00e9calage de 3, le A se transforme en D, le B en E, ..., le X en A, le Y en B et le Z en C. Les autres caract\u00e8res (\u2018!\u2019,\u2019 ?\u2019\u2026) ne sont pas cod\u00e9s.</p> <p>La fonction <code>position_alphabet</code> ci-dessous prend en param\u00e8tre un caract\u00e8re <code>lettre</code> et renvoie la position de <code>lettre</code> dans la cha\u00eene de caract\u00e8res <code>ALPHABET</code> s\u2019il s\u2019y trouve et <code>-1</code> sinon. La fonction <code>cesar</code> prend en param\u00e8tre une cha\u00eene de caract\u00e8res <code>message</code> et un nombre entier <code>decalage</code> et renvoie le nouveau message cod\u00e9 avec le codage de C\u00e9sar utilisant le d\u00e9calage <code>decalage</code>.</p> \ud83d\udc0d Script Python<pre><code>ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef position_alphabet(lettre):\n    return ALPHABET.find(lettre)\n\ndef cesar(message, decalage):\n    resultat = ''\n    for ... in message:\n        if lettre in ALPHABET:\n            indice = ( ... ) % 26\n            resultat = resultat + ALPHABET[indice]\n        else:\n            resultat = ...\n    return resultat\n</code></pre> <p>Compl\u00e9ter la fonction <code>cesar</code>.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; cesar('BONJOUR A TOUS. VIVE LA MATIERE NSI !',4)\n'FSRNSYV E XSYW. ZMZI PE QEXMIVI RWM !'\n&gt;&gt;&gt; cesar('GTSOTZW F YTZX. ANAJ QF RFYNJWJ SXN !',-5)\n'BONJOUR A TOUS. VIVE LA MATIERE NSI !'\n</code></pre> \ud83d\udc0d Script Python<pre><code>ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef position_alphabet(lettre):\n    return ALPHABET.find(lettre)\n\ndef cesar(message, decalage):\n    resultat = ''\n    for lettre in message:\n        if lettre in ALPHABET:\n            indice = (position_alphabet(lettre) + decalage) % 26\n            resultat = resultat + ALPHABET[indice]\n        else:\n            resultat = resultat + lettre\n    return resultat\n</code></pre> Markdown<pre><code>Le codage de C\u00e9sar transforme un message en changeant chaque lettre en la d\u00e9calant\ndans l\u2019alphabet.\nPar exemple, avec un d\u00e9calage de 3, le A se transforme en D, le B en E, ..., le X en A,\nle Y en B et le Z en C. Les autres caract\u00e8res (\u2018!\u2019,\u2019 ?\u2019\u2026) ne sont pas cod\u00e9s.\n\nLa fonction `position_alphabet` ci-dessous prend en param\u00e8tre un caract\u00e8re `lettre`\net renvoie la position de `lettre` dans la cha\u00eene de caract\u00e8res `ALPHABET` s\u2019il s\u2019y trouve\net `-1` sinon.\nLa fonction `cesar` prend en param\u00e8tre une cha\u00eene de caract\u00e8res `message` et un nombre\nentier `decalage` et renvoie le nouveau message cod\u00e9 avec le codage de C\u00e9sar utilisant\nle d\u00e9calage `decalage`.\n\n```python linenums='1'\nALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef position_alphabet(lettre):\n    return ALPHABET.find(lettre)\n\ndef cesar(message, decalage):\n    resultat = ''\n    for ... in message:\n        if lettre in ALPHABET:\n            indice = ( ... ) % 26\n            resultat = resultat + ALPHABET[indice]\n        else:\n            resultat = ...\n    return resultat\n</code></pre> <p>Compl\u00e9ter la fonction <code>cesar</code>.</p> <p>Exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; cesar('BONJOUR A TOUS. VIVE LA MATIERE NSI !',4)\n'FSRNSYV E XSYW. ZMZI PE QEXMIVI RWM !'\n&gt;&gt;&gt; cesar('GTSOTZW F YTZX. ANAJ QF RFYNJWJ SXN !',-5)\n'BONJOUR A TOUS. VIVE LA MATIERE NSI !'\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-12","title":"\u25b6 Sujet 12","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-121","title":"Exercice 12.1 \u25a1","text":"<p>Exercice 12.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Programmer la fonction <code>moyenne</code>   prenant en param\u00e8tre un tableau d'entiers <code>tab</code>   (type <code>list</code>) qui renvoie la moyenne de ses \u00e9l\u00e9ments si le tableau est non vide et affiche 'erreur' si le tableau est vide.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; moyenne([5,3,8])\n5.333333333333333\n&gt;&gt;&gt; moyenne([1,2,3,4,5,6,7,8,9,10])\n5.5\n&gt;&gt;&gt; moyenne([])\n'erreur'\n</code></pre></p> <p>L'\u00e9nonc\u00e9 n'est pas tr\u00e8s clair quand il dit \u00abd'afficher 'erreur'\u00bb (ce qui suppose un <code>print</code> et non un <code>return</code>). Nous choississons donc dans ce cas de renvoyer <code>None</code>.</p> \ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    if tab == []:\n        print('erreur')\n        return None\n    else:\n        somme = 0\n        for elt in tab:\n            somme += elt\n        return somme / len(tab)\n</code></pre> \ud83d\udccb Texte<pre><code>Programmer la fonction ```moyenne```   prenant en param\u00e8tre un tableau d'entiers ```tab```   (type\n`list`) qui renvoie la moyenne de ses \u00e9l\u00e9ments si le tableau est non vide et affiche\n'erreur' si le tableau est vide.\n\nExemples :\n```python\n&gt;&gt;&gt; moyenne([5,3,8])\n5.333333333333333\n&gt;&gt;&gt; moyenne([1,2,3,4,5,6,7,8,9,10])\n5.5\n&gt;&gt;&gt; moyenne([])\n'erreur'\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-122","title":"Exercice 12.2 \u25a1","text":"<p>Exercice 12.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On consid\u00e8re un tableau d'entiers <code>tab</code> (type <code>list</code> dont les \u00e9l\u00e9ments sont des <code>0</code> ou des <code>1</code>). On se propose de trier ce tableau selon l'algorithme suivant : \u00e0 chaque \u00e9tape du tri,le tableau est constitu\u00e9 de trois zones cons\u00e9cutives, la premi\u00e8re ne contenant que des <code>0</code>, la seconde n'\u00e9tant pas tri\u00e9e et la derni\u00e8re ne contenant que des <code>1</code>.</p> <p> Zone de 0Zone non tri\u00e9eZone de 1 </p> <p>Tant que la zone non tri\u00e9e n'est pas r\u00e9duite \u00e0 un seul \u00e9l\u00e9ment, on regarde son premier \u00e9l\u00e9ment :</p> <ul> <li>si cet \u00e9l\u00e9ment vaut 0, on consid\u00e8re qu'il appartient d\u00e9sormais \u00e0 la zone ne contenant que des 0 ;</li> <li>si cet \u00e9l\u00e9ment vaut 1, il est \u00e9chang\u00e9 avec le dernier \u00e9l\u00e9ment de la zone non tri\u00e9e et on consid\u00e8re alors qu\u2019il appartient \u00e0 la zone ne contenant que des 1.</li> </ul> <p>Dans tous les cas, la longueur de la zone non tri\u00e9e diminue de 1.</p> <p>Recopier sous Python en la compl\u00e9tant la fonction <code>tri</code> suivante :</p> \ud83d\udc0d Script Python<pre><code>def tri(tab):\n    #i est le premier indice de la zone non triee, j le dernier indice.\n    #Au debut, la zone non triee est le tableau entier.\n    i = ...\n    j = ...\n    while i != j :\n        if tab[i]== 0:\n            i = ...\n        else :\n            valeur = tab[j]\n            tab[j] = ...\n            ...\n            j = ...\n    ...\n</code></pre> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tri([0,1,0,1,0,1,0,1,0])\n[0, 0, 0, 0, 0, 1, 1, 1, 1]       \n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def tri(tab):\n    #i est le premier indice de la zone non triee, j le dernier indice.\n    #Au debut, la zone non triee est le tableau entier.\n    i = 0\n    j = len(tab) - 1\n    while i != j :\n        if tab[i]== 0:\n            i = i + 1\n        else :\n            valeur = tab[j]\n            tab[j] = tab[i]\n            tab[i] = valeur\n            j = j - 1\n    return tab\n</code></pre> Markdown<pre><code>On consid\u00e8re un tableau d'entiers `tab` (type `list` dont les \u00e9l\u00e9ments sont des `0` ou des `1`). On se propose de trier ce tableau selon l'algorithme suivant : \u00e0 chaque \u00e9tape du tri,le tableau est constitu\u00e9 de trois zones cons\u00e9cutives, la premi\u00e8re ne contenant que des `0`,\nla seconde n'\u00e9tant pas tri\u00e9e et la derni\u00e8re ne contenant que des `1`.\n\n&lt;table&gt;\n&lt;tr&gt;\n&lt;td&gt;Zone de 0&lt;/td&gt;&lt;td&gt;Zone non tri\u00e9e&lt;/td&gt;&lt;td&gt;Zone de 1&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\n\nTant que la zone non tri\u00e9e n'est pas r\u00e9duite \u00e0 un seul \u00e9l\u00e9ment, on regarde son premier\n\u00e9l\u00e9ment :\n\n- si cet \u00e9l\u00e9ment vaut 0, on consid\u00e8re qu'il appartient d\u00e9sormais \u00e0 la zone ne contenant\nque des 0 ;\n- si cet \u00e9l\u00e9ment vaut 1, il est \u00e9chang\u00e9 avec le dernier \u00e9l\u00e9ment de la zone non tri\u00e9e et on\nconsid\u00e8re alors qu\u2019il appartient \u00e0 la zone ne contenant que des 1.\n\nDans tous les cas, la longueur de la zone non tri\u00e9e diminue de 1.\n\nRecopier sous Python en la compl\u00e9tant la fonction `tri` suivante :\n\n```python linenums='1'\ndef tri(tab):\n    #i est le premier indice de la zone non triee, j le dernier indice.\n    #Au debut, la zone non triee est le tableau entier.\n    i = ...\n    j = ...\n    while i != j :\n        if tab[i]== 0:\n            i = ...\n        else :\n            valeur = tab[j]\n            tab[j] = ...\n            ...\n            j = ...\n    ...\n</code></pre> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tri([0,1,0,1,0,1,0,1,0])\n[0, 0, 0, 0, 0, 1, 1, 1, 1]       \n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-13","title":"\u25b6 Sujet 13","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-131","title":"Exercice 13.1 \u25a1","text":"<p>Exercice 13.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>On s\u2019int\u00e9resse au probl\u00e8me du rendu de monnaie. On suppose qu\u2019on dispose d\u2019un nombre infini de billets de 5 euros, de pi\u00e8ces de 2 euros et de pi\u00e8ces de 1 euro. Le but est d\u2019\u00e9crire une fonction nomm\u00e9e <code>rendu</code> dont le param\u00e8tre est un entier positif non nul <code>somme_a_rendre</code> et qui retourne une liste de trois entiers <code>n1</code>, <code>n2</code> et <code>n3</code> qui correspondent aux nombres de billets de 5 euros (<code>n1</code>) de pi\u00e8ces de 2 euros (<code>n2</code>) et de pi\u00e8ces de 1 euro (<code>n3</code>) \u00e0 rendre afin que le total rendu soit \u00e9gal \u00e0 <code>somme_a_rendre</code>.</p> <p>On utilisera un algorithme glouton : on commencera par rendre le nombre maximal de billets de 5 euros, puis celui des pi\u00e8ces de 2 euros et enfin celui des pi\u00e8ces de 1 euros.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; rendu(13)\n[2,1,1]\n&gt;&gt;&gt; rendu(64)\n[12,2,0]\n&gt;&gt;&gt; rendu(89)\n[17,2,0]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def rendu(somme_a_rendre):\n    pieces = [5, 2, 1]\n    retour = [0, 0, 0]\n    reste_a_rendre = somme_a_rendre\n    for i in range(3):\n        retour[i] = reste_a_rendre // pieces[i]\n        reste_a_rendre = reste_a_rendre % pieces[i]\n    return retour\n</code></pre> \ud83d\udccb Texte<pre><code>On s\u2019int\u00e9resse au probl\u00e8me du rendu de monnaie. On suppose qu\u2019on dispose d\u2019un\nnombre infini de billets de 5 euros, de pi\u00e8ces de 2 euros et de pi\u00e8ces de 1 euro.\nLe but est d\u2019\u00e9crire une fonction nomm\u00e9e `rendu` dont le param\u00e8tre est un entier positif non\nnul `somme_a_rendre` et qui retourne une liste de trois entiers `n1`, `n2` et `n3` qui\ncorrespondent aux nombres de billets de 5 euros (`n1`) de pi\u00e8ces de 2 euros (`n2`) et de\npi\u00e8ces de 1 euro (`n3`) \u00e0 rendre afin que le total rendu soit \u00e9gal \u00e0 `somme_a_rendre`.\n\nOn utilisera un algorithme glouton : on commencera par rendre le nombre maximal de\nbillets de 5 euros, puis celui des pi\u00e8ces de 2 euros et enfin celui des pi\u00e8ces de 1 euros.\n\nExemples :\n```python\n&gt;&gt;&gt; rendu(13)\n[2,1,1]\n&gt;&gt;&gt; rendu(64)\n[12,2,0]\n&gt;&gt;&gt; rendu(89)\n[17,2,0]\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-132","title":"Exercice 13.2 \u25a1","text":"<p>Exercice 13.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On veut \u00e9crire une classe pour g\u00e9rer une file \u00e0 l\u2019aide d\u2019une liste cha\u00een\u00e9e. On dispose d\u2019une classe <code>Maillon</code> permettant la cr\u00e9ation d\u2019un maillon de la cha\u00eene, celui-ci \u00e9tant constitu\u00e9 d\u2019une valeur et d\u2019une r\u00e9f\u00e9rence au maillon suivant de la cha\u00eene :</p> <p>\ud83d\udc0d Script Python<pre><code>class Maillon :\n    def __init__(self,v) :\n        self.valeur = v\n        self.suivant = None\n</code></pre> Compl\u00e9ter la classe <code>File suivante</code> o\u00f9 l\u2019attribut <code>dernier_file</code> contient le maillon correspondant \u00e0 l\u2019\u00e9l\u00e9ment arriv\u00e9 en dernier dans la file :</p> <p>\ud83d\udc0d Script Python<pre><code>class File :\n    def __init__(self) :\n        self.dernier_file = None\n\n    def enfile(self,element) :\n        nouveau_maillon = Maillon(...)\n        nouveau_maillon.suivant = self.dernier_file\n        self.dernier_file = ...\n\n    def est_vide(self) :\n        return self.dernier_file == None\n\n    def affiche(self) :\n        maillon = self.dernier_file\n        while maillon != ... :\n            print(maillon.valeur)\n            maillon = ...\n\n    def defile(self) :\n        if not self.est_vide() :\n            if self.dernier_file.suivant == None :\n                resultat = self.dernier_file.valeur\n                self.dernier_file = None\n                return resultat\n            maillon = ...\n            while maillon.suivant.suivant != None :\n                maillon = maillon.suivant\n            resultat = ...\n            maillon.suivant = None\n            return resultat\n        return None\n</code></pre> On pourra tester le fonctionnement de la classe en utilisant les commandes suivantes dans la console Python : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; F = File()\n&gt;&gt;&gt; F.est_vide()\nTrue\n&gt;&gt;&gt; F.enfile(2)\n&gt;&gt;&gt; F.affiche()\n2\n&gt;&gt;&gt; F.est_vide()\nFalse\n&gt;&gt;&gt; F.enfile(5)\n&gt;&gt;&gt; F.enfile(7)\n&gt;&gt;&gt; F.affiche()\n7\n5\n2\n&gt;&gt;&gt; F.defile()\n2\n&gt;&gt;&gt; F.defile()\n5\n&gt;&gt;&gt; F.affiche()\n7\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>class Maillon :\n    def __init__(self,v) :\n        self.valeur = v\n        self.suivant = None\n\nclass File :\n    def __init__(self) :\n        self.dernier_file = None\n\n    def enfile(self,element) :\n        nouveau_maillon = Maillon(element)\n        nouveau_maillon.suivant =  self.dernier_file\n        self.dernier_file = nouveau_maillon\n\n    def est_vide(self) :\n        return self.dernier_file == None\n\n    def affiche(self) :\n        maillon = self.dernier_file\n        while maillon != None :\n            print(maillon.valeur)\n            maillon = maillon.suivant\n\n    def defile(self) :\n        if not self.est_vide() :\n            if self.dernier_file.suivant == None :\n                resultat = self.dernier_file.valeur\n                self.dernier_file = None\n                return resultat\n            maillon = self.dernier_file\n            while maillon.suivant.suivant != None :\n                maillon = maillon.suivant\n            resultat = maillon.suivant.valeur\n            maillon.suivant = None\n            return resultat\n        return None\n</code></pre> <p>Markdown<pre><code>On veut \u00e9crire une classe pour g\u00e9rer une file \u00e0 l\u2019aide d\u2019une liste cha\u00een\u00e9e. On dispose d\u2019une\nclasse ```Maillon``` permettant la cr\u00e9ation d\u2019un maillon de la cha\u00eene, celui-ci \u00e9tant constitu\u00e9\nd\u2019une valeur et d\u2019une r\u00e9f\u00e9rence au maillon suivant de la cha\u00eene :\n\n```python linenums='1'\nclass Maillon :\n    def __init__(self,v) :\n        self.valeur = v\n        self.suivant = None\n</code></pre> Compl\u00e9ter la classe <code>File suivante</code> o\u00f9 l\u2019attribut <code>dernier_file</code> contient le maillon correspondant \u00e0 l\u2019\u00e9l\u00e9ment arriv\u00e9 en dernier dans la file :</p> <p>\ud83d\udc0d Script Python<pre><code>class File :\n    def __init__(self) :\n        self.dernier_file = None\n\n    def enfile(self,element) :\n        nouveau_maillon = Maillon(...)\n        nouveau_maillon.suivant = self.dernier_file\n        self.dernier_file = ...\n\n    def est_vide(self) :\n        return self.dernier_file == None\n\n    def affiche(self) :\n        maillon = self.dernier_file\n        while maillon != ... :\n            print(maillon.valeur)\n            maillon = ...\n\n    def defile(self) :\n        if not self.est_vide() :\n            if self.dernier_file.suivant == None :\n                resultat = self.dernier_file.valeur\n                self.dernier_file = None\n                return resultat\n            maillon = ...\n            while maillon.suivant.suivant != None :\n                maillon = maillon.suivant\n            resultat = ...\n            maillon.suivant = None\n            return resultat\n        return None\n</code></pre> On pourra tester le fonctionnement de la classe en utilisant les commandes suivantes dans la console Python : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; F = File()\n&gt;&gt;&gt; F.est_vide()\nTrue\n&gt;&gt;&gt; F.enfile(2)\n&gt;&gt;&gt; F.affiche()\n2\n&gt;&gt;&gt; F.est_vide()\nFalse\n&gt;&gt;&gt; F.enfile(5)\n&gt;&gt;&gt; F.enfile(7)\n&gt;&gt;&gt; F.affiche()\n7\n5\n2\n&gt;&gt;&gt; F.defile()\n2\n&gt;&gt;&gt; F.defile()\n5\n&gt;&gt;&gt; F.affiche()\n7\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-14","title":"\u25b6 Sujet 14","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-141","title":"Exercice 14.1 \u25a1","text":"<p>Exercice 14.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>On consid\u00e8re des mots \u00e0 trous : ce sont des cha\u00eenes de caract\u00e8res contenant uniquement des majuscules et des caract\u00e8res <code>*</code>. Par exemple <code>INFO*MA*IQUE</code>, <code>***I***E**</code> et <code>*S*</code> sont des mots \u00e0 trous. Programmer une fonction correspond qui :</p> <ul> <li>prend en param\u00e8tres deux cha\u00eenes de caract\u00e8res <code>mot</code> et <code>mot_a_trous</code> o\u00f9 <code>mot_a_trous</code> est un mot \u00e0 trous comme indiqu\u00e9 ci-dessus, </li> <li>renvoie :<ul> <li><code>True</code> si on peut obtenir <code>mot</code> en rempla\u00e7ant convenablement les caract\u00e8res <code>'*'</code> de <code>mot_a_trous</code>.</li> <li><code>False</code> sinon.</li> </ul> </li> </ul> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; correspond('INFORMATIQUE', 'INFO*MA*IQUE')\nTrue\n&gt;&gt;&gt; correspond('AUTOMATIQUE', 'INFO*MA*IQUE')\nFalse\n</code></pre> \ud83d\udc0d Script Python<pre><code>def correspond(mot, mot_a_trous):\n    if len(mot) != len(mot_a_trous):\n        return False\n    for i in range(len(mot)):\n        if mot[i] != mot_a_trous[i] and mot_a_trous[i] != '*':\n            return False\n    return True\n</code></pre> \ud83d\udccb Texte<pre><code>On consid\u00e8re des mots \u00e0 trous : ce sont des cha\u00eenes de caract\u00e8res contenant uniquement\ndes majuscules et des caract\u00e8res `*`. Par exemple `INFO*MA*IQUE`, `***I***E**` et\n`*S*` sont des mots \u00e0 trous.  \nProgrammer une fonction correspond qui :\n\n- prend en param\u00e8tres deux cha\u00eenes de caract\u00e8res `mot` et `mot_a_trous` o\u00f9\n`mot_a_trous` est un mot \u00e0 trous comme indiqu\u00e9 ci-dessus, \n- renvoie :\n    - `True` si on peut obtenir `mot` en rempla\u00e7ant convenablement les caract\u00e8res\n`'*'` de `mot_a_trous`.\n    - `False` sinon.\n\nExemple :\n\n```python\n&gt;&gt;&gt; correspond('INFORMATIQUE', 'INFO*MA*IQUE')\nTrue\n&gt;&gt;&gt; correspond('AUTOMATIQUE', 'INFO*MA*IQUE')\nFalse\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-142","title":"Exercice 14.2 \u25a1","text":"<p>Exercice 14.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On consid\u00e8re au plus 26 personnes A, B, C, D, E, F ... qui peuvent s'envoyer des messages avec deux r\u00e8gles \u00e0 respecter :</p> <ul> <li>chaque personne ne peut envoyer des messages qu'\u00e0 la m\u00eame personne (\u00e9ventuellement elle-m\u00eame),</li> <li>chaque personne ne peut recevoir des messages qu'en provenance d'une seule personne (\u00e9ventuellement elle-m\u00eame).</li> </ul> <p>Voici un exemple - avec 6 personnes - de \u00ab plan d'envoi des messages \u00bb qui respecte les r\u00e8gles ci-dessus, puisque chaque personne est pr\u00e9sente une seule fois dans chaque colonne :</p> <ul> <li>A envoie ses messages \u00e0 E</li> <li>E envoie ses messages \u00e0 B</li> <li>B envoie ses messages \u00e0 F</li> <li>F envoie ses messages \u00e0 A</li> <li>C envoie ses messages \u00e0 D</li> <li>D envoie ses messages \u00e0 C</li> </ul> <p>Et le dictionnaire correspondant \u00e0 ce plan d'envoi est le suivant :</p> <p><code>plan_a = {'A':'E', 'B':'F', 'C':'D', 'D':'C', 'E':'B', 'F':'A'}</code></p> <p>Sur le plan d'envoi plan_a des messages ci-dessus, il y a deux cycles distincts : un premier cycle avec A, E, B, F et un second cycle avec C et D.</p> <p>En revanche, le plan d\u2019envoi plan_b ci-dessous :</p> <p><code>plan_b = {'A':'C', 'B':'F', 'C':'E', 'D':'A', 'E':'B', 'F':'D'}</code></p> <p>comporte un unique cycle : A, C, E, B, F, D. Dans ce cas, lorsqu\u2019un plan d\u2019envoi comporte un unique cycle, on dit que le plan d\u2019envoi est cyclique.</p> <p>Pour savoir si un plan d'envoi de messages comportant N personnes est cyclique, on peut utiliser l'algorithme ci-dessous :</p> <p>On part de la personne A et on inspecte les N \u2013 1 successeurs dans le plan d'envoi :</p> <ul> <li> <p>Si un de ces N \u2013 1 successeurs est A lui-m\u00eame, on a trouv\u00e9 un cycle de taille inf\u00e9rieure ou \u00e9gale \u00e0 N \u2013 1. Il y a donc au moins deux cycles et le plan d'envoi n'est pas cyclique.</p> </li> <li> <p>Si on ne retombe pas sur A lors de cette inspection, on a un unique cycle qui passe par toutes les personnes : le plan d'envoi est cyclique.</p> </li> </ul> <p>Compl\u00e9ter la fonction suivante en respectant la sp\u00e9cification.</p> <p>Remarque : la fonction python <code>len</code> permet d'obtenir la longueur d'un dictionnaire.</p> \ud83d\udc0d Script Python<pre><code>def est_cyclique(plan):\n    '''\n    Prend en param\u00e8tre un dictionnaire plan correspondant\n    \u00e0 un plan d'envoi de messages entre N personnes A, B, C,\n    D, E, F ...(avec N &lt;= 26).\n    Renvoie True si le plan d'envoi de messages est cyclique\n    et False sinon.\n    '''\n    personne = 'A'\n    N = len(...)\n    for i in range(...):\n        if plan[...] == ...:\n            return ...\n        else:\n            personne = ...\n    return ...\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; est_cyclique({'A':'E', 'F':'A', 'C':'D', 'E':'B', 'B':'F', 'D':'C'})\nFalse\n&gt;&gt;&gt; est_cyclique({'A':'E', 'F':'C', 'C':'D', 'E':'B', 'B':'F', 'D':'A'})\nTrue\n&gt;&gt;&gt; est_cyclique({'A':'B', 'F':'C', 'C':'D', 'E':'A', 'B':'F', 'D':'E'})\nTrue\n&gt;&gt;&gt; est_cyclique({'A':'B', 'F':'A', 'C':'D', 'E':'C', 'B':'F', 'D':'E'})\nFalse\n</code></pre> \ud83d\udc0d Script Python<pre><code>def est_cyclique(plan):\n    '''\n    Prend en param\u00e8tre un dictionnaire plan correspondant\n    \u00e0 un plan d'envoi de messages entre N personnes A, B, C,\n    D, E, F ...(avec N &lt;= 26).\n    Renvoie True si le plan d'envoi de messages est cyclique\n    et False sinon.\n    '''\n    personne = 'A'\n    N = len(plan)\n    for i in range(N-1):\n        if plan[personne] == 'A':\n            return False\n        else:\n            personne = plan[personne]\n    return True\n\nprint(est_cyclique({'A':'E', 'F':'A', 'C':'D', 'E':'B', 'B':'F', 'D':'C'}))\n\nprint(est_cyclique({'A':'E', 'F':'C', 'C':'D', 'E':'B', 'B':'F', 'D':'A'}))\n\nprint(est_cyclique({'A':'B', 'F':'C', 'C':'D', 'E':'A', 'B':'F', 'D':'E'}))\n\nprint(est_cyclique({'A':'B', 'F':'A', 'C':'D', 'E':'C', 'B':'F', 'D':'E'}))\n</code></pre> Markdown<pre><code>On consid\u00e8re au plus 26 personnes A, B, C, D, E, F ... qui peuvent s'envoyer des messages\navec deux r\u00e8gles \u00e0 respecter :\n\n- chaque personne ne peut envoyer des messages qu'\u00e0 la m\u00eame personne\n(\u00e9ventuellement elle-m\u00eame),\n- chaque personne ne peut recevoir des messages qu'en provenance d'une seule\npersonne (\u00e9ventuellement elle-m\u00eame).\n\n\nVoici un exemple - avec 6 personnes - de \u00ab plan d'envoi des messages \u00bb qui respecte les\nr\u00e8gles ci-dessus, puisque chaque personne est pr\u00e9sente une seule fois dans chaque\ncolonne :\n\n- A envoie ses messages \u00e0 E\n- E envoie ses messages \u00e0 B\n- B envoie ses messages \u00e0 F\n- F envoie ses messages \u00e0 A\n- C envoie ses messages \u00e0 D\n- D envoie ses messages \u00e0 C\n\nEt le dictionnaire correspondant \u00e0 ce plan d'envoi est le suivant :\n\n`plan_a = {'A':'E', 'B':'F', 'C':'D', 'D':'C', 'E':'B', 'F':'A'}`\n\nSur le plan d'envoi plan_a des messages ci-dessus, il y a deux cycles distincts : un premier\ncycle avec A, E, B, F et un second cycle avec C et D.\n\nEn revanche, le plan d\u2019envoi plan_b ci-dessous :\n\n`plan_b = {'A':'C', 'B':'F', 'C':'E', 'D':'A', 'E':'B', 'F':'D'}`\n\ncomporte un unique cycle : A, C, E, B, F, D. Dans ce cas, lorsqu\u2019un plan d\u2019envoi comporte un\nunique cycle, on dit que le plan d\u2019envoi est *cyclique*.\n\nPour savoir si un plan d'envoi de messages comportant N personnes est cyclique, on peut\nutiliser l'algorithme ci-dessous :\n\n\nOn part de la personne A et on inspecte les N \u2013 1 successeurs dans le plan d'envoi :\n\n- Si un de ces N \u2013 1 successeurs est A lui-m\u00eame, on a trouv\u00e9 un cycle de taille\ninf\u00e9rieure ou \u00e9gale \u00e0 N \u2013 1. Il y a donc au moins deux cycles et le plan d'envoi n'est\npas cyclique.\n\n- Si on ne retombe pas sur A lors de cette inspection, on a un unique cycle qui passe\npar toutes les personnes : le plan d'envoi est cyclique.\n\n\nCompl\u00e9ter la fonction suivante en respectant la sp\u00e9cification.\n\n*Remarque :* la fonction python `len` permet d'obtenir la longueur d'un dictionnaire.\n\n\n```python linenums='1'\ndef est_cyclique(plan):\n    '''\n    Prend en param\u00e8tre un dictionnaire plan correspondant\n    \u00e0 un plan d'envoi de messages entre N personnes A, B, C,\n    D, E, F ...(avec N &lt;= 26).\n    Renvoie True si le plan d'envoi de messages est cyclique\n    et False sinon.\n    '''\n    personne = 'A'\n    N = len(...)\n    for i in range(...):\n        if plan[...] == ...:\n            return ...\n        else:\n            personne = ...\n    return ...\n</code></pre> <p>Exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; est_cyclique({'A':'E', 'F':'A', 'C':'D', 'E':'B', 'B':'F', 'D':'C'})\nFalse\n&gt;&gt;&gt; est_cyclique({'A':'E', 'F':'C', 'C':'D', 'E':'B', 'B':'F', 'D':'A'})\nTrue\n&gt;&gt;&gt; est_cyclique({'A':'B', 'F':'C', 'C':'D', 'E':'A', 'B':'F', 'D':'E'})\nTrue\n&gt;&gt;&gt; est_cyclique({'A':'B', 'F':'A', 'C':'D', 'E':'C', 'B':'F', 'D':'E'})\nFalse\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-15","title":"\u25b6 Sujet 15","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-151","title":"Exercice 15.1 \u25a1","text":"<p>Exercice 15.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction python appel\u00e9e <code>nb_repetitions</code> qui prend en param\u00e8tres un \u00e9l\u00e9ment <code>elt</code> et une liste <code>tab</code> et renvoie le nombre de fois o\u00f9 l\u2019\u00e9l\u00e9ment appara\u00eet dans la liste.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; nb_repetitions(5, [2, 5, 3, 5, 6, 9, 5])\n3\n&gt;&gt;&gt; nb_repetitions('A', ['B', 'A', 'B', 'A', 'R'])\n2\n&gt;&gt;&gt; nb_repetitions(12, [1, '!', 7, 21, 36, 44])\n0\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def nb_repetitions(elt, tab):\n    nb = 0\n    for element in tab:\n        if element == elt:\n            nb += 1\n    return nb\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction python appel\u00e9e `nb_repetitions` qui prend en param\u00e8tres un\n\u00e9l\u00e9ment `elt` et une liste `tab` et renvoie le nombre de fois o\u00f9 l\u2019\u00e9l\u00e9ment appara\u00eet dans la\nliste.\n\nExemples :\n```python\n&gt;&gt;&gt; nb_repetitions(5, [2, 5, 3, 5, 6, 9, 5])\n3\n&gt;&gt;&gt; nb_repetitions('A', ['B', 'A', 'B', 'A', 'R'])\n2\n&gt;&gt;&gt; nb_repetitions(12, [1, '!', 7, 21, 36, 44])\n0\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-152","title":"Exercice 15.2 \u25a1","text":"<p>Exercice 15.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Pour rappel, la conversion d\u2019un nombre entier positif en binaire peut s\u2019effectuer \u00e0 l\u2019aide des divisions successives comme illustr\u00e9 ici :</p> <p></p> <p>Voici une fonction Python bas\u00e9e sur la m\u00e9thode des divisions successives permettant de convertir un nombre entier positif en binaire : \ud83d\udc0d Script Python<pre><code>def binaire(a):\n    bin_a = str(...)\n    a = a // 2\n    while a ... :\n        bin_a = ...(a%2) + ...\n        a = ...\n    return bin_a\n</code></pre> Compl\u00e9ter la fonction <code>binaire</code>.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; binaire(0)\n'0'\n&gt;&gt;&gt; binaire(77)\n'1001101'\n</code></pre> \ud83d\udc0d Script Python<pre><code>def binaire(a):\n    bin_a = str(a%2)\n    a = a // 2\n    while a != 0 :\n        bin_a = str(a%2) + bin_a\n        a = a // 2\n    return bin_a\n</code></pre> <p>Markdown<pre><code>Pour rappel, la conversion d\u2019un nombre entier positif en binaire peut s\u2019effectuer \u00e0 l\u2019aide\ndes divisions successives comme illustr\u00e9 ici :\n\n![image](data/img21_2.png){: .center}\n\nVoici une fonction Python bas\u00e9e sur la m\u00e9thode des divisions successives permettant de\nconvertir un nombre entier positif en binaire :\n```python linenums='1'\ndef binaire(a):\n    bin_a = str(...)\n    a = a // 2\n    while a ... :\n        bin_a = ...(a%2) + ...\n        a = ...\n    return bin_a\n</code></pre> Compl\u00e9ter la fonction <code>binaire</code>.</p> <p>Exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; binaire(0)\n'0'\n&gt;&gt;&gt; binaire(77)\n'1001101'\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-16","title":"\u25b6 Sujet 16","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-161","title":"Exercice 16.1 \u25a1","text":"<p>Exercice 16.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>maxi</code> qui prend en param\u00e8tre une liste <code>tab</code> de nombres entiers et renvoie un couple donnant le plus grand \u00e9l\u00e9ment de cette liste, ainsi que l\u2019indice de la premi\u00e8re apparition de ce maximum dans la liste.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; maxi([1,5,6,9,1,2,3,7,9,8])\n(9,3)\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def maxi(tab):\n    val_max = tab[0]\n    pos_max = 0\n    for i in range(len(tab)):\n        if tab[i] &gt; val_max:\n            val_max = tab[i]\n            pos_max = i\n    return (val_max, pos_max)\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `maxi` qui prend en param\u00e8tre une liste `tab` de nombres entiers et renvoie un couple donnant le plus grand \u00e9l\u00e9ment de cette liste, ainsi que l\u2019indice de la premi\u00e8re apparition de ce maximum dans la liste.\n\nExemple :\n```python\n&gt;&gt;&gt; maxi([1,5,6,9,1,2,3,7,9,8])\n(9,3)\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-162","title":"Exercice 16.2 \u25a1","text":"<p>Exercice 16.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Cet exercice utilise des piles qui seront repr\u00e9sent\u00e9es en Python par des listes (type <code>list</code>).</p> <p>On rappelle que l\u2019expression <code>T1 = list(T)</code> fait une copie de <code>T</code>ind\u00e9pendante de <code>T</code>, que l\u2019expression <code>x = T.pop()</code> enl\u00e8ve le sommet de la pile <code>T</code> et le place dans la variable <code>x</code> et, enfin, que l\u2019expression <code>T.append(v)</code> place la valeur <code>v</code> au sommet de la pile <code>T</code>.</p> <p>Compl\u00e9ter le code Python de la fonction <code>positif</code> ci-dessous qui prend une pile <code>T</code> de nombres entiers en param\u00e8tre et qui renvoie la pile des entiers positifs dans le m\u00eame ordre, sans modifier la variable <code>T</code>.</p> \ud83d\udc0d Script Python<pre><code>def positif(T):\n    T2 = ...(T)\n    T3 = ...\n    while T2 != []:\n        x = ...\n        if ... &gt;= 0:\n            T3.append(...)\n    T2 = []\n    while T3 != ...:\n        x = T3.pop()\n        ...\n    print('T = ',T)\n    return T2\n</code></pre> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; positif([-1, 0, 5, -3, 4, -6, 10, 9, -8])\nT = [-1, 0, 5, -3, 4, -6, 10, 9, -8]\n[0, 5, 4, 10, 9]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def positif(T):\n    T2 = list(T)\n    T3 = []\n    while T2 != []:\n        x = T2.pop()\n        if x &gt;= 0:\n            T3.append(x)\n    T2 = [] # &lt;- NB : cette ligne est inutile\n    while T3 != []:\n        x = T3.pop()\n        T2.append(x)\n    print('T = ',T)\n    return T2\n</code></pre> Markdown<pre><code>Cet exercice utilise des piles qui seront repr\u00e9sent\u00e9es en Python par des listes (type `list`).\n\nOn rappelle que l\u2019expression `T1 = list(T)` fait une copie de `T `ind\u00e9pendante de `T`, que\nl\u2019expression `x = T.pop()` enl\u00e8ve le sommet de la pile `T` et le place dans la variable `x` et,\nenfin, que l\u2019expression `T.append(v)` place la valeur `v` au sommet de la pile `T`.\n\nCompl\u00e9ter le code Python de la fonction `positif` ci-dessous qui prend une pile `T` de\nnombres entiers en param\u00e8tre et qui renvoie la pile des entiers positifs dans le m\u00eame\nordre, sans modifier la variable `T`.\n\n```python linenums='1'\ndef positif(T):\n    T2 = ...(T)\n    T3 = ...\n    while T2 != []:\n        x = ...\n        if ... &gt;= 0:\n            T3.append(...)\n    T2 = []\n    while T3 != ...:\n        x = T3.pop()\n        ...\n    print('T = ',T)\n    return T2\n</code></pre> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; positif([-1, 0, 5, -3, 4, -6, 10, 9, -8])\nT = [-1, 0, 5, -3, 4, -6, 10, 9, -8]\n[0, 5, 4, 10, 9]\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-17","title":"\u25b6 Sujet 17","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-171","title":"Exercice 17.1 \u25a1","text":"<p>Exercice 17.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Pour cet exercice :</p> <ul> <li> <p>On appelle \u00ab mot \u00bb une cha\u00eene de caract\u00e8res compos\u00e9e avec des caract\u00e8res choisis parmi les 26 lettres minuscules ou majuscules de l'alphabet,</p> </li> <li> <p>On appelle \u00ab phrase \u00bb une cha\u00eene de caract\u00e8res :</p> <ul> <li>compos\u00e9e avec un ou plusieurs \u00ab mots \u00bb s\u00e9par\u00e9s entre eux par un seul caract\u00e8re espace <code>' '</code>,</li> <li>se finissant :<ul> <li>soit par un point <code>'.'</code> qui est alors coll\u00e9 au dernier mot,</li> <li>soit par un point d'exclamation <code>'!'</code> ou d'interrogation <code>'?'</code> qui est alors s\u00e9par\u00e9 du dernier mot par un seul caract\u00e8re espace <code>' '</code>.</li> </ul> </li> </ul> </li> </ul> <p>Exemples :</p> <p>Apr\u00e8s avoir remarqu\u00e9 le lien entre le nombre de mots et le nombres de caract\u00e8res espace dans une phrase, programmer une fonction <code>nombre_de_mots</code> qui prend en param\u00e8tre une phrase et renvoie le nombre de mots pr\u00e9sents dans cette phrase.</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; nombre_de_mots('Le point d exclamation est separe !')\n6\n&gt;&gt;&gt; nombre_de_mots('Il y a un seul espace entre les mots !')\n9\n</code></pre> \ud83d\udc0d Script Python<pre><code>def nombre_de_mots(phrase):\n    nb_mots = 0\n    for caractere in phrase:\n        if caractere == ' ' or caractere == '.':\n            nb_mots += 1\n    return nb_mots\n</code></pre> \ud83d\udccb Texte<pre><code>Pour cet exercice :\n\n- On appelle \u00ab mot \u00bb une cha\u00eene de caract\u00e8res compos\u00e9e avec des caract\u00e8res choisis\nparmi les 26 lettres minuscules ou majuscules de l'alphabet,\n\n- On appelle \u00ab phrase \u00bb une cha\u00eene de caract\u00e8res :\n    - compos\u00e9e avec un ou plusieurs \u00ab mots \u00bb s\u00e9par\u00e9s entre eux par un seul\ncaract\u00e8re espace `' '`,\n    - se finissant :\n        - soit par un point `'.'` qui est alors coll\u00e9 au dernier mot,\n        - soit par un point d'exclamation `'!'` ou d'interrogation `'?'` qui est alors\ns\u00e9par\u00e9 du dernier mot par un seul caract\u00e8re espace `' '`.\n\n*Exemples :*\n\nApr\u00e8s avoir remarqu\u00e9 le lien entre le nombre de mots et le nombres de caract\u00e8res espace\ndans une phrase, programmer une fonction `nombre_de_mots` qui prend en param\u00e8tre une\nphrase et renvoie le nombre de mots pr\u00e9sents dans cette phrase.\n\n```python\n&gt;&gt;&gt; nombre_de_mots('Le point d exclamation est separe !')\n6\n&gt;&gt;&gt; nombre_de_mots('Il y a un seul espace entre les mots !')\n9\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-172","title":"Exercice 17.2 \u25a1","text":"<p>Exercice 17.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>La classe ABR ci-dessous permet d'impl\u00e9menter une structure d'arbre binaire de recherche.</p> \ud83d\udc0d Script Python<pre><code>class Noeud:\n    ''' Classe impl\u00e9mentant un noeud d'arbre binaire\n    disposant de 3 attributs :\n    - valeur : la valeur de l'\u00e9tiquette,\n    - gauche : le sous-arbre gauche.\n    - droit : le sous-arbre droit. '''\n    def __init__(self, v, g, d):\n        self.valeur = v\n        self.gauche = g\n        self.droite = d\n\nclass ABR:\n    ''' Classe impl\u00e9mentant une structure\n    d'arbre binaire de recherche. '''\n    def __init__(self):\n        '''Cr\u00e9e un arbre binaire de recherche vide'''\n        self.racine = None\n\n    def est_vide(self):\n        '''Renvoie True si l'ABR est vide et False sinon.'''\n        return self.racine is None\n\n    def parcours(self, tab = []):\n        ''' Renvoie la liste tab compl\u00e9t\u00e9e avec tous les\n        \u00e9l\u00e9ments de l'ABR tri\u00e9s par ordre croissant. '''\n\n        if self.est_vide():\n            return tab\n        else:\n            self.racine.gauche.parcours(tab)\n            tab.append(...)\n            ...\n            return tab\n\n    def insere(self, element):\n        '''Ins\u00e8re un \u00e9l\u00e9ment dans l'arbre binaire de recherche.'''\n        if self.est_vide():\n            self.racine = Noeud(element, ABR(), ABR())\n        else:\n            if element &lt; self.racine.valeur:\n                self.racine.gauche.insere(element)\n            else :\n                self.racine.droite.insere(element)\n\n    def recherche(self, element):\n        '''\n        Renvoie True si element est pr\u00e9sent dans l'arbre\n        binaire et False sinon.\n        '''\n        if self.est_vide():\n            return ...\n        else:\n            if element &lt; self.racine.valeur:\n                return ...\n            elif element &gt; self.racine.valeur:\n                return ...\n            else:\n                return ...\n</code></pre> <p>Compl\u00e9ter les fonctions r\u00e9cursives parcours et recherche afin qu'elles respectent leurs sp\u00e9cifications. </p> <p>Voici un exemple d'utilisation :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; a = ABR()\n&gt;&gt;&gt; a.insere(7)\n&gt;&gt;&gt; a.insere(3)\n&gt;&gt;&gt; a.insere(9)\n&gt;&gt;&gt; a.insere(1)\n&gt;&gt;&gt; a.insere(9)\n&gt;&gt;&gt; a.parcours()\n[1,3, 7, 9, 9]\n\n&gt;&gt;&gt; a.recherche(4)\nFalse\n&gt;&gt;&gt; a.recherche(3)\nTrue\n</code></pre> \ud83d\udc0d Script Python<pre><code>class Noeud:\n    ''' Classe impl\u00e9mentant un noeud d'arbre binaire\n    disposant de 3 attributs :\n    - valeur : la valeur de l'\u00e9tiquette,\n    - gauche : le sous-arbre gauche.\n    - droit : le sous-arbre droit. '''\n    def __init__(self, v, g, d):\n        self.valeur = v\n        self.gauche = g\n        self.droite = d\n\nclass ABR:\n    ''' Classe impl\u00e9mentant une structure\n    d'arbre binaire de recherche. '''\n    def __init__(self):\n        '''Cr\u00e9e un arbre binaire de recherche vide'''\n        self.racine = None\n\n    def est_vide(self):\n        '''Renvoie True si l'ABR est vide et False sinon.'''\n        return self.racine is None\n\n    def parcours(self, tab = []):\n        ''' Renvoie la liste tab compl\u00e9t\u00e9e avec tous les\n        \u00e9l\u00e9ments de l'ABR tri\u00e9s par ordre croissant. '''\n\n        if self.est_vide():\n            return tab\n        else:\n            self.racine.gauche.parcours(tab)\n            tab.append(self.racine.valeur)\n            self.racine.droite.parcours(tab)\n            return tab\n\n    def insere(self, element):\n        '''Ins\u00e8re un \u00e9l\u00e9ment dans l'arbre binaire de recherche.'''\n        if self.est_vide():\n            self.racine = Noeud(element, ABR(), ABR())\n        else:\n            if element &lt; self.racine.valeur:\n                self.racine.gauche.insere(element)\n            else :\n                self.racine.droite.insere(element)\n\n    def recherche(self, element):\n        '''\n        Renvoie True si element est pr\u00e9sent dans l'arbre\n        binaire et False sinon.\n        '''\n        if self.est_vide():\n            return False\n        else:\n            if element &lt; self.racine.valeur:\n                return self.racine.gauche.recherche(element)\n            elif element &gt; self.racine.valeur:\n                return self.racine.droite.recherche(element)\n            else:\n                return True\n</code></pre> <p> Cette mani\u00e8re de coder le parcours est maladroite car elle conduit \u00e0 ceci :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; a.parcours()\n[1, 3, 7, 9, 9]\n&gt;&gt;&gt; a.parcours()\n[1, 3, 7, 9, 9, 1, 3, 7, 9, 9]\n</code></pre> <p>Comme le param\u00e8tre optionnel <code>tab</code> est un \u00e9l\u00e9ment mutable (de type <code>list</code> ), Python ne le r\u00e9initialise pas avant chaque appel de la fonction. Vous pouvez constater les cons\u00e9quences f\u00e2cheuses.</p> <p>Une solution pourrait \u00eatre d'\u00e9crire ceci : \ud83d\udc0d Script Python<pre><code>def parcours(self, tab = None):\n    ''' Renvoie la liste tab compl\u00e9t\u00e9e avec tous les\n    \u00e9l\u00e9ments de l'ABR tri\u00e9s par ordre croissant. '''\n    if tab is None:\n        tab = []\n    if self.est_vide():\n        return tab\n    else:\n        self.racine.gauche.parcours(tab)\n        tab.append(self.racine.valeur)\n        self.racine.droite.parcours(tab)\n        return tab\n</code></pre></p> Markdown<pre><code>La classe ABR ci-dessous permet d'impl\u00e9menter une structure d'arbre binaire de recherche.\n\n```python linenums='1'\nclass Noeud:\n    ''' Classe impl\u00e9mentant un noeud d'arbre binaire\n    disposant de 3 attributs :\n    - valeur : la valeur de l'\u00e9tiquette,\n    - gauche : le sous-arbre gauche.\n    - droit : le sous-arbre droit. '''\n    def __init__(self, v, g, d):\n        self.valeur = v\n        self.gauche = g\n        self.droite = d\n\nclass ABR:\n    ''' Classe impl\u00e9mentant une structure\n    d'arbre binaire de recherche. '''\n    def __init__(self):\n        '''Cr\u00e9e un arbre binaire de recherche vide'''\n        self.racine = None\n\n    def est_vide(self):\n        '''Renvoie True si l'ABR est vide et False sinon.'''\n        return self.racine is None\n\n    def parcours(self, tab = []):\n        ''' Renvoie la liste tab compl\u00e9t\u00e9e avec tous les\n        \u00e9l\u00e9ments de l'ABR tri\u00e9s par ordre croissant. '''\n\n        if self.est_vide():\n            return tab\n        else:\n            self.racine.gauche.parcours(tab)\n            tab.append(...)\n            ...\n            return tab\n\n    def insere(self, element):\n        '''Ins\u00e8re un \u00e9l\u00e9ment dans l'arbre binaire de recherche.'''\n        if self.est_vide():\n            self.racine = Noeud(element, ABR(), ABR())\n        else:\n            if element &lt; self.racine.valeur:\n                self.racine.gauche.insere(element)\n            else :\n                self.racine.droite.insere(element)\n\n    def recherche(self, element):\n        '''\n        Renvoie True si element est pr\u00e9sent dans l'arbre\n        binaire et False sinon.\n        '''\n        if self.est_vide():\n            return ...\n        else:\n            if element &lt; self.racine.valeur:\n                return ...\n            elif element &gt; self.racine.valeur:\n                return ...\n            else:\n                return ...\n</code></pre> <p>Compl\u00e9ter les fonctions r\u00e9cursives parcours et recherche afin qu'elles respectent leurs sp\u00e9cifications. </p> <p>Voici un exemple d'utilisation :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; a = ABR()\n&gt;&gt;&gt; a.insere(7)\n&gt;&gt;&gt; a.insere(3)\n&gt;&gt;&gt; a.insere(9)\n&gt;&gt;&gt; a.insere(1)\n&gt;&gt;&gt; a.insere(9)\n&gt;&gt;&gt; a.parcours()\n[1,3, 7, 9, 9]\n\n&gt;&gt;&gt; a.recherche(4)\nFalse\n&gt;&gt;&gt; a.recherche(3)\nTrue\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-18","title":"\u25b6 Sujet 18","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-181","title":"Exercice 18.1 \u25a1","text":"<p>Exercice 18.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>On a relev\u00e9 les valeurs moyennes annuelles des temp\u00e9ratures \u00e0 Paris pour la p\u00e9riode allant de 2013 \u00e0 2019. Les r\u00e9sultats ont \u00e9t\u00e9 r\u00e9cup\u00e9r\u00e9s sous la forme de deux listes : l\u2019une pour les temp\u00e9ratures, l\u2019autre pour les ann\u00e9es : \ud83d\udc0d Script Python<pre><code>t_moy = [14.9, 13.3, 13.1, 12.5, 13.0, 13.6, 13.7]\nannees = [2013, 2014, 2015, 2016, 2017, 2018, 2019]\n</code></pre></p> <p>\u00c9crire la fonction <code>mini</code> qui prend en param\u00e8tres le tableau <code>releve</code> des relev\u00e9s et le tableau <code>date</code> des dates et qui renvoie la plus petite valeur relev\u00e9e au cours de la p\u00e9riode et l\u2019ann\u00e9e correspondante.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; mini(t_moy, annees)\n(12.5, 2016)\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>t_moy = [14.9, 13.3, 13.1, 12.5, 13.0, 13.6, 13.7]\nannees = [2013, 2014, 2015, 2016, 2017, 2018, 2019]\n\ndef mini(releve, date):\n    temp_mini = releve[0]\n    date_mini = date[0]\n    for i in range(len(releve)):\n        if releve[i] &lt; temp_mini:\n            temp_mini = releve[i]\n            date_mini = date[i]\n    return temp_mini, date_mini\n</code></pre> \ud83d\udccb Texte<pre><code>On a relev\u00e9 les valeurs moyennes annuelles des temp\u00e9ratures \u00e0 Paris pour la p\u00e9riode\nallant de 2013 \u00e0 2019. Les r\u00e9sultats ont \u00e9t\u00e9 r\u00e9cup\u00e9r\u00e9s sous la forme de deux listes : l\u2019une pour les temp\u00e9ratures, l\u2019autre pour les ann\u00e9es :\n```python\nt_moy = [14.9, 13.3, 13.1, 12.5, 13.0, 13.6, 13.7]\nannees = [2013, 2014, 2015, 2016, 2017, 2018, 2019]\n```\n\n\u00c9crire la fonction `mini` qui prend en param\u00e8tres le tableau `releve` des relev\u00e9s et le\ntableau `date` des dates et qui renvoie la plus petite valeur relev\u00e9e au cours de la\np\u00e9riode et l\u2019ann\u00e9e correspondante.\n\nExemple :\n```python\n&gt;&gt;&gt; mini(t_moy, annees)\n(12.5, 2016)\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-182","title":"Exercice 18.2 \u25a1","text":"<p>Exercice 18.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Un mot palindrome peut se lire de la m\u00eame fa\u00e7on de gauche \u00e0 droite ou de droite \u00e0 gauche : bob, radar, et non sont des mots palindromes.</p> <p>De m\u00eame certains nombres sont eux aussi des palindromes : 33, 121, 345543.</p> <p>L\u2019objectif de cet exercice est d\u2019obtenir un programme Python permettant de tester si un nombre est un nombre palindrome.</p> <p>Pour remplir cette t\u00e2che, on vous demande de compl\u00e9ter le code des trois fonctions ci- dessous sachant que la fonction <code>est_nbre_palindrome</code> s\u2019appuiera sur la fonction <code>est_palindrome</code> qui elle-m\u00eame s\u2019appuiera sur la fonction <code>inverse_chaine</code>.</p> <p>La fonction <code>inverse_chaine</code> inverse l'ordre des caract\u00e8res d'une cha\u00eene de caract\u00e8res <code>chaine</code> et renvoie la cha\u00eene invers\u00e9e.</p> <p>La fonction <code>est_palindrome</code> teste si une chaine de caract\u00e8res <code>chaine</code> est un palindrome. Elle renvoie <code>True</code> si c\u2019est le cas et <code>False</code> sinon. Cette fonction s\u2019appuie sur la fonction pr\u00e9c\u00e9dente.</p> <p>La fonction <code>est_nbre_palindrome</code> teste si un nombre <code>nbre</code> est un palindrome. Elle renvoie <code>True</code> si c\u2019est le cas et <code>False</code> sinon. Cette fonction s\u2019appuie sur la fonction pr\u00e9c\u00e9dente.</p> <p>Compl\u00e9ter le code des trois fonctions ci-dessous.</p> <p>\ud83d\udc0d Script Python<pre><code>def inverse_chaine(chaine):\n    result = ...\n    for caractere in chaine:\n        result = ...\n    return result\n\ndef est_palindrome(chaine):\n    inverse = inverse_chaine(chaine)\n    return ...\n\ndef est_nbre_palindrome(nbre):\n    chaine = ...\n    return est_palindrome(chaine)\n</code></pre> Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; inverse_chaine('bac')\n'cab'\n&gt;&gt;&gt; est_palindrome('NSI')\nFalse\n&gt;&gt;&gt; est_palindrome('ISN-NSI')\nTrue\n&gt;&gt;&gt; est_nbre_palindrome(214312)\nFalse\n&gt;&gt;&gt; est_nbre_palindrome(213312)\nTrue\n</code></pre> \ud83d\udc0d Script Python<pre><code>def inverse_chaine(chaine):\n    result = ''\n    for caractere in chaine:\n        result = caractere + result\n    return result\n\ndef est_palindrome(chaine):\n    inverse = inverse_chaine(chaine)\n    return chaine == inverse\n\ndef est_nbre_palindrome(nbre):\n    chaine = str(nbre)\n    return est_palindrome(chaine)\n</code></pre> <p>Markdown<pre><code>Un mot palindrome peut se lire de la m\u00eame fa\u00e7on de gauche \u00e0 droite ou de droite \u00e0\ngauche : *bob*, *radar*, et *non* sont des mots palindromes.\n\nDe m\u00eame certains nombres sont eux aussi des palindromes : 33, 121, 345543.\n\nL\u2019objectif de cet exercice est d\u2019obtenir un programme Python permettant de tester si un\nnombre est un nombre palindrome.\n\nPour remplir cette t\u00e2che, on vous demande de compl\u00e9ter le code des trois fonctions ci-\ndessous sachant que la fonction `est_nbre_palindrome` s\u2019appuiera sur la fonction\n`est_palindrome` qui elle-m\u00eame s\u2019appuiera sur la fonction `inverse_chaine`.\n\nLa fonction `inverse_chaine` inverse l'ordre des caract\u00e8res d'une cha\u00eene de caract\u00e8res\n`chaine` et renvoie la cha\u00eene invers\u00e9e.\n\nLa fonction `est_palindrome` teste si une chaine de caract\u00e8res `chaine` est un\npalindrome. Elle renvoie `True` si c\u2019est le cas et `False` sinon. Cette fonction s\u2019appuie sur\nla fonction pr\u00e9c\u00e9dente.\n\nLa fonction `est_nbre_palindrome` teste si un nombre `nbre` est un palindrome. Elle\nrenvoie `True` si c\u2019est le cas et `False` sinon. Cette fonction s\u2019appuie sur la fonction\npr\u00e9c\u00e9dente.\n\nCompl\u00e9ter le code des trois fonctions ci-dessous.\n\n```python\ndef inverse_chaine(chaine):\n    result = ...\n    for caractere in chaine:\n        result = ...\n    return result\n\ndef est_palindrome(chaine):\n    inverse = inverse_chaine(chaine)\n    return ...\n\ndef est_nbre_palindrome(nbre):\n    chaine = ...\n    return est_palindrome(chaine)\n</code></pre> Exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; inverse_chaine('bac')\n'cab'\n&gt;&gt;&gt; est_palindrome('NSI')\nFalse\n&gt;&gt;&gt; est_palindrome('ISN-NSI')\nTrue\n&gt;&gt;&gt; est_nbre_palindrome(214312)\nFalse\n&gt;&gt;&gt; est_nbre_palindrome(213312)\nTrue\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-19","title":"\u25b6 Sujet 19","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-191","title":"Exercice 19.1 \u25a1","text":"<p>Exercice 19.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Programmer la fonction <code>multiplication</code>, prenant en param\u00e8tres deux nombres entiers <code>n1</code> et <code>n2</code>, et qui renvoie le produit de ces deux nombres. Les seules op\u00e9rations autoris\u00e9es sont l\u2019addition et la soustraction. </p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; multiplication(3,5)\n15\n&gt;&gt;&gt; multiplication(-4,-8)\n32\n&gt;&gt;&gt; multiplication(-2,6)\n-12\n&gt;&gt;&gt; multiplication(-2,0)\n0\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def multiplication(n1, n2):\n    if n1 &lt; 0:\n        return -multiplication(-n1, n2)\n    if n2 &lt; 0:\n        return -multiplication(n1, -n2)\n    resultat = 0\n    for _ in range(n2):\n        resultat += n1\n    return resultat\n</code></pre> \ud83d\udccb Texte<pre><code>Programmer la fonction `multiplication`, prenant en param\u00e8tres deux nombres entiers\n`n1` et `n2`, et qui renvoie le produit de ces deux nombres.\nLes seules op\u00e9rations autoris\u00e9es sont l\u2019addition et la soustraction.\n\nExemples :\n```python\n&gt;&gt;&gt; multiplication(3,5)\n15\n&gt;&gt;&gt; multiplication(-4,-8)\n32\n&gt;&gt;&gt; multiplication(-2,6)\n-12\n&gt;&gt;&gt; multiplication(-2,0)\n0\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-192","title":"Exercice 19.2 \u25a1","text":"<p>Exercice 19.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Soit <code>T</code> un tableau non vide d'entiers tri\u00e9s dans l'ordre croissant et <code>n</code> un entier. La fonction <code>chercher</code>, donn\u00e9e \u00e0 la page suivante, doit renvoyer un indice o\u00f9 la valeur <code>n</code> appara\u00eet \u00e9ventuellement dans <code>T</code>, et <code>None</code> sinon. </p> <p>Les param\u00e8tres de la fonction sont :</p> <ul> <li><code>T</code>, le tableau dans lequel s'effectue la recherche ;</li> <li><code>n</code>, l'entier \u00e0 chercher dans le tableau ;</li> <li><code>i</code>, l'indice de d\u00e9but de la partie du tableau o\u00f9 s'effectue la recherche ;</li> <li><code>j</code>, l'indice de fin de la partie du tableau o\u00f9 s'effectue la recherche.</li> </ul> <p>La fonction <code>chercher</code> est une fonction r\u00e9cursive bas\u00e9e sur le principe \u00ab diviser pour r\u00e9gner \u00bb.</p> <p>Le code de la fonction commence par v\u00e9rifier si <code>0 &lt;= i</code> et <code>j &lt; len(T)</code>. Si cette condition n\u2019est pas v\u00e9rifi\u00e9e, elle affiche <code>\"Erreur\"</code> puis renvoie <code>None</code>.</p> <p>Recopier et compl\u00e9ter le code de la fonction <code>chercher</code> propos\u00e9e ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def chercher(T, n, i, j):\n    if i &lt; 0 or ??? :\n        print(\"Erreur\")\n        return None\n    if i &gt; j :\n        return None\n    m = (i + j) // ???\n    if T[m] &lt; ??? :\n        return chercher(T, n, ??? , ???)\n    elif ??? :\n        return chercher(T, n, ??? , ??? )\n    else :\n        return ???\n</code></pre> <p>L'ex\u00e9cution du code doit donner : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; chercher([1,5,6,6,9,12],7,0,10)\nErreur\n&gt;&gt;&gt; chercher([1,5,6,6,9,12],7,0,5)\n&gt;&gt;&gt; chercher([1,5,6,6,9,12],9,0,5)\n4\n&gt;&gt;&gt; chercher([1,5,6,6,9,12],6,0,5)\n2\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def chercher(T, n, i, j):\n    if i &lt; 0 or j &gt;= len(T) :\n        print('Erreur')\n        return None\n    if i &gt; j :\n        return None\n    m = (i + j) // 2\n    if T[m] &lt; n :\n        return chercher(T, n, m + 1, j)\n    elif T[m] &gt; n :\n        return chercher(T, n, i, m - 1 )\n    else :\n        return m\n</code></pre> Markdown<pre><code>Soit `T` un tableau non vide d'entiers tri\u00e9s dans l'ordre croissant et `n` un entier.\nLa fonction `chercher`, donn\u00e9e \u00e0 la page suivante, doit renvoyer un indice o\u00f9 la valeur `n`\nappara\u00eet \u00e9ventuellement dans `T`, et `None` sinon. \n\nLes param\u00e8tres de la fonction sont :\n\n- `T`, le tableau dans lequel s'effectue la recherche ;\n- `n`, l'entier \u00e0 chercher dans le tableau ;\n- `i`, l'indice de d\u00e9but de la partie du tableau o\u00f9 s'effectue la recherche ;\n- `j`, l'indice de fin de la partie du tableau o\u00f9 s'effectue la recherche.\n\nLa fonction `chercher` est une fonction r\u00e9cursive bas\u00e9e sur le principe \u00ab diviser pour\nr\u00e9gner \u00bb.\n\n\nLe code de la fonction commence par v\u00e9rifier si `0 &lt;= i` et `j &lt; len(T)`.  \nSi cette\ncondition n\u2019est pas v\u00e9rifi\u00e9e, elle affiche `\"Erreur\"` puis renvoie `None`.\n\nRecopier et compl\u00e9ter le code de la fonction `chercher` propos\u00e9e ci-dessous :\n\n```python linenums='1'\ndef chercher(T, n, i, j):\n    if i &lt; 0 or ??? :\n        print(\"Erreur\")\n        return None\n    if i &gt; j :\n        return None\n    m = (i + j) // ???\n    if T[m] &lt; ??? :\n        return chercher(T, n, ??? , ???)\n    elif ??? :\n        return chercher(T, n, ??? , ??? )\n    else :\n        return ???\n</code></pre> <p>L'ex\u00e9cution du code doit donner : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; chercher([1,5,6,6,9,12],7,0,10)\nErreur\n&gt;&gt;&gt; chercher([1,5,6,6,9,12],7,0,5)\n&gt;&gt;&gt; chercher([1,5,6,6,9,12],9,0,5)\n4\n&gt;&gt;&gt; chercher([1,5,6,6,9,12],6,0,5)\n2\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-20","title":"\u25b6 Sujet 20","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-201","title":"Exercice 20.1 \u25a1","text":"<p>Exercice 20.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>L'op\u00e9rateur \u00ab ou exclusif \u00bb entre deux bits renvoie 0 si les deux bits sont \u00e9gaux et 1 s'ils sont diff\u00e9rents : 0 \u2295 0 = 0 , 0 \u2295 1 = 1 , 1 \u2295 0 = 1 , 1 \u2295 1 = 0  </p> <p>On repr\u00e9sente ici une suite de bits par un tableau contenant des 0 et des 1.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>a = [1, 0, 1, 0, 1, 1, 0, 1]\nb = [0, 1, 1, 1, 0, 1, 0, 0]\nc = [1, 1, 0, 1]\nd = [0, 0, 1, 1]\n</code></pre> <p>\u00c9crire la fonction <code>xor</code> qui prend en param\u00e8tres deux tableaux de m\u00eame longueur et qui renvoie un tableau o\u00f9 l\u2019\u00e9l\u00e9ment situ\u00e9 \u00e0 position <code>i</code> est le r\u00e9sultat, par l\u2019op\u00e9rateur \u00ab ou exclusif \u00bb, des \u00e9l\u00e9ments \u00e0 la position <code>i</code> des tableaux pass\u00e9s en param\u00e8tres.</p> <p>En consid\u00e9rant les quatre exemples ci-dessus, cette fonction doit passer les tests suivants :</p> \ud83d\udc0d Script Python<pre><code>assert(xor(a, b) == [1, 1, 0, 1, 1, 0, 0, 1])\nassert(xor(c, d) == [1, 1, 1, 0])\n</code></pre> <p>Correction propos\u00e9e par Yves Laurent</p> \ud83d\udc0d Script Python<pre><code>def xor(tab1, tab2):\n    \"\"\"\n\n    Parameters\n    ----------\n    tab1 : type(tab1) = list\n        Binaire 1\n    tab2 : type(tab1) = list\n        Binaire 2\n\n    Returns\n    -------\n    resultat : list\n        tab1 xor tab2.\n\n    \"\"\"\n    assert len(tab1) == len(tab2), \"pas la m\u00eame taille\"\n\n    resultat = []\n\n    taille = len(tab1)\n\n    for compteur in range(taille):\n        resultat.append(tab1[compteur]^tab2[compteur])\n\n    return resultat\n</code></pre> \ud83d\udccb Texte<pre><code>L'op\u00e9rateur \u00ab ou exclusif \u00bb entre deux bits renvoie 0 si les deux bits sont \u00e9gaux et 1 s'ils sont\ndiff\u00e9rents :  \n0 \u2295 0 = 0 , 0 \u2295 1 = 1 , 1 \u2295 0 = 1 , 1 \u2295 1 = 0\n\nOn repr\u00e9sente ici une suite de bits par un tableau contenant des 0 et des 1.\n\nExemples :\n\n```python\na = [1, 0, 1, 0, 1, 1, 0, 1]\nb = [0, 1, 1, 1, 0, 1, 0, 0]\nc = [1, 1, 0, 1]\nd = [0, 0, 1, 1]\n```\n\n\u00c9crire la fonction ```xor``` qui prend en param\u00e8tres deux tableaux de m\u00eame longueur et qui renvoie\nun tableau o\u00f9 l\u2019\u00e9l\u00e9ment situ\u00e9 \u00e0 position `i` est le r\u00e9sultat, par l\u2019op\u00e9rateur \u00ab ou exclusif \u00bb, des\n\u00e9l\u00e9ments \u00e0 la position `i` des tableaux pass\u00e9s en param\u00e8tres.\n\nEn consid\u00e9rant les quatre exemples ci-dessus, cette fonction doit passer les tests suivants :\n\n```python\nassert(xor(a, b) == [1, 1, 0, 1, 1, 0, 0, 1])\nassert(xor(c, d) == [1, 1, 1, 0])\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-202","title":"Exercice 20.2 \u25a1","text":"<p>Exercice 20.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Dans cet exercice, on appelle carr\u00e9 d\u2019ordre \\(n\\) un tableau de \\(n\\) lignes et \\(n\\) colonnes dont chaque case contient un entier naturel.</p> <p>Exemples : </p> <p>Un carr\u00e9 est dit magique lorsque les sommes des \u00e9l\u00e9ments situ\u00e9s sur chaque ligne, chaque colonne et chaque diagonale sont \u00e9gales. Ainsi c2 et c3 sont magiques car la somme de chaque ligne, chaque colonne et chaque diagonale est \u00e9gale \u00e0 2 pour c2 et 15 pour c3. c4 n\u2019est pas magique car la somme de la premi\u00e8re ligne est \u00e9gale \u00e0 34 alors que celle de la derni\u00e8re colonne est \u00e9gale \u00e0 27.</p> <p>La classe <code>Carre</code> ci-apr\u00e8s contient des m\u00e9thodes qui permettent de manipuler des carr\u00e9s.</p> <p>Compl\u00e9ter la fonction <code>est_magique</code> qui prend en param\u00e8tre un carr\u00e9 et qui renvoie la valeur de la somme si ce carr\u00e9 est magique, <code>False</code> sinon.</p> \ud83d\udc0d Script Python<pre><code>class Carre:\n    def __init__(self, tableau = [[]]):\n        self.ordre = len(tableau)\n        self.valeurs = tableau\n\n    def affiche(self):\n        '''Affiche un carr\u00e9'''\n        for i in range(self.ordre):\n            print(self.valeurs[i])\n\n    def somme_ligne(self, i):\n        '''Calcule la somme des valeurs de la ligne i'''\n        return sum(self.valeurs[i])\n\n    def somme_col(self, j):\n        '''Calcule la somme des valeurs de la colonne j'''\n        return sum([self.valeurs[i][j] for i in range(self.ordre)])\n\ndef est_magique(carre):\n    n = carre.ordre\n    s = carre.somme_ligne(0)\n\n    #test de la somme de chaque ligne\n    for i in range(..., ...):\n        if carre.somme_ligne(i) != s:\n            return ...\n\n    #test de la somme de chaque colonne\n    for j in range(n):\n        if ... != s:\n            return False\n\n    #test de la somme de chaque diagonale\n    if sum([carre.valeurs[...][...] for k in range(n)]) != s:\n        return False\n    if sum([carre.valeurs[k][n-1-k] for k in range(n)]) != s:\n        return False\n    return ...\n</code></pre> <p>Tester la fonction <code>est_magique</code> sur les carr\u00e9s c2, c3 et c4.</p> \ud83d\udc0d Script Python<pre><code>class Carre:\n    def __init__(self, tableau = [[]]):\n        self.ordre = len(tableau)\n        self.valeurs = tableau\n\n    def affiche(self):\n        '''Affiche un carr\u00e9'''\n        for i in range(self.ordre):\n            print(self.valeurs[i])\n\n    def somme_ligne(self, i):\n        '''Calcule la somme des valeurs de la ligne i'''\n        return sum(self.valeurs[i])\n\n    def somme_col(self, j):\n        '''Calcule la somme des valeurs de la colonne j'''\n        return sum([self.valeurs[i][j] for i in range(self.ordre)])\n\ndef est_magique(carre):\n    n = carre.ordre\n    s = carre.somme_ligne(0)\n\n    #test de la somme de chaque ligne\n    for i in range(1, n):\n        if carre.somme_ligne(i) != s:\n            return False\n\n    #test de la somme de chaque colonne\n    for j in range(n):\n        if carre.somme_col(j) != s:\n            return False\n\n    #test de la somme de chaque diagonale\n    if sum([carre.valeurs[k][k] for k in range(n)]) != s:\n        return False\n    if sum([carre.valeurs[k][n-1-k] for k in range(n)]) != s:\n        return False\n    return s\n\nc1 = Carre([[1, 1],\n            [1, 1]])\n\nc2 = Carre([[2, 9, 4],\n            [7, 5, 3],\n            [6, 1, 8]])\n\nc3 = Carre([[4, 5, 16, 9],\n            [14, 7, 2, 11],\n            [3, 10, 15, 6],\n            [13, 12, 8, 1]])\n\nassert est_magique(c1) == 2\nassert est_magique(c2) == 15\nassert est_magique(c3) == False\n</code></pre> Markdown<pre><code>Dans cet exercice, on appelle carr\u00e9 d\u2019ordre $n$ un tableau de $n$ lignes et $n$ colonnes dont chaque case contient un entier naturel.\n\nExemples :\n![image](data/img20_2.png){: .center width=70%}\n\nUn carr\u00e9 est dit magique lorsque les sommes des \u00e9l\u00e9ments situ\u00e9s sur chaque ligne, chaque\ncolonne et chaque diagonale sont \u00e9gales. Ainsi c2 et c3 sont magiques car la somme de chaque\nligne, chaque colonne et chaque diagonale est \u00e9gale \u00e0 2 pour c2 et 15 pour c3. c4 n\u2019est pas\nmagique car la somme de la premi\u00e8re ligne est \u00e9gale \u00e0 34 alors que celle de la derni\u00e8re colonne\nest \u00e9gale \u00e0 27.\n\nLa classe `Carre` ci-apr\u00e8s contient des m\u00e9thodes qui permettent de manipuler des carr\u00e9s.\n\nCompl\u00e9ter la fonction `est_magique` qui prend en param\u00e8tre un carr\u00e9 et qui renvoie la valeur de\nla somme si ce carr\u00e9 est magique, `False` sinon.\n\n```python linenums='1'\nclass Carre:\n    def __init__(self, tableau = [[]]):\n        self.ordre = len(tableau)\n        self.valeurs = tableau\n\n    def affiche(self):\n        '''Affiche un carr\u00e9'''\n        for i in range(self.ordre):\n            print(self.valeurs[i])\n\n    def somme_ligne(self, i):\n        '''Calcule la somme des valeurs de la ligne i'''\n        return sum(self.valeurs[i])\n\n    def somme_col(self, j):\n        '''Calcule la somme des valeurs de la colonne j'''\n        return sum([self.valeurs[i][j] for i in range(self.ordre)])\n\ndef est_magique(carre):\n    n = carre.ordre\n    s = carre.somme_ligne(0)\n\n    #test de la somme de chaque ligne\n    for i in range(..., ...):\n        if carre.somme_ligne(i) != s:\n            return ...\n\n    #test de la somme de chaque colonne\n    for j in range(n):\n        if ... != s:\n            return False\n\n    #test de la somme de chaque diagonale\n    if sum([carre.valeurs[...][...] for k in range(n)]) != s:\n        return False\n    if sum([carre.valeurs[k][n-1-k] for k in range(n)]) != s:\n        return False\n    return ...\n</code></pre> <p>Tester la fonction <code>est_magique</code> sur les carr\u00e9s c2, c3 et c4. ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-21","title":"\u25b6 Sujet 21","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-211","title":"Exercice 21.1 \u25a1","text":"<p>Exercice 21.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Programmer la fonction <code>multiplication</code>, prenant en param\u00e8tres deux nombres entiers <code>n1</code> et <code>n2</code>, et qui renvoie le produit de ces deux nombres. Les seules op\u00e9rations autoris\u00e9es sont l\u2019addition et la soustraction. </p> <p>\u00c9nonc\u00e9 peu clair, on ne sait pas si <code>n1</code> et <code>n2</code> sont entiers naturels ou relatifs. Nous d\u00e9cidons qu'ils sont relatifs et donc qu'ils peuvent \u00eatre n\u00e9gatifs, auquel cas on utilise le fait que \\(5 \\times (-6)= - (5 \\times 6)\\). \ud83d\udc0d Script Python<pre><code>def multiplication(n1, n2):\n    if n1 &lt; 0:\n        return -multiplication(-n1, n2)\n    if n2 &lt; 0:\n        return -multiplication(n1, -n2)\n    resultat = 0\n    for _ in range(n2):\n        resultat += n1\n    return resultat\n</code></pre></p> \ud83d\udccb Texte<pre><code>Programmer la fonction `multiplication`, prenant en param\u00e8tres deux nombres entiers\n`n1` et `n2`, et qui renvoie le produit de ces deux nombres.\nLes seules op\u00e9rations autoris\u00e9es sont l\u2019addition et la soustraction.\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-212","title":"Exercice 21.2 \u25a1","text":"<p>Exercice 21.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Recopier et compl\u00e9ter sous Python la fonction suivante en respectant la sp\u00e9cification. On ne recopiera pas les commentaires.</p> \ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n    \"\"\"\n    tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = ...\n        if x == tab[m]:\n            return ...\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = ...\n    return ...\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],28)\nTrue\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],27)\nFalse\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n    \"\"\"\n    tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = (debut + fin) // 2\n        if x == tab[m]:\n            return True\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = m - 1\n    return False\n</code></pre> Markdown<pre><code>Recopier et compl\u00e9ter sous Python la fonction suivante en respectant la sp\u00e9cification. On\nne recopiera pas les commentaires.\n\n```python linenums='1'\ndef dichotomie(tab, x):\n    \"\"\"\n    tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = ...\n        if x == tab[m]:\n            return ...\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = ...\n    return ...\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],28)\nTrue\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],27)\nFalse\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-22","title":"\u25b6 Sujet 22","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-221","title":"Exercice 22.1 \u25a1","text":"<p>Exercice 22.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Programmer une fonction <code>renverse</code>, prenant en param\u00e8tre une cha\u00eene de caract\u00e8res non vide <code>mot</code> et renvoie une cha\u00eene de caract\u00e8res en inversant ceux de la cha\u00eene <code>mot</code>.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; renverse(\"informatique\")\n\"euqitamrofni\"\n</code></pre> \ud83d\udc0d Script Python<pre><code>def renverse(mot):\n    sol = ''\n    for lettre in mot:\n        sol = lettre + sol\n    return sol\n</code></pre> \ud83d\udccb Texte<pre><code>Programmer une fonction `renverse`, prenant en param\u00e8tre une cha\u00eene de caract\u00e8res non vide\n`mot` et renvoie une cha\u00eene de caract\u00e8res en inversant ceux de la cha\u00eene `mot`.\n\nExemple :\n\n```python\n&gt;&gt;&gt; renverse(\"informatique\")\n\"euqitamrofni\"\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-222","title":"Exercice 22.2 \u25a1","text":"<p>Exercice 22.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Un nombre premier est un nombre entier naturel qui admet exactement deux diviseurs distincts entiers et positifs : 1 et lui-m\u00eame. </p> <p>Le crible d\u2019\u00c9ratosth\u00e8ne permet de d\u00e9terminer les nombres premiers plus petit qu\u2019un certain nombre N fix\u00e9. </p> <p>On consid\u00e8re pour cela un tableau <code>tab</code> de N bool\u00e9ens, initialement tous \u00e9gaux \u00e0 <code>True</code>, sauf <code>tab[0]</code> et <code>tab[1]</code> qui valent <code>False</code>, 0 et 1 n\u2019\u00e9tant pas des nombres premiers.  </p> <p>On parcourt alors ce tableau de gauche \u00e0 droite.  </p> <p>Pour chaque indice <code>i</code> :</p> <ul> <li> <p>si <code>tab[i]</code> vaut <code>True</code> : le nombre <code>i</code> est premier et on donne la valeur <code>False</code> \u00e0 toutes les cases du tableau dont l\u2019indice est un multiple de <code>i</code>, \u00e0 partir de <code>2*i</code> (c\u2019est-\u00e0-dire <code>2*i</code>, <code>3*i</code> ...).</p> </li> <li> <p>si <code>tab[i]</code> vaut <code>False</code> : le nombre <code>i</code> n\u2019est pas premier et on n\u2019effectue aucun changement sur le tableau. </p> </li> </ul> <p>On dispose de la fonction <code>crible</code>, incompl\u00e8te et donn\u00e9e ci-dessous, prenant en param\u00e8tre un entier N strictement positif et renvoyant un tableau contenant tous les nombres premiers plus petits que N.</p> \ud83d\udc0d Script Python<pre><code>def crible(N):\n    \"\"\"\n    Renvoie un tableau contenant tous les nombres premiers plus petits que N\n    \"\"\"\n    premiers = []\n    tab = [True] * N\n    tab[0], tab[1] = False, False\n    for i in range(..., N):\n        if tab[i] == ...:\n            premiers.append(...)\n            for multiple in range(2*i, N, ...):\n                tab[multiple] = ...\n    return premiers\n\nassert crible(40) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n</code></pre> <p>Compl\u00e9ter le code de cette fonction.</p> \ud83d\udc0d Script Python<pre><code>def crible(N):\n    \"\"\"\n    Renvoie un tableau contenant tous les nombres premiers plus petits que N\n    \"\"\"\n    premiers = []\n    tab = [True] * N\n    tab[0], tab[1] = False, False\n    for i in range(2, N):\n        if tab[i] == True:\n            premiers.append(i)\n            for multiple in range(2*i, N, i):\n                tab[multiple] = False\n    return premiers\n\nassert crible(40) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n</code></pre> Markdown<pre><code>Un nombre premier est un nombre entier naturel qui admet exactement deux diviseurs distincts\nentiers et positifs : 1 et lui-m\u00eame. \n\nLe crible d\u2019\u00c9ratosth\u00e8ne permet de d\u00e9terminer les nombres premiers plus petit qu\u2019un certain\nnombre N fix\u00e9. \n\nOn consid\u00e8re pour cela un tableau `tab` de N bool\u00e9ens, initialement tous \u00e9gaux \u00e0 `True`, sauf\n`tab[0]` et `tab[1]` qui valent `False`, 0 et 1 n\u2019\u00e9tant pas des nombres premiers.  \n\nOn parcourt alors ce tableau de gauche \u00e0 droite.  \n\nPour chaque indice `i` :\n\n- si `tab[i]` vaut `True` : le nombre `i` est premier et on donne la valeur `False` \u00e0 toutes les\ncases du tableau dont l\u2019indice est un multiple de `i`, \u00e0 partir de `2*i` (c\u2019est-\u00e0-dire `2*i`, `3*i` ...).\n\n- si `tab[i]` vaut `False` : le nombre `i` n\u2019est pas premier et on n\u2019effectue aucun\nchangement sur le tableau. \n\nOn dispose de la fonction `crible`, incompl\u00e8te et donn\u00e9e ci-dessous, prenant en param\u00e8tre un\nentier N strictement positif et renvoyant un tableau contenant tous les nombres premiers plus\npetits que N.\n\n```python linenums='1'\ndef crible(N):\n    \"\"\"\n    Renvoie un tableau contenant tous les nombres premiers plus petits que N\n    \"\"\"\n    premiers = []\n    tab = [True] * N\n    tab[0], tab[1] = False, False\n    for i in range(..., N):\n        if tab[i] == ...:\n            premiers.append(...)\n            for multiple in range(2*i, N, ...):\n                tab[multiple] = ...\n    return premiers\n\nassert crible(40) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n</code></pre> <p>Compl\u00e9ter le code de cette fonction.</p> <p>```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-23","title":"\u25b6 Sujet 23","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-231","title":"Exercice 23.1 \u25a1","text":"<p>Exercice 23.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Sur le r\u00e9seau social TipTop, on s\u2019int\u00e9resse au nombre de \u00ab like \u00bb des abonn\u00e9s. Les donn\u00e9es sont stock\u00e9es dans des dictionnaires o\u00f9 les cl\u00e9s sont les pseudos et les valeurs correspondantes sont les nombres de \u00ab like \u00bb comme ci-dessous :</p> <p><code>{'Bob': 102, 'Ada': 201, 'Alice': 103, 'Tim': 50}</code></p> <p>\u00c9crire une fonction <code>max_dico</code> qui :</p> <ul> <li>Prend en param\u00e8tre un dictionnaire <code>dico</code> non vide dont les cl\u00e9s sont des cha\u00eenes de caract\u00e8res et les valeurs associ\u00e9es sont des entiers ;</li> <li>Renvoie un tuple dont :<ul> <li>La premi\u00e8re valeur est la cl\u00e9 du dictionnaire associ\u00e9e \u00e0 la valeur maximale ;</li> <li>La seconde valeur est la premi\u00e8re valeur maximale pr\u00e9sente dans le dictionnaire.</li> </ul> </li> </ul> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; max_dico({'Bob': 102, 'Ada': 201, 'Alice': 103, 'Tim': 50})\n('Ada', 201)\n&gt;&gt;&gt; max_dico({'Alan': 222, 'Ada': 201, 'Eve': 220, 'Tim': 50})\n('Alan', 222)\n</code></pre> \ud83d\udc0d Script Python<pre><code>def max_dico(dico):\n    cle_max = ''\n    val_max = 0\n    for cle in dico:\n        if dico[cle] &gt; val_max:\n            val_max = dico[cle]\n            cle_max = cle\n    return (cle_max, val_max)\n</code></pre> \ud83d\udccb Texte<pre><code>Sur le r\u00e9seau social TipTop, on s\u2019int\u00e9resse au nombre de \u00ab like \u00bb des abonn\u00e9s.\nLes donn\u00e9es sont stock\u00e9es dans des dictionnaires o\u00f9 les cl\u00e9s sont les pseudos et les valeurs\ncorrespondantes sont les nombres de \u00ab like \u00bb comme ci-dessous :\n\n`{'Bob': 102, 'Ada': 201, 'Alice': 103, 'Tim': 50}`\n\n\u00c9crire une fonction `max_dico` qui :\n\n- Prend en param\u00e8tre un dictionnaire `dico` non vide dont les cl\u00e9s sont des cha\u00eenes de\ncaract\u00e8res et les valeurs associ\u00e9es sont des entiers ;\n- Renvoie un tuple dont :\n    - La premi\u00e8re valeur est la cl\u00e9 du dictionnaire associ\u00e9e \u00e0 la valeur maximale ;\n    - La seconde valeur est la premi\u00e8re valeur maximale pr\u00e9sente dans le\ndictionnaire.\n\nExemples :\n\n```python\n&gt;&gt;&gt; max_dico({'Bob': 102, 'Ada': 201, 'Alice': 103, 'Tim': 50})\n('Ada', 201)\n&gt;&gt;&gt; max_dico({'Alan': 222, 'Ada': 201, 'Eve': 220, 'Tim': 50})\n('Alan', 222)\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-232","title":"Exercice 23.2 \u25a1","text":"<p>Exercice 23.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Nous avons l\u2019habitude de noter les expressions arithm\u00e9tiques avec des parenth\u00e8ses comme par exemple : (2 + 3) \u00d7 5. </p> <p>Il existe une autre notation utilis\u00e9e par certaines calculatrices, appel\u00e9e notation postfixe, qui n\u2019utilise pas de parenth\u00e8ses. L\u2019expression arithm\u00e9tique pr\u00e9c\u00e9dente est alors obtenue en saisissant successivement 2, puis 3, puis l\u2019op\u00e9rateur +, puis 5, et enfin l\u2019op\u00e9rateur \u00d7. On mod\u00e9lise cette saisie par le tableau [2, 3, '+', 5, '*']. </p> <p>Autre exemple, la notation postfixe de 3 \u00d7 2 + 5 est mod\u00e9lis\u00e9e par le tableau : </p> <p>[3, 2, '*', 5, '+']. </p> <p>D\u2019une mani\u00e8re plus g\u00e9n\u00e9rale, la valeur associ\u00e9e \u00e0 une expression arithm\u00e9tique en notation postfixe est d\u00e9termin\u00e9e \u00e0 l\u2019aide d\u2019une pile en parcourant l\u2019expression arithm\u00e9tique de gauche \u00e0 droite de la fa\u00e7on suivante :</p> <ul> <li>Si l\u2019\u00e9l\u00e9ment parcouru est un nombre, on le place au sommet de la pile ;</li> <li>Si l\u2019\u00e9l\u00e9ment parcouru est un op\u00e9rateur, on r\u00e9cup\u00e8re les deux \u00e9l\u00e9ments situ\u00e9s au sommet de la pile et on leur applique l\u2019op\u00e9rateur. On place alors le r\u00e9sultat au sommet de la pile.</li> <li>\u00c0 la fin du parcours, il reste alors un seul \u00e9l\u00e9ment dans la pile qui est le r\u00e9sultat de l\u2019expression arithm\u00e9tique.</li> </ul> <p>Dans le cadre de cet exercice, on se limitera aux op\u00e9rations \u00d7 et +.</p> <p>Pour cet exercice, on dispose d\u2019une classe <code>Pile</code> qui impl\u00e9mente les m\u00e9thodes de base sur la structure de pile.</p> <p>Compl\u00e9ter le script de la fonction <code>eval_expression</code> qui re\u00e7oit en param\u00e8tre une liste python repr\u00e9sentant la notation postfixe d\u2019une expression arithm\u00e9tique et qui renvoie sa valeur associ\u00e9e.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; eval_expression([2, 3, '+', 5, '*'])\n25\n</code></pre> \ud83d\udc0d Script Python<pre><code>class Pile:\n    \"\"\"Classe d\u00e9finissant une structure de pile.\"\"\"\n    def __init__(self):\n        self.contenu = []\n\n    def est_vide(self):\n        \"\"\"Renvoie le bool\u00e9en True si la pile est vide, False sinon.\"\"\"\n        return self.contenu == []\n\n    def empiler(self, v):\n        \"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\"\n        self.contenu.append(v)\n\n    def depiler(self):\n        \"\"\"\n        Retire et renvoie l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile,\n        si la pile n\u2019est pas vide.\n        \"\"\"\n        if not self.est_vide():\n            return self.contenu.pop()\n\n\ndef eval_expression(tab):\n    p = Pile()\n    for ... in tab:\n        if element != '+' ... element != '*':\n            p.empiler(...)\n        else:\n            if element == ...:\n                resultat = p.depiler() + ...\n            else:\n                resultat = ...\n            p.empiler(...)\n    return ...\n</code></pre> \ud83d\udc0d Script Python<pre><code>class Pile:\n    \"\"\"Classe d\u00e9finissant une structure de pile.\"\"\"\n    def __init__(self):\n        self.contenu = []\n\n    def est_vide(self):\n        \"\"\"Renvoie le bool\u00e9en True si la pile est vide, False sinon.\"\"\"\n        return self.contenu == []\n\n    def empiler(self, v):\n        \"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\"\n        self.contenu.append(v)\n\n    def depiler(self):\n        \"\"\"\n        Retire et renvoie l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile,\n        si la pile n\u2019est pas vide.\n        \"\"\"\n        if not self.est_vide():\n            return self.contenu.pop()\n\n\ndef eval_expression(tab):\n    p = Pile()\n    for element in tab:\n        print(element)\n        if element != '+' and element != '*':\n            p.empiler(element)\n        else:\n            if element == '+':\n                resultat = p.depiler() + p.depiler()\n            else:\n                resultat = p.depiler() * p.depiler()\n            p.empiler(resultat)\n    return p.depiler()\n</code></pre> Markdown<pre><code>Nous avons l\u2019habitude de noter les expressions arithm\u00e9tiques avec des parenth\u00e8ses comme\npar exemple : (2 + 3) \u00d7 5. \n\nIl existe une autre notation utilis\u00e9e par certaines calculatrices, appel\u00e9e notation postfixe, qui n\u2019utilise pas de parenth\u00e8ses. L\u2019expression arithm\u00e9tique pr\u00e9c\u00e9dente est alors obtenue en\nsaisissant successivement 2, puis 3, puis l\u2019op\u00e9rateur +, puis 5, et enfin l\u2019op\u00e9rateur \u00d7. On\nmod\u00e9lise cette saisie par le tableau [2, 3, '+', 5, '*']. \n\nAutre exemple, la notation postfixe de 3 \u00d7 2 + 5 est mod\u00e9lis\u00e9e par le tableau : \n\n[3, 2, '*', 5, '+']. \n\n\nD\u2019une mani\u00e8re plus g\u00e9n\u00e9rale, la valeur associ\u00e9e \u00e0 une expression arithm\u00e9tique en notation\npostfixe est d\u00e9termin\u00e9e \u00e0 l\u2019aide d\u2019une pile en parcourant l\u2019expression arithm\u00e9tique de gauche\n\u00e0 droite de la fa\u00e7on suivante :\n\n- Si l\u2019\u00e9l\u00e9ment parcouru est un nombre, on le place au sommet de la pile ;\n- Si l\u2019\u00e9l\u00e9ment parcouru est un op\u00e9rateur, on r\u00e9cup\u00e8re les deux \u00e9l\u00e9ments situ\u00e9s au\nsommet de la pile et on leur applique l\u2019op\u00e9rateur. On place alors le r\u00e9sultat au sommet\nde la pile.\n- \u00c0 la fin du parcours, il reste alors un seul \u00e9l\u00e9ment dans la pile qui est le r\u00e9sultat de\nl\u2019expression arithm\u00e9tique.\n\n\nDans le cadre de cet exercice, on se limitera aux op\u00e9rations \u00d7 et +.\n\n\nPour cet exercice, on dispose d\u2019une classe `Pile` qui impl\u00e9mente les m\u00e9thodes de base sur la\nstructure de pile.\n\nCompl\u00e9ter le script de la fonction `eval_expression` qui re\u00e7oit en param\u00e8tre une liste python\nrepr\u00e9sentant la notation postfixe d\u2019une expression arithm\u00e9tique et qui renvoie sa valeur\nassoci\u00e9e.\n\nExemple :\n\n```python\n&gt;&gt;&gt; eval_expression([2, 3, '+', 5, '*'])\n25\n</code></pre> <p>\ud83d\udc0d Script Python<pre><code>class Pile:\n    \"\"\"Classe d\u00e9finissant une structure de pile.\"\"\"\n    def __init__(self):\n        self.contenu = []\n\n    def est_vide(self):\n        \"\"\"Renvoie le bool\u00e9en True si la pile est vide, False sinon.\"\"\"\n        return self.contenu == []\n\n    def empiler(self, v):\n        \"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\"\n        self.contenu.append(v)\n\n    def depiler(self):\n        \"\"\"\n        Retire et renvoie l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile,\n        si la pile n\u2019est pas vide.\n        \"\"\"\n        if not self.est_vide():\n            return self.contenu.pop()\n\n\ndef eval_expression(tab):\n    p = Pile()\n    for ... in tab:\n        if element != '+' ... element != '*':\n            p.empiler(...)\n        else:\n            if element == ...:\n                resultat = p.depiler() + ...\n            else:\n                resultat = ...\n            p.empiler(...)\n    return ...\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-24","title":"\u25b6 Sujet 24","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-241","title":"Exercice 24.1 \u25a1","text":"<p>Exercice 24.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire la fonction <code>maxliste</code>, prenant en param\u00e8tre un tableau non vide de nombres <code>tab</code> (type <code>list</code>) et renvoyant le plus grand \u00e9l\u00e9ment de ce tableau.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; maxliste([98, 12, 104, 23, 131, 9])\n131\n&gt;&gt;&gt; maxliste([-27, 24, -3, 15])\n24\n</code></pre> \ud83d\udc0d Script Python<pre><code>def maxliste(tab):\n    maximum = tab[0]\n    for element in tab:\n        if element &gt; maximum:\n            maximum = element\n    return maximum\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire la fonction `maxliste`, prenant en param\u00e8tre un tableau non vide de nombres `tab` (type\n`list`) et renvoyant le plus grand \u00e9l\u00e9ment de ce tableau.\n\nExemples :\n\n```python\n&gt;&gt;&gt; maxliste([98, 12, 104, 23, 131, 9])\n131\n&gt;&gt;&gt; maxliste([-27, 24, -3, 15])\n24\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-242","title":"Exercice 24.2 \u25a1","text":"<p>Exercice 24.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On dispose de cha\u00eenes de caract\u00e8res contenant uniquement des parenth\u00e8ses ouvrantes et fermantes. </p> <p>Un parenth\u00e9sage est correct si :</p> <ul> <li>le nombre de parenth\u00e8ses ouvrantes de la cha\u00eene est \u00e9gal au nombre de parenth\u00e8ses fermantes.</li> <li>en parcourant la cha\u00eene de gauche \u00e0 droite, le nombre de parenth\u00e8ses d\u00e9j\u00e0 ouvertes doit \u00eatre, \u00e0 tout moment, sup\u00e9rieur ou \u00e9gal au nombre de parenth\u00e8ses d\u00e9j\u00e0 ferm\u00e9es.</li> </ul> <p>Ainsi, <code>((()())(()))</code> est un parenth\u00e9sage correct. </p> <p>Les parenth\u00e9sages <code>())(()</code> et <code>(())(()</code> sont, eux, incorrects.</p> <p>On dispose du code de la classe <code>Pile</code> suivant :</p> \ud83d\udc0d Script Python<pre><code>class Pile:\n    \"\"\" Classe d\u00e9finissant une pile \"\"\"\n    def __init__(self, valeurs=[]):\n        self.valeurs = valeurs\n\n    def est_vide(self):\n        \"\"\"Renvoie True si la pile est vide, False sinon\"\"\"\n        return self.valeurs == []\n\n    def empiler(self, c):\n        \"\"\"Place l\u2019\u00e9l\u00e9ment c au sommet de la pile\"\"\"\n        self.valeurs.append(c)\n\n    def depiler(self):\n        \"\"\"Supprime l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile, \u00e0 condition qu\u2019elle soit non vide\"\"\"\n        if self.est_vide() == False:\n            self.valeurs.pop()\n</code></pre> <p>On souhaite programmer une fonction parenthesage qui prend en param\u00e8tre une cha\u00eene ch de parenth\u00e8ses et renvoie <code>True</code> si la cha\u00eene est bien parenth\u00e9s\u00e9e et <code>False</code> sinon. Cette fonction utilise une pile et suit le principe suivant : en parcourant la cha\u00eene de gauche \u00e0 droite, si on trouve une parenth\u00e8se ouvrante, on l\u2019empile au sommet de la pile et si on trouve une parenth\u00e8se fermante, on d\u00e9pile (si possible !) la parenth\u00e8se ouvrante stock\u00e9e au sommet de la pile. </p> <p>La cha\u00eene est alors bien parenth\u00e9s\u00e9e si, \u00e0 la fin du parcours, la pile est vide. </p> <p>Elle est, par contre, mal parenth\u00e9s\u00e9e : </p> <ul> <li>si dans le parcours, on trouve une parenth\u00e8se fermante, alors que la pile est vide ;</li> <li>ou si, \u00e0 la fin du parcours, la pile n\u2019est pas vide.</li> </ul> \ud83d\udc0d Script Python<pre><code>def parenthesage(ch):\n    \"\"\"Renvoie True si la cha\u00eene ch est bien parenth\u00e9s\u00e9e et False sinon\"\"\"\n    p = Pile()\n    for c in ch:\n        if c == ...:\n            p.empiler(c)\n        elif c == ...:\n            if p.est_vide():\n                return ...\n            else:\n                ...\n    return p.est_vide()\n\nassert parenthesage(\"((()())(()))\") == True\nassert parenthesage(\"())(()\") == False\nassert parenthesage(\"(())(()\") == False\n</code></pre> <p>Compl\u00e9ter le code de la fonction <code>parenthesage</code>.</p> \ud83d\udc0d Script Python<pre><code>class Pile:\n    \"\"\" Classe d\u00e9finissant une pile \"\"\"\n    def __init__(self, valeurs=[]):\n        self.valeurs = valeurs\n\n    def est_vide(self):\n        \"\"\"Renvoie True si la pile est vide, False sinon\"\"\"\n        return self.valeurs == []\n\n    def empiler(self, c):\n        \"\"\"Place l\u2019\u00e9l\u00e9ment c au sommet de la pile\"\"\"\n        self.valeurs.append(c)\n\n    def depiler(self):\n        \"\"\"Supprime l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile, \u00e0 condition qu\u2019elle soit non vide\"\"\"\n        if self.est_vide() == False:\n            self.valeurs.pop()\n\ndef parenthesage(ch):\n    \"\"\"Renvoie True si la cha\u00eene ch est bien parenth\u00e9s\u00e9e et False sinon\"\"\"\n    p = Pile()\n    for c in ch:\n        if c == '(':\n            p.empiler(c)\n        elif c == ')':\n            if p.est_vide():\n                return False\n            else:\n                p.depiler()\n    return p.est_vide()\n\n\nprint(parenthesage(\"((()())(()))\"))\nassert parenthesage(\"((()())(()))\") == True\nassert parenthesage(\"())(()\") == False\nassert parenthesage(\"(())(()\") == False\n</code></pre> Markdown<pre><code>On dispose de cha\u00eenes de caract\u00e8res contenant uniquement des parenth\u00e8ses ouvrantes et\nfermantes. \n\nUn parenth\u00e9sage est correct si :\n\n- le nombre de parenth\u00e8ses ouvrantes de la cha\u00eene est \u00e9gal au nombre de parenth\u00e8ses\nfermantes.\n- en parcourant la cha\u00eene de gauche \u00e0 droite, le nombre de parenth\u00e8ses d\u00e9j\u00e0 ouvertes doit\n\u00eatre, \u00e0 tout moment, sup\u00e9rieur ou \u00e9gal au nombre de parenth\u00e8ses d\u00e9j\u00e0 ferm\u00e9es.\n\n\nAinsi, `((()())(()))` est un parenth\u00e9sage correct. \n\nLes parenth\u00e9sages `())(()` et `(())(()` sont, eux, incorrects.\n\n\nOn dispose du code de la classe `Pile` suivant :\n\n```python linenums='1'\nclass Pile:\n    \"\"\" Classe d\u00e9finissant une pile \"\"\"\n    def __init__(self, valeurs=[]):\n        self.valeurs = valeurs\n\n    def est_vide(self):\n        \"\"\"Renvoie True si la pile est vide, False sinon\"\"\"\n        return self.valeurs == []\n\n    def empiler(self, c):\n        \"\"\"Place l\u2019\u00e9l\u00e9ment c au sommet de la pile\"\"\"\n        self.valeurs.append(c)\n\n    def depiler(self):\n        \"\"\"Supprime l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile, \u00e0 condition qu\u2019elle soit non vide\"\"\"\n        if self.est_vide() == False:\n            self.valeurs.pop()\n</code></pre> <p>On souhaite programmer une fonction parenthesage qui prend en param\u00e8tre une cha\u00eene ch de parenth\u00e8ses et renvoie <code>True</code> si la cha\u00eene est bien parenth\u00e9s\u00e9e et <code>False</code> sinon. Cette fonction utilise une pile et suit le principe suivant : en parcourant la cha\u00eene de gauche \u00e0 droite, si on trouve une parenth\u00e8se ouvrante, on l\u2019empile au sommet de la pile et si on trouve une parenth\u00e8se fermante, on d\u00e9pile (si possible !) la parenth\u00e8se ouvrante stock\u00e9e au sommet de la pile. </p> <p>La cha\u00eene est alors bien parenth\u00e9s\u00e9e si, \u00e0 la fin du parcours, la pile est vide. </p> <p>Elle est, par contre, mal parenth\u00e9s\u00e9e : </p> <ul> <li>si dans le parcours, on trouve une parenth\u00e8se fermante, alors que la pile est vide ;</li> <li>ou si, \u00e0 la fin du parcours, la pile n\u2019est pas vide.</li> </ul> \ud83d\udc0d Script Python<pre><code>def parenthesage(ch):\n    \"\"\"Renvoie True si la cha\u00eene ch est bien parenth\u00e9s\u00e9e et False sinon\"\"\"\n    p = Pile()\n    for c in ch:\n        if c == ...:\n            p.empiler(c)\n        elif c == ...:\n            if p.est_vide():\n                return ...\n            else:\n                ...\n    return p.est_vide()\n\nassert parenthesage(\"((()())(()))\") == True\nassert parenthesage(\"())(()\") == False\nassert parenthesage(\"(())(()\") == False\n</code></pre> <p>Compl\u00e9ter le code de la fonction <code>parenthesage</code>. ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-25","title":"\u25b6 Sujet 25","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-251","title":"Exercice 25.1 \u25a1","text":"<p>Exercice 25.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>On consid\u00e8re des tables (des tableaux de dictionnaires) qui contiennent des enregistrements relatifs \u00e0 des animaux h\u00e9berg\u00e9s dans un refuge. Les attributs des enregistrements sont <code>'nom'</code>, <code>'espece'</code>, <code>'age'</code>, <code>'enclos'</code>. Voici un exemple d'une telle table :</p> \ud83d\udc0d Script Python<pre><code>animaux = [ {'nom':'Medor', 'espece':'chien', 'age':5, 'enclos':2},\n            {'nom':'Titine', 'espece':'chat', 'age':2, 'enclos':5},\n            {'nom':'Tom', 'espece':'chat', 'age':7, 'enclos':4},\n            {'nom':'Belle', 'espece':'chien', 'age':6, 'enclos':3},\n            {'nom':'Mirza', 'espece':'chat', 'age':6, 'enclos':5}]\n</code></pre> <p>Programmer une fonction <code>selection_enclos</code> qui :</p> <ul> <li>prend en param\u00e8tres :<ul> <li>une table <code>table_animaux</code> contenant des enregistrements relatifs \u00e0 des animaux (comme dans l'exemple ci-dessus),</li> <li>un num\u00e9ro d'enclos <code>num_enclos</code> ;</li> </ul> </li> <li>renvoie une table contenant les enregistrements de <code>table_animaux</code> dont l'attribut <code>'enclos'</code> est <code>num_enclos</code>.</li> </ul> <p>Exemples avec la table animaux ci-dessus :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; selection_enclos(animaux, 5)\n[{'nom':'Titine', 'espece':'chat', 'age':2, 'enclos':5},\n {'nom':'Mirza', 'espece':'chat', 'age':6, 'enclos':5}]\n\n&gt;&gt;&gt; selection_enclos(animaux, 2)\n[{'nom':'Medor', 'espece':'chien', 'age':5, 'enclos':2}]\n\n&gt;&gt;&gt; selection_enclos(animaux, 7)\n[]\n</code></pre> \ud83d\udc0d Script Python<pre><code>def selection_enclos(table_animaux, num_enclos):\n    table = []\n    for animal in table_animaux:\n        if animal['enclos'] == num_enclos:\n            table.append(animal)\n    return table\n</code></pre> \ud83d\udccb Texte<pre><code>On consid\u00e8re des tables (des tableaux de dictionnaires) qui contiennent des enregistrements\nrelatifs \u00e0 des animaux h\u00e9berg\u00e9s dans un refuge. Les attributs des enregistrements sont\n`'nom'`, `'espece'`, `'age'`, `'enclos'`. Voici un exemple d'une telle table :\n\n```python\nanimaux = [ {'nom':'Medor', 'espece':'chien', 'age':5, 'enclos':2},\n            {'nom':'Titine', 'espece':'chat', 'age':2, 'enclos':5},\n            {'nom':'Tom', 'espece':'chat', 'age':7, 'enclos':4},\n            {'nom':'Belle', 'espece':'chien', 'age':6, 'enclos':3},\n            {'nom':'Mirza', 'espece':'chat', 'age':6, 'enclos':5}]\n```\n\nProgrammer une fonction `selection_enclos` qui :\n\n- prend en param\u00e8tres :\n    - une table `table_animaux` contenant des enregistrements relatifs \u00e0 des\nanimaux (comme dans l'exemple ci-dessus),\n    - un num\u00e9ro d'enclos `num_enclos` ;\n- renvoie une table contenant les enregistrements de `table_animaux` dont l'attribut\n`'enclos'` est `num_enclos`.\n\nExemples avec la table animaux ci-dessus :\n\n```python\n&gt;&gt;&gt; selection_enclos(animaux, 5)\n[{'nom':'Titine', 'espece':'chat', 'age':2, 'enclos':5},\n {'nom':'Mirza', 'espece':'chat', 'age':6, 'enclos':5}]\n\n&gt;&gt;&gt; selection_enclos(animaux, 2)\n[{'nom':'Medor', 'espece':'chien', 'age':5, 'enclos':2}]\n\n&gt;&gt;&gt; selection_enclos(animaux, 7)\n[]\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-252","title":"Exercice 25.2 \u25a1","text":"<p>Exercice 25.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On consid\u00e8re des tableaux de nombres dont tous les \u00e9l\u00e9ments sont pr\u00e9sents exactement trois fois et \u00e0 suivre, sauf un \u00e9l\u00e9ment qui est pr\u00e9sent une unique fois et que l'on appelle \u00ab l'intrus \u00bb. Voici quelques exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>tab_a = [3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8, 8, 5, 5, 5]\n#l'intrus est 7\n\ntab_b = [8, 5, 5, 5, 9, 9, 9, 18, 18, 18, 3, 3, 3]\n#l'intrus est 8\n\ntab_c = [5, 5, 5, 1, 1, 1, 0, 0, 0, 6, 6, 6, 3, 8, 8, 8]\n#l'intrus est 3\n</code></pre> On remarque qu'avec de tels tableaux :</p> <ul> <li>pour les indices multiples de 3 situ\u00e9s strictement avant l'intrus, l'\u00e9l\u00e9ment correspondant et son voisin de droite sont \u00e9gaux,</li> <li>pour les indices multiples de 3 situ\u00e9s apr\u00e8s l'intrus, l'\u00e9l\u00e9ment correspondant et son voisin de droite - s'il existe - sont diff\u00e9rents.</li> </ul> <p>Ce que l'on peut observer ci-dessous en observant les valeurs des paires de voisins marqu\u00e9es par des caract\u00e8res ^ :</p> \ud83d\udc0d Script Python<pre><code>[3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8, 8, 5, 5, 5]\n ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^\n 0        3        6        9        12       15       18       21\n</code></pre> <p>Dans des listes comme celles ci-dessus, un algorithme r\u00e9cursif pour trouver l'intrus consiste alors \u00e0 choisir un indice <code>i</code> multiple de 3 situ\u00e9 approximativement au milieu des indices parmi lesquels se trouve l'intrus. </p> <p>Puis, en fonction des valeurs de l'\u00e9l\u00e9ment d'indice <code>i</code> et de son voisin de droite, \u00e0 appliquer r\u00e9cursivement l'algorithme \u00e0 la moiti\u00e9 droite ou \u00e0 la moiti\u00e9 gauche des indices parmi lesquels se trouve l'intrus. </p> <p>Compl\u00e9ter la fonction ci-dessous qui met en \u0153uvre cet algorithme.</p> \ud83d\udc0d Script Python<pre><code>def trouver_intrus(tab, g, d):\n    '''\n    Renvoie la valeur de l'intrus situ\u00e9 entre les indices g et d \n    dans la liste tab o\u00f9 \n    tab v\u00e9rifie les conditions de l'exercice,\n        g et d sont des multiples de 3.\n    '''\n    if g == d:\n        return ...\n\n    else:\n        nombre_de_triplets = (d - g) // ...\n        indice = g + 3 * (nombre_de_triplets // 2)\n        if ... :\n            return ...\n        else:\n            return ...\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; trouver_intrus([3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8,\n8, 5, 5, 5], 0, 21)\n7\n\n&gt;&gt;&gt; trouver_intrus([8, 5, 5, 5, 9, 9, 9, 18, 18, 18, 3, 3, 3], 0, 12)\n8\n\n&gt;&gt;&gt; trouver_intrus([5, 5, 5, 1, 1, 1, 0, 0, 0, 6, 6, 6, 3, 8, 8, 8], 0, 15)\n3\n</code></pre> \ud83d\udc0d Script Python<pre><code>def trouver_intrus(tab, g, d):\n    '''\n    Renvoie la valeur de l'intrus situ\u00e9 entre les indices g et d \n    dans la liste tab o\u00f9 tab v\u00e9rifie les conditions de l'exercice,\n    g et d sont des multiples de 3.\n    '''\n    if g == d:\n        return tab[g]\n\n    else:\n        nombre_de_triplets = (d - g) // 3\n        indice = g + 3 * (nombre_de_triplets // 2)\n        if tab[indice] != tab[indice + 1] :\n            return trouver_intrus(tab, g, indice)\n        else:\n            return trouver_intrus(tab, indice + 3, d)\n</code></pre> <p>Markdown<pre><code>On consid\u00e8re des tableaux de nombres dont tous les \u00e9l\u00e9ments sont pr\u00e9sents exactement\ntrois fois et \u00e0 suivre, sauf un \u00e9l\u00e9ment qui est pr\u00e9sent une unique fois et que l'on appelle \u00ab\nl'intrus \u00bb. Voici quelques exemples :\n\n```python\ntab_a = [3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8, 8, 5, 5, 5]\n#l'intrus est 7\n\ntab_b = [8, 5, 5, 5, 9, 9, 9, 18, 18, 18, 3, 3, 3]\n#l'intrus est 8\n\ntab_c = [5, 5, 5, 1, 1, 1, 0, 0, 0, 6, 6, 6, 3, 8, 8, 8]\n#l'intrus est 3\n</code></pre> On remarque qu'avec de tels tableaux :</p> <ul> <li>pour les indices multiples de 3 situ\u00e9s strictement avant l'intrus, l'\u00e9l\u00e9ment correspondant et son voisin de droite sont \u00e9gaux,</li> <li>pour les indices multiples de 3 situ\u00e9s apr\u00e8s l'intrus, l'\u00e9l\u00e9ment correspondant et son voisin de droite - s'il existe - sont diff\u00e9rents.</li> </ul> <p>Ce que l'on peut observer ci-dessous en observant les valeurs des paires de voisins marqu\u00e9es par des caract\u00e8res ^ :</p> \ud83d\udc0d Script Python<pre><code>[3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8, 8, 5, 5, 5]\n ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^\n 0        3        6        9        12       15       18       21\n</code></pre> <p>Dans des listes comme celles ci-dessus, un algorithme r\u00e9cursif pour trouver l'intrus consiste alors \u00e0 choisir un indice <code>i</code> multiple de 3 situ\u00e9 approximativement au milieu des indices parmi lesquels se trouve l'intrus. </p> <p>Puis, en fonction des valeurs de l'\u00e9l\u00e9ment d'indice <code>i</code> et de son voisin de droite, \u00e0 appliquer r\u00e9cursivement l'algorithme \u00e0 la moiti\u00e9 droite ou \u00e0 la moiti\u00e9 gauche des indices parmi lesquels se trouve l'intrus. </p> <p>Compl\u00e9ter la fonction ci-dessous qui met en \u0153uvre cet algorithme.</p> \ud83d\udc0d Script Python<pre><code>def trouver_intrus(tab, g, d):\n    '''\n    Renvoie la valeur de l'intrus situ\u00e9 entre les indices g et d \n    dans la liste tab o\u00f9 \n    tab v\u00e9rifie les conditions de l'exercice,\n        g et d sont des multiples de 3.\n    '''\n    if g == d:\n        return ...\n\n    else:\n        nombre_de_triplets = (d - g) // ...\n        indice = g + 3 * (nombre_de_triplets // 2)\n        if ... :\n            return ...\n        else:\n            return ...\n</code></pre> <p>Exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; trouver_intrus([3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8,\n8, 5, 5, 5], 0, 21)\n7\n\n&gt;&gt;&gt; trouver_intrus([8, 5, 5, 5, 9, 9, 9, 18, 18, 18, 3, 3, 3], 0, 12)\n8\n\n&gt;&gt;&gt; trouver_intrus([5, 5, 5, 1, 1, 1, 0, 0, 0, 6, 6, 6, 3, 8, 8, 8], 0, 15)\n3\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-26","title":"\u25b6 Sujet 26","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-261","title":"Exercice 26.1 \u25a1","text":"<p>Exercice 26.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>RechercheMin</code> qui prend en param\u00e8tre un tableau de nombres non tri\u00e9 <code>tab</code>, et qui renvoie l'indice de la premi\u00e8re occurrence du minimum de ce tableau. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; RechercheMin([5])\n0\n&gt;&gt;&gt; RechercheMin([2, 4, 1])\n2\n&gt;&gt;&gt; RechercheMin([5, 3, 2, 2, 4])\n2\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def RechercheMin(tab):\n    indice_min = 0\n    for i in range(len(tab)):\n        if tab[i] &lt; tab[indice_min]:\n            indice_min = i\n    return indice_min\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `RechercheMin` qui prend en param\u00e8tre un tableau de nombres non\ntri\u00e9 `tab`, et qui renvoie l'indice de la premi\u00e8re occurrence du minimum de ce tableau. Les\ntableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.\n\nExemples :\n```python\n&gt;&gt;&gt; RechercheMin([5])\n0\n&gt;&gt;&gt; RechercheMin([2, 4, 1])\n2\n&gt;&gt;&gt; RechercheMin([5, 3, 2, 2, 4])\n2\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-262","title":"Exercice 26.2 \u25a1","text":"<p>Exercice 26.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On consid\u00e8re la fonction <code>separe</code> ci-dessous qui prend en argument un tableau <code>tab</code> dont les \u00e9l\u00e9ments sont des <code>0</code> et des <code>1</code> et qui s\u00e9pare les <code>0</code> des <code>1</code> en pla\u00e7ant les <code>0</code> en d\u00e9but de tableau et les <code>1</code> \u00e0 la suite.</p> \ud83d\udc0d Script Python<pre><code>def separe(tab):\n    i = 0\n    j = ...\n    while i &lt; j :\n        if tab[i] == 0 :\n            i = ...\n        else :\n            tab[i], tab[j] = ...\n            j = ...\n    return tab\n</code></pre> <p>Compl\u00e9ter la fonction <code>separe</code> ci-dessus.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; separe([1, 0, 1, 0, 1, 0, 1, 0])\n[0, 0, 0, 0, 1, 1, 1, 1]\n&gt;&gt;&gt; separe([1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0])\n[0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n</code></pre> \ud83d\udc0d Script Python<pre><code>def separe(tab):\n    i = 0\n    j = len(tab) - 1\n    while i &lt; j :\n        if tab[i] == 0 :\n            i = i + 1\n        else :\n            tab[i], tab[j] = tab[j], tab[i]\n            j = j - 1\n    return tab\n</code></pre> Markdown<pre><code>On consid\u00e8re la fonction `separe` ci-dessous qui prend en argument un tableau `tab` dont\nles \u00e9l\u00e9ments sont des `0` et des `1` et qui s\u00e9pare les `0` des `1` en pla\u00e7ant les `0` en d\u00e9but de\ntableau et les `1` \u00e0 la suite.\n\n```python linenums='1'\ndef separe(tab):\n    i = 0\n    j = ...\n    while i &lt; j :\n        if tab[i] == 0 :\n            i = ...\n        else :\n            tab[i], tab[j] = ...\n            j = ...\n    return tab\n</code></pre> <p>Compl\u00e9ter la fonction <code>separe</code> ci-dessus.</p> <p>Exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; separe([1, 0, 1, 0, 1, 0, 1, 0])\n[0, 0, 0, 0, 1, 1, 1, 1]\n&gt;&gt;&gt; separe([1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0])\n[0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-27","title":"\u25b6 Sujet 27","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-271","title":"Exercice 27.1 \u25a1","text":"<p>Exercice 27.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Dans cet exercice, un arbre binaire de caract\u00e8res est stock\u00e9 sous la forme d\u2019un dictionnaire o\u00f9 les clefs sont les caract\u00e8res des n\u0153uds de l\u2019arbre et les valeurs, pour chaque clef, la liste des caract\u00e8res des fils gauche et droit du n\u0153ud.</p> <p>Par exemple, l\u2019arbre</p> <p></p> <p>est stock\u00e9 dans</p> \ud83d\udc0d Script Python<pre><code>a = {'F':['B','G'], 'B':['A','D'], 'A':['',''], 'D':['C','E'], \\\n'C':['',''], 'E':['',''], 'G':['','I'], 'I':['','H'], \\\n'H':['','']}\n</code></pre> <p>\u00c9crire une fonction r\u00e9cursive <code>taille</code> prenant en param\u00e8tres un arbre binaire <code>arbre</code> sous la forme d\u2019un dictionnaire et un caract\u00e8re <code>lettre</code> qui est la valeur du sommet de l\u2019arbre, et qui renvoie la taille de l\u2019arbre \u00e0 savoir le nombre total de n\u0153ud. On pourra distinguer les 4 cas o\u00f9 les deux \u00ab fils \u00bb du n\u0153ud sont <code>''</code>, le fils gauche seulement est <code>''</code>, le fils droit seulement est <code>''</code>, aucun des deux fils n\u2019est <code>''</code>.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; taille(a, \u2019F\u2019)\n9\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>a = {'F':['B','G'], 'B':['A','D'], 'A':['',''], 'D':['C','E'], 'C':['',''], 'E':['',''], 'G':['','I'], 'I':['','H'], 'H':['','']}\n\ndef taille(arbre, lettre):\n    fils_gauche = arbre[lettre][0]\n    fils_droit = arbre[lettre][1]\n\n    if fils_gauche != '' and fils_droit != '':\n        return 1 + taille(arbre, fils_gauche) + taille(arbre, fils_droit)\n\n    if fils_gauche != '' and fils_droit == '':\n        return 1 + taille(arbre, fils_gauche)\n\n    if fils_gauche == '' and fils_droit != '':\n        return 1 + taille(arbre, fils_droit)\n\n    else:\n        return 1\n</code></pre> \ud83d\udccb Texte<pre><code>Dans cet exercice, un arbre binaire de caract\u00e8res est stock\u00e9 sous la forme d\u2019un\ndictionnaire o\u00f9 les clefs sont les caract\u00e8res des n\u0153uds de l\u2019arbre et les valeurs, pour\nchaque clef, la liste des caract\u00e8res des fils gauche et droit du n\u0153ud.\n\nPar exemple, l\u2019arbre\n\n![image](data/img28_1.png){: .center width=40%}\n\nest stock\u00e9 dans\n\n```python\na = {'F':['B','G'], 'B':['A','D'], 'A':['',''], 'D':['C','E'], \\\n'C':['',''], 'E':['',''], 'G':['','I'], 'I':['','H'], \\\n'H':['','']}\n```\n\n\u00c9crire une fonction r\u00e9cursive `taille` prenant en param\u00e8tres un arbre binaire `arbre`\nsous la forme d\u2019un dictionnaire et un caract\u00e8re `lettre` qui est la valeur du sommet de\nl\u2019arbre, et qui renvoie la taille de l\u2019arbre \u00e0 savoir le nombre total de n\u0153ud.\nOn pourra distinguer les 4 cas o\u00f9 les deux \u00ab fils \u00bb du n\u0153ud sont `''`, le fils gauche\nseulement est `''`, le fils droit seulement est `''`, aucun des deux fils n\u2019est `''`.\n\nExemple :\n```python\n&gt;&gt;&gt; taille(a, \u2019F\u2019)\n9\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-272","title":"Exercice 27.2 \u25a1","text":"<p>Exercice 27.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On consid\u00e8re l'algorithme de tri de tableau suivant : \u00e0 chaque \u00e9tape, on parcourt depuis le d\u00e9but du tableau tous les \u00e9l\u00e9ments non rang\u00e9s et on place en derni\u00e8re position le plus grand \u00e9l\u00e9ment.</p> <p>Exemple avec le tableau : <code>t = [41, 55, 21, 18, 12, 6, 25]</code> </p> <ul> <li>\u00c9tape 1 : on parcourt tous les \u00e9l\u00e9ments du tableau, on permute le plus grand \u00e9l\u00e9ment avec le dernier.</li> </ul> <p>Le tableau devient <code>t = [41, 25, 21, 18, 12, 6, 55]</code></p> <ul> <li>\u00c9tape 2 : on parcourt tous les \u00e9l\u00e9ments sauf le dernier, on permute le plus grand \u00e9l\u00e9ment trouv\u00e9 avec l'avant dernier.</li> </ul> <p>Le tableau devient : <code>t = [6, 25, 21, 18, 12, 41, 55]</code> </p> <p>Et ainsi de suite. La code de la fonction <code>tri_iteratif</code> qui impl\u00e9mente cet algorithme est donn\u00e9 ci- dessous.</p> \ud83d\udc0d Script Python<pre><code>def tri_iteratif(tab):\n    for k in range(..., 0 ,-1):\n        imax = ...\n        for i in range(0, ...):\n            if tab[i] &gt; ... :\n                imax = i\n        if tab[imax] &gt; ... :\n            ..., tab[imax] = tab[imax], ...\n    return tab\n</code></pre> <p>Compl\u00e9ter le code qui doit donner :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tri_iteratif([41, 55, 21, 18, 12, 6, 25])\n[6, 12, 18, 21, 25, 41, 55]\n</code></pre> <p>On rappelle que l'instruction <code>a, b = b, a</code> \u00e9change les contenus de <code>a</code> et <code>b</code>.</p> \ud83d\udc0d Script Python<pre><code>def tri_iteratif(tab):\n    for k in range(len(tab)-1, 0, -1):\n        imax = 0\n        for i in range(0, k):\n            if tab[i] &gt; tab[imax] :\n                imax = i\n        if tab[imax] &gt; tab[k] :\n            tab[k], tab[imax] = tab[imax], tab[k] \n    return tab\n</code></pre> Markdown<pre><code>On consid\u00e8re l'algorithme de tri de tableau suivant : \u00e0 chaque \u00e9tape, on parcourt depuis\nle d\u00e9but du tableau tous les \u00e9l\u00e9ments non rang\u00e9s et on place en derni\u00e8re position le plus\ngrand \u00e9l\u00e9ment.\n\nExemple avec le tableau : ```t = [41, 55, 21, 18, 12, 6, 25]``` \n\n- \u00c9tape 1 : on parcourt tous les \u00e9l\u00e9ments du tableau, on permute le plus grand \u00e9l\u00e9ment avec le dernier.\n\nLe tableau devient `t = [41, 25, 21, 18, 12, 6, 55]`\n\n- \u00c9tape 2 : on parcourt tous les \u00e9l\u00e9ments **sauf le dernier**, on permute le plus grand \u00e9l\u00e9ment trouv\u00e9 avec l'avant dernier.\n\nLe tableau devient : ```t = [6, 25, 21, 18, 12, 41, 55]``` \n\nEt ainsi de suite. La code de la fonction `tri_iteratif` qui impl\u00e9mente cet algorithme est donn\u00e9 ci-\ndessous.\n\n```python linenums='1'\ndef tri_iteratif(tab):\n    for k in range(..., 0 ,-1):\n        imax = ...\n        for i in range(0, ...):\n            if tab[i] &gt; ... :\n                imax = i\n        if tab[imax] &gt; ... :\n            ..., tab[imax] = tab[imax], ...\n    return tab\n</code></pre> <p>Compl\u00e9ter le code qui doit donner :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tri_iteratif([41, 55, 21, 18, 12, 6, 25])\n[6, 12, 18, 21, 25, 41, 55]\n</code></pre> <p>On rappelle que l'instruction <code>a, b = b, a</code> \u00e9change les contenus de <code>a</code> et <code>b</code>. ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-28","title":"\u25b6 Sujet 28","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-281","title":"Exercice 28.1 \u25a1","text":"<p>Exercice 28.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>moyenne</code> qui prend en param\u00e8tre un tableau non vide de nombres flottants et qui renvoie la moyenne des valeurs du tableau. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; moyenne([1.0])\n1.0\n&gt;&gt;&gt; moyenne([1.0, 2.0, 4.0])\n2.3333333333333335\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    somme = 0\n    for val in tab:\n        somme += val\n    return somme / len(tab)\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `moyenne` qui prend en param\u00e8tre un tableau non vide de nombres\nflottants et qui renvoie la moyenne des valeurs du tableau. Les tableaux seront\nrepr\u00e9sent\u00e9s sous forme de liste Python.\n\nExemples :\n```python\n&gt;&gt;&gt; moyenne([1.0])\n1.0\n&gt;&gt;&gt; moyenne([1.0, 2.0, 4.0])\n2.3333333333333335\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-282","title":"Exercice 28.2 \u25a1","text":"<p>Exercice 28.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On consid\u00e8re la fonction <code>dec_to_bin</code> ci-dessous qui prend en param\u00e8tre un entier positif <code>a</code> en \u00e9criture d\u00e9cimale et qui renvoie son \u00e9criture binaire sous la forme d'une chaine de caract\u00e8res.</p> <p>\ud83d\udc0d Script Python<pre><code>def dec_to_bin(a):\n    bin_a = ...\n    a = a//2\n    while a ... :\n        bin_a = ... + bin_a\n        a = ...\n    return bin_a\n</code></pre> Compl\u00e9ter la fonction <code>dec_to_bin</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dec_to_bin(83)\n'1010011'\n&gt;&gt;&gt; dec_to_bin(127)\n'1111111'\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def dec_to_bin(a):\n    bin_a = str(a%2)\n    a = a // 2\n    while a != 0 :\n        bin_a = str(a%2) + bin_a\n        a = a // 2\n    return bin_a\n</code></pre> <p>Markdown<pre><code>On consid\u00e8re la fonction `dec_to_bin` ci-dessous qui prend en param\u00e8tre un entier positif `a` en \u00e9criture d\u00e9cimale et qui renvoie son \u00e9criture binaire sous la forme d'une chaine de caract\u00e8res.\n\n```python linenums='1'\ndef dec_to_bin(a):\n    bin_a = ...\n    a = a//2\n    while a ... :\n        bin_a = ... + bin_a\n        a = ...\n    return bin_a\n</code></pre> Compl\u00e9ter la fonction <code>dec_to_bin</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dec_to_bin(83)\n'1010011'\n&gt;&gt;&gt; dec_to_bin(127)\n'1111111'\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-29","title":"\u25b6 Sujet 29","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-291","title":"Exercice 29.1 \u25a1","text":"<p>Exercice 29.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>On s\u2019int\u00e9resse \u00e0 la suite d\u2019entiers d\u00e9finie par <code>U1 = 1</code>, <code>U2 = 1</code> et, pour tout entier naturel <code>n</code>, par <code>Un+2 = Un+1 + Un</code>.</p> <p>Elle s\u2019appelle la suite de Fibonacci.</p> <p>\u00c9crire la fonction <code>fibonacci</code> qui prend un entier <code>n &gt; 0</code> et qui renvoie l\u2019\u00e9l\u00e9ment d\u2019indice <code>n</code> de cette suite.</p> <p>On utilisera une programmation dynamique (pas de r\u00e9cursivit\u00e9).</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; fibonacci(1)\n1\n&gt;&gt;&gt; fibonacci(2)\n1\n&gt;&gt;&gt; fibonacci(25)\n75025\n&gt;&gt;&gt; fibonacci(45)\n1134903170\n</code></pre> <p>On utilise un dictionnaire pour stocker au fur et \u00e0 mesure les valeurs. \ud83d\udc0d Script Python<pre><code>def fibonnaci(n):\n    d = {}\n    d[1] = 1\n    d[2] = 1\n    for k in range(3, n+1):\n        d[k] = d[k-1] + d[k-2]\n    return d[n]\n</code></pre></p> \ud83d\udccb Texte<pre><code>On s\u2019int\u00e9resse \u00e0 la suite d\u2019entiers d\u00e9finie par\n`U1 = 1`, `U2 = 1` et, pour tout entier naturel `n`, par `Un+2 = Un+1 + Un`.\n\nElle s\u2019appelle la suite de Fibonacci.\n\n\u00c9crire la fonction `fibonacci` qui prend un entier `n &gt; 0` et qui renvoie l\u2019\u00e9l\u00e9ment d\u2019indice\n`n` de cette suite.\n\nOn utilisera une programmation dynamique (pas de r\u00e9cursivit\u00e9).\n\nExemple :\n\n```python\n&gt;&gt;&gt; fibonacci(1)\n1\n&gt;&gt;&gt; fibonacci(2)\n1\n&gt;&gt;&gt; fibonacci(25)\n75025\n&gt;&gt;&gt; fibonacci(45)\n1134903170\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-292","title":"Exercice 29.2 \u25a1","text":"<p>Exercice 29.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Les variables <code>liste_eleves</code> et <code>liste_notes</code> ayant \u00e9t\u00e9 pr\u00e9alablement d\u00e9finies et \u00e9tant de m\u00eame longueur, la fonction <code>meilleures_notes</code> renvoie la note maximale qui a \u00e9t\u00e9 attribu\u00e9e, le nombre d\u2019\u00e9l\u00e8ves ayant obtenu cette note et la liste des noms de ces \u00e9l\u00e8ves.</p> <p>Compl\u00e9ter le code Python de la fonction <code>meilleures_notes</code> ci-dessous.</p> \ud83d\udc0d Script Python<pre><code>liste_eleves = ['a','b','c','d','e','f','g','h','i','j']\nliste_notes = [1, 40, 80, 60, 58, 80, 75, 80, 60, 24]\n\ndef meilleures_notes():\n    note_maxi = 0\n    nb_eleves_note_maxi = ...\n    liste_maxi = ...\n\n    for compteur in range(...):\n        if liste_notes[compteur] == ...:\n            nb_eleves_note_maxi = nb_eleves_note_maxi + 1\n            liste_maxi.append(liste_eleves[...])\n        if liste_notes[compteur] &gt; note_maxi:\n            note_maxi = liste_notes[compteur]\n            nb_eleves_note_maxi = ...\n            liste_maxi = [...]\n\n    return (note_maxi,nb_eleves_note_maxi,liste_maxi)\n</code></pre> <p>Une fois compl\u00e9t\u00e9, le code ci-dessus donne</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; meilleures_notes()\n(80, 3, ['c', 'f', 'h'])\n</code></pre> \ud83d\udc0d Script Python<pre><code>liste_eleves = ['a','b','c','d','e','f','g','h','i','j']\nliste_notes = [1, 40, 80, 60, 58, 80, 75, 80, 60, 24]\n\ndef meilleures_notes():\n    note_maxi = 0\n    nb_eleves_note_maxi = 0\n    liste_maxi = []\n\n    for compteur in range(len(liste_eleves)):\n        if liste_notes[compteur] == note_maxi:\n            nb_eleves_note_maxi = nb_eleves_note_maxi + 1\n            liste_maxi.append(liste_eleves[compteur])\n        if liste_notes[compteur] &gt; note_maxi:\n            note_maxi = liste_notes[compteur]\n            nb_eleves_note_maxi = 1\n            liste_maxi = [liste_eleves[compteur]]\n\n    return (note_maxi,nb_eleves_note_maxi,liste_maxi)\n</code></pre> Markdown<pre><code>Les variables `liste_eleves` et `liste_notes` ayant \u00e9t\u00e9 pr\u00e9alablement d\u00e9finies et \u00e9tant\nde m\u00eame longueur, la fonction `meilleures_notes` renvoie la note maximale qui a \u00e9t\u00e9\nattribu\u00e9e, le nombre d\u2019\u00e9l\u00e8ves ayant obtenu cette note et la liste des noms de ces \u00e9l\u00e8ves.\n\nCompl\u00e9ter le code Python de la fonction `meilleures_notes` ci-dessous.\n\n```python linenums='1'\nliste_eleves = ['a','b','c','d','e','f','g','h','i','j']\nliste_notes = [1, 40, 80, 60, 58, 80, 75, 80, 60, 24]\n\ndef meilleures_notes():\n    note_maxi = 0\n    nb_eleves_note_maxi = ...\n    liste_maxi = ...\n\n    for compteur in range(...):\n        if liste_notes[compteur] == ...:\n            nb_eleves_note_maxi = nb_eleves_note_maxi + 1\n            liste_maxi.append(liste_eleves[...])\n        if liste_notes[compteur] &gt; note_maxi:\n            note_maxi = liste_notes[compteur]\n            nb_eleves_note_maxi = ...\n            liste_maxi = [...]\n\n    return (note_maxi,nb_eleves_note_maxi,liste_maxi)\n</code></pre> <p>Une fois compl\u00e9t\u00e9, le code ci-dessus donne</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; meilleures_notes()\n(80, 3, ['c', 'f', 'h'])\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-30","title":"\u25b6 Sujet 30","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-301","title":"Exercice 30.1 \u25a1","text":"<p>Exercice 30.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Programmer la fonction <code>fusion</code> prenant en param\u00e8tres deux tableaux non vides <code>tab1</code> et <code>tab2</code> (type <code>list</code>) d'entiers, chacun dans l\u2019ordre croissant, et renvoyant un tableau tri\u00e9 dans l\u2019ordre croissant et contenant l\u2019ensemble des valeurs de <code>tab1</code> et <code>tab2</code>.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; fusion([3, 5], [2, 5])\n[2, 3, 5, 5]\n&gt;&gt;&gt; fusion([-2, 4], [-3, 5, 10])\n[-3, -2, 4, 5, 10]\n&gt;&gt;&gt; fusion([4], [2, 6])\n[2, 4, 6]\n</code></pre> \ud83d\udc0d Script Python<pre><code>def fusion(tab1, tab2):\n    tab_fusion = []\n    i1 = 0\n    i2 = 0\n    while i1 &lt; len(tab1) and i2 &lt; len(tab2):\n        if tab1[i1] &lt; tab2[i2]:\n            tab_fusion.append(tab1[i1])\n            i1 += 1\n        else:\n            tab_fusion.append(tab2[i2])\n            i2 += 1\n\n    if i1 == len(tab1):\n        while i2 &lt; len(tab2):\n            tab_fusion.append(tab2[i2])\n            i2 += 1\n    else:\n        while i1 &lt; len(tab1):\n            tab_fusion.append(tab1[i1])\n            i1 += 1        \n\n    return tab_fusion\n</code></pre> \ud83d\udccb Texte<pre><code>Programmer la fonction `fusion` prenant en param\u00e8tres deux tableaux non vides `tab1` et `tab2`\n(type `list`) d'entiers, chacun dans l\u2019ordre croissant, et renvoyant un tableau tri\u00e9 dans l\u2019ordre\ncroissant et contenant l\u2019ensemble des valeurs de `tab1` et `tab2`.\n\nExemples :\n\n```python\n&gt;&gt;&gt; fusion([3, 5], [2, 5])\n[2, 3, 5, 5]\n&gt;&gt;&gt; fusion([-2, 4], [-3, 5, 10])\n[-3, -2, 4, 5, 10]\n&gt;&gt;&gt; fusion([4], [2, 6])\n[2, 4, 6]\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-302","title":"Exercice 30.2 \u25a1","text":"<p>Exercice 30.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Les chiffres romains sont un syst\u00e8me ancien d\u2019\u00e9criture des nombres.</p> <p>Les chiffres romains sont: I, V, X, L, C, D, et M. Ces symboles repr\u00e9sentent respectivement 1, 5, 10, 50, 100, 500, et 1000 en base dix.</p> <p>Lorsque deux caract\u00e8res successifs sont tels que le caract\u00e8re plac\u00e9 \u00e0 gauche poss\u00e8de une valeur sup\u00e9rieure ou \u00e9gale \u00e0 celui de droite, le nombre s\u2019obtient en additionnant le caract\u00e8re de gauche \u00e0 la valeur de la cha\u00eene situ\u00e9e \u00e0 droite.</p> <p>Ainsi, \"XVI\" est le nombre 16 car X + VI = 10 + 6.</p> <p>Lorsque deux caract\u00e8res successifs sont tels que le caract\u00e8re plac\u00e9 \u00e0 gauche poss\u00e8de une valeur strictement inf\u00e9rieure \u00e0 celui de droite, le nombre s\u2019obtient en retranchant le caract\u00e8re de gauche \u00e0 la valeur de la cha\u00eene situ\u00e9e \u00e0 droite.</p> <p>Ainsi, \"CDIII\" est le nombre 403 car DIII \u2013 C = 503 \u2013 100.</p> <p>On dispose d\u2019un dictionnaire <code>dico</code>, \u00e0 compl\u00e9ter, o\u00f9 les cl\u00e9s sont les caract\u00e8res apparaissant dans l\u2019\u00e9criture en chiffres romains et o\u00f9 les valeurs sont les nombres entiers associ\u00e9s en \u00e9criture d\u00e9cimale.</p> <p>On souhaite cr\u00e9er une fonction r\u00e9cursive <code>rom_to_dec</code> qui prend en param\u00e8tre une cha\u00eene de caract\u00e8res (non vide) repr\u00e9sentant un nombre \u00e9crit en chiffres romains et renvoyant le nombre associ\u00e9 en \u00e9criture d\u00e9cimale :</p> \ud83d\udc0d Script Python<pre><code>def rom_to_dec(nombre):\n\n    \"\"\" Renvoie l\u2019\u00e9criture d\u00e9cimale du nombre donn\u00e9 en chiffres romains \"\"\"\n\n    dico = {\"I\":1, \"V\":5, ...}\n    if len(nombre) == 1:\n        return ...\n\n    else:\n        ### on supprime le premier caract\u00e8re de la cha\u00eene contenue dans la variable nombre\n         ### et cette nouvelle cha\u00eene est enregistr\u00e9e dans la variable nombre_droite\n        nombre_droite = nombre[1:]\n\n\n        if dico[nombre[0]] &gt;= dico[nombre[1]]:\n            return dico[nombre[0]] + ...\n        else:\n            return ...\n\nassert rom_to_dec(\"CXLII\") == 142\n</code></pre> \ud83d\udc0d Script Python<pre><code>def rom_to_dec(nombre):\n\n    \"\"\" Renvoie l\u2019\u00e9criture d\u00e9cimale du nombre donn\u00e9 en chiffres romains \"\"\"\n\n    dico = {\"I\":1, \"V\":5, \"X\":10, \"L\":50, \"C\":100, \"D\":500, \"M\":1000}\n    if len(nombre) == 1:\n        return dico[nombre]\n\n    else:\n        ### on supprime le premier caract\u00e8re de la cha\u00eene contenue dans la variable nombre\n        ### et cette nouvelle cha\u00eene est enregistr\u00e9e dans la variable nombre_droite\n        nombre_droite = nombre[1:] # (1)\n\n\n        if dico[nombre[0]] &gt;= dico[nombre[1]]:\n            return dico[nombre[0]] + rom_to_dec(nombre_droite)\n        else:\n            return rom_to_dec(nombre_droite) - dico[nombre[0]]\n\nassert rom_to_dec(\"CXLII\") == 142\n</code></pre> <ol> <li>Le slicing utilis\u00e9 ici n'est officiellement pas au programme en NSI...</li> </ol> <p>Markdown<pre><code>Les chiffres romains sont un syst\u00e8me ancien d\u2019\u00e9criture des nombres.\n\n\nLes chiffres romains sont: I, V, X, L, C, D, et M.\nCes symboles repr\u00e9sentent respectivement 1, 5, 10, 50, 100, 500, et 1000 en base dix.\n\n\nLorsque deux caract\u00e8res successifs sont tels que le caract\u00e8re plac\u00e9 \u00e0 gauche poss\u00e8de une\nvaleur sup\u00e9rieure ou \u00e9gale \u00e0 celui de droite, le nombre s\u2019obtient en additionnant le caract\u00e8re de\ngauche \u00e0 la valeur de la cha\u00eene situ\u00e9e \u00e0 droite.\n\nAinsi, \"XVI\" est le nombre 16 car X + VI = 10 + 6.\n\n\nLorsque deux caract\u00e8res successifs sont tels que le caract\u00e8re plac\u00e9 \u00e0 gauche poss\u00e8de une\nvaleur strictement inf\u00e9rieure \u00e0 celui de droite, le nombre s\u2019obtient en retranchant le caract\u00e8re de\ngauche \u00e0 la valeur de la cha\u00eene situ\u00e9e \u00e0 droite.\n\n\nAinsi, \"CDIII\" est le nombre 403 car DIII \u2013 C = 503 \u2013 100.\n\n\nOn dispose d\u2019un dictionnaire `dico`, \u00e0 compl\u00e9ter, o\u00f9 les cl\u00e9s sont les caract\u00e8res apparaissant\ndans l\u2019\u00e9criture en chiffres romains et o\u00f9 les valeurs sont les nombres entiers associ\u00e9s en\n\u00e9criture d\u00e9cimale.\n\n\nOn souhaite cr\u00e9er une fonction r\u00e9cursive `rom_to_dec` qui prend en param\u00e8tre une cha\u00eene de\ncaract\u00e8res (non vide) repr\u00e9sentant un nombre \u00e9crit en chiffres romains et renvoyant le nombre\nassoci\u00e9 en \u00e9criture d\u00e9cimale :\n\n```python linenums='1'\ndef rom_to_dec(nombre):\n\n    \"\"\" Renvoie l\u2019\u00e9criture d\u00e9cimale du nombre donn\u00e9 en chiffres romains \"\"\"\n\n    dico = {\"I\":1, \"V\":5, ...}\n    if len(nombre) == 1:\n        return ...\n\n    else:\n        ### on supprime le premier caract\u00e8re de la cha\u00eene contenue dans la variable nombre\n         ### et cette nouvelle cha\u00eene est enregistr\u00e9e dans la variable nombre_droite\n        nombre_droite = nombre[1:]\n\n\n        if dico[nombre[0]] &gt;= dico[nombre[1]]:\n            return dico[nombre[0]] + ...\n        else:\n            return ...\n\nassert rom_to_dec(\"CXLII\") == 142\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-31","title":"\u25b6 Sujet 31","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-311","title":"Exercice 31.1 \u25a1","text":"<p>Exercice 31.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire en langage Python une fonction <code>recherche</code> prenant comme param\u00e8tres une variable <code>a</code> de type num\u00e9rique (<code>float</code> ou <code>int</code>) et un tableau <code>t</code> (type <code>list</code>) et qui renvoie le nombre d'occurrences de <code>a</code> dans <code>t</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(5,[])\n0\n&gt;&gt;&gt; recherche(5,[-2, 3, 4, 8])\n0\n&gt;&gt;&gt; recherche(5,[-2, 3, 1, 5, 3, 7, 4])\n1\n&gt;&gt;&gt; recherche(5,[-2, 5, 3, 5, 4, 5])\n3\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(a, t):\n    nb = 0\n    for element in t:\n        if element == a:\n            nb += 1\n    return nb\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire en langage Python une fonction `recherche` prenant comme param\u00e8tres une\nvariable `a` de type num\u00e9rique (`float` ou `int`) et un tableau `t` (type `list`) et qui\nrenvoie le nombre d'occurrences de `a` dans `t`.\n\nExemples :\n```python\n&gt;&gt;&gt; recherche(5,[])\n0\n&gt;&gt;&gt; recherche(5,[-2, 3, 4, 8])\n0\n&gt;&gt;&gt; recherche(5,[-2, 3, 1, 5, 3, 7, 4])\n1\n&gt;&gt;&gt; recherche(5,[-2, 5, 3, 5, 4, 5])\n3\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-312","title":"Exercice 31.2 \u25a1","text":"<p>Exercice 31.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>La fonction <code>rendu_monnaie_centimes</code> prend en param\u00e8tres deux nombres entiers positifs <code>s_due</code> et<code>s_versee</code> et elle permet de proc\u00e9der au rendu de monnaie de la diff\u00e9rence <code>s_versee \u2013 s_due</code> pour des achats effectu\u00e9s avec le syst\u00e8me de pi\u00e8ces de la zone Euro. On utilise pour cela un algorithme qui commence par rendre le maximum de pi\u00e8ces de plus grandes valeurs et ainsi de suite. La fonction renvoie la liste des pi\u00e8ces qui composent le rendu.</p> <p>Toutes les sommes sont exprim\u00e9es en centimes d\u2019euros. Les valeurs possibles pour les pi\u00e8ces sont donc <code>[1, 2, 5, 10, 20, 50, 100, 200]</code>.</p> <p>Ainsi, l\u2019instruction <code>rendu_monnaie_centimes(452, 500)</code> renverra <code>[20, 20, 5, 2, 1]</code>.</p> <p>En effet, la somme \u00e0 rendre est de <code>48</code> centimes soit <code>20 + 20 + 5 + 2 + 1</code>. Le code de la fonction est donn\u00e9 ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def rendu_monnaie_centimes(s_due, s_versee):\n    pieces = [1, 2, 5, 10, 20, 50, 100, 200]\n    rendu = ...\n    a_rendre = ...\n    i = len(pieces) - 1\n    while a_rendre &gt; ... :\n        if pieces[i] &lt;= a_rendre :\n            rendu.append(...)\n            a_rendre = ...\n        else :\n            i = ...\n    return rendu\n</code></pre> <p>Compl\u00e9ter ce code pour qu'il donne : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; rendu_monnaie_centimes(700,700)\n[]\n&gt;&gt;&gt; rendu_monnaie_centimes(112,500)\n[200, 100, 50, 20, 10, 5, 2, 1]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def rendu_monnaie_centimes(s_due, s_versee):\n    pieces = [1, 2, 5, 10, 20, 50, 100, 200]\n    rendu = []\n    a_rendre = s_versee - s_due\n    i = len(pieces) - 1\n    while a_rendre &gt; 0 :\n        if pieces[i] &lt;= a_rendre :\n            rendu.append(pieces[i])\n            a_rendre = a_rendre - pieces[i]\n        else :\n            i = i - 1\n    return rendu\n</code></pre> Markdown<pre><code>La fonction `rendu_monnaie_centimes` prend en param\u00e8tres deux nombres entiers\npositifs `s_due` et` s_versee` et elle permet de proc\u00e9der au rendu de monnaie de la\ndiff\u00e9rence `s_versee \u2013 s_due` pour des achats effectu\u00e9s avec le syst\u00e8me de pi\u00e8ces de\nla zone Euro. On utilise pour cela un algorithme qui commence par rendre le maximum de\npi\u00e8ces de plus grandes valeurs et ainsi de suite. La fonction renvoie la liste des pi\u00e8ces qui\ncomposent le rendu.\n\nToutes les sommes sont exprim\u00e9es en centimes d\u2019euros. Les valeurs possibles pour les\npi\u00e8ces sont donc `[1, 2, 5, 10, 20, 50, 100, 200]`.\n\nAinsi, l\u2019instruction `rendu_monnaie_centimes(452, 500)`\nrenverra\n`[20, 20, 5, 2, 1]`.\n\nEn effet, la somme \u00e0 rendre est de `48` centimes soit `20 + 20 + 5 + 2 + 1`.\nLe code de la fonction est donn\u00e9 ci-dessous :\n\n```python linenums='1'\ndef rendu_monnaie_centimes(s_due, s_versee):\n    pieces = [1, 2, 5, 10, 20, 50, 100, 200]\n    rendu = ...\n    a_rendre = ...\n    i = len(pieces) - 1\n    while a_rendre &gt; ... :\n        if pieces[i] &lt;= a_rendre :\n            rendu.append(...)\n            a_rendre = ...\n        else :\n            i = ...\n    return rendu\n</code></pre> <p>Compl\u00e9ter ce code pour qu'il donne : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; rendu_monnaie_centimes(700,700)\n[]\n&gt;&gt;&gt; rendu_monnaie_centimes(112,500)\n[200, 100, 50, 20, 10, 5, 2, 1]\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-32","title":"\u25b6 Sujet 32","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-321","title":"Exercice 32.1 \u25a1","text":"<p>Exercice 32.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>elt</code> un nombre entier et <code>tab</code> un tableau de nombres entiers, et qui renvoie l\u2019indice de la premi\u00e8re occurrence de <code>elt</code> dans <code>tab</code> si <code>elt</code> est dans <code>tab</code> et <code>-1</code> sinon.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(1, [2, 3, 4])\n-1\n&gt;&gt;&gt; recherche(1, [10, 12, 1, 56])\n2\n&gt;&gt;&gt; recherche(50, [1, 50, 1])\n1\n&gt;&gt;&gt; recherche(15, [8, 9, 10, 15])\n3\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(elt, tab):\n    for i in range(len(tab)):\n        if tab[i] == elt:\n            return i\n    return -1\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `recherche` qui prend en param\u00e8tres `elt` un nombre entier et `tab`\nun tableau de nombres entiers, et qui renvoie l\u2019indice de la premi\u00e8re occurrence de `elt`\ndans `tab` si `elt` est dans `tab` et `-1` sinon.\n\nExemples :\n```python\n&gt;&gt;&gt; recherche(1, [2, 3, 4])\n-1\n&gt;&gt;&gt; recherche(1, [10, 12, 1, 56])\n2\n&gt;&gt;&gt; recherche(50, [1, 50, 1])\n1\n&gt;&gt;&gt; recherche(15, [8, 9, 10, 15])\n3\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-322","title":"Exercice 32.2 \u25a1","text":"<p>Exercice 32.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On d\u00e9finit une classe g\u00e9rant une adresse IPv4. On rappelle qu\u2019une adresse IPv4 est une adresse de longueur 4 octets, not\u00e9e en d\u00e9cimale \u00e0 point, en s\u00e9parant chacun des octets par un point. On consid\u00e8re un r\u00e9seau priv\u00e9 avec une plage d\u2019adresses IP de <code>192.168.0.0</code> \u00e0 <code>192.168.0.255</code>.</p> <p>On consid\u00e8re que les adresses IP saisies sont valides.</p> <p>Les adresses IP <code>192.168.0.0</code> et <code>192.168.0.255</code> sont des adresses r\u00e9serv\u00e9es.</p> <p>Le code ci-dessous impl\u00e9mente la classe <code>AdresseIP</code>.</p> <p>\ud83d\udc0d Script Python<pre><code>class AdresseIP:\n    def __init__(self, adresse):\n        self.adresse = ...\n\n    def liste_octet(self):\n        \"\"\"renvoie une liste de nombres entiers,\n        la liste des octets de l'adresse IP\"\"\"\n        return [int(i) for i in self.adresse.split(\".\")]\n\n    def est_reservee(self):\n        \"\"\"renvoie True si l'adresse IP est une adresse\n        r\u00e9serv\u00e9e, False sinon\"\"\"\n        return ... or ...\n\n    def adresse_suivante(self):\n        \"\"\"renvoie un objet de AdresseIP avec l'adresse\n        IP qui suit l\u2019adresse self\n        si elle existe et False sinon\"\"\"\n        if ... &lt; 254:\n            octet_nouveau = ... + ...\n            return AdresseIP('192.168.0.' + ...)\n        else:\n            return False\n</code></pre> Compl\u00e9ter le code ci-dessus et instancier trois objets : <code>adresse1</code>, <code>adresse2</code>, <code>adresse3</code> avec respectivement les arguments suivants :</p> <p><code>'192.168.0.1'</code>, <code>'192.168.0.2'</code>, <code>'192.168.0.0'</code></p> <p>V\u00e9rifier que :  \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; adresse1.est_reservee()\nFalse\n&gt;&gt;&gt; adresse3.est_reservee()\nTrue\n&gt;&gt;&gt; adresse2.adresse_suivante().adresse\n'192.168.0.3'\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>class AdresseIP:\n    def __init__(self, adresse):\n        self.adresse = adresse\n\n    def liste_octet(self):\n        \"\"\"renvoie une liste de nombres entiers,\n        la liste des octets de l'adresse IP\"\"\"\n        return [int(i) for i in self.adresse.split(\".\")]\n\n    def est_reservee(self):\n        \"\"\"renvoie True si l'adresse IP est une adresse\n        r\u00e9serv\u00e9e, False sinon\"\"\"\n        return self.liste_octet()[3] == 0 or self.liste_octet()[3] == 255\n\n    def adresse_suivante(self):\n        \"\"\"renvoie un objet de AdresseIP avec l'adresse\n        IP qui suit l\u2019adresse self\n        si elle existe et False sinon\"\"\"\n        if self.liste_octet()[3] &lt; 254:\n            octet_nouveau = self.liste_octet()[3] + 1\n            return AdresseIP('192.168.0.' + str(octet_nouveau))\n        else:\n            return False\n\nadresse1 = AdresseIP('192.168.0.1')\nadresse2 = AdresseIP('192.168.0.2')\nadresse3 = AdresseIP('192.168.0.0')\n</code></pre> <p>Markdown<pre><code>On d\u00e9finit une classe g\u00e9rant une adresse IPv4.\nOn rappelle qu\u2019une adresse IPv4 est une adresse de longueur 4 octets, not\u00e9e en d\u00e9cimale\n\u00e0 point, en s\u00e9parant chacun des octets par un point. On consid\u00e8re un r\u00e9seau priv\u00e9 avec\nune plage d\u2019adresses IP de `192.168.0.0` \u00e0 `192.168.0.255`.\n\nOn consid\u00e8re que les adresses IP saisies sont valides.\n\nLes adresses IP `192.168.0.0` et `192.168.0.255` sont des adresses r\u00e9serv\u00e9es.\n\nLe code ci-dessous impl\u00e9mente la classe `AdresseIP`.\n\n```python linenums='1'\nclass AdresseIP:\n    def __init__(self, adresse):\n        self.adresse = ...\n\n    def liste_octet(self):\n        \"\"\"renvoie une liste de nombres entiers,\n        la liste des octets de l'adresse IP\"\"\"\n        return [int(i) for i in self.adresse.split(\".\")]\n\n    def est_reservee(self):\n        \"\"\"renvoie True si l'adresse IP est une adresse\n        r\u00e9serv\u00e9e, False sinon\"\"\"\n        return ... or ...\n\n    def adresse_suivante(self):\n        \"\"\"renvoie un objet de AdresseIP avec l'adresse\n        IP qui suit l\u2019adresse self\n        si elle existe et False sinon\"\"\"\n        if ... &lt; 254:\n            octet_nouveau = ... + ...\n            return AdresseIP('192.168.0.' + ...)\n        else:\n            return False\n</code></pre> Compl\u00e9ter le code ci-dessus et instancier trois objets : <code>adresse1</code>, <code>adresse2</code>, <code>adresse3</code> avec respectivement les arguments suivants :</p> <p><code>'192.168.0.1'</code>, <code>'192.168.0.2'</code>, <code>'192.168.0.0'</code></p> <p>V\u00e9rifier que :  \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; adresse1.est_reservee()\nFalse\n&gt;&gt;&gt; adresse3.est_reservee()\nTrue\n&gt;&gt;&gt; adresse2.adresse_suivante().adresse\n'192.168.0.3'\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-33","title":"\u25b6 Sujet 33","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-331","title":"Exercice 33.1 \u25a1","text":"<p>Exercice 33.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>On mod\u00e9lise la repr\u00e9sentation binaire d'un entier non sign\u00e9 par un tableau d'entiers dont les \u00e9l\u00e9ments sont 0 ou 1. Par exemple, le tableau <code>[1, 0, 1, 0, 0, 1, 1]</code> repr\u00e9sente l'\u00e9criture binaire de l'entier dont l'\u00e9criture d\u00e9cimale est <code>2**6 + 2**4 + 2**1 + 2**0 = 83</code>.</p> <p>\u00c0 l'aide d'un parcours s\u00e9quentiel, \u00e9crire la fonction convertir r\u00e9pondant aux sp\u00e9cifications suivantes :</p> <p>\ud83d\udc0d Script Python<pre><code>def convertir(T):\n    \"\"\"\n    T est un tableau d'entiers, dont les \u00e9l\u00e9ments sont 0 ou 1 et\n    repr\u00e9sentant un entier \u00e9crit en binaire. Renvoie l'\u00e9criture\n    d\u00e9cimale de l'entier positif dont la repr\u00e9sentation binaire\n    est donn\u00e9e par le tableau T\n    \"\"\"\n</code></pre> Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; convertir([1, 0, 1, 0, 0, 1, 1])\n83\n&gt;&gt;&gt; convertir([1, 0, 0, 0, 0, 0, 1, 0])\n130\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def convertir(T):\n    puissance = 0\n    total = 0\n    for i in range(len(T)-1, -1, -1):\n        total += T[i]*(2**puissance)\n        puissance += 1\n    return total\n</code></pre> \ud83d\udccb Texte<pre><code>On mod\u00e9lise la repr\u00e9sentation binaire d'un entier non sign\u00e9 par un tableau d'entiers dont\nles \u00e9l\u00e9ments sont 0 ou 1. Par exemple, le tableau `[1, 0, 1, 0, 0, 1, 1]` repr\u00e9sente\nl'\u00e9criture binaire de l'entier dont l'\u00e9criture d\u00e9cimale est\n`2**6 + 2**4 + 2**1 + 2**0 = 83`.\n\n\u00c0 l'aide d'un parcours s\u00e9quentiel, \u00e9crire la fonction convertir r\u00e9pondant aux\nsp\u00e9cifications suivantes :\n\n```python\ndef convertir(T):\n    \"\"\"\n    T est un tableau d'entiers, dont les \u00e9l\u00e9ments sont 0 ou 1 et\n    repr\u00e9sentant un entier \u00e9crit en binaire. Renvoie l'\u00e9criture\n    d\u00e9cimale de l'entier positif dont la repr\u00e9sentation binaire\n    est donn\u00e9e par le tableau T\n    \"\"\"\n```\nExemple :\n```python\n&gt;&gt;&gt; convertir([1, 0, 1, 0, 0, 1, 1])\n83\n&gt;&gt;&gt; convertir([1, 0, 0, 0, 0, 0, 1, 0])\n130\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-332","title":"Exercice 33.2 \u25a1","text":"<p>Exercice 33.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>La fonction <code>tri_insertion</code> suivante prend en argument une liste <code>L</code> et trie cette liste en utilisant la m\u00e9thode du tri par insertion. Compl\u00e9ter cette fonction pour qu'elle r\u00e9ponde \u00e0 la sp\u00e9cification demand\u00e9e.</p> \ud83d\udc0d Script Python<pre><code>def tri_insertion(L):\n    n = len(L)\n\n    # cas du tableau vide\n    if ...:\n        return L\n    for j in range(1,n):\n        e = L[j]\n        i = j\n\n        # A l'\u00e9tape j, le sous-tableau L[0,j-1] est tri\u00e9\n        # et on ins\u00e8re L[j] dans ce sous-tableau en d\u00e9terminant\n        # le plus petit i tel que 0 &lt;= i &lt;= j et L[i-1] &gt; L[j].\n\n        while i &gt; 0 and L[i-1] &gt; ...:\n            i = ...\n\n        # si i != j, on d\u00e9cale le sous tableau L[i,j-1] d\u2019un cran\n        # vers la droite et on place L[j] en position i\n\n        if i != j:\n            for k in range(j,i,...):\n                L[k] = L[...]\n            L[i] = ...\n    return L\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tri_insertion([2,5,-1,7,0,28])\n[-1, 0, 2, 5, 7, 28]\n&gt;&gt;&gt; tri_insertion([10,9,8,7,6,5,4,3,2,1,0])\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def tri_insertion(L):\n    n = len(L)\n\n    # cas du tableau vide\n    if L == []:\n        return L\n\n    for j in range(1,n):\n        e = L[j]\n        i = j\n\n    # A l'\u00e9tape j, le sous-tableau L[0,j-1] est tri\u00e9\n    # et on ins\u00e8re L[j] dans ce sous-tableau en d\u00e9terminant\n    # le plus petit i tel que 0 &lt;= i &lt;= j et L[i-1] &gt; L[j].\n\n        while i &gt; 0 and L[i-1] &gt; e:\n            i = i - 1\n\n        # si i != j, on d\u00e9cale le sous tableau L[i,j-1] d\u2019un cran\n    # vers la droite et on place L[j] en position i\n\n        if i != j:\n            for k in range(j,i,-1):\n                L[k] = L[k-1]\n            L[i] = e\n    return L\n</code></pre> Markdown<pre><code>La fonction `tri_insertion` suivante prend en argument une liste `L` et trie cette liste en\nutilisant la m\u00e9thode du tri par insertion. Compl\u00e9ter cette fonction pour qu'elle r\u00e9ponde \u00e0 la\nsp\u00e9cification demand\u00e9e.\n\n```python linenums='1'\ndef tri_insertion(L):\n    n = len(L)\n\n    # cas du tableau vide\n    if ...:\n        return L\n    for j in range(1,n):\n        e = L[j]\n        i = j\n\n        # A l'\u00e9tape j, le sous-tableau L[0,j-1] est tri\u00e9\n        # et on ins\u00e8re L[j] dans ce sous-tableau en d\u00e9terminant\n        # le plus petit i tel que 0 &lt;= i &lt;= j et L[i-1] &gt; L[j].\n\n        while i &gt; 0 and L[i-1] &gt; ...:\n            i = ...\n\n        # si i != j, on d\u00e9cale le sous tableau L[i,j-1] d\u2019un cran\n        # vers la droite et on place L[j] en position i\n\n        if i != j:\n            for k in range(j,i,...):\n                L[k] = L[...]\n            L[i] = ...\n    return L\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tri_insertion([2,5,-1,7,0,28])\n[-1, 0, 2, 5, 7, 28]\n&gt;&gt;&gt; tri_insertion([10,9,8,7,6,5,4,3,2,1,0])\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-34","title":"\u25b6 Sujet 34","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-341","title":"Exercice 34.1 \u25a1","text":"<p>Exercice 34.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>occurrence_max</code> prenant en param\u00e8tres une cha\u00eene de caract\u00e8res <code>chaine</code> et qui renvoie le caract\u00e8re le plus fr\u00e9quent de la cha\u00eene. La chaine ne contient que des lettres en minuscules sans accent. On pourra s\u2019aider du tableau</p> <p><code>alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']</code></p> <p>et du tableau <code>occurrence</code> de 26 \u00e9l\u00e9ments o\u00f9 l\u2019on mettra dans <code>occurrence[i]</code> le nombre d\u2019apparitions de <code>alphabet[i]</code> dans la chaine. Puis on calculera l\u2019indice <code>k</code> d\u2019un maximum du tableau <code>occurrence</code> et on affichera <code>alphabet[k]</code>.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; ch = 'je suis en terminale et je passe le bac et je souhaite poursuivre des etudes pour devenir expert en informatique'\n&gt;&gt;&gt; occurrence_max(ch)\n\u2018e\u2019\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o,','p','q','r','s','t','u','v','w','x','y','z']\n\ndef occurrence_max(chaine):\n    occurence = [0] *  26\n    for i in range(26):\n        compteur = 0\n        for caractere in chaine:\n            if caractere == alphabet[i]:\n                compteur += 1\n        occurence[i] = compteur\n    ind_max = 0\n    for i in range(26):\n        if occurence[i] &gt; occurence[ind_max]:\n            ind_max = i\n    return alphabet[ind_max]\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `occurrence_max` prenant en param\u00e8tres une cha\u00eene de caract\u00e8res\n`chaine` et qui renvoie le caract\u00e8re le plus fr\u00e9quent de la cha\u00eene. La chaine ne contient\nque des lettres en minuscules sans accent.\nOn pourra s\u2019aider du tableau\n\n`alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']`\n\net du tableau `occurrence` de 26 \u00e9l\u00e9ments o\u00f9 l\u2019on mettra dans `occurrence[i]` le\nnombre d\u2019apparitions de `alphabet[i]` dans la chaine.  \nPuis on calculera l\u2019indice `k` d\u2019un maximum du tableau `occurrence` et on affichera `alphabet[k]`.\n\nExemple :\n```python\n&gt;&gt;&gt; ch = 'je suis en terminale et je passe le bac et je souhaite poursuivre des etudes pour devenir expert en informatique'\n&gt;&gt;&gt; occurrence_max(ch)\n\u2018e\u2019\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-342","title":"Exercice 34.2 \u25a1","text":"<p>Exercice 34.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On consid\u00e8re une image en 256 niveaux de gris que l\u2019on repr\u00e9sente par une grille de nombres, c\u2019est-\u00e0-dire une liste compos\u00e9e de sous-listes toutes de longueurs identiques. La largeur de l\u2019image est donc la longueur d\u2019une sous-liste et la hauteur de l\u2019image est le nombre de sous-listes.</p> <p>Chaque sous-liste repr\u00e9sente une ligne de l\u2019image et chaque \u00e9l\u00e9ment des sous-listes est un entier compris entre 0 et 255, repr\u00e9sentant l\u2019intensit\u00e9 lumineuse du pixel.</p> <p>Compl\u00e9ter le programme ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def nbLig(image):\n    '''renvoie le nombre de lignes de l'image'''\n    return ...\n\ndef nbCol(image):\n    '''renvoie la largeur de l'image'''\n    return ...\n\ndef negatif(image):\n    '''renvoie le n\u00e9gatif de l'image sous la forme d'une liste de listes'''\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))] # on cr\u00e9\u00e9 une image de 0 aux m\u00eames dimensions que le param\u00e8tre image\n    for i in range(len(image)):\n        for j in range(...):\n            L[i][j] = ...\n    return L\n\ndef binaire(image, seuil):\n    '''renvoie une image binaris\u00e9e de l'image sous la forme\n    d'une liste de listes contenant des 0 si la valeur\n    du pixel est strictement inf\u00e9rieure au seuil\n    et 1 sinon'''\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))] # on cr\u00e9e une image de 0 aux m\u00eames dimensions que le param\u00e8tre image\n    for i in range(len(image)):\n        for j in range(...):\n            if image[i][j] &lt; ... :\n                L[i][j] = ...\n            else:\n                L[i][j] = ...\n    return L    \n</code></pre> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; img = [[20, 34, 254, 145, 6], [23, 124, 287, 225, 69], [197, 174, 207, 25, 87], [255, 0, 24, 197, 189]]\n&gt;&gt;&gt; nbLig(img)\n4\n&gt;&gt;&gt; nbCol(img)\n5\n&gt;&gt;&gt; negatif(img)\n[[235, 221, 1, 110, 249], [232, 131, -32, 30, 186], [58, 81, 48, 230, 168], [0, 255, 231, 58, 66]]\n&gt;&gt;&gt; binaire(negatif(img),120)\n[[1, 1, 0, 0, 1], [1, 1, 0, 0, 1], [0, 0, 0, 1, 1], [0, 1, 1, 0, 0]]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def nbLig(image):\n    '''renvoie le nombre de lignes de l'image'''\n    return len(image)\n\ndef nbCol(image):\n    '''renvoie la largeur de l'image'''\n    return len(image[0])\n\ndef negatif(image):\n    '''renvoie le n\u00e9gatif de l'image sous la forme d'une liste de listes'''\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))] # on cr\u00e9\u00e9 une image de 0 aux m\u00eames dimensions que le param\u00e8tre image\n    for i in range(len(image)):\n        for j in range(nbCol(image)):\n            L[i][j] = 255-image[i][j]\n    return L\n\ndef binaire(image, seuil):\n    '''renvoie une image binaris\u00e9e de l'image sous la forme\n    d'une liste de listes contenant des 0 si la valeur\n    du pixel est strictement inf\u00e9rieure au seuil\n    et 1 sinon'''\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))] # on cr\u00e9e une image de 0 aux m\u00eames dimensions que le param\u00e8tre image\n    for i in range(len(image)):\n        for j in range(nbCol(image)):\n            if image[i][j] &lt; seuil :\n                L[i][j] = 0\n            else:\n                L[i][j] = 1\n    return L    \n</code></pre> Markdown<pre><code>On consid\u00e8re une image en 256 niveaux de gris que l\u2019on repr\u00e9sente par une grille de\nnombres, c\u2019est-\u00e0-dire une liste compos\u00e9e de sous-listes toutes de longueurs identiques.\nLa largeur de l\u2019image est donc la longueur d\u2019une sous-liste et la hauteur de l\u2019image est le\nnombre de sous-listes.\n\nChaque sous-liste repr\u00e9sente une ligne de l\u2019image et chaque \u00e9l\u00e9ment des sous-listes est\nun entier compris entre 0 et 255, repr\u00e9sentant l\u2019intensit\u00e9 lumineuse du pixel.\n\nCompl\u00e9ter le programme ci-dessous :\n\n```python linenums='1'\ndef nbLig(image):\n    '''renvoie le nombre de lignes de l'image'''\n    return ...\n\ndef nbCol(image):\n    '''renvoie la largeur de l'image'''\n    return ...\n\ndef negatif(image):\n    '''renvoie le n\u00e9gatif de l'image sous la forme d'une liste de listes'''\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))] # on cr\u00e9\u00e9 une image de 0 aux m\u00eames dimensions que le param\u00e8tre image\n    for i in range(len(image)):\n        for j in range(...):\n            L[i][j] = ...\n    return L\n\ndef binaire(image, seuil):\n    '''renvoie une image binaris\u00e9e de l'image sous la forme\n    d'une liste de listes contenant des 0 si la valeur\n    du pixel est strictement inf\u00e9rieure au seuil\n    et 1 sinon'''\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))] # on cr\u00e9e une image de 0 aux m\u00eames dimensions que le param\u00e8tre image\n    for i in range(len(image)):\n        for j in range(...):\n            if image[i][j] &lt; ... :\n                L[i][j] = ...\n            else:\n                L[i][j] = ...\n    return L    \n</code></pre> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; img = [[20, 34, 254, 145, 6], [23, 124, 287, 225, 69], [197, 174, 207, 25, 87], [255, 0, 24, 197, 189]]\n&gt;&gt;&gt; nbLig(img)\n4\n&gt;&gt;&gt; nbCol(img)\n5\n&gt;&gt;&gt; negatif(img)\n[[235, 221, 1, 110, 249], [232, 131, -32, 30, 186], [58, 81, 48, 230, 168], [0, 255, 231, 58, 66]]\n&gt;&gt;&gt; binaire(negatif(img),120)\n[[1, 1, 0, 0, 1], [1, 1, 0, 0, 1], [0, 0, 0, 1, 1], [0, 1, 1, 0, 0]]\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-35","title":"\u25b6 Sujet 35","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-351","title":"Exercice 35.1 \u25a1","text":"<p>Exercice 35.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction qui prend en param\u00e8tre un tableau d'entiers non vide et qui renvoie la moyenne de ces entiers. La fonction est sp\u00e9cifi\u00e9e ci-apr\u00e8s et doit passer les assertions fournies. \ud83d\udc0d Script Python<pre><code>def moyenne (tab):\n    '''\n    moyenne(list) -&gt; float\n    Entr\u00e9e : un tableau non vide d'entiers\n    Sortie : nombre de type float\n    Correspondant \u00e0 la moyenne des valeurs pr\u00e9sentes dans le\n    tableau\n    '''\n\nassert moyenne([1]) == 1\nassert moyenne([1, 2, 3, 4, 5, 6, 7] == 4\nassert moyenne([1, 2]) == 1.5\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    '''\n    moyenne(list) -&gt; float\n    Entr\u00e9e : un tableau non vide d'entiers\n    Sortie : nombre de type float\n    Correspondant \u00e0 la moyenne des valeurs pr\u00e9sentes dans le\n    tableau\n    '''\n    somme = 0\n    for elt in tab:\n        somme += elt\n    return somme / len(tab)\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction qui prend en param\u00e8tre un tableau d'entiers non vide et qui renvoie la\nmoyenne de ces entiers. La fonction est sp\u00e9cifi\u00e9e ci-apr\u00e8s et doit passer les assertions\nfournies.\n```python\ndef moyenne (tab):\n    '''\n    moyenne(list) -&gt; float\n    Entr\u00e9e : un tableau non vide d'entiers\n    Sortie : nombre de type float\n    Correspondant \u00e0 la moyenne des valeurs pr\u00e9sentes dans le\n    tableau\n    '''\n\nassert moyenne([1]) == 1\nassert moyenne([1, 2, 3, 4, 5, 6, 7] == 4\nassert moyenne([1, 2]) == 1.5\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-352","title":"Exercice 35.2 \u25a1","text":"<p>Exercice 35.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Le but de l'exercice est de compl\u00e9ter une fonction qui d\u00e9termine si une valeur est pr\u00e9sente dans un tableau de valeurs tri\u00e9es dans l'ordre croissant.</p> <p>L'algorithme traite le cas du tableau vide.</p> <p>L'algorithme est \u00e9crit pour que la recherche dichotomique ne se fasse que dans le cas o\u00f9 la valeur est comprise entre les valeurs extr\u00eames du tableau.</p> <p>On distingue les trois cas qui renvoient <code>False</code> en renvoyant <code>False, 1</code> , <code>False, 2</code> et <code>False, 3</code>.</p> <p>Compl\u00e9ter l'algorithme de dichotomie donn\u00e9 ci-apr\u00e8s.</p> \ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n    \"\"\"\n    tab : tableau tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    # cas du tableau vide\n    if ...:\n        return False,1\n    # cas o\u00f9 x n'est pas compris entre les valeurs extr\u00eames\n    if (x &lt; tab[0]) or ...:\n        return False, 2\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = ...\n        if x == tab[m]:\n            return ...\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = ...\n    return ...\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],28)\nTrue\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],27)\n(False, 3)\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],1)\n(False, 2)\n&gt;&gt;&gt; dichotomie([],28)\n(False, 1)\n</code></pre> \ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n    \"\"\"\n    tab : tableau tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    # cas du tableau vide\n    if tab = []:\n        return False, 1\n    # cas o\u00f9 x n'est pas compris entre les valeurs extr\u00eames\n    if (x &lt; tab[0]) or (x &gt; tab[-1]):\n        return False, 2\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = (debut + fin) // 2\n        if x == tab[m]:\n            return True\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = m - 1\n    return False, 3\n</code></pre> Markdown<pre><code>Le but de l'exercice est de compl\u00e9ter une fonction qui d\u00e9termine si une valeur est pr\u00e9sente\ndans un tableau de valeurs tri\u00e9es dans l'ordre croissant.\n\nL'algorithme traite le cas du tableau vide.\n\nL'algorithme est \u00e9crit pour que la recherche dichotomique ne se fasse que dans le cas o\u00f9\nla valeur est comprise entre les valeurs extr\u00eames du tableau.\n\nOn distingue les trois cas qui renvoient `False` en renvoyant `False, 1` , `False, 2` et\n`False, 3`.\n\nCompl\u00e9ter l'algorithme de dichotomie donn\u00e9 ci-apr\u00e8s.\n\n```python linenums='1'\ndef dichotomie(tab, x):\n    \"\"\"\n    tab : tableau tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    # cas du tableau vide\n    if ...:\n        return False,1\n    # cas o\u00f9 x n'est pas compris entre les valeurs extr\u00eames\n    if (x &lt; tab[0]) or ...:\n        return False, 2\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = ...\n        if x == tab[m]:\n            return ...\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = ...\n    return ...\n</code></pre> <p>Exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],28)\nTrue\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],27)\n(False, 3)\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],1)\n(False, 2)\n&gt;&gt;&gt; dichotomie([],28)\n(False, 1)\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-36","title":"\u25b6 Sujet 36","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-361","title":"Exercice 36.1 \u25a1","text":"<p>Exercice 36.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Programmer la fonction <code>recherche</code>, prenant en param\u00e8tre un tableau non vide <code>tab</code> (type <code>list</code>) d'entiers et un entier <code>n</code>, et qui renvoie l'indice de la derni\u00e8re occurrence de l'\u00e9l\u00e9ment cherch\u00e9. Si l'\u00e9l\u00e9ment n'est pas pr\u00e9sent, la fonction renvoie la longueur du tableau.</p> <p>Exemples \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche([5, 3],1)\n2\n&gt;&gt;&gt; recherche([2,4],2)\n0\n&gt;&gt;&gt; recherche([2,3,5,2,4],2)\n3\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(tab, n):\n    indice_solution = len(tab)\n    for i in range(len(tab)):\n        if tab[i] == n:\n            indice_solution = i\n    return indice_solution\n</code></pre> \ud83d\udccb Texte<pre><code>Programmer la fonction `recherche`, prenant en param\u00e8tre un tableau non vide `tab` (type `list`) d'entiers et un entier `n`, et qui renvoie l'indice de la **derni\u00e8re** occurrence de l'\u00e9l\u00e9ment cherch\u00e9. Si l'\u00e9l\u00e9ment n'est pas pr\u00e9sent, la fonction renvoie la longueur du tableau.\n\nExemples\n```python\n&gt;&gt;&gt; recherche([5, 3],1)\n2\n&gt;&gt;&gt; recherche([2,4],2)\n0\n&gt;&gt;&gt; recherche([2,3,5,2,4],2)\n3\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-362","title":"Exercice 36.2 \u25a1","text":"<p>Exercice 36.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On souhaite programmer une fonction donnant la distance la plus courte entre un point de d\u00e9part et une liste de points. Les points sont tous \u00e0 coordonn\u00e9es enti\u00e8res. Les points sont donn\u00e9s sous la forme d'un tuple de deux entiers. La liste des points \u00e0 traiter est donc un tableau de tuples.</p> <p>On rappelle que la distance entre deux points du plan de coordonn\u00e9es \\((x;y)\\) et \\((x';y')\\) est donn\u00e9e par la formule :</p> \\[d=\\sqrt{(x-x')^2+(y-y')^2}\\] <p>On importe pour cela la fonction racine carr\u00e9e (<code>sqrt</code>) du module <code>math</code> de Python.</p> <p>On dispose d'une fonction <code>distance</code> et d'une fonction <code>plus_courte_distance</code> :</p> <p>\ud83d\udc0d Script Python<pre><code>from math import sqrt     # import de la fonction racine carr\u00e9e\n\ndef distance(point1, point2):\n    \"\"\" Calcule et renvoie la distance entre deux points. \"\"\"\n    return sqrt((...)**2 + (...)**2)\n\nassert distance((1, 0), (5, 3)) == 5.0, \"erreur de calcul\"\n\ndef plus_courte_distance(tab, depart):\n    \"\"\" Renvoie le point du tableau tab se trouvant \u00e0 la plus courte distance du point depart.\"\"\"\n    point = tab[0]\n    min_dist = ...\n    for i in range (1, ...):\n        if distance(tab[i], depart)...:\n            point = ...\n            min_dist = ...\n    return point\n\nassert plus_courte_distance([(7, 9), (2, 5), (5, 2)], (0, 0)) == (2, 5), \"erreur\"\n</code></pre> Recopier sous Python (sans les commentaires) ces deux fonctions puis compl\u00e9ter leur code et ajouter une ou des d\u00e9clarations (<code>assert</code>) \u00e0 la fonction <code>distance</code> permettant de v\u00e9rifier la ou les pr\u00e9conditions.</p> \ud83d\udc0d Script Python<pre><code>from math import sqrt\n\ndef distance(point1, point2):\n    \"\"\" Calcule et renvoie la distance entre deux points. \"\"\"\n    assert int(point1[0]) == point1[0], \"coordonn\u00e9e non enti\u00e8re\"\n    assert int(point1[1]) == point1[1], \"coordonn\u00e9e non enti\u00e8re\"\n    assert int(point2[0]) == point2[0], \"coordonn\u00e9e non enti\u00e8re\"\n    assert int(point2[1]) == point2[1], \"coordonn\u00e9e non enti\u00e8re\"\n    return sqrt((point1[0] - point2[0])**2 + ((point1[1] - point2[1]))**2)\n\nassert distance((1, 0), (5, 3)) == 5.0, \"erreur de calcul\"\n\n\ndef plus_courte_distance(tab, depart):\n    \"\"\" Renvoie le point du tableau tab se trouvant \u00e0 la plus courte distance du point depart.\"\"\"\n    point = tab[0]\n    min_dist = distance(point, depart)\n    for i in range (1, len(tab)):\n        if distance(tab[i], depart) &lt; min_dist:\n            point = tab[i]\n            min_dist = distance(tab[i], depart)\n    return point\n\nassert plus_courte_distance([(7, 9), (2, 5), (5, 2)], (0, 0)) == (2, 5), \"erreur\"\n</code></pre> <p>Markdown<pre><code>On souhaite programmer une fonction donnant la distance la plus courte entre un point\nde d\u00e9part et une liste de points. Les points sont tous \u00e0 coordonn\u00e9es enti\u00e8res.\nLes points sont donn\u00e9s sous la forme d'un tuple de deux entiers.\nLa liste des points \u00e0 traiter est donc un tableau de tuples.\n\nOn rappelle que la distance entre deux points du plan de coordonn\u00e9es $(x;y)$ et $(x';y')$\nest donn\u00e9e par la formule :\n\n$$d=\\sqrt{(x-x')^2+(y-y')^2}$$\n\nOn importe pour cela la fonction racine carr\u00e9e (`sqrt`) du module `math` de Python.\n\nOn dispose d'une fonction `distance` et d'une fonction `plus_courte_distance` :\n\n```python\nfrom math import sqrt     # import de la fonction racine carr\u00e9e\n\ndef distance(point1, point2):\n    \"\"\" Calcule et renvoie la distance entre deux points. \"\"\"\n    return sqrt((...)**2 + (...)**2)\n\nassert distance((1, 0), (5, 3)) == 5.0, \"erreur de calcul\"\n\ndef plus_courte_distance(tab, depart):\n    \"\"\" Renvoie le point du tableau tab se trouvant \u00e0 la plus courte distance du point depart.\"\"\"\n    point = tab[0]\n    min_dist = ...\n    for i in range (1, ...):\n        if distance(tab[i], depart)...:\n            point = ...\n            min_dist = ...\n    return point\n\nassert plus_courte_distance([(7, 9), (2, 5), (5, 2)], (0, 0)) == (2, 5), \"erreur\"\n</code></pre> Recopier sous Python (sans les commentaires) ces deux fonctions puis compl\u00e9ter leur code et ajouter une ou des d\u00e9clarations (<code>assert</code>) \u00e0 la fonction <code>distance</code> permettant de v\u00e9rifier la ou les pr\u00e9conditions. ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-37","title":"\u25b6 Sujet 37","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-371","title":"Exercice 37.1 \u25a1","text":"<p>Exercice 37.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Programmer la fonction <code>verifie</code> qui prend en param\u00e8tre un tableau de valeurs num\u00e9riques non vide et qui renvoie <code>True</code> si ce tableau est tri\u00e9 dans l\u2019ordre croissant, <code>False</code> sinon.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>Exemples :\n&gt;&gt;&gt; verifie([0, 5, 8, 8, 9])\nTrue\n&gt;&gt;&gt; verifie([8, 12, 4])\nFalse\n&gt;&gt;&gt; verifie([-1, 4])\nTrue\n&gt;&gt;&gt; verifie([5])\nTrue\n</code></pre> \ud83d\udc0d Script Python<pre><code>def verifie(tab):\n    for i in range(1, len(tab)):\n        if tab[i] &lt; tab[i-1]:\n            return False\n    return True\n</code></pre> \ud83d\udccb Texte<pre><code>Programmer la fonction `verifie` qui prend en param\u00e8tre un tableau de valeurs num\u00e9riques non\nvide et qui renvoie `True` si ce tableau est tri\u00e9 dans l\u2019ordre croissant, `False` sinon.\n\nExemples :\n\n```python\nExemples :\n&gt;&gt;&gt; verifie([0, 5, 8, 8, 9])\nTrue\n&gt;&gt;&gt; verifie([8, 12, 4])\nFalse\n&gt;&gt;&gt; verifie([-1, 4])\nTrue\n&gt;&gt;&gt; verifie([5])\nTrue\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-372","title":"Exercice 37.2 \u25a1","text":"<p>Exercice 37.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Chaque soir, les auditeurs d\u2019une radio votent en ligne pour leur artiste favori. Ces votes sont stock\u00e9s dans un tableau.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>urne = ['A', 'A', 'A', 'B', 'C', 'B', 'C', 'B', 'C', 'B']\n</code></pre> <p>La fonction <code>depouille</code> doit permettre de compter le nombre de votes exprim\u00e9s pour chaque artiste. Elle prend en param\u00e8tre un tableau et renvoie le r\u00e9sultat dans un dictionnaire dont les cl\u00e9s sont les noms des artistes et les valeurs le nombre de votes en leur faveur.</p> <p>La fonction vainqueur doit d\u00e9signer le nom du ou des gagnants. Elle prend en param\u00e8tre un dictionnaire dont la structure est celle du dictionnaire renvoy\u00e9 par la fonction <code>depouille</code> et renvoie un tableau. Ce tableau peut donc contenir plusieurs \u00e9l\u00e9ments s\u2019il y a des artistes ex- aequo. Compl\u00e9ter les fonctions <code>depouille</code> et vainqueur ci-apr\u00e8s pour qu\u2019elles renvoient les r\u00e9sultats attendus.</p> \ud83d\udc0d Script Python<pre><code>urne = ['A', 'A', 'A','B', 'C', 'B', 'C','B', 'C', 'B']\n\ndef depouille(urne):\n    resultat = ...\n    for bulletin in urne:\n        if ...:\n            resultat[bulletin] = resultat[bulletin] + 1\n        else:\n            ...\n    return resultat\n\ndef vainqueur(election):\n    vainqueur = ''\n    nmax = 0\n    for candidat in election:\n        if ... &gt; ... :\n            nmax = ...\n            vainqueur = candidat\n    liste_finale = [nom for nom in election if election[nom] == ...]\n    return ...\n</code></pre> <p>Exemples d\u2019utilisation :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; election = depouille(urne)\n&gt;&gt;&gt; election\n{'A': 3, 'B': 4, 'C': 3} # (1)\n&gt;&gt;&gt; vainqueur(election)\n['B']\n</code></pre> <ol> <li>Attention, ceci est le bon r\u00e9sultat, le pdf officiel est erron\u00e9.</li> </ol> \ud83d\udc0d Script Python<pre><code>urne = ['A', 'A', 'A', 'B', 'C', 'B', 'C', 'B', 'C', 'B']\n\ndef depouille(urne):\n    resultat = {}\n    for bulletin in urne:\n        if bulletin in resultat:\n            resultat[bulletin] = resultat[bulletin] + 1\n        else:\n            resultat[bulletin] = 1\n    return resultat\n\ndef vainqueur(election):\n    vainqueur = '' #(1)\n    nmax = 0\n    for candidat in election:\n        if election[candidat] &gt; nmax :\n            nmax = election[candidat]\n            vainqueur = candidat #(2)\n    liste_finale = [nom for nom in election if election[nom] == nmax]\n    return liste_finale\n</code></pre> <ol> <li>Il est pourtant tr\u00e8s d\u00e9conseill\u00e9 de nommer une variable avec le m\u00eame nom que la fonction qui la contient...</li> <li>Cette variable <code>vainqueur</code> est inutile, on ne s'en sert pas dans l'\u00e9laboration de la liste finale.</li> </ol> Markdown<pre><code>Chaque soir, les auditeurs d\u2019une radio votent en ligne pour leur artiste favori. Ces votes sont\nstock\u00e9s dans un tableau.\n\nExemple :\n\n```python\nurne = ['A', 'A', 'A', 'B', 'C', 'B', 'C', 'B', 'C', 'B']\n</code></pre> <p>La fonction <code>depouille</code> doit permettre de compter le nombre de votes exprim\u00e9s pour chaque artiste. Elle prend en param\u00e8tre un tableau et renvoie le r\u00e9sultat dans un dictionnaire dont les cl\u00e9s sont les noms des artistes et les valeurs le nombre de votes en leur faveur.</p> <p>La fonction vainqueur doit d\u00e9signer le nom du ou des gagnants. Elle prend en param\u00e8tre un dictionnaire dont la structure est celle du dictionnaire renvoy\u00e9 par la fonction <code>depouille</code> et renvoie un tableau. Ce tableau peut donc contenir plusieurs \u00e9l\u00e9ments s\u2019il y a des artistes ex- aequo. Compl\u00e9ter les fonctions <code>depouille</code> et vainqueur ci-apr\u00e8s pour qu\u2019elles renvoient les r\u00e9sultats attendus.</p> \ud83d\udc0d Script Python<pre><code>urne = ['A', 'A', 'A','B', 'C', 'B', 'C','B', 'C', 'B']\n\ndef depouille(urne):\n    resultat = ...\n    for bulletin in urne:\n        if ...:\n            resultat[bulletin] = resultat[bulletin] + 1\n        else:\n            ...\n    return resultat\n\ndef vainqueur(election):\n    vainqueur = ''\n    nmax = 0\n    for candidat in election:\n        if ... &gt; ... :\n            nmax = ...\n            vainqueur = candidat\n    liste_finale = [nom for nom in election if election[nom] == ...]\n    return ...\n</code></pre> <p>Exemples d\u2019utilisation :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; election = depouille(urne)\n&gt;&gt;&gt; election\n{'A': 3, 'B': 4, 'C': 3} # (1)\n&gt;&gt;&gt; vainqueur(election)\n['B']\n</code></pre> <ol> <li>Attention, ceci est le bon r\u00e9sultat, le pdf officiel est erron\u00e9. ```             </li> </ol>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-38","title":"\u25b6 Sujet 38","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-381","title":"Exercice 38.1 \u25a1","text":"<p>Exercice 38.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>tri_selection</code> qui prend en param\u00e8tre une liste <code>tab</code> de nombres entiers et qui renvoie le tableau tri\u00e9 par ordre croissant.</p> <p>On utilisera l\u2019algorithme suivant :</p> <ul> <li>on recherche le plus petit \u00e9l\u00e9ment du tableau, et on l'\u00e9change avec l'\u00e9l\u00e9ment d'indice 0 ;</li> <li>on recherche le second plus petit \u00e9l\u00e9ment du tableau, et on l'\u00e9change avec l'\u00e9l\u00e9ment d'indice 1 ;</li> <li>on continue de cette fa\u00e7on jusqu'\u00e0 ce que le tableau soit enti\u00e8rement tri\u00e9.</li> </ul> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tri_selection([1,52,6,-9,12])\n[-9, 1, 6, 12, 52]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def tri_selection(tab):\n    for i in range(len(tab)-1):\n        indice_min = i\n        for j in range(i+1, len(tab)):\n            if tab[j] &lt; tab[indice_min]:\n                indice_min = j\n        tab[i], tab[indice_min] = tab[indice_min], tab[i]\n    return tab\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `tri_selection` qui prend en param\u00e8tre une liste `tab` de nombres\nentiers et qui renvoie le tableau tri\u00e9 par ordre croissant.\n\nOn utilisera l\u2019algorithme suivant :\n\n- on recherche le plus petit \u00e9l\u00e9ment du tableau, et on l'\u00e9change avec l'\u00e9l\u00e9ment d'indice 0 ;\n- on recherche le second plus petit \u00e9l\u00e9ment du tableau, et on l'\u00e9change avec l'\u00e9l\u00e9ment\nd'indice 1 ;\n- on continue de cette fa\u00e7on jusqu'\u00e0 ce que le tableau soit enti\u00e8rement tri\u00e9.\n\nExemple :\n```python\n&gt;&gt;&gt; tri_selection([1,52,6,-9,12])\n[-9, 1, 6, 12, 52]\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-382","title":"Exercice 38.2 \u25a1","text":"<p>Exercice 38.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Le jeu du \u00ab plus ou moins \u00bb consiste \u00e0 deviner un nombre entier choisi entre 1 et 99. Un \u00e9l\u00e8ve de NSI d\u00e9cide de le coder en langage Python de la mani\u00e8re suivante :</p> <ul> <li>le programme g\u00e9n\u00e8re un nombre entier al\u00e9atoire compris entre 1 et 99 ;</li> <li>si la proposition de l\u2019utilisateur est plus petite que le nombre cherch\u00e9, l\u2019utilisateur en est averti. Il peut alors en tester un autre ;</li> <li>si la proposition de l\u2019utilisateur est plus grande que le nombre cherch\u00e9, l\u2019utilisateur en est averti. Il peut alors en tester un autre ;</li> <li>si l\u2019utilisateur trouve le bon nombre en 10 essais ou moins, il gagne ;</li> <li>si l\u2019utilisateur a fait plus de 10 essais sans trouver le bon nombre, il perd.</li> </ul> <p>La fonction <code>randint</code> est utilis\u00e9e. Si a et b sont des entiers, <code>randint(a,b)</code> renvoie un nombre entier compris entre <code>a</code> et <code>b</code>. Compl\u00e9ter le code ci-dessous et le tester :</p> \ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef plus_ou_moins():\n    nb_mystere = randint(1,...)\n    nb_test = int(input(\"Proposez un nombre entre 1 et 99 : \"))\n    compteur = ...\n\n    while nb_mystere != ... and compteur &lt; ... :\n        compteur = compteur + ...\n        if nb_mystere ... nb_test:\n            nb_test = int(input(\"Trop petit ! Testez encore : \"))\n        else:\n            nb_test = int(input(\"Trop grand ! Testez encore : \"))\n\n    if nb_mystere == nb_test:\n        print (\"Bravo ! Le nombre \u00e9tait \",...)\n        print(\"Nombre d'essais: \",...)\n    else:\n        print (\"Perdu ! Le nombre \u00e9tait \",...)\n</code></pre> \ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef plus_ou_moins():\n    nb_mystere = randint(1,99)\n    nb_test = int(input('Proposez un nombre entre 1 et 99 : '))\n    compteur = 1\n\n    while nb_mystere != nb_test and compteur &lt; 10 :\n        compteur = compteur + 1\n        if nb_mystere &gt; nb_test:\n            nb_test = int(input('Trop petit ! Testez encore : '))\n        else:\n            nb_test = int(input('Trop grand ! Testez encore : '))\n\n    if nb_mystere == nb_test:\n        print ('Bravo ! Le nombre \u00e9tait ', nb_mystere)\n        print('Nombre d essais: ', compteur)\n    else:\n        print ('Perdu ! Le nombre \u00e9tait ', nb_mystere)\n</code></pre> <p>Markdown<pre><code>Le jeu du \u00ab plus ou moins \u00bb consiste \u00e0 deviner un nombre entier choisi entre 1 et 99.\nUn \u00e9l\u00e8ve de NSI d\u00e9cide de le coder en langage Python de la mani\u00e8re suivante :\n\n- le programme g\u00e9n\u00e8re un nombre entier al\u00e9atoire compris entre 1 et 99 ;\n- si la proposition de l\u2019utilisateur est plus petite que le nombre cherch\u00e9, l\u2019utilisateur en\nest averti. Il peut alors en tester un autre ;\n- si la proposition de l\u2019utilisateur est plus grande que le nombre cherch\u00e9, l\u2019utilisateur en\nest averti. Il peut alors en tester un autre ;\n- si l\u2019utilisateur trouve le bon nombre en 10 essais ou moins, il gagne ;\n- si l\u2019utilisateur a fait plus de 10 essais sans trouver le bon nombre, il perd.\n\nLa fonction `randint` est utilis\u00e9e. Si a et b sont des entiers, `randint(a,b)` renvoie un\nnombre entier compris entre `a` et `b`.\nCompl\u00e9ter le code ci-dessous et le tester :\n\n```python linenums='1'\nfrom random import randint\n\ndef plus_ou_moins():\n    nb_mystere = randint(1,...)\n    nb_test = int(input(\"Proposez un nombre entre 1 et 99 : \"))\n    compteur = ...\n\n    while nb_mystere != ... and compteur &lt; ... :\n        compteur = compteur + ...\n        if nb_mystere ... nb_test:\n            nb_test = int(input(\"Trop petit ! Testez encore : \"))\n        else:\n            nb_test = int(input(\"Trop grand ! Testez encore : \"))\n\n    if nb_mystere == nb_test:\n        print (\"Bravo ! Le nombre \u00e9tait \",...)\n        print(\"Nombre d'essais: \",...)\n    else:\n        print (\"Perdu ! Le nombre \u00e9tait \",...)\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-39","title":"\u25b6 Sujet 39","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-391","title":"Exercice 39.1 \u25a1","text":"<p>Exercice 39.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>moyenne</code> prenant en param\u00e8tres une liste d\u2019entiers et qui renvoie la moyenne des valeurs de cette liste.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; moyenne([10,20,30,40,60,110])\n45.0\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    somme = 0\n    for val in tab:\n        somme += val\n    return somme / len(tab)\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `moyenne` prenant en param\u00e8tres une liste d\u2019entiers et qui renvoie la\nmoyenne des valeurs de cette liste.\n\nExemple :\n```python\n&gt;&gt;&gt; moyenne([10,20,30,40,60,110])\n45.0\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-392","title":"Exercice 39.2 \u25a1","text":"<p>Exercice 39.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p> On travaille sur des dessins en noir et blanc obtenu \u00e0 partir de pixels noirs et blancs : La figure \u00ab c\u0153ur \u00bb ci-dessus va servir d\u2019exemple. On la repr\u00e9sente par une grille de nombres, c\u2019est-\u00e0-dire par une liste compos\u00e9e de sous-listes de m\u00eame longueurs. Chaque sous-liste repr\u00e9sentera donc une ligne du dessin.</p> <p>Dans le code ci-dessous, la fonction <code>affiche</code> permet d\u2019afficher le dessin. Les pixels noirs (1 dans la grille) seront repr\u00e9sent\u00e9s par le caract\u00e8re \"*\" et les blancs (0 dans la grille) par deux espaces.</p> <p>La fonction <code>zoomListe</code> prend en argument une liste <code>liste_depart</code> et un entier <code>k</code>. Elle renvoie une liste o\u00f9 chaque \u00e9l\u00e9ment de <code>liste_depart</code> est dupliqu\u00e9 <code>k</code> fois.</p> <p>La fonction <code>zoomDessin</code> prend en argument la grille <code>dessin</code> et renvoie une grille o\u00f9 toutes les lignes de <code>dessin</code> sont zoom\u00e9es <code>k</code> fois et r\u00e9p\u00e9t\u00e9es <code>k</code> fois.</p> <p>Soit le code ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>coeur = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], \\\n        [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], \\\n        [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], \\\n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], \\\n        [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], \\\n        [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n\ndef affiche(dessin):\n    ''' affichage d'une grille : les 1 sont repr\u00e9sent\u00e9s par \n        des \" *\" , les 0 par deux espaces \"  \" '''\n    for ligne in dessin:\n        for col in ligne:\n            if col == 1:\n                print(\" *\", end=\"\")\n            else:\n                print(\"  \", end=\"\")\n        print()\n\n\ndef zoomListe(liste_depart,k):\n    '''renvoie une liste contenant k fois chaque \n    \u00e9l\u00e9ment de liste_depart'''\n    liste_zoom = ...\n    for elt in ... :\n        for i in range(k):\n            ...\n    return liste_zoom\n\ndef zoomDessin(grille,k):\n    '''renvoie une grille o\u00f9 les lignes sont zoom\u00e9es k fois \n    ET r\u00e9p\u00e9t\u00e9es k fois'''\n    grille_zoom=[]\n    for elt in grille:\n        liste_zoom = ...\n        for i in range(k):\n            ... .append(...)\n    return grille_zoom\n</code></pre> <p>R\u00e9sultats \u00e0 obtenir :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; affiche(coeur)\n</code></pre> </p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; affiche(zoomDessin(coeur,3))\n</code></pre> \ud83d\udccb Texte<pre><code>            * * * * * *                   * * * * * *                  \n            * * * * * *                   * * * * * *                  \n            * * * * * *                   * * * * * *                  \n      * * *             * * *       * * *             * * *            \n      * * *             * * *       * * *             * * *            \n      * * *             * * *       * * *             * * *            \n* * *                         * * *                         * * *      \n* * *                         * * *                         * * *      \n* * *                         * * *                         * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n      * * *                                           * * *            \n      * * *                                           * * *            \n      * * *                                           * * *            \n            * * *                               * * *                  \n            * * *                               * * *                  \n            * * *                               * * *                  \n                  * * *                   * * *                        \n                  * * *                   * * *                        \n                  * * *                   * * *                        \n                        * * *       * * *                              \n                        * * *       * * *                              \n                        * * *       * * *                              \n                              * * *                                    \n                              * * *                                    \n                              * * *\n</code></pre> \ud83d\udc0d Script Python<pre><code>coeur = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], \\\n        [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], \\\n        [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], \\\n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], \\\n        [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], \\\n        [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n\ndef affiche(dessin):\n    for ligne in dessin:\n        for col in ligne:\n            if col == 1:\n                print(' *',end='')\n            else:\n                print('  ',end='')\n        print()\n\n\ndef zoomListe(liste_depart, k):\n    liste_zoom = []\n    for elt in liste_depart:\n        for i in range(k):\n            liste_zoom.append(elt)\n    return liste_zoom\n\ndef zoomDessin(grille, k):\n    grille_zoom = []\n    for elt in grille:\n        liste_zoom = zoomListe(elt, k)\n        for i in range(k):\n            grille_zoom.append(liste_zoom)\n    return grille_zoom\n</code></pre> Markdown<pre><code>![image](data/272a.png){: .center width=30%}\nOn travaille sur des dessins en noir et blanc obtenu \u00e0 partir de pixels noirs et blancs :\nLa figure \u00ab c\u0153ur \u00bb ci-dessus va servir d\u2019exemple.\nOn la repr\u00e9sente par une grille de nombres, c\u2019est-\u00e0-dire par une liste compos\u00e9e de sous-listes de m\u00eame longueurs.\nChaque sous-liste repr\u00e9sentera donc une ligne du dessin.\n\nDans le code ci-dessous, la fonction `affiche` permet d\u2019afficher le dessin. Les pixels noirs\n(1 dans la grille) seront repr\u00e9sent\u00e9s par le caract\u00e8re \"*\" et les blancs (0 dans la grille) par\ndeux espaces.\n\nLa fonction `zoomListe` prend en argument une liste `liste_depart` et un entier `k`. Elle\nrenvoie une liste o\u00f9 chaque \u00e9l\u00e9ment de `liste_depart` est dupliqu\u00e9 `k` fois.\n\nLa fonction `zoomDessin` prend en argument la grille `dessin` et renvoie une grille o\u00f9\ntoutes les lignes de `dessin` sont zoom\u00e9es `k` fois et r\u00e9p\u00e9t\u00e9es `k` fois.\n\nSoit le code ci-dessous :\n\n```python linenums='1'\ncoeur = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], \\\n        [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], \\\n        [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], \\\n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], \\\n        [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], \\\n        [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n\ndef affiche(dessin):\n    ''' affichage d'une grille : les 1 sont repr\u00e9sent\u00e9s par \n        des \" *\" , les 0 par deux espaces \"  \" '''\n    for ligne in dessin:\n        for col in ligne:\n            if col == 1:\n                print(\" *\", end=\"\")\n            else:\n                print(\"  \", end=\"\")\n        print()\n\n\ndef zoomListe(liste_depart,k):\n    '''renvoie une liste contenant k fois chaque \n    \u00e9l\u00e9ment de liste_depart'''\n    liste_zoom = ...\n    for elt in ... :\n        for i in range(k):\n            ...\n    return liste_zoom\n\ndef zoomDessin(grille,k):\n    '''renvoie une grille o\u00f9 les lignes sont zoom\u00e9es k fois \n    ET r\u00e9p\u00e9t\u00e9es k fois'''\n    grille_zoom=[]\n    for elt in grille:\n        liste_zoom = ...\n        for i in range(k):\n            ... .append(...)\n    return grille_zoom\n</code></pre> <p>R\u00e9sultats \u00e0 obtenir :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; affiche(coeur)\n</code></pre> </p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; affiche(zoomDessin(coeur,3))\n</code></pre> \ud83d\udccb Texte<pre><code>            * * * * * *                   * * * * * *                  \n            * * * * * *                   * * * * * *                  \n            * * * * * *                   * * * * * *                  \n      * * *             * * *       * * *             * * *            \n      * * *             * * *       * * *             * * *            \n      * * *             * * *       * * *             * * *            \n* * *                         * * *                         * * *      \n* * *                         * * *                         * * *      \n* * *                         * * *                         * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n      * * *                                           * * *            \n      * * *                                           * * *            \n      * * *                                           * * *            \n            * * *                               * * *                  \n            * * *                               * * *                  \n            * * *                               * * *                  \n                  * * *                   * * *                        \n                  * * *                   * * *                        \n                  * * *                   * * *                        \n                        * * *       * * *                              \n                        * * *       * * *                              \n                        * * *       * * *                              \n                              * * *                                    \n                              * * *                                    \n                              * * *\n</code></pre> <p>```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#sujet-40","title":"\u25b6 Sujet 40","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-401","title":"Exercice 40.1 \u25a1","text":"<p>Exercice 40.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>elt</code> un nombre et <code>tab</code> un tableau de nombres, et qui renvoie le tableau des indices de <code>elt</code> dans <code>tab</code> si <code>elt</code> est dans <code>tab</code> et le tableau vide <code>[]</code> sinon.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(3, [3, 2, 1, 3, 2, 1])\n[0, 3]\n&gt;&gt;&gt; recherche(4, [1, 2, 3])\n[]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(elt, tab):\n    tab_indices = []\n    for i in range(len(tab)):\n        if tab[i] == elt:\n            tab_indices.append(i)\n    return tab_indices        \n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `recherche` qui prend en param\u00e8tres `elt` un nombre et `tab` un\ntableau de nombres, et qui renvoie le tableau des indices de `elt` dans `tab` si `elt` est dans `tab` et le tableau vide `[]` sinon.\n\nExemples :\n```python\n&gt;&gt;&gt; recherche(3, [3, 2, 1, 3, 2, 1])\n[0, 3]\n&gt;&gt;&gt; recherche(4, [1, 2, 3])\n[]\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2022/#exercice-402","title":"Exercice 40.2 \u25a1","text":"<p>Exercice 40.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Un professeur de NSI d\u00e9cide de g\u00e9rer les r\u00e9sultats de sa classe sous la forme d\u2019un dictionnaire :</p> <ul> <li>les clefs sont les noms des \u00e9l\u00e8ves ;</li> <li>les valeurs sont des dictionnaires dont les clefs sont les types d\u2019\u00e9preuves et les valeurs sont les notes obtenues associ\u00e9es \u00e0 leurs coefficients.</li> </ul> <p>Avec :</p> \ud83d\udc0d Script Python<pre><code>resultats = {'Dupont':{ 'DS1' : [15.5, 4],\n                        'DM1' : [14.5, 1],\n                        'DS2' : [13, 4],\n                        'PROJET1' : [16, 3],\n                        'DS3' : [14, 4]},\n            'Durand':{  'DS1' : [6 , 4],\n                        'DM1' : [14.5, 1],\n                        'DS2' : [8, 4],\n                        'PROJET1' : [9, 3],\n                        'IE1' : [7, 2],\n                        'DS3' : [8, 4],\n                        'DS4' :[15, 4]}}\n</code></pre> <p>L\u2019\u00e9l\u00e8ve dont le nom est Durand a ainsi obtenu au DS2 la note de 8 avec un coefficient 4. Le professeur cr\u00e9e une fonction <code>moyenne</code> qui prend en param\u00e8tre le nom d\u2019un de ces \u00e9l\u00e8ves et lui renvoie sa moyenne arrondie au dixi\u00e8me.</p> <p>Compl\u00e9ter le code du professeur ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def moyenne(nom):\n    if nom in ...:\n        notes = resultats[nom]\n        total_points = ...\n        total_coefficients = ...\n        for ... in notes.values():\n            note , coefficient = valeurs\n            total_points = total_points + ... * coefficient\n            total_coefficients = ... + coefficient\n        return round( ... / total_coefficients , 1 )\n    else:\n        return -1\n</code></pre> \ud83d\udc0d Script Python<pre><code>resultats = {'Dupont':{ 'DS1' : [15.5, 4],\n                        'DM1' : [14.5, 1],\n                        'DS2' : [13, 4],\n                        'PROJET1' : [16, 3],\n                        'DS3' : [14, 4]},\n            'Durand':{  'DS1' : [6 , 4],\n                        'DM1' : [14.5, 1],\n                        'DS2' : [8, 4],\n                        'PROJET1' : [9, 3],\n                        'IE1' : [7, 2],\n                        'DS3' : [8, 4],\n                        'DS4' :[15, 4]}}\n\ndef moyenne(nom):\n    if nom in resultats:\n        notes = resultats[nom]\n        total_points = 0\n        total_coefficients = 0\n        for valeurs in notes.values():\n            note , coefficient = valeurs\n            total_points = total_points + note * coefficient\n            total_coefficients = total_coefficients + coefficient\n        return round( total_points / total_coefficients , 1 )\n    else:\n        return -1\n</code></pre> Markdown<pre><code>Un professeur de NSI d\u00e9cide de g\u00e9rer les r\u00e9sultats de sa classe sous la forme d\u2019un\ndictionnaire :\n\n- les clefs sont les noms des \u00e9l\u00e8ves ;\n- les valeurs sont des dictionnaires dont les clefs sont les types d\u2019\u00e9preuves et les\nvaleurs sont les notes obtenues associ\u00e9es \u00e0 leurs coefficients.\n\nAvec :\n\n```python\nresultats = {'Dupont':{ 'DS1' : [15.5, 4],\n                        'DM1' : [14.5, 1],\n                        'DS2' : [13, 4],\n                        'PROJET1' : [16, 3],\n                        'DS3' : [14, 4]},\n            'Durand':{  'DS1' : [6 , 4],\n                        'DM1' : [14.5, 1],\n                        'DS2' : [8, 4],\n                        'PROJET1' : [9, 3],\n                        'IE1' : [7, 2],\n                        'DS3' : [8, 4],\n                        'DS4' :[15, 4]}}\n</code></pre> <p>L\u2019\u00e9l\u00e8ve dont le nom est Durand a ainsi obtenu au DS2 la note de 8 avec un coefficient 4. Le professeur cr\u00e9e une fonction <code>moyenne</code> qui prend en param\u00e8tre le nom d\u2019un de ces \u00e9l\u00e8ves et lui renvoie sa moyenne arrondie au dixi\u00e8me.</p> <p>Compl\u00e9ter le code du professeur ci-dessous :</p> <p>\ud83d\udc0d Script Python<pre><code>def moyenne(nom):\n    if nom in ...:\n        notes = resultats[nom]\n        total_points = ...\n        total_coefficients = ...\n        for ... in notes.values():\n            note , coefficient = valeurs\n            total_points = total_points + ... * coefficient\n            total_coefficients = ... + coefficient\n        return round( ... / total_coefficients , 1 )\n    else:\n        return -1\n</code></pre> ```             </p> <p>Remerciements pour le signalement et la correction des nombreuses erreurs : Alexandre Hainaut, No\u00e9 Pierre, Cyrille Jochault, S\u00e9bastien Rivillon, Cl\u00e9mentine et Laorine (AEFE Montr\u00e9al), Th\u00e9o EwzZer, Laurent Briend, Matteo Gaillard, Pierre Mouries.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/","title":"\u00c9preuve Pratique BNS 2023","text":"<p>Cr\u00e9dit</p> <p>Les pages de synth\u00e8se et de correction ont \u00e9t\u00e9 r\u00e9alis\u00e9es par G. Lassus - acad\u00e9mie de Bordeaux</p> <p>Les sujets ci-dessous correspondent \u00e0 la derni\u00e8re version officielle, publi\u00e9e le 25/01/2023.  </p> <p> T\u00e9l\u00e9chargements</p> <ul> <li>Une archive contenant les 45 dossiers (contenant chacun les deux fichiers <code>.pdf</code> et <code>.py</code>) : BNS_2023.zip (2,9 Mo)</li> <li>Un pdf unique de tous les sujets : BNS_2023_pdf_unique.pdf (3,2 Mo)</li> </ul>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-01","title":"\u25b6 Sujet 01","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-011","title":"Exercice 01.1","text":"<p>Exercice 01.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Programmer la fonction <code>verifie</code> qui prend en param\u00e8tre un tableau de valeurs num\u00e9riques non vide et qui renvoie <code>True</code> si ce tableau est tri\u00e9 dans l\u2019ordre croissant, <code>False</code> sinon.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>Exemples :\n&gt;&gt;&gt; verifie([0, 5, 8, 8, 9])\nTrue\n&gt;&gt;&gt; verifie([8, 12, 4])\nFalse\n&gt;&gt;&gt; verifie([-1, 4])\nTrue\n&gt;&gt;&gt; verifie([5])\nTrue\n</code></pre> \ud83d\udc0d Script Python<pre><code>def verifie(tab):\n    for i in range(1, len(tab)):\n        if tab[i] &lt; tab[i-1]:\n            return False\n    return True\n</code></pre> \ud83d\udccb Texte<pre><code>Programmer la fonction `verifie` qui prend en param\u00e8tre un tableau de valeurs num\u00e9riques non\nvide et qui renvoie `True` si ce tableau est tri\u00e9 dans l\u2019ordre croissant, `False` sinon.\n\nExemples :\n\n```python\nExemples :\n&gt;&gt;&gt; verifie([0, 5, 8, 8, 9])\nTrue\n&gt;&gt;&gt; verifie([8, 12, 4])\nFalse\n&gt;&gt;&gt; verifie([-1, 4])\nTrue\n&gt;&gt;&gt; verifie([5])\nTrue\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-012","title":"Exercice 01.2","text":"<p>Exercice 01.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Les r\u00e9sultats d'un vote ayant trois issues possibles 'A', 'B' et 'C' sont stock\u00e9s dans un tableau.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>urne = ['A', 'A', 'A', 'B', 'C', 'B', 'C', 'B', 'C', 'B']\n</code></pre> <p>La fonction <code>depouille</code> doit permettre de compter le nombre de votes exprim\u00e9s pour chaque artiste. Elle prend en param\u00e8tre un tableau et renvoie le r\u00e9sultat dans un dictionnaire dont les cl\u00e9s sont les noms des artistes et les valeurs le nombre de votes en leur faveur.</p> <p>La fonction vainqueur doit d\u00e9signer le nom du ou des gagnants. Elle prend en param\u00e8tre un dictionnaire dont la structure est celle du dictionnaire renvoy\u00e9 par la fonction <code>depouille</code> et renvoie un tableau. Ce tableau peut donc contenir plusieurs \u00e9l\u00e9ments s\u2019il y a des artistes ex- aequo. Compl\u00e9ter les fonctions <code>depouille</code> et vainqueur ci-apr\u00e8s pour qu\u2019elles renvoient les r\u00e9sultats attendus.</p> \ud83d\udc0d Script Python<pre><code>urne = ['A', 'A', 'A','B', 'C', 'B', 'C','B', 'C', 'B']\n\ndef depouille(urne):\n    resultat = ...\n    for bulletin in urne:\n        if ...:\n            resultat[bulletin] = resultat[bulletin] + 1\n        else:\n            ...\n    return resultat\n\ndef vainqueur(election):\n    vainqueur = ''\n    nmax = 0\n    for candidat in election:\n        if ... &gt; ... :\n            nmax = ...\n            vainqueur = candidat\n    liste_finale = [nom for nom in election if election[nom] == ...]\n    return ...\n</code></pre> <p>Exemples d\u2019utilisation :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; election = depouille(urne)\n&gt;&gt;&gt; election\n{'A': 3, 'B': 4, 'C': 3}\n&gt;&gt;&gt; vainqueur(election)\n['B']\n</code></pre> \ud83d\udc0d Script Python<pre><code>urne = ['A', 'A', 'A', 'B', 'C', 'B', 'C', 'B', 'C', 'B']\n\ndef depouille(urne):\n    resultat = {}\n    for bulletin in urne:\n        if bulletin in resultat:\n            resultat[bulletin] = resultat[bulletin] + 1\n        else:\n            resultat[bulletin] = 1\n    return resultat\n\ndef vainqueur(election):\n    vainqueur = '' #(1)\n    nmax = 0\n    for candidat in election:\n        if election[candidat] &gt; nmax :\n            nmax = election[candidat]\n            vainqueur = candidat #(2)\n    liste_finale = [nom for nom in election if election[nom] == nmax]\n    return liste_finale\n</code></pre> <ol> <li>Il est pourtant tr\u00e8s d\u00e9conseill\u00e9 de nommer une variable avec le m\u00eame nom que la fonction qui la contient...</li> <li>Cette variable <code>vainqueur</code> est inutile, on ne s'en sert pas dans l'\u00e9laboration de la liste finale.</li> </ol> Markdown<pre><code>Les r\u00e9sultats d'un vote ayant trois issues possibles 'A', 'B' et 'C' sont stock\u00e9s dans un tableau.\n\nExemple :\n\n```python\nurne = ['A', 'A', 'A', 'B', 'C', 'B', 'C', 'B', 'C', 'B']\n</code></pre> <p>La fonction <code>depouille</code> doit permettre de compter le nombre de votes exprim\u00e9s pour chaque artiste. Elle prend en param\u00e8tre un tableau et renvoie le r\u00e9sultat dans un dictionnaire dont les cl\u00e9s sont les noms des artistes et les valeurs le nombre de votes en leur faveur.</p> <p>La fonction vainqueur doit d\u00e9signer le nom du ou des gagnants. Elle prend en param\u00e8tre un dictionnaire dont la structure est celle du dictionnaire renvoy\u00e9 par la fonction <code>depouille</code> et renvoie un tableau. Ce tableau peut donc contenir plusieurs \u00e9l\u00e9ments s\u2019il y a des artistes ex- aequo. Compl\u00e9ter les fonctions <code>depouille</code> et vainqueur ci-apr\u00e8s pour qu\u2019elles renvoient les r\u00e9sultats attendus.</p> \ud83d\udc0d Script Python<pre><code>urne = ['A', 'A', 'A','B', 'C', 'B', 'C','B', 'C', 'B']\n\ndef depouille(urne):\n    resultat = ...\n    for bulletin in urne:\n        if ...:\n            resultat[bulletin] = resultat[bulletin] + 1\n        else:\n            ...\n    return resultat\n\ndef vainqueur(election):\n    vainqueur = ''\n    nmax = 0\n    for candidat in election:\n        if ... &gt; ... :\n            nmax = ...\n            vainqueur = candidat\n    liste_finale = [nom for nom in election if election[nom] == ...]\n    return ...\n</code></pre> <p>Exemples d\u2019utilisation :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; election = depouille(urne)\n&gt;&gt;&gt; election\n{'A': 3, 'B': 4, 'C': 3}\n&gt;&gt;&gt; vainqueur(election)\n['B']\n</code></pre> <p>```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-02","title":"\u25b6 Sujet 02","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-021","title":"Exercice 02.1","text":"<p>Exercice 02.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>indices_maxi</code> qui prend en param\u00e8tre une liste <code>tab</code>, non vide, de nombres entiers et renvoie un couple donnant d\u2019une part le plus grand \u00e9l\u00e9ment de cette liste et d\u2019autre part la liste des indices de la liste <code>tab</code> o\u00f9 appara\u00eet ce plus grand \u00e9l\u00e9ment.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; indices_maxi([1, 5, 6, 9, 1, 2, 3, 7, 9, 8])\n(9, [3, 8])\n&gt;&gt;&gt; indices_maxi([7])\n(7, [0])\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def indices_maxi(tab):\n    val_max = tab[0]\n    ind_max = []\n    for i in range(len(tab)):\n        if tab[i] &gt; val_max:\n            val_max = tab[i]\n    for i in range(len(tab)):\n        if tab[i] == val_max:\n            ind_max.append(i)\n    return (val_max, ind_max)\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `indices_maxi` qui prend en param\u00e8tre une liste `tab`, non vide, de\nnombres entiers et renvoie un couple donnant d\u2019une part le plus grand \u00e9l\u00e9ment de cette\nliste et d\u2019autre part la liste des indices de la liste `tab` o\u00f9 appara\u00eet ce plus grand \u00e9l\u00e9ment.\n\nExemple :\n```python\n&gt;&gt;&gt; indices_maxi([1, 5, 6, 9, 1, 2, 3, 7, 9, 8])\n(9, [3, 8])\n&gt;&gt;&gt; indices_maxi([7])\n(7, [0])\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-022","title":"Exercice 02.2","text":"<p>Exercice 02.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Cet exercice utilise des piles qui seront repr\u00e9sent\u00e9es en Python par des listes (type <code>list</code>).</p> <p>On rappelle que l\u2019expression <code>liste_1 = list(liste)</code> fait une copie de <code>liste</code>ind\u00e9pendante de <code>liste</code>, que l\u2019expression <code>x = liste.pop()</code> enl\u00e8ve le sommet de la pile <code>liste</code> et le place dans la variable <code>x</code> et, enfin, que l\u2019expression <code>liste.append(v)</code> place la valeur <code>v</code> au sommet de la pile <code>liste</code>.</p> <p>Compl\u00e9ter le code Python de la fonction <code>positif</code> ci-dessous qui prend une pile <code>liste</code> de nombres entiers en param\u00e8tre et qui renvoie la pile des entiers positifs dans le m\u00eame ordre, sans modifier la variable <code>liste</code>.</p> \ud83d\udc0d Script Python<pre><code>def positif(pile):\n    pile_1 = ...(pile)\n    pile_2 = ...\n    while pile_1 != []:\n        x = ...\n        if ... &gt;= 0:\n            pile_2.append(...)\n    while pile_2 != ...:\n        x = pile_2.pop()\n        ...\n    return pile_1\n</code></pre> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; positif([-1, 0, 5, -3, 4, -6, 10, 9, -8])\n[0, 5, 4, 10, 9]\n&gt;&gt;&gt; positif([-2])\n[]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def positif(pile):\n    pile_1 = list(pile)\n    pile_2 = []\n    while pile_1 != []:\n        x = pile_1.pop()\n        if x &gt;= 0:\n            pile_2.append(x)\n    while pile_2 != []:\n        x = pile_2.pop()\n        pile_1.append(x)\n    return pile_1\n</code></pre> Markdown<pre><code>Cet exercice utilise des piles qui seront repr\u00e9sent\u00e9es en Python par des listes (type `list`).\n\nOn rappelle que l\u2019expression `liste_1 = list(liste)` fait une copie de `liste `ind\u00e9pendante de `liste`, que\nl\u2019expression `x = liste.pop()` enl\u00e8ve le sommet de la pile `liste` et le place dans la variable `x` et,\nenfin, que l\u2019expression `liste.append(v)` place la valeur `v` au sommet de la pile `liste`.\n\nCompl\u00e9ter le code Python de la fonction `positif` ci-dessous qui prend une pile `liste` de\nnombres entiers en param\u00e8tre et qui renvoie la pile des entiers positifs dans le m\u00eame\nordre, sans modifier la variable `liste`.\n\n```python linenums='1'\ndef positif(pile):\n    pile_1 = ...(pile)\n    pile_2 = ...\n    while pile_1 != []:\n        x = ...\n        if ... &gt;= 0:\n            pile_2.append(...)\n    while pile_2 != ...:\n        x = pile_2.pop()\n        ...\n    return pile_1\n</code></pre> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; positif([-1, 0, 5, -3, 4, -6, 10, 9, -8])\n[0, 5, 4, 10, 9]\n&gt;&gt;&gt; positif([-2])\n[]\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-03","title":"\u25b6 Sujet 03","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-031","title":"Exercice 03.1","text":"<p>Exercice 03.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Dans cet exercice, les nombres sont des entiers ou des flottants.</p> <p>\u00c9crire une fonction <code>moyenne</code> renvoyant la moyenne pond\u00e9r\u00e9e d\u2019une liste non vide, pass\u00e9e en param\u00e8tre, de tuples \u00e0 deux \u00e9l\u00e9ments de la forme (<code>valeur</code>, <code>coefficient</code>) o\u00f9 <code>valeur</code> et <code>coefficient</code> sont des nombres positifs ou nuls. Si la somme des coefficients est nulle, la fonction renvoie <code>None</code>, si la somme des coefficients est non nulle, la fonction renvoie, sous forme de flottant, la moyenne des valeurs affect\u00e9es de leur coefficient.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; moyenne([(8, 2), (12, 0), (13.5, 1), (5, 0.5)])\n9.142857142857142\n&gt;&gt;&gt; moyenne([(3, 0), (5, 0)])\nNone\n</code></pre></p> <p>Dans le premier exemple la moyenne est calcul\u00e9e par la formule :</p> <p>\\(\\dfrac{8 \\times 2 + 12 \\times 0 + 13,5 \\times 1 + 5 \\times 0,5}{2+0+1+0,5}\\)</p> \ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    somme = 0\n    coeffs = 0\n    for couple in tab:\n        somme += couple[0] * couple[1]\n        coeffs += couple[1]\n    if coeffs == 0:\n        return None\n    return somme / coeffs\n</code></pre> \ud83d\udccb Texte<pre><code>Dans cet exercice, les nombres sont des entiers ou des flottants.\n\n\u00c9crire une fonction `moyenne` renvoyant la moyenne pond\u00e9r\u00e9e d\u2019une liste non vide,\npass\u00e9e en param\u00e8tre, de tuples \u00e0 deux \u00e9l\u00e9ments de la forme (`valeur`,\n`coefficient`) o\u00f9 `valeur` et `coefficient` sont des nombres positifs ou nuls.\nSi la somme des coefficients est nulle, la fonction renvoie `None`, si la somme des\ncoefficients est non nulle, la fonction renvoie, sous forme de flottant, la moyenne des\nvaleurs affect\u00e9es de leur coefficient.\n\nExemple :\n```python\n&gt;&gt;&gt; moyenne([(8, 2), (12, 0), (13.5, 1), (5, 0.5)])\n9.142857142857142\n&gt;&gt;&gt; moyenne([(3, 0), (5, 0)])\nNone\n```\n\nDans le premier exemple la moyenne est calcul\u00e9e par la formule :\n\n$\\dfrac{8 \\times 2 + 12 \\times 0 + 13,5 \\times 1 + 5 \\times 0,5}{2+0+1+0,5}$\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-032","title":"Exercice 03.2","text":"<p>Exercice 03.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p> On travaille sur des dessins en noir et blanc obtenu \u00e0 partir de pixels noirs et blancs : La figure \u00ab c\u0153ur \u00bb ci-dessus va servir d\u2019exemple. On la repr\u00e9sente par une grille de nombres, c\u2019est-\u00e0-dire par une liste compos\u00e9e de sous-listes de m\u00eame longueurs. Chaque sous-liste repr\u00e9sentera donc une ligne du dessin.</p> <p>Dans le code ci-dessous, la fonction <code>affiche</code> permet d\u2019afficher le dessin. Les pixels noirs (1 dans la grille) seront repr\u00e9sent\u00e9s par le caract\u00e8re \"*\" et les blancs (0 dans la grille) par deux espaces.</p> <p>La fonction <code>zoomListe</code> prend en argument une liste <code>liste_depart</code> et un entier <code>k</code>. Elle renvoie une liste o\u00f9 chaque \u00e9l\u00e9ment de <code>liste_depart</code> est dupliqu\u00e9 <code>k</code> fois.</p> <p>La fonction <code>zoomDessin</code> prend en argument la grille <code>dessin</code> et renvoie une grille o\u00f9 toutes les lignes de <code>dessin</code> sont zoom\u00e9es <code>k</code> fois et r\u00e9p\u00e9t\u00e9es <code>k</code> fois.</p> <p>Soit le code ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>coeur = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], \\\n        [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], \\\n        [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], \\\n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], \\\n        [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], \\\n        [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n\ndef affiche(dessin):\n    ''' affichage d'une grille : les 1 sont repr\u00e9sent\u00e9s par \n        des \" *\" , les 0 par deux espaces \"  \" '''\n    for ligne in dessin:\n        for col in ligne:\n            if col == 1:\n                print(\" *\", end=\"\")\n            else:\n                print(\"  \", end=\"\")\n        print()\n\n\ndef zoomListe(liste_depart,k):\n    '''renvoie une liste contenant k fois chaque \n    \u00e9l\u00e9ment de liste_depart'''\n    liste_zoom = ...\n    for elt in ... :\n        for i in range(k):\n            ...\n    return liste_zoom\n\ndef zoomDessin(grille,k):\n    '''renvoie une grille o\u00f9 les lignes sont zoom\u00e9es k fois \n    ET r\u00e9p\u00e9t\u00e9es k fois'''\n    grille_zoom=[]\n    for elt in grille:\n        liste_zoom = ...\n        for i in range(k):\n            ... .append(...)\n    return grille_zoom\n</code></pre> <p>R\u00e9sultats \u00e0 obtenir :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; affiche(coeur)\n</code></pre> </p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; affiche(zoomDessin(coeur,3))\n</code></pre> \ud83d\udccb Texte<pre><code>            * * * * * *                   * * * * * *                  \n            * * * * * *                   * * * * * *                  \n            * * * * * *                   * * * * * *                  \n      * * *             * * *       * * *             * * *            \n      * * *             * * *       * * *             * * *            \n      * * *             * * *       * * *             * * *            \n* * *                         * * *                         * * *      \n* * *                         * * *                         * * *      \n* * *                         * * *                         * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n      * * *                                           * * *            \n      * * *                                           * * *            \n      * * *                                           * * *            \n            * * *                               * * *                  \n            * * *                               * * *                  \n            * * *                               * * *                  \n                  * * *                   * * *                        \n                  * * *                   * * *                        \n                  * * *                   * * *                        \n                        * * *       * * *                              \n                        * * *       * * *                              \n                        * * *       * * *                              \n                              * * *                                    \n                              * * *                                    \n                              * * *\n</code></pre> \ud83d\udc0d Script Python<pre><code>coeur = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], \\\n        [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], \\\n        [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], \\\n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], \\\n        [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], \\\n        [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n\ndef affiche(dessin):\n    ''' affichage d'une grille : les 1 sont repr\u00e9sent\u00e9s par \n    des \" *\" , les 0 par deux espaces \"  \" '''\n    for ligne in dessin:\n        for col in ligne:\n            if col == 1:\n                print(' *',end='')\n            else:\n                print('  ',end='')\n        print()\n\n\ndef zoomListe(liste_depart, k):\n    '''renvoie une liste contenant k fois chaque \n    \u00e9l\u00e9ment de liste_depart'''\n    liste_zoom = []\n    for elt in liste_depart:\n        for i in range(k):\n            liste_zoom.append(elt)\n    return liste_zoom\n\ndef zoomDessin(grille, k):\n    '''renvoie une grille o\u00f9 les lignes sont zoom\u00e9es k fois \n    ET r\u00e9p\u00e9t\u00e9es k fois'''\n    grille_zoom = []\n    for elt in grille:\n        liste_zoom = zoomListe(elt, k)\n        for i in range(k):\n            grille_zoom.append(liste_zoom)\n    return grille_zoom\n</code></pre> Markdown<pre><code>![image](data2023/03_coeur.png){: .center width=30%}\nOn travaille sur des dessins en noir et blanc obtenu \u00e0 partir de pixels noirs et blancs :\nLa figure \u00ab c\u0153ur \u00bb ci-dessus va servir d\u2019exemple.\nOn la repr\u00e9sente par une grille de nombres, c\u2019est-\u00e0-dire par une liste compos\u00e9e de sous-listes de m\u00eame longueurs.\nChaque sous-liste repr\u00e9sentera donc une ligne du dessin.\n\nDans le code ci-dessous, la fonction `affiche` permet d\u2019afficher le dessin. Les pixels noirs\n(1 dans la grille) seront repr\u00e9sent\u00e9s par le caract\u00e8re \"*\" et les blancs (0 dans la grille) par\ndeux espaces.\n\nLa fonction `zoomListe` prend en argument une liste `liste_depart` et un entier `k`. Elle\nrenvoie une liste o\u00f9 chaque \u00e9l\u00e9ment de `liste_depart` est dupliqu\u00e9 `k` fois.\n\nLa fonction `zoomDessin` prend en argument la grille `dessin` et renvoie une grille o\u00f9\ntoutes les lignes de `dessin` sont zoom\u00e9es `k` fois et r\u00e9p\u00e9t\u00e9es `k` fois.\n\nSoit le code ci-dessous :\n\n```python linenums='1'\ncoeur = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], \\\n        [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], \\\n        [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], \\\n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \\\n        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], \\\n        [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], \\\n        [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \\\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n\ndef affiche(dessin):\n    ''' affichage d'une grille : les 1 sont repr\u00e9sent\u00e9s par \n        des \" *\" , les 0 par deux espaces \"  \" '''\n    for ligne in dessin:\n        for col in ligne:\n            if col == 1:\n                print(\" *\", end=\"\")\n            else:\n                print(\"  \", end=\"\")\n        print()\n\n\ndef zoomListe(liste_depart,k):\n    '''renvoie une liste contenant k fois chaque \n    \u00e9l\u00e9ment de liste_depart'''\n    liste_zoom = ...\n    for elt in ... :\n        for i in range(k):\n            ...\n    return liste_zoom\n\ndef zoomDessin(grille,k):\n    '''renvoie une grille o\u00f9 les lignes sont zoom\u00e9es k fois \n    ET r\u00e9p\u00e9t\u00e9es k fois'''\n    grille_zoom=[]\n    for elt in grille:\n        liste_zoom = ...\n        for i in range(k):\n            ... .append(...)\n    return grille_zoom\n</code></pre> <p>R\u00e9sultats \u00e0 obtenir :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; affiche(coeur)\n</code></pre> </p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; affiche(zoomDessin(coeur,3))\n</code></pre> \ud83d\udccb Texte<pre><code>            * * * * * *                   * * * * * *                  \n            * * * * * *                   * * * * * *                  \n            * * * * * *                   * * * * * *                  \n      * * *             * * *       * * *             * * *            \n      * * *             * * *       * * *             * * *            \n      * * *             * * *       * * *             * * *            \n* * *                         * * *                         * * *      \n* * *                         * * *                         * * *      \n* * *                         * * *                         * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n* * *                                                       * * *      \n      * * *                                           * * *            \n      * * *                                           * * *            \n      * * *                                           * * *            \n            * * *                               * * *                  \n            * * *                               * * *                  \n            * * *                               * * *                  \n                  * * *                   * * *                        \n                  * * *                   * * *                        \n                  * * *                   * * *                        \n                        * * *       * * *                              \n                        * * *       * * *                              \n                        * * *       * * *                              \n                              * * *                                    \n                              * * *                                    \n                              * * *\n</code></pre> <p>```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-04","title":"\u25b6 Sujet 04","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-041","title":"Exercice 04.1","text":"<p>Exercice 04.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>a_doublon</code> qui prend en param\u00e8tre une liste tri\u00e9e de nombres et renvoie <code>True</code> si la liste contient au moins deux nombres identiques, <code>False</code> sinon.</p> <p>Par exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; a_doublon([])\nFalse\n&gt;&gt;&gt; a_doublon([1])\nFalse\n&gt;&gt;&gt; a_doublon([1, 2, 4, 6, 6])\nTrue\n&gt;&gt;&gt; a_doublon([2, 5, 7, 7, 7, 9])\nTrue\n&gt;&gt;&gt; a_doublon([0, 2, 3])\nFalse\n</code></pre> \ud83d\udc0d Script Python<pre><code>def a_doublon(lst):\n    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1]:\n            return True\n    return False\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `a_doublon` qui prend en param\u00e8tre une liste **tri\u00e9e** de nombres et\nrenvoie `True` si la liste contient au moins deux nombres identiques, `False` sinon.\n\nPar exemple :\n\n```python\n&gt;&gt;&gt; a_doublon([])\nFalse\n&gt;&gt;&gt; a_doublon([1])\nFalse\n&gt;&gt;&gt; a_doublon([1, 2, 4, 6, 6])\nTrue\n&gt;&gt;&gt; a_doublon([2, 5, 7, 7, 7, 9])\nTrue\n&gt;&gt;&gt; a_doublon([0, 2, 3])\nFalse\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-042","title":"Exercice 04.2","text":"<p>Exercice 04.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On souhaite g\u00e9n\u00e9rer des grilles du jeu de d\u00e9mineur \u00e0 partir de la position des bombes \u00e0 placer. On se limite \u00e0 la g\u00e9n\u00e9ration de grilles carr\u00e9es de taille \\(n \\times n\\) o\u00f9 \\(n\\) est le nombre de bombes du jeu.  </p> <p>Dans le jeu du d\u00e9mineur, chaque case de la grille contient soit une bombe, soit une valeur qui correspond aux nombres de bombes situ\u00e9es dans le voisinage direct de la case (au- dessus, en dessous, \u00e0 droite, \u00e0 gauche ou en diagonale : chaque case a donc 8 voisins si elle n'est pas situ\u00e9e au bord de la grille).</p> <p>Voici un exemple de grille \\(5 \\times 5\\) de d\u00e9mineur dans laquelle la bombe est repr\u00e9sent\u00e9e par une \u00e9toile :</p> <p></p> <p>On utilise une liste de listes pour repr\u00e9senter la grille et on choisit de coder une bombe par la valeur -1.</p> <p>L'exemple ci-contre sera donc cod\u00e9 par la liste :</p> \ud83d\udc0d Script Python<pre><code>[[1, 1, 1, 0, 0],\n[1, -1, 1, 1, 1],\n[2, 2, 3, 2, -1],\n[1, -1, 2, -1, 3],\n[1, 1, 2, 2, -1]]\n</code></pre> <p>Compl\u00e9ter le code suivant afin de g\u00e9n\u00e9rer des grilles de d\u00e9mineur, on pourra v\u00e9rifier que l\u2019instruction <code>genere_grille([(1, 1), (2, 4), (3, 1), (3, 3), (4, 4)])</code> produit bien la liste donn\u00e9e en exemple.</p> \ud83d\udc0d Script Python<pre><code>def voisinage(n, ligne, colonne):\n    \"\"\" Renvoie la liste des coordonn\u00e9es des voisins de la case\n    (ligne, colonne) en g\u00e9rant les cases sur les bords. \"\"\"\n    voisins = []\n    for l in range(max(0,ligne-1), min(n, ligne+2)):\n        for c in range(max(0, colonne-1), min(n, colonne+2)):\n            if (l, c) != (ligne, colonne):\n                voisins.append((l,c))\n    return voisins\n\n\ndef incremente_voisins(grille, ligne, colonne):\n    \"\"\" Incr\u00e9mente de 1 toutes les cases voisines d'une bombe.\"\"\"\n    voisins = ...\n    for l, c in voisins:\n        if grille[l][c] != ...: # si ce n'est pas une bombe\n            ...  # on ajoute 1 \u00e0 sa valeur\n\n\n\ndef genere_grille(bombes):\n    \"\"\" Renvoie une grille de d\u00e9mineur de taille nxn o\u00f9 n est\n    le nombre de bombes, en pla\u00e7ant les bombes \u00e0 l'aide de\n    la liste bombes de coordonn\u00e9es (tuples) pass\u00e9e en\n    param\u00e8tre. \"\"\"\n    n = len(bombes)\n    # Initialisation d'une grille nxn remplie de 0\n    grille = [[0 for colonne in range(n)] for ligne in range(n)]\n    # Place les bombes et calcule les valeurs des autres cases\n    for ligne, colonne in bombes:\n        grille[ligne][colonne] = ... # place la bombe\n        ... # incr\u00e9mente ses voisins\n\n    return grille\n</code></pre> \ud83d\udc0d Script Python<pre><code>def voisinage(n, ligne, colonne):\n    \"\"\" Renvoie la liste des coordonn\u00e9es des voisins de la case\n    (ligne, colonne) en g\u00e9rant les cases sur les bords. \"\"\"\n    voisins = []\n    for l in range(max(0,ligne-1), min(n, ligne+2)):\n        for c in range(max(0, colonne-1), min(n, colonne+2)):\n            if (l, c) != (ligne, colonne):\n                voisins.append((l,c))\n    return voisins\n\n\ndef incremente_voisins(grille, ligne, colonne):\n    \"\"\" Incr\u00e9mente de 1 toutes les cases voisines d'une bombe.\"\"\"\n    voisins = voisinage(len(grille), ligne, colonne)\n    for l, c in voisins:\n        if grille[l][c] != -1: # si ce n'est pas une bombe\n            grille[l][c] += 1  # on ajoute 1 \u00e0 sa valeur\n\n\n\ndef genere_grille(bombes):\n    \"\"\" Renvoie une grille de d\u00e9mineur de taille nxn o\u00f9 n est\n    le nombre de bombes, en pla\u00e7ant les bombes \u00e0 l'aide de\n    la liste bombes de coordonn\u00e9es (tuples) pass\u00e9e en\n    param\u00e8tre. \"\"\"\n    n = len(bombes)\n    # Initialisation d'une grille nxn remplie de 0\n    grille = [[0 for colonne in range(n)] for ligne in range(n)]\n    # Place les bombes et calcule les valeurs des autres cases\n    for ligne, colonne in bombes:\n        grille[ligne][colonne] = -1 # place la bombe\n        incremente_voisins(grille, ligne, colonne) # incr\u00e9mente ses voisins\n\n    return grille\n</code></pre> Markdown<pre><code>On souhaite g\u00e9n\u00e9rer des grilles du jeu de d\u00e9mineur \u00e0 partir de la position des bombes \u00e0\nplacer.  \nOn se limite \u00e0 la g\u00e9n\u00e9ration de grilles carr\u00e9es de taille $n \\times n$ o\u00f9 $n$ est le nombre de bombes du jeu.  \n\nDans le jeu du d\u00e9mineur, chaque case de la grille contient soit une bombe, soit une valeur\nqui correspond aux nombres de bombes situ\u00e9es dans le voisinage direct de la case (au-\ndessus, en dessous, \u00e0 droite, \u00e0 gauche ou en diagonale : chaque case a donc 8 voisins si\nelle n'est pas situ\u00e9e au bord de la grille).\n\nVoici un exemple de grille $5 \\times 5$ de d\u00e9mineur dans laquelle la bombe est repr\u00e9sent\u00e9e par une \u00e9toile :\n\n![image](data2023/04grille.png){: .center}\n\n\nOn utilise une liste de listes pour repr\u00e9senter la grille et on choisit de coder une bombe par la valeur -1.\n\nL'exemple ci-contre sera donc cod\u00e9 par la liste :\n\n```python\n[[1, 1, 1, 0, 0],\n[1, -1, 1, 1, 1],\n[2, 2, 3, 2, -1],\n[1, -1, 2, -1, 3],\n[1, 1, 2, 2, -1]]\n</code></pre> <p>Compl\u00e9ter le code suivant afin de g\u00e9n\u00e9rer des grilles de d\u00e9mineur, on pourra v\u00e9rifier que l\u2019instruction <code>genere_grille([(1, 1), (2, 4), (3, 1), (3, 3), (4, 4)])</code> produit bien la liste donn\u00e9e en exemple.</p> \ud83d\udc0d Script Python<pre><code>def voisinage(n, ligne, colonne):\n    \"\"\" Renvoie la liste des coordonn\u00e9es des voisins de la case\n    (ligne, colonne) en g\u00e9rant les cases sur les bords. \"\"\"\n    voisins = []\n    for l in range(max(0,ligne-1), min(n, ligne+2)):\n        for c in range(max(0, colonne-1), min(n, colonne+2)):\n            if (l, c) != (ligne, colonne):\n                voisins.append((l,c))\n    return voisins\n\n\ndef incremente_voisins(grille, ligne, colonne):\n    \"\"\" Incr\u00e9mente de 1 toutes les cases voisines d'une bombe.\"\"\"\n    voisins = ...\n    for l, c in voisins:\n        if grille[l][c] != ...: # si ce n'est pas une bombe\n            ...  # on ajoute 1 \u00e0 sa valeur\n\n\n\ndef genere_grille(bombes):\n    \"\"\" Renvoie une grille de d\u00e9mineur de taille nxn o\u00f9 n est\n    le nombre de bombes, en pla\u00e7ant les bombes \u00e0 l'aide de\n    la liste bombes de coordonn\u00e9es (tuples) pass\u00e9e en\n    param\u00e8tre. \"\"\"\n    n = len(bombes)\n    # Initialisation d'une grille nxn remplie de 0\n    grille = [[0 for colonne in range(n)] for ligne in range(n)]\n    # Place les bombes et calcule les valeurs des autres cases\n    for ligne, colonne in bombes:\n        grille[ligne][colonne] = ... # place la bombe\n        ... # incr\u00e9mente ses voisins\n\n    return grille\n</code></pre> <p>```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-05","title":"\u25b6 Sujet 05","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-051","title":"Exercice 05.1","text":"<p>Exercice 05.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire en python deux fonctions :</p> <ul> <li> <p><code>lancer</code> de param\u00e8tre <code>n</code>, un entier positif, qui renvoie un tableau de type <code>list</code> de <code>n</code> entiers obtenus al\u00e9atoirement entre 1 et 6 (1 et 6 inclus) ;</p> </li> <li> <p><code>paire_6</code> de param\u00e8tre <code>tab</code>, un tableau de type <code>list</code> de <code>n</code> entiers entre 1 et 6 obtenus al\u00e9atoirement, qui renvoie un bool\u00e9en \u00e9gal \u00e0 <code>True</code> si le nombre de 6 est sup\u00e9rieur ou \u00e9gal \u00e0 2, <code>False</code> sinon.</p> </li> </ul> <p>On pourra utiliser la fonction <code>randint(a,b)</code> du module <code>random</code> pour laquelle la documentation officielle est la suivante :</p> <p><code>Renvoie un entier al\u00e9atoire N tel que a &lt;=N &lt;= b.</code></p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; lancer1 = lancer(5)\n[5, 6, 6, 2, 2]\n&gt;&gt;&gt; paire_6(lancer1)\nTrue\n&gt;&gt;&gt; lancer2 = lancer(5)\n[6, 5, 1, 6, 6]\n&gt;&gt;&gt; paire_6(lancer2)\nTrue\n&gt;&gt;&gt; lancer3 = lancer(3)\n[2, 2, 6]\n&gt;&gt;&gt; paire_6(lancer3)\nFalse\n&gt;&gt;&gt; lancer4 = lancer(0)\n[]\n&gt;&gt;&gt; paire_6(lancer4)\nFalse\n</code></pre> \ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef lancer(n):\n    return [randint(1,6) for _ in range(n)]\n\ndef paire_6(tab):\n    nb = 0\n    for elt in tab:\n        if elt == 6:\n            nb += 1\n    if nb &gt;=2 :\n        return True\n    else:\n        return False\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire en python deux fonctions :\n\n- `lancer` de param\u00e8tre `n`, un entier positif, qui renvoie un tableau de type `list` de\n`n` entiers obtenus al\u00e9atoirement entre 1 et 6 (1 et 6 inclus) ;\n\n- `paire_6` de param\u00e8tre `tab`, un tableau de type `list` de `n` entiers entre 1 et\n6 obtenus al\u00e9atoirement, qui renvoie un bool\u00e9en \u00e9gal \u00e0 `True` si le nombre de 6\nest sup\u00e9rieur ou \u00e9gal \u00e0 2, `False` sinon.\n\nOn pourra utiliser la fonction `randint(a,b)` du module `random` pour laquelle la\ndocumentation officielle est la suivante :\n\n`Renvoie un entier al\u00e9atoire N tel que a &lt;=N &lt;= b.`\n\nExemples :\n\n```python\n&gt;&gt;&gt; lancer1 = lancer(5)\n[5, 6, 6, 2, 2]\n&gt;&gt;&gt; paire_6(lancer1)\nTrue\n&gt;&gt;&gt; lancer2 = lancer(5)\n[6, 5, 1, 6, 6]\n&gt;&gt;&gt; paire_6(lancer2)\nTrue\n&gt;&gt;&gt; lancer3 = lancer(3)\n[2, 2, 6]\n&gt;&gt;&gt; paire_6(lancer3)\nFalse\n&gt;&gt;&gt; lancer4 = lancer(0)\n[]\n&gt;&gt;&gt; paire_6(lancer4)\nFalse\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-052","title":"Exercice 05.2","text":"<p>Exercice 05.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On consid\u00e8re une image en 256 niveaux de gris que l\u2019on repr\u00e9sente par une grille de nombres, c\u2019est-\u00e0-dire une liste compos\u00e9e de sous-listes toutes de longueurs identiques.</p> <p>La largeur de l\u2019image est donc la longueur d\u2019une sous-liste et la hauteur de l\u2019image est le nombre de sous-listes.</p> <p>Chaque sous-liste repr\u00e9sente une ligne de l\u2019image et chaque \u00e9l\u00e9ment des sous-listes est un entier compris entre 0 et 255, repr\u00e9sentant l\u2019intensit\u00e9 lumineuse du pixel.</p> <p>Le n\u00e9gatif d\u2019une image est l\u2019image constitu\u00e9e des pixels <code>x_n</code> tels que <code>x_n + x_i = 255</code> o\u00f9 <code>x_i</code> est le pixel correspondant de l\u2019image initiale.</p> <p>Compl\u00e9ter le programme suivant : \ud83d\udc0d Script Python<pre><code>def nbLig(image):\n    '''renvoie le nombre de lignes de l'image'''\n    return ...\n\ndef nbCol(image):\n    '''renvoie la largeur de l'image'''\n    return ...\n\ndef negatif(image):\n    '''renvoie le negatif de l'image sous la forme\n       d'une liste de listes'''\n\n    # on cree une image de 0 aux memes dimensions que le parametre image\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))]\n\n    for i in range(nbLig(image)):\n        for j in range(...):\n            L[i][j] = ...\n    return L\n\ndef binaire(image, seuil):\n    '''renvoie une image binarisee de l'image sous la forme\n       d'une liste de listes contenant des 0 si la valeur\n       du pixel est strictement inferieure au seuil\n       et 1 sinon'''\n\n    # on cree une image de 0 aux memes dimensions que le parametre image\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))]\n\n    for i in range(nbLig(image)):\n        for j in range(...):\n            if image[i][j] &lt; ... :\n                L[i][j] = ...\n            else:\n                L[i][j] = ...\n    return L\n</code></pre></p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; img=[[20, 34, 254, 145, 6], [23, 124, 237, 225, 69], [197, 174,\n207, 25, 87], [255, 0, 24, 197, 189]]\n&gt;&gt;&gt; nbLig(img)\n4\n&gt;&gt;&gt; nbCol(img)\n5\n&gt;&gt;&gt; negatif(img)\n[[235, 221, 1, 110, 249], [232, 131, 18, 30, 186], [58, 81, 48, 230,\n168], [0, 255, 231, 58, 66]]\n&gt;&gt;&gt; binaire(img,120)\n[[0, 0, 1, 1, 0], [0, 1, 1, 1, 0], [1, 1, 1, 0, 0], [1, 0, 0, 1, 1]]\n</code></pre> \ud83d\udc0d Script Python<pre><code>def nbLig(image):\n    '''renvoie le nombre de lignes de l'image'''\n    return len(image)\n\ndef nbCol(image):\n    '''renvoie la largeur de l'image'''\n    return len(image[0])\n\ndef negatif(image):\n    '''renvoie le negatif de l'image sous la forme\n       d'une liste de listes'''\n\n    # on cree une image de 0 aux memes dimensions que le parametre image\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))]\n\n    for i in range(nbLig(image)):\n        for j in range(nbCol(image)):\n            L[i][j] = 255 - image[i][j]\n    return L\n\ndef binaire(image, seuil):\n    '''renvoie une image binarisee de l'image sous la forme\n       d'une liste de listes contenant des 0 si la valeur\n       du pixel est strictement inferieure au seuil\n       et 1 sinon'''\n\n    # on cree une image de 0 aux memes dimensions que le parametre image\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))]\n\n    for i in range(nbLig(image)):\n        for j in range(nbCol(image)):\n            if image[i][j] &lt; seuil :\n                L[i][j] = 0\n            else:\n                L[i][j] = 1\n    return L\n</code></pre> Markdown<pre><code>On consid\u00e8re une image en 256 niveaux de gris que l\u2019on repr\u00e9sente par une grille de\nnombres, c\u2019est-\u00e0-dire une liste compos\u00e9e de sous-listes toutes de longueurs identiques.\n\n\nLa largeur de l\u2019image est donc la longueur d\u2019une sous-liste et la hauteur de l\u2019image est le\nnombre de sous-listes.\n\n\nChaque sous-liste repr\u00e9sente une ligne de l\u2019image et chaque \u00e9l\u00e9ment des sous-listes est\nun entier compris entre 0 et 255, repr\u00e9sentant l\u2019intensit\u00e9 lumineuse du pixel.\n\n\nLe n\u00e9gatif d\u2019une image est l\u2019image constitu\u00e9e des pixels `x_n` tels que\n`x_n + x_i = 255` o\u00f9 `x_i` est le pixel correspondant de l\u2019image initiale.\n\nCompl\u00e9ter le programme suivant :\n```python linenums='1'\ndef nbLig(image):\n    '''renvoie le nombre de lignes de l'image'''\n    return ...\n\ndef nbCol(image):\n    '''renvoie la largeur de l'image'''\n    return ...\n\ndef negatif(image):\n    '''renvoie le negatif de l'image sous la forme\n       d'une liste de listes'''\n\n    # on cree une image de 0 aux memes dimensions que le parametre image\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))]\n\n    for i in range(nbLig(image)):\n        for j in range(...):\n            L[i][j] = ...\n    return L\n\ndef binaire(image, seuil):\n    '''renvoie une image binarisee de l'image sous la forme\n       d'une liste de listes contenant des 0 si la valeur\n       du pixel est strictement inferieure au seuil\n       et 1 sinon'''\n\n    # on cree une image de 0 aux memes dimensions que le parametre image\n    L = [[0 for k in range(nbCol(image))] for i in range(nbLig(image))]\n\n    for i in range(nbLig(image)):\n        for j in range(...):\n            if image[i][j] &lt; ... :\n                L[i][j] = ...\n            else:\n                L[i][j] = ...\n    return L\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; img=[[20, 34, 254, 145, 6], [23, 124, 237, 225, 69], [197, 174,\n207, 25, 87], [255, 0, 24, 197, 189]]\n&gt;&gt;&gt; nbLig(img)\n4\n&gt;&gt;&gt; nbCol(img)\n5\n&gt;&gt;&gt; negatif(img)\n[[235, 221, 1, 110, 249], [232, 131, 18, 30, 186], [58, 81, 48, 230,\n168], [0, 255, 231, 58, 66]]\n&gt;&gt;&gt; binaire(img,120)\n[[0, 0, 1, 1, 0], [0, 1, 1, 1, 0], [1, 1, 1, 0, 0], [1, 0, 0, 1, 1]]\n</code></pre> <p>```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-06","title":"\u25b6 Sujet 06","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-061","title":"Exercice 06.1","text":"<p>Exercice 06.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Programmer la fonction <code>recherche</code>, prenant en param\u00e8tre un tableau non vide <code>tab</code> (type <code>list</code>) d'entiers et un entier <code>n</code>, et qui renvoie l'indice de la derni\u00e8re occurrence de l'\u00e9l\u00e9ment cherch\u00e9. Si l'\u00e9l\u00e9ment n'est pas pr\u00e9sent, la fonction renvoie la longueur du tableau.</p> <p>Exemples \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche([5, 3],1)\n2\n&gt;&gt;&gt; recherche([2,4],2)\n0\n&gt;&gt;&gt; recherche([2,3,5,2,4],2)\n3\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(tab, n):\n    indice_solution = len(tab)\n    for i in range(len(tab)):\n        if tab[i] == n:\n            indice_solution = i\n    return indice_solution\n</code></pre> \ud83d\udccb Texte<pre><code>Programmer la fonction `recherche`, prenant en param\u00e8tre un tableau non vide `tab` (type `list`) d'entiers et un entier `n`, et qui renvoie l'indice de la **derni\u00e8re** occurrence de l'\u00e9l\u00e9ment cherch\u00e9. Si l'\u00e9l\u00e9ment n'est pas pr\u00e9sent, la fonction renvoie la longueur du tableau.\n\nExemples\n```python\n&gt;&gt;&gt; recherche([5, 3],1)\n2\n&gt;&gt;&gt; recherche([2,4],2)\n0\n&gt;&gt;&gt; recherche([2,3,5,2,4],2)\n3\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-062","title":"Exercice 06.2","text":"<p>Exercice 06.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On souhaite programmer une fonction donnant la distance la plus courte entre un point de d\u00e9part et une liste de points. Les points sont tous \u00e0 coordonn\u00e9es enti\u00e8res. Les points sont donn\u00e9s sous la forme d'un tuple de deux entiers. La liste des points \u00e0 traiter est donc un tableau de tuples.</p> <p>On rappelle que la distance entre deux points du plan de coordonn\u00e9es \\((x;y)\\) et \\((x';y')\\) est donn\u00e9e par la formule :</p> \\[d=\\sqrt{(x-x')^2+(y-y')^2}\\] <p>On importe pour cela la fonction racine carr\u00e9e (<code>sqrt</code>) du module <code>math</code> de Python.</p> <p>Compl\u00e9ter le code des fonctions <code>distance</code> et <code>plus_courte_distance</code> fournies ci-dessous pour qu\u2019elles r\u00e9pondent \u00e0 leurs sp\u00e9cifications.</p> \ud83d\udc0d Script Python<pre><code>from math import sqrt     # import de la fonction racine carr\u00e9e\n\ndef distance(point1, point2):\n    \"\"\" Calcule et renvoie la distance entre deux points. \"\"\"\n    return sqrt((...)**2 + (...)**2)\n\ndef plus_courte_distance(tab, depart):\n    \"\"\" Renvoie le point du tableau tab se trouvant \u00e0 la plus courte distance du point depart.\"\"\"\n    point = tab[0]\n    min_dist = ...\n    for i in range (1, ...):\n        if distance(tab[i], depart)...:\n            point = ...\n            min_dist = ...\n    return point\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; distance((1, 0), (5, 3))\n5.0\n&gt;&gt;&gt; distance((1, 0), (0, 1))\n1.4142135623730951\n&gt;&gt;&gt; plus_courte_distance([(7, 9), (2, 5), (5, 2)], (0, 0))\n(2, 5)\n&gt;&gt;&gt; plus_courte_distance([(7, 9), (2, 5), (5, 2)], (5, 2))\n(5, 2)\n</code></pre> \ud83d\udc0d Script Python<pre><code>from math import sqrt\n\ndef distance(point1, point2):\n    \"\"\" Calcule et renvoie la distance entre deux points. \"\"\"\n    return sqrt((point1[0] - point2[0])**2 + ((point1[1] - point2[1]))**2)\n\ndef plus_courte_distance(tab, depart):\n    \"\"\" Renvoie le point du tableau tab se trouvant \u00e0 la plus courte distance du point depart.\"\"\"\n    point = tab[0]\n    min_dist = distance(point, depart)\n    for i in range (1, len(tab)):\n        if distance(tab[i], depart) &lt; min_dist:\n            point = tab[i]\n            min_dist = distance(tab[i], depart)\n    return point\n</code></pre> Markdown<pre><code>On souhaite programmer une fonction donnant la distance la plus courte entre un point\nde d\u00e9part et une liste de points. Les points sont tous \u00e0 coordonn\u00e9es enti\u00e8res.\nLes points sont donn\u00e9s sous la forme d'un tuple de deux entiers.\nLa liste des points \u00e0 traiter est donc un tableau de tuples.\n\nOn rappelle que la distance entre deux points du plan de coordonn\u00e9es $(x;y)$ et $(x';y')$\nest donn\u00e9e par la formule :\n\n$$d=\\sqrt{(x-x')^2+(y-y')^2}$$\n\nOn importe pour cela la fonction racine carr\u00e9e (`sqrt`) du module `math` de Python.\n\n\nCompl\u00e9ter le code des fonctions `distance` et `plus_courte_distance` fournies ci-dessous pour qu\u2019elles r\u00e9pondent \u00e0 leurs sp\u00e9cifications.\n\n```python linenums='1'\nfrom math import sqrt     # import de la fonction racine carr\u00e9e\n\ndef distance(point1, point2):\n    \"\"\" Calcule et renvoie la distance entre deux points. \"\"\"\n    return sqrt((...)**2 + (...)**2)\n\ndef plus_courte_distance(tab, depart):\n    \"\"\" Renvoie le point du tableau tab se trouvant \u00e0 la plus courte distance du point depart.\"\"\"\n    point = tab[0]\n    min_dist = ...\n    for i in range (1, ...):\n        if distance(tab[i], depart)...:\n            point = ...\n            min_dist = ...\n    return point\n</code></pre> <p>Exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; distance((1, 0), (5, 3))\n5.0\n&gt;&gt;&gt; distance((1, 0), (0, 1))\n1.4142135623730951\n&gt;&gt;&gt; plus_courte_distance([(7, 9), (2, 5), (5, 2)], (0, 0))\n(2, 5)\n&gt;&gt;&gt; plus_courte_distance([(7, 9), (2, 5), (5, 2)], (5, 2))\n(5, 2)\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-07","title":"\u25b6 Sujet 07","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-071","title":"Exercice 07.1","text":"<p>Exercice 07.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Programmer la fonction <code>fusion</code> prenant en param\u00e8tres deux tableaux non vides <code>tab1</code> et <code>tab2</code> (type <code>list</code>) d'entiers, chacun dans l\u2019ordre croissant, et renvoyant un tableau tri\u00e9 dans l\u2019ordre croissant et contenant l\u2019ensemble des valeurs de <code>tab1</code> et <code>tab2</code>.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; fusion([3, 5], [2, 5])\n[2, 3, 5, 5]\n&gt;&gt;&gt; fusion([-2, 4], [-3, 5, 10])\n[-3, -2, 4, 5, 10]\n&gt;&gt;&gt; fusion([4], [2, 6])\n[2, 4, 6]\n</code></pre> \ud83d\udc0d Script Python<pre><code>def fusion(tab1, tab2):\n    tab_fusion = []\n    i1 = 0\n    i2 = 0\n    while i1 &lt; len(tab1) and i2 &lt; len(tab2):\n        if tab1[i1] &lt; tab2[i2]:\n            tab_fusion.append(tab1[i1])\n            i1 += 1\n        else:\n            tab_fusion.append(tab2[i2])\n            i2 += 1\n\n    if i1 == len(tab1):\n        while i2 &lt; len(tab2):\n            tab_fusion.append(tab2[i2])\n            i2 += 1\n    else:\n        while i1 &lt; len(tab1):\n            tab_fusion.append(tab1[i1])\n            i1 += 1        \n\n    return tab_fusion\n</code></pre> \ud83d\udccb Texte<pre><code>Programmer la fonction `fusion` prenant en param\u00e8tres deux tableaux non vides `tab1` et `tab2`\n(type `list`) d'entiers, chacun dans l\u2019ordre croissant, et renvoyant un tableau tri\u00e9 dans l\u2019ordre\ncroissant et contenant l\u2019ensemble des valeurs de `tab1` et `tab2`.\n\nExemples :\n\n```python\n&gt;&gt;&gt; fusion([3, 5], [2, 5])\n[2, 3, 5, 5]\n&gt;&gt;&gt; fusion([-2, 4], [-3, 5, 10])\n[-3, -2, 4, 5, 10]\n&gt;&gt;&gt; fusion([4], [2, 6])\n[2, 4, 6]\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-072","title":"Exercice 07.2","text":"<p>Exercice 07.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Le but de cet exercice est d\u2019\u00e9crire une fonction r\u00e9cursive <code>traduire_romain</code> qui prend en param\u00e8tre une cha\u00eene de caract\u00e8res, non vide, repr\u00e9sentant un nombre \u00e9crit en chiffres romains et qui renvoie son \u00e9criture d\u00e9cimale.</p> <p>Les chiffres romains consid\u00e9r\u00e9s sont : I, V, X, L, C, D et M. Ils repr\u00e9sentent respectivement les nombres 1, 5, 10, 50, 100, 500, et 1000 en base dix.</p> <p>On dispose d\u2019un dictionnaire <code>romains</code> dont les cl\u00e9s sont les caract\u00e8res apparaissant dans l\u2019\u00e9criture en chiffres romains et les valeurs sont les nombres entiers associ\u00e9s en \u00e9criture d\u00e9cimale :</p> <p><code>romains = {\"I\":1, \"V\":5, \"X\":10, \"L\":50, \"C\":100, \"D\":500, \"M\":1000}</code></p> <p>Le code de la fonction <code>traduire_romain</code> fournie repose sur le principe suivant :</p> <ul> <li> <p>la valeur d\u2019un caract\u00e8re est ajout\u00e9e \u00e0 la valeur du reste de la cha\u00eene si ce caract\u00e8re a une valeur sup\u00e9rieure (ou \u00e9gale) \u00e0 celle du caract\u00e8re qui le suit ;</p> </li> <li> <p>la valeur d\u2019un caract\u00e8re est retranch\u00e9e \u00e0 la valeur du reste de la cha\u00eene si ce caract\u00e8re a une valeur strictement inf\u00e9rieure \u00e0 celle du caract\u00e8re qui le suit.</p> </li> </ul> <p>Ainsi, XIV correspond au nombre 10 + 5 - 1 puisque :</p> <ul> <li> <p>la valeur de X (10) est sup\u00e9rieure \u00e0 celle de I (1), on ajoute donc 10 \u00e0 la valeur du reste de la cha\u00eene, c\u2019est-\u00e0-dire IV ;</p> </li> <li> <p>la valeur de I (1) est strictement inf\u00e9rieure \u00e0 celle de V (5), on soustrait donc 1 \u00e0 la valeur du reste de la cha\u00eene, c\u2019est-\u00e0-dire V.</p> </li> </ul> <p>On rappelle que pour priver une cha\u00eene de caract\u00e8res de son premier caract\u00e8re, on utilisera l\u2019instruction :</p> <p><code>nom_de_variable[1:]</code></p> <p>Par exemple, si la variable <code>mot</code> contient la cha\u00eene <code>\"CDI\"</code>, <code>mot[1:]</code> renvoie <code>\"DI\"</code>.</p> \ud83d\udc0d Script Python<pre><code>romains = {\"I\":1, \"V\":5, \"X\":10, \"L\":50, \"C\":100, \"D\":500, \"M\":1000}\n\ndef traduire_romain(nombre):\n    \"\"\" Renvoie l\u2019\u00e9criture d\u00e9cimale du nombre donn\u00e9 en chiffres\n    romains \"\"\"\n    if len(nombre) == 1:\n        return ...\n    elif romains[nombre[0]] &gt;= ...\n        return romains[nombre[0]] + ...\n    else:\n        return ...\n</code></pre> <p>Compl\u00e9ter le code de la fonction <code>traduire_romain</code> et le tester.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; traduire_romain(\"XIV\")\n14\n&gt;&gt;&gt; traduire_romain(\"CXLII\")\n142\n&gt;&gt;&gt; traduire_romain(\"MMXXIII\")\n2023\n</code></pre> \ud83d\udc0d Script Python<pre><code>romains = {\"I\":1, \"V\":5, \"X\":10, \"L\":50, \"C\":100, \"D\":500, \"M\":1000}\n\ndef traduire_romain(nombre):\n    \"\"\" Renvoie l\u2019\u00e9criture d\u00e9cimale du nombre donn\u00e9 en chiffres\n    romains \"\"\"\n    if len(nombre) == 1:\n        return romains[nombre]\n    elif romains[nombre[0]] &gt;= romains[nombre[1]]:\n        return romains[nombre[0]] + traduire_romain(nombre[1:])\n    else:\n        return traduire_romain(nombre[1:]) - romains[nombre[0]]\n</code></pre> Markdown<pre><code>Le but de cet exercice est d\u2019\u00e9crire une fonction r\u00e9cursive `traduire_romain` qui prend\nen param\u00e8tre une cha\u00eene de caract\u00e8res, non vide, repr\u00e9sentant un nombre \u00e9crit en\nchiffres romains et qui renvoie son \u00e9criture d\u00e9cimale.\n\n\nLes chiffres romains consid\u00e9r\u00e9s sont : I, V, X, L, C, D et M. Ils repr\u00e9sentent\nrespectivement les nombres 1, 5, 10, 50, 100, 500, et 1000 en base dix.\n\n\nOn dispose d\u2019un dictionnaire `romains` dont les cl\u00e9s sont les caract\u00e8res apparaissant\ndans l\u2019\u00e9criture en chiffres romains et les valeurs sont les nombres entiers associ\u00e9s en\n\u00e9criture d\u00e9cimale :\n\n\n`romains = {\"I\":1, \"V\":5, \"X\":10, \"L\":50, \"C\":100, \"D\":500, \"M\":1000}`\n\n\nLe code de la fonction `traduire_romain` fournie repose sur le\nprincipe suivant :\n\n- la valeur d\u2019un caract\u00e8re est ajout\u00e9e \u00e0 la valeur du reste de la cha\u00eene si ce\ncaract\u00e8re a une valeur sup\u00e9rieure (ou \u00e9gale) \u00e0 celle du caract\u00e8re qui le suit ;\n\n- la valeur d\u2019un caract\u00e8re est retranch\u00e9e \u00e0 la valeur du reste de la cha\u00eene si ce\ncaract\u00e8re a une valeur strictement inf\u00e9rieure \u00e0 celle du caract\u00e8re qui le suit.\n\nAinsi, XIV correspond au nombre 10 + 5 - 1 puisque :\n\n- la valeur de X (10) est sup\u00e9rieure \u00e0 celle de I (1), on ajoute donc 10 \u00e0 la valeur du\nreste de la cha\u00eene, c\u2019est-\u00e0-dire IV ;\n\n- la valeur de I (1) est strictement inf\u00e9rieure \u00e0 celle de V (5), on soustrait donc 1 \u00e0\nla valeur du reste de la cha\u00eene, c\u2019est-\u00e0-dire V.\n\nOn rappelle que pour priver une cha\u00eene de caract\u00e8res de son premier caract\u00e8re, on\nutilisera l\u2019instruction :\n\n`nom_de_variable[1:]`\n\nPar exemple, si la variable `mot` contient la cha\u00eene `\"CDI\"`, `mot[1:]` renvoie `\"DI\"`.\n\n```python linenums='1'\nromains = {\"I\":1, \"V\":5, \"X\":10, \"L\":50, \"C\":100, \"D\":500, \"M\":1000}\n\ndef traduire_romain(nombre):\n    \"\"\" Renvoie l\u2019\u00e9criture d\u00e9cimale du nombre donn\u00e9 en chiffres\n    romains \"\"\"\n    if len(nombre) == 1:\n        return ...\n    elif romains[nombre[0]] &gt;= ...\n        return romains[nombre[0]] + ...\n    else:\n        return ...\n</code></pre> <p>Compl\u00e9ter le code de la fonction <code>traduire_romain</code> et le tester.</p> <p>Exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; traduire_romain(\"XIV\")\n14\n&gt;&gt;&gt; traduire_romain(\"CXLII\")\n142\n&gt;&gt;&gt; traduire_romain(\"MMXXIII\")\n2023\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-08","title":"\u25b6 Sujet 08","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-081","title":"Exercice 08.1","text":"<p>Exercice 08.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Sur le r\u00e9seau social TipTop, on s\u2019int\u00e9resse au nombre de \u00ab like \u00bb des abonn\u00e9s. Les donn\u00e9es sont stock\u00e9es dans des dictionnaires o\u00f9 les cl\u00e9s sont les pseudos et les valeurs correspondantes sont les nombres de \u00ab like \u00bb comme ci-dessous :</p> <p><code>{'Bob': 102, 'Ada': 201, 'Alice': 103, 'Tim': 50}</code></p> <p>\u00c9crire une fonction <code>max_dico</code> qui :</p> <ul> <li>Prend en param\u00e8tre un dictionnaire <code>dico</code> non vide dont les cl\u00e9s sont des cha\u00eenes de caract\u00e8res et les valeurs associ\u00e9es sont des entiers ;</li> <li>Renvoie un tuple dont :<ul> <li>La premi\u00e8re valeur est la cl\u00e9 du dictionnaire associ\u00e9e \u00e0 la valeur maximale ;</li> <li>La seconde valeur est la premi\u00e8re valeur maximale pr\u00e9sente dans le dictionnaire.</li> </ul> </li> </ul> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; max_dico({'Bob': 102, 'Ada': 201, 'Alice': 103, 'Tim': 50})\n('Ada', 201)\n&gt;&gt;&gt; max_dico({'Alan': 222, 'Ada': 201, 'Eve': 220, 'Tim': 50})\n('Alan', 222)\n</code></pre> \ud83d\udc0d Script Python<pre><code>def max_dico(dico):\n    cle_max = ''\n    val_max = 0\n    for cle in dico:\n        if dico[cle] &gt; val_max:\n            val_max = dico[cle]\n            cle_max = cle\n    return (cle_max, val_max)\n</code></pre> \ud83d\udccb Texte<pre><code>Sur le r\u00e9seau social TipTop, on s\u2019int\u00e9resse au nombre de \u00ab like \u00bb des abonn\u00e9s.\nLes donn\u00e9es sont stock\u00e9es dans des dictionnaires o\u00f9 les cl\u00e9s sont les pseudos et les valeurs\ncorrespondantes sont les nombres de \u00ab like \u00bb comme ci-dessous :\n\n`{'Bob': 102, 'Ada': 201, 'Alice': 103, 'Tim': 50}`\n\n\u00c9crire une fonction `max_dico` qui :\n\n- Prend en param\u00e8tre un dictionnaire `dico` non vide dont les cl\u00e9s sont des cha\u00eenes de\ncaract\u00e8res et les valeurs associ\u00e9es sont des entiers ;\n- Renvoie un tuple dont :\n    - La premi\u00e8re valeur est la cl\u00e9 du dictionnaire associ\u00e9e \u00e0 la valeur maximale ;\n    - La seconde valeur est la premi\u00e8re valeur maximale pr\u00e9sente dans le\ndictionnaire.\n\nExemples :\n\n```python\n&gt;&gt;&gt; max_dico({'Bob': 102, 'Ada': 201, 'Alice': 103, 'Tim': 50})\n('Ada', 201)\n&gt;&gt;&gt; max_dico({'Alan': 222, 'Ada': 201, 'Eve': 220, 'Tim': 50})\n('Alan', 222)\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-082","title":"Exercice 08.2","text":"<p>Exercice 08.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Nous avons l\u2019habitude de noter les expressions arithm\u00e9tiques avec des parenth\u00e8ses comme par exemple : (2 + 3) \u00d7 5. </p> <p>Il existe une autre notation utilis\u00e9e par certaines calculatrices, appel\u00e9e notation postfixe, qui n\u2019utilise pas de parenth\u00e8ses. L\u2019expression arithm\u00e9tique pr\u00e9c\u00e9dente est alors obtenue en saisissant successivement 2, puis 3, puis l\u2019op\u00e9rateur +, puis 5, et enfin l\u2019op\u00e9rateur \u00d7. On mod\u00e9lise cette saisie par le tableau [2, 3, '+', 5, '*']. </p> <p>Autre exemple, la notation postfixe de 3 \u00d7 2 + 5 est mod\u00e9lis\u00e9e par le tableau : </p> <p>[3, 2, '*', 5, '+']. </p> <p>D\u2019une mani\u00e8re plus g\u00e9n\u00e9rale, la valeur associ\u00e9e \u00e0 une expression arithm\u00e9tique en notation postfixe est d\u00e9termin\u00e9e \u00e0 l\u2019aide d\u2019une pile en parcourant l\u2019expression arithm\u00e9tique de gauche \u00e0 droite de la fa\u00e7on suivante :</p> <ul> <li>Si l\u2019\u00e9l\u00e9ment parcouru est un nombre, on le place au sommet de la pile ;</li> <li>Si l\u2019\u00e9l\u00e9ment parcouru est un op\u00e9rateur, on r\u00e9cup\u00e8re les deux \u00e9l\u00e9ments situ\u00e9s au sommet de la pile et on leur applique l\u2019op\u00e9rateur. On place alors le r\u00e9sultat au sommet de la pile.</li> <li>\u00c0 la fin du parcours, il reste alors un seul \u00e9l\u00e9ment dans la pile qui est le r\u00e9sultat de l\u2019expression arithm\u00e9tique.</li> </ul> <p>Dans le cadre de cet exercice, on se limitera aux op\u00e9rations \u00d7 et +.</p> <p>Pour cet exercice, on dispose d\u2019une classe <code>Pile</code> qui impl\u00e9mente les m\u00e9thodes de base sur la structure de pile.</p> <p>Compl\u00e9ter le script de la fonction <code>eval_expression</code> qui re\u00e7oit en param\u00e8tre une liste python repr\u00e9sentant la notation postfixe d\u2019une expression arithm\u00e9tique et qui renvoie sa valeur associ\u00e9e.</p> \ud83d\udc0d Script Python<pre><code>class Pile:\n    \"\"\"Classe d\u00e9finissant une structure de pile.\"\"\"\n    def __init__(self):\n        self.contenu = []\n\n    def est_vide(self):\n        \"\"\"Renvoie le bool\u00e9en True si la pile est vide, False sinon.\"\"\"\n        return self.contenu == []\n\n    def empiler(self, v):\n        \"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\"\n        self.contenu.append(v)\n\n    def depiler(self):\n        \"\"\"\n        Retire et renvoie l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile,\n        si la pile n\u2019est pas vide.\n        \"\"\"\n        if not self.est_vide():\n            return self.contenu.pop()\n\n\ndef eval_expression(tab):\n    p = Pile()\n    for ... in tab:\n        if element != '+' ... element != '*':\n            p.empiler(...)\n        else:\n            if element == ...:\n                resultat = p.depiler() + ...\n            else:\n                resultat = ...\n            p.empiler(...)\n    return ...\n</code></pre> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; eval_expression([2, 3, '+', 5, '*'])\n25\n</code></pre> \ud83d\udc0d Script Python<pre><code>class Pile:\n    \"\"\"Classe d\u00e9finissant une structure de pile.\"\"\"\n    def __init__(self):\n        self.contenu = []\n\n    def est_vide(self):\n        \"\"\"Renvoie le bool\u00e9en True si la pile est vide, False sinon.\"\"\"\n        return self.contenu == []\n\n    def empiler(self, v):\n        \"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\"\n        self.contenu.append(v)\n\n    def depiler(self):\n        \"\"\"\n        Retire et renvoie l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile,\n        si la pile n\u2019est pas vide.\n        \"\"\"\n        if not self.est_vide():\n            return self.contenu.pop()\n\n\ndef eval_expression(tab):\n    p = Pile()\n    for element in tab:\n        if element != '+' and element != '*':\n            p.empiler(element)\n        else:\n            if element == '+':\n                resultat = p.depiler() + p.depiler()\n            else:\n                resultat = p.depiler() * p.depiler()\n            p.empiler(resultat)\n    return p.depiler()\n</code></pre> Markdown<pre><code>Nous avons l\u2019habitude de noter les expressions arithm\u00e9tiques avec des parenth\u00e8ses comme\npar exemple : (2 + 3) \u00d7 5. \n\nIl existe une autre notation utilis\u00e9e par certaines calculatrices, appel\u00e9e notation postfixe, qui n\u2019utilise pas de parenth\u00e8ses. L\u2019expression arithm\u00e9tique pr\u00e9c\u00e9dente est alors obtenue en\nsaisissant successivement 2, puis 3, puis l\u2019op\u00e9rateur +, puis 5, et enfin l\u2019op\u00e9rateur \u00d7. On\nmod\u00e9lise cette saisie par le tableau [2, 3, '+', 5, '*']. \n\nAutre exemple, la notation postfixe de 3 \u00d7 2 + 5 est mod\u00e9lis\u00e9e par le tableau : \n\n[3, 2, '*', 5, '+']. \n\n\nD\u2019une mani\u00e8re plus g\u00e9n\u00e9rale, la valeur associ\u00e9e \u00e0 une expression arithm\u00e9tique en notation\npostfixe est d\u00e9termin\u00e9e \u00e0 l\u2019aide d\u2019une pile en parcourant l\u2019expression arithm\u00e9tique de gauche\n\u00e0 droite de la fa\u00e7on suivante :\n\n- Si l\u2019\u00e9l\u00e9ment parcouru est un nombre, on le place au sommet de la pile ;\n- Si l\u2019\u00e9l\u00e9ment parcouru est un op\u00e9rateur, on r\u00e9cup\u00e8re les deux \u00e9l\u00e9ments situ\u00e9s au\nsommet de la pile et on leur applique l\u2019op\u00e9rateur. On place alors le r\u00e9sultat au sommet\nde la pile.\n- \u00c0 la fin du parcours, il reste alors un seul \u00e9l\u00e9ment dans la pile qui est le r\u00e9sultat de\nl\u2019expression arithm\u00e9tique.\n\n\nDans le cadre de cet exercice, on se limitera aux op\u00e9rations \u00d7 et +.\n\n\nPour cet exercice, on dispose d\u2019une classe `Pile` qui impl\u00e9mente les m\u00e9thodes de base sur la\nstructure de pile.\n\nCompl\u00e9ter le script de la fonction `eval_expression` qui re\u00e7oit en param\u00e8tre une liste python\nrepr\u00e9sentant la notation postfixe d\u2019une expression arithm\u00e9tique et qui renvoie sa valeur\nassoci\u00e9e.\n\n```python linenums='1'\nclass Pile:\n    \"\"\"Classe d\u00e9finissant une structure de pile.\"\"\"\n    def __init__(self):\n        self.contenu = []\n\n    def est_vide(self):\n        \"\"\"Renvoie le bool\u00e9en True si la pile est vide, False sinon.\"\"\"\n        return self.contenu == []\n\n    def empiler(self, v):\n        \"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\"\n        self.contenu.append(v)\n\n    def depiler(self):\n        \"\"\"\n        Retire et renvoie l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile,\n        si la pile n\u2019est pas vide.\n        \"\"\"\n        if not self.est_vide():\n            return self.contenu.pop()\n\n\ndef eval_expression(tab):\n    p = Pile()\n    for ... in tab:\n        if element != '+' ... element != '*':\n            p.empiler(...)\n        else:\n            if element == ...:\n                resultat = p.depiler() + ...\n            else:\n                resultat = ...\n            p.empiler(...)\n    return ...\n</code></pre> <p>Exemple :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; eval_expression([2, 3, '+', 5, '*'])\n25\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-09","title":"\u25b6 Sujet 09","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-091","title":"Exercice 09.1","text":"<p>Exercice 09.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Programmer la fonction <code>multiplication</code>, prenant en param\u00e8tres deux nombres entiers <code>n1</code> et <code>n2</code>, et qui renvoie le produit de ces deux nombres. Les seules op\u00e9rations autoris\u00e9es sont l\u2019addition et la soustraction. </p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; multiplication(3,5)\n15\n&gt;&gt;&gt; multiplication(-4,-8)\n32\n&gt;&gt;&gt; multiplication(-2,6)\n-12\n&gt;&gt;&gt; multiplication(-2,0)\n0\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def multiplication(n1, n2):\n    if n1 &lt; 0:\n        return -multiplication(-n1, n2)\n    if n2 &lt; 0:\n        return -multiplication(n1, -n2)\n    resultat = 0\n    for _ in range(n2):\n        resultat += n1\n    return resultat\n</code></pre> \ud83d\udccb Texte<pre><code>Programmer la fonction `multiplication`, prenant en param\u00e8tres deux nombres entiers\n`n1` et `n2`, et qui renvoie le produit de ces deux nombres.\nLes seules op\u00e9rations autoris\u00e9es sont l\u2019addition et la soustraction.\n\nExemples :\n```python\n&gt;&gt;&gt; multiplication(3,5)\n15\n&gt;&gt;&gt; multiplication(-4,-8)\n32\n&gt;&gt;&gt; multiplication(-2,6)\n-12\n&gt;&gt;&gt; multiplication(-2,0)\n0\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-092","title":"Exercice 09.2","text":"<p>Exercice 09.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Soit <code>tab</code> un tableau non vide d'entiers tri\u00e9s dans l'ordre croissant et <code>n</code> un entier.</p> <p>La fonction <code>chercher</code> ci-dessous doit renvoyer un indice o\u00f9 la valeur <code>n</code> appara\u00eet dans <code>tab</code> si cette valeur y figure et <code>None</code> sinon. </p> <p>Les param\u00e8tres de la fonction sont :</p> <ul> <li><code>tab</code>, le tableau dans lequel s'effectue la recherche ;</li> <li><code>n</code>, l'entier \u00e0 chercher dans le tableau ;</li> <li><code>i</code>, l'indice de d\u00e9but de la partie du tableau o\u00f9 s'effectue la recherche ;</li> <li><code>j</code>, l'indice de fin de la partie du tableau o\u00f9 s'effectue la recherche.</li> </ul> <p>L\u2019algorithme demand\u00e9 est une recherche dichotomique r\u00e9cursive.</p> <p>Recopier et compl\u00e9ter le code de la fonction <code>chercher</code> suivante :</p> \ud83d\udc0d Script Python<pre><code>def chercher(tab, n, i, j):\n    if i &lt; 0 or j &gt; len(tab) :\n        return None\n    if i &gt; j :\n        return None\n    m = (i + j) // ...\n    if ... &lt; n :\n        return chercher(tab, n, ... , ...)\n    elif ... &gt; n :\n        return chercher(tab, n, ... , ... )\n    else :\n        return ...\n</code></pre> <p>L'ex\u00e9cution du code doit donner : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 7, 0, 10)\n\n&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 7, 0, 5)\n\n&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 9, 0, 5)\n4\n&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 6, 0, 5)\n2\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def chercher(tab, n, i, j):\n    if i &lt; 0 or j &gt; len(tab) :\n        return None\n    if i &gt; j :\n        return None\n    m = (i + j) // 2\n    if tab[m] &lt; n :\n        return chercher(tab, n, m+1 , j)\n    elif tab[m] &gt; n :\n        return chercher(tab, n, i , m-1 )\n    else :\n        return m\n</code></pre> Markdown<pre><code>Soit `tab` un tableau non vide d'entiers tri\u00e9s dans l'ordre croissant et `n` un entier.\n\nLa fonction `chercher` ci-dessous doit renvoyer un indice o\u00f9 la valeur `n`\nappara\u00eet dans `tab` si cette valeur y figure et `None` sinon. \n\nLes param\u00e8tres de la fonction sont :\n\n- `tab`, le tableau dans lequel s'effectue la recherche ;\n- `n`, l'entier \u00e0 chercher dans le tableau ;\n- `i`, l'indice de d\u00e9but de la partie du tableau o\u00f9 s'effectue la recherche ;\n- `j`, l'indice de fin de la partie du tableau o\u00f9 s'effectue la recherche.\n\nL\u2019algorithme demand\u00e9 est une recherche dichotomique r\u00e9cursive.\n\nRecopier et compl\u00e9ter le code de la fonction `chercher` suivante :\n\n```python linenums='1'\ndef chercher(tab, n, i, j):\n    if i &lt; 0 or j &gt; len(tab) :\n        return None\n    if i &gt; j :\n        return None\n    m = (i + j) // ...\n    if ... &lt; n :\n        return chercher(tab, n, ... , ...)\n    elif ... &gt; n :\n        return chercher(tab, n, ... , ... )\n    else :\n        return ...\n</code></pre> <p>L'ex\u00e9cution du code doit donner : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 7, 0, 10)\n\n&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 7, 0, 5)\n\n&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 9, 0, 5)\n4\n&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 6, 0, 5)\n2\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-10","title":"\u25b6 Sujet 10","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-101","title":"Exercice 10.1","text":"<p>Exercice 10.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire la fonction <code>maxliste</code>, prenant en param\u00e8tre un tableau non vide de nombres <code>tab</code> (de type <code>list</code>) et renvoyant le plus grand \u00e9l\u00e9ment de ce tableau.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; maxliste([98, 12, 104, 23, 131, 9])\n131\n&gt;&gt;&gt; maxliste([-27, 24, -3, 15])\n24\n</code></pre> \ud83d\udc0d Script Python<pre><code>def maxliste(tab):\n    maximum = tab[0]\n    for element in tab:\n        if element &gt; maximum:\n            maximum = element\n    return maximum\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire la fonction `maxliste`, prenant en param\u00e8tre un tableau non vide de nombres `tab` (de type\n`list`) et renvoyant le plus grand \u00e9l\u00e9ment de ce tableau.\n\nExemples :\n\n```python\n&gt;&gt;&gt; maxliste([98, 12, 104, 23, 131, 9])\n131\n&gt;&gt;&gt; maxliste([-27, 24, -3, 15])\n24\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-102","title":"Exercice 10.2","text":"<p>Exercice 10.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On dispose de cha\u00eenes de caract\u00e8res contenant uniquement des parenth\u00e8ses ouvrantes et fermantes. </p> <p>Un parenth\u00e9sage est correct si :</p> <ul> <li>le nombre de parenth\u00e8ses ouvrantes de la cha\u00eene est \u00e9gal au nombre de parenth\u00e8ses fermantes.</li> <li>en parcourant la cha\u00eene de gauche \u00e0 droite, le nombre de parenth\u00e8ses d\u00e9j\u00e0 ouvertes doit \u00eatre, \u00e0 tout moment, sup\u00e9rieur ou \u00e9gal au nombre de parenth\u00e8ses d\u00e9j\u00e0 ferm\u00e9es.</li> </ul> <p>Ainsi, <code>((()())(()))</code> est un parenth\u00e9sage correct. </p> <p>Les parenth\u00e9sages <code>())(()</code> et <code>(())(()</code> sont, eux, incorrects.</p> <p>On dispose du code de la classe <code>Pile</code> suivant :</p> \ud83d\udc0d Script Python<pre><code>class Pile:\n    \"\"\" Classe d\u00e9finissant une pile \"\"\"\n    def __init__(self):\n        self.valeurs = []\n\n    def est_vide(self):\n        \"\"\"Renvoie True si la pile est vide, False sinon\"\"\"\n        return self.valeurs == []\n\n    def empiler(self, c):\n        \"\"\"Place l\u2019\u00e9l\u00e9ment c au sommet de la pile\"\"\"\n        self.valeurs.append(c)\n\n    def depiler(self):\n        \"\"\"Supprime l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile, \u00e0 condition qu\u2019elle soit non vide\"\"\"\n        if self.est_vide() == False:\n            self.valeurs.pop()\n</code></pre> <p>On souhaite programmer une fonction parenthesage qui prend en param\u00e8tre une cha\u00eene de caract\u00e8res <code>ch</code> form\u00e9e de parenth\u00e8ses et renvoie <code>True</code> si la cha\u00eene est bien parenth\u00e9s\u00e9e et <code>False</code> sinon.</p> <p>Cette fonction utilise une pile et suit le principe suivant : en parcourant la cha\u00eene de gauche \u00e0 droite, si on trouve une parenth\u00e8se ouvrante, on l\u2019empile au sommet de la pile et si on trouve une parenth\u00e8se fermante, on d\u00e9pile (si possible) la parenth\u00e8se ouvrante stock\u00e9e au sommet de la pile. </p> <p>La cha\u00eene est alors bien parenth\u00e9s\u00e9e si, \u00e0 la fin du parcours, la pile est vide. </p> <p>Elle est, par contre, mal parenth\u00e9s\u00e9e : </p> <ul> <li>si dans le parcours, on trouve une parenth\u00e8se fermante, alors que la pile est vide ;</li> <li>ou si, \u00e0 la fin du parcours, la pile n\u2019est pas vide.</li> </ul> \ud83d\udc0d Script Python<pre><code>def parenthesage(ch):\n    \"\"\"Renvoie True si la cha\u00eene ch est bien parenth\u00e9s\u00e9e et False sinon\"\"\"\n    p = Pile()\n    for c in ch:\n        if c == ...:\n            p.empiler(c)\n        elif c == ...:\n            if p.est_vide():\n                return ...\n            else:\n                ...\n    return p.est_vide()\n</code></pre> <p>Compl\u00e9ter le code de la fonction <code>parenthesage</code>.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; parenthesage(\"((()())(()))\")\nTrue\n&gt;&gt;&gt; parenthesage(\"())(()\")\nFalse\n&gt;&gt;&gt; parenthesage(\"(())(()\")\nFalse\n</code></pre> \ud83d\udc0d Script Python<pre><code>class Pile:\n    \"\"\" Classe d\u00e9finissant une pile \"\"\"\n    def __init__(self):\n        self.valeurs = []\n\n    def est_vide(self):\n        \"\"\"Renvoie True si la pile est vide, False sinon\"\"\"\n        return self.valeurs == []\n\n    def empiler(self, c):\n        \"\"\"Place l\u2019\u00e9l\u00e9ment c au sommet de la pile\"\"\"\n        self.valeurs.append(c)\n\n    def depiler(self):\n        \"\"\"Supprime l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile, \u00e0 condition qu\u2019elle soit non vide\"\"\"\n        if self.est_vide() == False:\n            self.valeurs.pop()\n\ndef parenthesage(ch):\n    \"\"\"Renvoie True si la cha\u00eene ch est bien parenth\u00e9s\u00e9e et False sinon\"\"\"\n    p = Pile()\n    for c in ch:\n        if c == '(':\n            p.empiler(c)\n        elif c == ')':\n            if p.est_vide():\n                return False\n            else:\n                p.depiler()\n    return p.est_vide()\n</code></pre> Markdown<pre><code>On dispose de cha\u00eenes de caract\u00e8res contenant uniquement des parenth\u00e8ses ouvrantes et\nfermantes. \n\nUn parenth\u00e9sage est correct si :\n\n- le nombre de parenth\u00e8ses ouvrantes de la cha\u00eene est \u00e9gal au nombre de parenth\u00e8ses\nfermantes.\n- en parcourant la cha\u00eene de gauche \u00e0 droite, le nombre de parenth\u00e8ses d\u00e9j\u00e0 ouvertes doit\n\u00eatre, \u00e0 tout moment, sup\u00e9rieur ou \u00e9gal au nombre de parenth\u00e8ses d\u00e9j\u00e0 ferm\u00e9es.\n\n\nAinsi, `((()())(()))` est un parenth\u00e9sage correct. \n\nLes parenth\u00e9sages `())(()` et `(())(()` sont, eux, incorrects.\n\n\nOn dispose du code de la classe `Pile` suivant :\n\n```python linenums='1'\nclass Pile:\n    \"\"\" Classe d\u00e9finissant une pile \"\"\"\n    def __init__(self):\n        self.valeurs = []\n\n    def est_vide(self):\n        \"\"\"Renvoie True si la pile est vide, False sinon\"\"\"\n        return self.valeurs == []\n\n    def empiler(self, c):\n        \"\"\"Place l\u2019\u00e9l\u00e9ment c au sommet de la pile\"\"\"\n        self.valeurs.append(c)\n\n    def depiler(self):\n        \"\"\"Supprime l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile, \u00e0 condition qu\u2019elle soit non vide\"\"\"\n        if self.est_vide() == False:\n            self.valeurs.pop()\n</code></pre> <p>On souhaite programmer une fonction parenthesage qui prend en param\u00e8tre une cha\u00eene de caract\u00e8res <code>ch</code> form\u00e9e de parenth\u00e8ses et renvoie <code>True</code> si la cha\u00eene est bien parenth\u00e9s\u00e9e et <code>False</code> sinon.</p> <p>Cette fonction utilise une pile et suit le principe suivant : en parcourant la cha\u00eene de gauche \u00e0 droite, si on trouve une parenth\u00e8se ouvrante, on l\u2019empile au sommet de la pile et si on trouve une parenth\u00e8se fermante, on d\u00e9pile (si possible) la parenth\u00e8se ouvrante stock\u00e9e au sommet de la pile. </p> <p>La cha\u00eene est alors bien parenth\u00e9s\u00e9e si, \u00e0 la fin du parcours, la pile est vide. </p> <p>Elle est, par contre, mal parenth\u00e9s\u00e9e : </p> <ul> <li>si dans le parcours, on trouve une parenth\u00e8se fermante, alors que la pile est vide ;</li> <li>ou si, \u00e0 la fin du parcours, la pile n\u2019est pas vide.</li> </ul> \ud83d\udc0d Script Python<pre><code>def parenthesage(ch):\n    \"\"\"Renvoie True si la cha\u00eene ch est bien parenth\u00e9s\u00e9e et False sinon\"\"\"\n    p = Pile()\n    for c in ch:\n        if c == ...:\n            p.empiler(c)\n        elif c == ...:\n            if p.est_vide():\n                return ...\n            else:\n                ...\n    return p.est_vide()\n</code></pre> <p>Compl\u00e9ter le code de la fonction <code>parenthesage</code>.</p> <p>Exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; parenthesage(\"((()())(()))\")\nTrue\n&gt;&gt;&gt; parenthesage(\"())(()\")\nFalse\n&gt;&gt;&gt; parenthesage(\"(())(()\")\nFalse\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-11","title":"\u25b6 Sujet 11","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-111","title":"Exercice 11.1","text":"<p>Exercice 11.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>On mod\u00e9lise la repr\u00e9sentation binaire d'un entier non sign\u00e9 par un tableau d'entiers dont les \u00e9l\u00e9ments sont 0 ou 1. Par exemple, le tableau <code>[1, 0, 1, 0, 0, 1, 1]</code> repr\u00e9sente l'\u00e9criture binaire de l'entier dont l'\u00e9criture d\u00e9cimale est <code>2**6 + 2**4 + 2**1 + 2**0 = 83</code>.</p> <p>\u00c0 l'aide d'un parcours s\u00e9quentiel, \u00e9crire la fonction <code>convertir</code> r\u00e9pondant aux sp\u00e9cifications suivantes :</p> <p>\ud83d\udc0d Script Python<pre><code>def convertir(tab):\n    \"\"\"\n    tab est un tableau d'entiers, dont les \u00e9l\u00e9ments sont 0 ou 1 et\n    repr\u00e9sentant un entier \u00e9crit en binaire. Renvoie l'\u00e9criture\n    d\u00e9cimale de l'entier positif dont la repr\u00e9sentation binaire\n    est donn\u00e9e par le tableau tab\n    \"\"\"\n</code></pre> Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; convertir([1, 0, 1, 0, 0, 1, 1])\n83\n&gt;&gt;&gt; convertir([1, 0, 0, 0, 0, 0, 1, 0])\n130\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def convertir(tab):\n    puissance = 0\n    total = 0\n    for i in range(len(tab)-1, -1, -1):\n        total += tab[i]*(2**puissance)\n        puissance += 1\n    return total\n</code></pre> \ud83d\udccb Texte<pre><code>On mod\u00e9lise la repr\u00e9sentation binaire d'un entier non sign\u00e9 par un tableau d'entiers dont\nles \u00e9l\u00e9ments sont 0 ou 1. Par exemple, le tableau `[1, 0, 1, 0, 0, 1, 1]` repr\u00e9sente\nl'\u00e9criture binaire de l'entier dont l'\u00e9criture d\u00e9cimale est\n`2**6 + 2**4 + 2**1 + 2**0 = 83`.\n\n\u00c0 l'aide d'un parcours s\u00e9quentiel, \u00e9crire la fonction `convertir` r\u00e9pondant aux\nsp\u00e9cifications suivantes :\n\n```python\ndef convertir(tab):\n    \"\"\"\n    tab est un tableau d'entiers, dont les \u00e9l\u00e9ments sont 0 ou 1 et\n    repr\u00e9sentant un entier \u00e9crit en binaire. Renvoie l'\u00e9criture\n    d\u00e9cimale de l'entier positif dont la repr\u00e9sentation binaire\n    est donn\u00e9e par le tableau tab\n    \"\"\"\n```\nExemple :\n```python\n&gt;&gt;&gt; convertir([1, 0, 1, 0, 0, 1, 1])\n83\n&gt;&gt;&gt; convertir([1, 0, 0, 0, 0, 0, 1, 0])\n130\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-112","title":"Exercice 11.2","text":"<p>Exercice 11.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>La fonction <code>tri_insertion</code> suivante prend en argument une liste <code>tab</code> et trie cette liste en utilisant la m\u00e9thode du tri par insertion. Compl\u00e9ter cette fonction pour qu'elle r\u00e9ponde \u00e0 la sp\u00e9cification demand\u00e9e.</p> <p>On rappelle le principe du tri par insertion : on consid\u00e8re les \u00e9l\u00e9ments \u00e0 trier un par un, le premier \u00e9l\u00e9ment constituant, \u00e0 lui tout seul, une liste tri\u00e9e de longueur 1. On range ensuite le second \u00e9l\u00e9ment pour constituer une liste tri\u00e9e de longueur 2, puis on range le troisi\u00e8me \u00e9l\u00e9ment pour avoir une liste tri\u00e9e de longueur 3 et ainsi de suite\u2026 A chaque \u00e9tape, le premier \u00e9l\u00e9ment de la sous-liste non tri\u00e9e est plac\u00e9 dans la sous-liste des \u00e9l\u00e9ments d\u00e9j\u00e0 tri\u00e9s de sorte que cette sous-liste demeure tri\u00e9e.  </p> <p>Le principe du tri par insertion est donc d'ins\u00e9rer \u00e0 la n-i\u00e8me it\u00e9ration, le n-i\u00e8me \u00e9l\u00e9ment \u00e0 la bonne place.</p> \ud83d\udc0d Script Python<pre><code>def tri_insertion(tab):\n    n = len(tab)\n    for i in range(1, n):\n        valeur_insertion = tab[...]\n        # la variable j sert \u00e0 d\u00e9terminer o\u00f9 placer la valeur \u00e0 ranger\n        j = ...\n        # tant qu'on a pas trouv\u00e9 la place de l'\u00e9l\u00e9ment \u00e0 ins\u00e9rer\n        # on d\u00e9cale les valeurs du tableau vers la droite\n        while j &gt; ... and valeur_insertion &lt; tab[...]:\n            tab[j] = tab[j-1]\n            j = ...\n        tab[j] = ...\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; liste = [9, 5, 8, 4, 0, 2, 7, 1, 10, 3, 6]\n&gt;&gt;&gt; tri_insertion(liste)\n&gt;&gt;&gt; liste\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def tri_insertion(tab):\n    n = len(tab)\n    for i in range(1, n):\n        valeur_insertion = tab[i]\n        # la variable j sert \u00e0 d\u00e9terminer o\u00f9 placer la valeur \u00e0 ranger\n        j = i\n        # tant qu'on a pas trouv\u00e9 la place de l'\u00e9l\u00e9ment \u00e0 ins\u00e9rer\n        # on d\u00e9cale les valeurs du tableau vers la droite\n        while j &gt; 0 and valeur_insertion &lt; tab[j-1]:\n            tab[j] = tab[j-1]\n            j = j - 1\n        tab[j] = valeur_insertion\n</code></pre> Markdown<pre><code>La fonction `tri_insertion` suivante prend en argument une liste `tab` et trie cette liste en\nutilisant la m\u00e9thode du tri par insertion. Compl\u00e9ter cette fonction pour qu'elle r\u00e9ponde \u00e0 la\nsp\u00e9cification demand\u00e9e.\n\nOn rappelle le principe du tri par insertion : on consid\u00e8re les \u00e9l\u00e9ments \u00e0 trier un par un,\nle premier \u00e9l\u00e9ment constituant, \u00e0 lui tout seul, une liste tri\u00e9e de longueur 1. On range\nensuite le second \u00e9l\u00e9ment pour constituer une liste tri\u00e9e de longueur 2, puis on range le\ntroisi\u00e8me \u00e9l\u00e9ment pour avoir une liste tri\u00e9e de longueur 3 et ainsi de suite\u2026 A chaque\n\u00e9tape, le premier \u00e9l\u00e9ment de la sous-liste non tri\u00e9e est plac\u00e9 dans la sous-liste des\n\u00e9l\u00e9ments d\u00e9j\u00e0 tri\u00e9s de sorte que cette sous-liste demeure tri\u00e9e.  \n\nLe principe du tri par insertion est donc d'ins\u00e9rer \u00e0 la n-i\u00e8me it\u00e9ration, le n-i\u00e8me \u00e9l\u00e9ment\n\u00e0 la bonne place.\n\n\n```python linenums='1'\ndef tri_insertion(tab):\n    n = len(tab)\n    for i in range(1, n):\n        valeur_insertion = tab[...]\n        # la variable j sert \u00e0 d\u00e9terminer o\u00f9 placer la valeur \u00e0 ranger\n        j = ...\n        # tant qu'on a pas trouv\u00e9 la place de l'\u00e9l\u00e9ment \u00e0 ins\u00e9rer\n        # on d\u00e9cale les valeurs du tableau vers la droite\n        while j &gt; ... and valeur_insertion &lt; tab[...]:\n            tab[j] = tab[j-1]\n            j = ...\n        tab[j] = ...\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; liste = [9, 5, 8, 4, 0, 2, 7, 1, 10, 3, 6]\n&gt;&gt;&gt; tri_insertion(liste)\n&gt;&gt;&gt; liste\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-12","title":"\u25b6 Sujet 12","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-121","title":"Exercice 12.1","text":"<p>Exercice 12.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>On consid\u00e8re la classe <code>ABR</code>, dont le constructeur est le suivant :</p> \ud83d\udc0d Script Python<pre><code>class ABR:\n    def __init__(self, g0, v0, d0):\n        self.gauche = g0\n        self.cle = v0\n        self.droit = d0\n\n    def __repr__(self):\n        if self is None:\n            return ''\n        else:\n            return '(' + (self.gauche).__repr__() + ',' + str(self.cle) + ',' +(self.droit).__repr__() + ')'\n</code></pre> <p></p> <p>Ainsi, l\u2019arbre binaire de recherche <code>abr1</code> ci- contre est cr\u00e9\u00e9 par le code python ci- dessous</p> \ud83d\udc0d Script Python<pre><code>n0 = ABR(None, 0, None)\nn3 = ABR(None, 3, None)\nn2 = ABR(None, 2, n3)\nn3 = ABR(n0, 1, n2)\n</code></pre> <p>Dans tout le code, <code>None</code> correspondra \u00e0 un arbre vide.</p> <p>La classe <code>ABR</code> dispose aussi d\u2019une m\u00e9thode de repr\u00e9sentation (<code>__repr__</code> ), qui affiche entre parenth\u00e8ses le contenu du sous arbre gauche, puis la cl\u00e9 de l\u2019arbre, et enfin le contenu du sous arbre droit. Elle s\u2019utilise en console de la mani\u00e8re suivante :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; abr1\n((None,0,None),1,(None,2,(None,3,None)))\n</code></pre> <p>\u00c9crire une fonction r\u00e9cursive <code>ajoute(cle, a)</code> qui prend en param\u00e8tres une cl\u00e9 <code>cle</code> et un arbre binaire de recherche <code>a</code>  , et qui renvoie un arbre binaire de recherche dans lequel <code>cle</code> a \u00e9t\u00e9 ins\u00e9r\u00e9e. Dans le cas o\u00f9 <code>cle</code> est d\u00e9j\u00e0 pr\u00e9sente dans <code>a</code>, la fonction renvoie l\u2019arbre <code>a</code> inchang\u00e9.</p> <p>R\u00e9sultats \u00e0 obtenir :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; a = ajoute(4, abr1)\n&gt;&gt;&gt; a\n((None,0,None),1,(None,2,(None,3,(None,4,None))))\n\n&gt;&gt;&gt; ajoute(-5, abr1)\n(((None,-5,None),0,None),1,(None,2,(None,3,None)))\n\n&gt;&gt;&gt; ajoute(2, abr1)\n((None,0,None),1,(None,2,(None,3,None)))\n</code></pre> \ud83d\udc0d Script Python<pre><code>def ajoute(cle, a): \n    if a is None:\n        a = ABR(None, cle, None)\n    elif cle &gt; a.cle:\n        a.droit = ajoute(cle, a.droit)\n    else:\n        a.gauche = ajoute(cle, a.gauche)\n    return a\n</code></pre> \ud83d\udccb Texte<pre><code>On consid\u00e8re la classe `ABR`, dont le constructeur est le suivant :\n\n```python\nclass ABR:\n    def __init__(self, g0, v0, d0):\n        self.gauche = g0\n        self.cle = v0\n        self.droit = d0\n\n    def __repr__(self):\n        if self is None:\n            return ''\n        else:\n            return '(' + (self.gauche).__repr__() + ',' + str(self.cle) + ',' +(self.droit).__repr__() + ')'\n\n```\n\n![image](data2023/12_arbre.png){: .center width=30%}\n\nAinsi, l\u2019arbre binaire de recherche `abr1` ci-\ncontre est cr\u00e9\u00e9 par le code python ci-\ndessous\n\n```python\nn0 = ABR(None, 0, None)\nn3 = ABR(None, 3, None)\nn2 = ABR(None, 2, n3)\nn3 = ABR(n0, 1, n2)\n```\n\nDans tout le code, `None` correspondra \u00e0 un arbre vide.\n\nLa classe `ABR` dispose aussi d\u2019une m\u00e9thode de repr\u00e9sentation (```__repr__``` ), qui affiche entre\nparenth\u00e8ses le contenu du sous arbre gauche, puis la cl\u00e9 de l\u2019arbre, et enfin le\ncontenu du sous arbre droit. Elle s\u2019utilise en console de la mani\u00e8re suivante :\n\n```python\n&gt;&gt;&gt; abr1\n((None,0,None),1,(None,2,(None,3,None)))\n```\n\n\u00c9crire une fonction r\u00e9cursive `ajoute(cle, a)` qui prend en param\u00e8tres une cl\u00e9 `cle`\net un arbre binaire de recherche ```a```  , et qui renvoie un arbre binaire de recherche dans\nlequel `cle` a \u00e9t\u00e9 ins\u00e9r\u00e9e.\nDans le cas o\u00f9 `cle` est d\u00e9j\u00e0 pr\u00e9sente dans `a`, la fonction renvoie l\u2019arbre `a` inchang\u00e9.\n\nR\u00e9sultats \u00e0 obtenir :\n\n```python\n&gt;&gt;&gt; a = ajoute(4, abr1)\n&gt;&gt;&gt; a\n((None,0,None),1,(None,2,(None,3,(None,4,None))))\n\n&gt;&gt;&gt; ajoute(-5, abr1)\n(((None,-5,None),0,None),1,(None,2,(None,3,None)))\n\n&gt;&gt;&gt; ajoute(2, abr1)\n((None,0,None),1,(None,2,(None,3,None)))\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-122","title":"Exercice 12.2","text":"<p>Exercice 12.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On dispose d\u2019un ensemble d\u2019objets dont on conna\u00eet, pour chacun, la masse. On souhaite ranger l\u2019ensemble de ces objets dans des boites identiques de telle mani\u00e8re que la somme des masses des objets contenus dans une bo\u00eete ne d\u00e9passe pas la capacit\u00e9 <code>c</code> de la bo\u00eete. On souhaite utiliser le moins de bo\u00eetes possibles pour ranger cet ensemble d\u2019objets.</p> <p>Pour r\u00e9soudre ce probl\u00e8me, on utilisera un algorithme glouton consistant \u00e0 placer chacun des objets dans la premi\u00e8re bo\u00eete o\u00f9 cela est possible.</p> <p>Par exemple, pour ranger dans des bo\u00eetes de capacit\u00e9 <code>c = 5</code> un ensemble de trois objets dont les masses sont repr\u00e9sent\u00e9es en Python par la liste <code>[1, 5, 2]</code>, on proc\u00e8de de la fa\u00e7on suivante :</p> <ul> <li>Le premier objet, de masse 1, va dans une premi\u00e8re boite.</li> <li>Le deuxi\u00e8me objet, de masse 5, ne peut pas aller dans la m\u00eame boite que le premier objet car cela d\u00e9passerait la capacit\u00e9 de la boite. On place donc cet objet dans une deuxi\u00e8me bo\u00eete.</li> <li>Le troisi\u00e8me objet, de masse 2, va dans la premi\u00e8re bo\u00eete.</li> </ul> <p>On a donc utilis\u00e9 deux bo\u00eetes de capacit\u00e9 <code>c = 5</code> pour ranger les 3 objets.</p> <p>Compl\u00e9ter la fonction Python <code>empaqueter(liste_masses, c)</code> suivante pour qu\u2019elle renvoie le nombre de bo\u00eetes de capacit\u00e9 c n\u00e9cessaires pour empaqueter un ensemble d\u2019objets dont les masses sont contenues dans la liste <code>liste_masses</code>.</p> \ud83d\udc0d Script Python<pre><code>def empaqueter(liste_masses, c):\n    n = len(liste_masses)\n    nb_boites = 0\n    boites = [0]*n\n    for masse in ... :\n        i = 0\n        while i &lt;= nb_boites and boites[i] + ... &gt; C:\n            i = i + 1\n        if i == nb_boites + 1:\n            ...\n        boites[i] = ...\n    return ...\n</code></pre> <p>Tester ensuite votre fonction : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; empaqueter([7, 6, 3, 4, 8, 5, 9, 2], 11)\n5\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def empaqueterR(liste_masses, c):\nn = len(liste_masses)\nnb_boites = 0\nboites = [0]*n\nfor masse in liste_masses :\n    i = 0\n    while i &lt;= nb_boites and boites[i] + masse &gt; c:\n        i = i + 1\n    if i == nb_boites + 1:\n        nb_boites = nb_boites + 1\n    boites[i] = boites[i] + masse\nreturn nb_boites + 1\n</code></pre> Markdown<pre><code>On dispose d\u2019un ensemble d\u2019objets dont on conna\u00eet, pour chacun, la masse. On\nsouhaite ranger l\u2019ensemble de ces objets dans des boites identiques de telle\nmani\u00e8re que la somme des masses des objets contenus dans une bo\u00eete ne d\u00e9passe\npas la capacit\u00e9 `c` de la bo\u00eete. On souhaite utiliser le moins de bo\u00eetes possibles pour\nranger cet ensemble d\u2019objets.\n\n\nPour r\u00e9soudre ce probl\u00e8me, on utilisera un algorithme glouton consistant \u00e0 placer\nchacun des objets dans la premi\u00e8re bo\u00eete o\u00f9 cela est possible.\n\nPar exemple, pour ranger dans des bo\u00eetes de capacit\u00e9 `c = 5` un ensemble de trois\nobjets dont les masses sont repr\u00e9sent\u00e9es en Python par la liste `[1, 5, 2]`, on\nproc\u00e8de de la fa\u00e7on suivante :\n\n- Le premier objet, de masse 1, va dans une premi\u00e8re boite.\n- Le deuxi\u00e8me objet, de masse 5, ne peut pas aller dans la m\u00eame boite que le\npremier objet car cela d\u00e9passerait la capacit\u00e9 de la boite. On place donc cet\nobjet dans une deuxi\u00e8me bo\u00eete.\n- Le troisi\u00e8me objet, de masse 2, va dans la premi\u00e8re bo\u00eete.\n\nOn a donc utilis\u00e9 deux bo\u00eetes de capacit\u00e9 `c = 5` pour ranger les 3 objets.\n\nCompl\u00e9ter la fonction Python `empaqueter(liste_masses, c)` suivante pour\nqu\u2019elle renvoie le nombre de bo\u00eetes de capacit\u00e9 c n\u00e9cessaires pour empaqueter un\nensemble d\u2019objets dont les masses sont contenues dans la liste `liste_masses`.\n\n```python linenums='1'\ndef empaqueter(liste_masses, c):\n    n = len(liste_masses)\n    nb_boites = 0\n    boites = [0]*n\n    for masse in ... :\n        i = 0\n        while i &lt;= nb_boites and boites[i] + ... &gt; C:\n            i = i + 1\n        if i == nb_boites + 1:\n            ...\n        boites[i] = ...\n    return ...\n</code></pre> <p>Tester ensuite votre fonction : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; empaqueter([7, 6, 3, 4, 8, 5, 9, 2], 11)\n5\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-13","title":"\u25b6 Sujet 13","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-131","title":"Exercice 13.1","text":"<p>Exercice 13.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire en langage Python une fonction <code>recherche</code> prenant comme param\u00e8tres une variable <code>a</code> de type num\u00e9rique (<code>float</code> ou <code>int</code>) et un tableau <code>tab</code> (type <code>list</code>) et qui renvoie le nombre d'occurrences de <code>a</code> dans <code>tab</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(5, [])\n0\n&gt;&gt;&gt; recherche(5, [-2, 3, 4, 8])\n0\n&gt;&gt;&gt; recherche(5, [-2, 3, 1, 5, 3, 7, 4])\n1\n&gt;&gt;&gt; recherche(5, [-2, 5, 3, 5, 4, 5])\n3\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(a, tab):\n    nb = 0\n    for element in tab:\n        if element == a:\n            nb += 1\n    return nb\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire en langage Python une fonction `recherche` prenant comme param\u00e8tres une\nvariable `a` de type num\u00e9rique (`float` ou `int`) et un tableau `tab` (type `list`) et qui\nrenvoie le nombre d'occurrences de `a` dans `tab`.\n\nExemples :\n```python\n&gt;&gt;&gt; recherche(5, [])\n0\n&gt;&gt;&gt; recherche(5, [-2, 3, 4, 8])\n0\n&gt;&gt;&gt; recherche(5, [-2, 3, 1, 5, 3, 7, 4])\n1\n&gt;&gt;&gt; recherche(5, [-2, 5, 3, 5, 4, 5])\n3\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-132","title":"Exercice 13.2","text":"<p>Exercice 13.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>La fonction <code>rendu_monnaie</code> prend en param\u00e8tres deux nombres entiers positifs <code>somme_due</code> et <code>somme_versee</code> et elle permet de proc\u00e9der au rendu de monnaie de la diff\u00e9rence <code>somme_versee \u2013 somme_due</code> pour des achats effectu\u00e9s avec le syst\u00e8me de pi\u00e8ces de la zone Euro. On utilise pour cela un algorithme glouton qui commence par rendre le maximum de pi\u00e8ces de plus grandes valeurs et ainsi de suite. Par la suite, on assimilera les billets \u00e0 des pi\u00e8ces.</p> <p>La fonction <code>rendu_monnaie</code> renvoie un tableau de type <code>list</code> contenant les pi\u00e8ces qui composent le rendu.</p> <p>Toutes les sommes sont exprim\u00e9es en euros. Les valeurs possibles pour les pi\u00e8ces sont donc <code>[1, 2, 5, 10, 20, 50, 100, 200]</code>.</p> <p>Ainsi, l\u2019instruction <code>rendu_monnaie(452, 500)</code> renvoie le tableau <code>[20, 20, 5, 2, 1]</code>.</p> <p>En effet, la somme \u00e0 rendre est de <code>48</code> euros soit <code>20 + 20 + 5 + 2 + 1</code>.</p> <p>Le code de la fonction <code>rendu_monnaie</code> est donn\u00e9 ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def rendu_monnaie(somme_due, somme_versee):\n    pieces = [1, 2, 5, 10, 20, 50, 100, 200]\n    rendu = ...\n    a_rendre = ...\n    i = len(pieces) - 1\n    while a_rendre &gt; ... :\n        if pieces[i] &lt;= a_rendre :\n            rendu.append(...)\n            a_rendre = ...\n        else :\n            i = ...\n    return rendu\n</code></pre> <p>Compl\u00e9ter ce code et le tester : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; rendu_monnaie(700,700)\n[]\n&gt;&gt;&gt; rendu_monnaie(102,500)\n[200, 100, 50, 20, 20, 5, 2, 1]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def rendu_monnaie(somme_due, somme_versee):\n    pieces = [1, 2, 5, 10, 20, 50, 100, 200]\n    rendu = []\n    a_rendre = somme_versee - somme_due\n    i = len(pieces) - 1\n    while a_rendre &gt; 0 :\n        if pieces[i] &lt;= a_rendre :\n            rendu.append(pieces[i])\n            a_rendre = a_rendre - pieces[i]\n        else :\n            i = i - 1\n    return rendu\n</code></pre> Markdown<pre><code>La fonction `rendu_monnaie` prend en param\u00e8tres deux nombres entiers\npositifs `somme_due` et `somme_versee` et elle permet de proc\u00e9der au rendu de monnaie de la\ndiff\u00e9rence `somme_versee \u2013 somme_due` pour des achats effectu\u00e9s avec le syst\u00e8me de pi\u00e8ces de\nla zone Euro. On utilise pour cela un algorithme glouton qui commence par rendre le maximum de\npi\u00e8ces de plus grandes valeurs et ainsi de suite. Par la suite, on\nassimilera les billets \u00e0 des pi\u00e8ces.\n\n\nLa fonction `rendu_monnaie` renvoie un tableau de type `list` contenant les pi\u00e8ces qui\ncomposent le rendu.\n\nToutes les sommes sont exprim\u00e9es en euros. Les valeurs possibles pour les\npi\u00e8ces sont donc `[1, 2, 5, 10, 20, 50, 100, 200]`.\n\nAinsi, l\u2019instruction `rendu_monnaie(452, 500)`\nrenvoie le tableau\n`[20, 20, 5, 2, 1]`.\n\nEn effet, la somme \u00e0 rendre est de `48` euros soit `20 + 20 + 5 + 2 + 1`.\n\nLe code de la fonction `rendu_monnaie` est donn\u00e9 ci-dessous :\n\n```python linenums='1'\ndef rendu_monnaie(somme_due, somme_versee):\n    pieces = [1, 2, 5, 10, 20, 50, 100, 200]\n    rendu = ...\n    a_rendre = ...\n    i = len(pieces) - 1\n    while a_rendre &gt; ... :\n        if pieces[i] &lt;= a_rendre :\n            rendu.append(...)\n            a_rendre = ...\n        else :\n            i = ...\n    return rendu\n</code></pre> <p>Compl\u00e9ter ce code et le tester : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; rendu_monnaie(700,700)\n[]\n&gt;&gt;&gt; rendu_monnaie(102,500)\n[200, 100, 50, 20, 20, 5, 2, 1]\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-14","title":"\u25b6 Sujet 14","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-141","title":"Exercice 14.1","text":"<p>Exercice 14.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>elt</code> un nombre entier et <code>tab</code> un tableau de nombres entiers, et qui renvoie l\u2019indice de la premi\u00e8re occurrence de <code>elt</code> dans <code>tab</code> si <code>elt</code> est dans <code>tab</code> et <code>-1</code> sinon.</p> <p>Ne pas oublier d\u2019ajouter au corps de la fonction une documentation et une ou plusieurs assertions pour v\u00e9rifier les pr\u00e9-conditions.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(1, [2, 3, 4])\n-1\n&gt;&gt;&gt; recherche(1, [10, 12, 1, 56])\n2\n&gt;&gt;&gt; recherche(50, [1, 50, 1])\n1\n&gt;&gt;&gt; recherche(15, [8, 9, 10, 15])\n3\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(elt, tab):\n    '''\n    renvoie l\u2019indice de la premi\u00e8re occurrence de\n    elt dans tab si elt est dans tab et -1 sinon. \n    '''\n    assert tab != [], \"le tableau est vide\"\n    for i in range(len(tab)):\n        if tab[i] == elt:\n            return i        \n    return -1         \n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `recherche` qui prend en param\u00e8tres `elt` un nombre entier et `tab`\nun tableau de nombres entiers, et qui renvoie l\u2019indice de la premi\u00e8re occurrence de `elt`\ndans `tab` si `elt` est dans `tab` et `-1` sinon.\n\nNe pas oublier d\u2019ajouter au corps de la fonction une documentation et une ou plusieurs\nassertions pour v\u00e9rifier les pr\u00e9-conditions.\n\nExemples :\n```python\n&gt;&gt;&gt; recherche(1, [2, 3, 4])\n-1\n&gt;&gt;&gt; recherche(1, [10, 12, 1, 56])\n2\n&gt;&gt;&gt; recherche(50, [1, 50, 1])\n1\n&gt;&gt;&gt; recherche(15, [8, 9, 10, 15])\n3\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-142","title":"Exercice 14.2","text":"<p>Exercice 14.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On consid\u00e8re la fonction <code>insere</code> ci-dessous qui prend en argument un entier <code>a</code> et un tableau <code>tab</code> d'entiers tri\u00e9s par ordre croissant. Cette fonction cr\u00e9e et renvoie un nouveau tableau \u00e0 partir de celui fourni en param\u00e8tre en y ins\u00e9rant la valeur <code>a</code> de sorte que le tableau renvoy\u00e9 soit encore tri\u00e9 par ordre croissant. Les tableaux seront repr\u00e9sent\u00e9s sous la forme de listes Python.</p> \ud83d\udc0d Script Python<pre><code>def insere(a, tab):\n    \"\"\"\n    Ins\u00e8re l'\u00e9l\u00e9ment a (int) dans le tableau tab (list)\n    tri\u00e9 par ordre croissant \u00e0 sa place et renvoie le\n    nouveau tableau.\n    \"\"\"\n    l = list(tab) #l contient les m\u00eames \u00e9l\u00e9ments que tab\n    l.append(a)\n    i = ...\n    while a &lt; ... and i &gt;= 0:\n        l[i+1] = ...\n        l[i] = a\n        i = ...\n    return l\n</code></pre> <p>Compl\u00e9ter la fonction <code>insere</code> ci-dessus.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; insere(3, [1, 2, 4, 5])\n[1, 2, 3, 4, 5]\n&gt;&gt;&gt; insere(30, [1, 2, 7, 12, 14, 25])\n[1, 2, 7, 12, 14, 25, 30]\n&gt;&gt;&gt; insere(1, [2, 3, 4])\n[1, 2, 3, 4]\n&gt;&gt;&gt; insere(1, [])\n[1]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def insere(a, tab):\n    \"\"\"\n    Ins\u00e8re l'\u00e9l\u00e9ment a (int) dans le tableau tab (list)\n    tri\u00e9 par ordre croissant \u00e0 sa place et renvoie le\n    nouveau tableau.\n    \"\"\"\n    l = list(tab) #l contient les m\u00eames \u00e9l\u00e9ments que tab\n    l.append(a)\n    i = len(l) - 2\n    while a &lt; l[i] and i &gt;= 0:\n        l[i+1] = l[i]\n        l[i] = a\n        i = i - 1\n    return l\n</code></pre> Markdown<pre><code>On consid\u00e8re la fonction `insere` ci-dessous qui prend en argument un entier `a` et un\ntableau `tab` d'entiers tri\u00e9s par ordre croissant. Cette fonction cr\u00e9e et renvoie un nouveau\ntableau \u00e0 partir de celui fourni en param\u00e8tre en y ins\u00e9rant la valeur `a` de sorte que le\ntableau renvoy\u00e9 soit encore tri\u00e9 par ordre croissant. Les tableaux seront repr\u00e9sent\u00e9s sous\nla forme de listes Python.\n\n\n```python linenums='1'\ndef insere(a, tab):\n    \"\"\"\n    Ins\u00e8re l'\u00e9l\u00e9ment a (int) dans le tableau tab (list)\n    tri\u00e9 par ordre croissant \u00e0 sa place et renvoie le\n    nouveau tableau.\n    \"\"\"\n    l = list(tab) #l contient les m\u00eames \u00e9l\u00e9ments que tab\n    l.append(a)\n    i = ...\n    while a &lt; ... and i &gt;= 0:\n        l[i+1] = ...\n        l[i] = a\n        i = ...\n    return l\n</code></pre> <p>Compl\u00e9ter la fonction <code>insere</code> ci-dessus.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; insere(3, [1, 2, 4, 5])\n[1, 2, 3, 4, 5]\n&gt;&gt;&gt; insere(30, [1, 2, 7, 12, 14, 25])\n[1, 2, 7, 12, 14, 25, 30]\n&gt;&gt;&gt; insere(1, [2, 3, 4])\n[1, 2, 3, 4]\n&gt;&gt;&gt; insere(1, [])\n[1]\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-15","title":"\u25b6 Sujet 15","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-151","title":"Exercice 15.1","text":"<p>Exercice 15.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>On a relev\u00e9 les valeurs moyennes annuelles des temp\u00e9ratures \u00e0 Paris pour la p\u00e9riode allant de 2013 \u00e0 2019. Les r\u00e9sultats ont \u00e9t\u00e9 r\u00e9cup\u00e9r\u00e9s sous la forme de deux listes : l\u2019une pour les temp\u00e9ratures, l\u2019autre pour les ann\u00e9es : \ud83d\udc0d Script Python<pre><code>t_moy = [14.9, 13.3, 13.1, 12.5, 13.0, 13.6, 13.7]\nannees = [2013, 2014, 2015, 2016, 2017, 2018, 2019]\n</code></pre></p> <p>\u00c9crire la fonction <code>mini</code> qui prend en param\u00e8tres un tableau <code>releve</code> des relev\u00e9s et un tableau <code>date</code> des dates et qui renvoie la plus petite valeur relev\u00e9e au cours de la p\u00e9riode et l\u2019ann\u00e9e correspondante. On suppose que la temp\u00e9rature minimale est atteinte une seule fois.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; mini(t_moy, annees)\n(12.5, 2016)\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>t_moy = [14.9, 13.3, 13.1, 12.5, 13.0, 13.6, 13.7]\nannees = [2013, 2014, 2015, 2016, 2017, 2018, 2019]\n\ndef mini(releve, date):\n    temp_mini = releve[0]\n    date_mini = date[0]\n    for i in range(len(releve)):\n        if releve[i] &lt; temp_mini:\n            temp_mini = releve[i]\n            date_mini = date[i]\n    return temp_mini, date_mini\n</code></pre> \ud83d\udccb Texte<pre><code>On a relev\u00e9 les valeurs moyennes annuelles des temp\u00e9ratures \u00e0 Paris pour la p\u00e9riode\nallant de 2013 \u00e0 2019. Les r\u00e9sultats ont \u00e9t\u00e9 r\u00e9cup\u00e9r\u00e9s sous la forme de deux listes : l\u2019une pour les temp\u00e9ratures, l\u2019autre pour les ann\u00e9es :\n```python\nt_moy = [14.9, 13.3, 13.1, 12.5, 13.0, 13.6, 13.7]\nannees = [2013, 2014, 2015, 2016, 2017, 2018, 2019]\n```\n\n\u00c9crire la fonction `mini` qui prend en param\u00e8tres un tableau `releve` des relev\u00e9s et un\ntableau `date` des dates et qui renvoie la plus petite valeur relev\u00e9e au cours de la\np\u00e9riode et l\u2019ann\u00e9e correspondante. On suppose que la temp\u00e9rature minimale est atteinte\nune seule fois.\n\nExemple :\n```python\n&gt;&gt;&gt; mini(t_moy, annees)\n(12.5, 2016)\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-152","title":"Exercice 15.2","text":"<p>Exercice 15.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Un mot palindrome peut se lire de la m\u00eame fa\u00e7on de gauche \u00e0 droite ou de droite \u00e0 gauche : bob, radar, et non sont des mots palindromes.</p> <p>De m\u00eame certains nombres sont eux aussi des palindromes : 33, 121, 345543.</p> <p>L\u2019objectif de cet exercice est d\u2019obtenir un programme Python permettant de tester si un nombre est un nombre palindrome.</p> <p>Pour remplir cette t\u00e2che, on vous demande de compl\u00e9ter le code des trois fonctions ci- dessous sachant que la fonction <code>est_nbre_palindrome</code> s\u2019appuiera sur la fonction <code>est_palindrome</code> qui elle-m\u00eame s\u2019appuiera sur la fonction <code>inverse_chaine</code>.</p> <p>La fonction <code>inverse_chaine</code> inverse l'ordre des caract\u00e8res d'une cha\u00eene de caract\u00e8res <code>chaine</code> et renvoie la cha\u00eene invers\u00e9e.</p> <p>La fonction <code>est_palindrome</code> teste si une chaine de caract\u00e8res <code>chaine</code> est un palindrome. Elle renvoie <code>True</code> si c\u2019est le cas et <code>False</code> sinon. Cette fonction s\u2019appuie sur la fonction pr\u00e9c\u00e9dente.</p> <p>La fonction <code>est_nbre_palindrome</code> teste si un nombre <code>nbre</code> est un palindrome. Elle renvoie <code>True</code> si c\u2019est le cas et <code>False</code> sinon. Cette fonction s\u2019appuie sur la fonction pr\u00e9c\u00e9dente.</p> <p>Compl\u00e9ter le code des trois fonctions ci-dessous.</p> <p>\ud83d\udc0d Script Python<pre><code>def inverse_chaine(chaine):\n    result = ...\n    for caractere in chaine:\n        result = ...\n    return result\n\ndef est_palindrome(chaine):\n    inverse = inverse_chaine(chaine)\n    return ...\n\ndef est_nbre_palindrome(nbre):\n    chaine = ...\n    return est_palindrome(chaine)\n</code></pre> Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; inverse_chaine('bac')\n'cab'\n&gt;&gt;&gt; est_palindrome('NSI')\nFalse\n&gt;&gt;&gt; est_palindrome('ISN-NSI')\nTrue\n&gt;&gt;&gt; est_nbre_palindrome(214312)\nFalse\n&gt;&gt;&gt; est_nbre_palindrome(213312)\nTrue\n</code></pre> \ud83d\udc0d Script Python<pre><code>def inverse_chaine(chaine):\n    result = ''\n    for caractere in chaine:\n        result = caractere + result\n    return result\n\ndef est_palindrome(chaine):\n    inverse = inverse_chaine(chaine)\n    return chaine == inverse\n\ndef est_nbre_palindrome(nbre):\n    chaine = str(nbre)\n    return est_palindrome(chaine)\n</code></pre> <p>Markdown<pre><code>Un mot palindrome peut se lire de la m\u00eame fa\u00e7on de gauche \u00e0 droite ou de droite \u00e0\ngauche : *bob*, *radar*, et *non* sont des mots palindromes.\n\nDe m\u00eame certains nombres sont eux aussi des palindromes : 33, 121, 345543.\n\nL\u2019objectif de cet exercice est d\u2019obtenir un programme Python permettant de tester si un\nnombre est un nombre palindrome.\n\nPour remplir cette t\u00e2che, on vous demande de compl\u00e9ter le code des trois fonctions ci-\ndessous sachant que la fonction `est_nbre_palindrome` s\u2019appuiera sur la fonction\n`est_palindrome` qui elle-m\u00eame s\u2019appuiera sur la fonction `inverse_chaine`.\n\nLa fonction `inverse_chaine` inverse l'ordre des caract\u00e8res d'une cha\u00eene de caract\u00e8res\n`chaine` et renvoie la cha\u00eene invers\u00e9e.\n\nLa fonction `est_palindrome` teste si une chaine de caract\u00e8res `chaine` est un\npalindrome. Elle renvoie `True` si c\u2019est le cas et `False` sinon. Cette fonction s\u2019appuie sur\nla fonction pr\u00e9c\u00e9dente.\n\nLa fonction `est_nbre_palindrome` teste si un nombre `nbre` est un palindrome. Elle\nrenvoie `True` si c\u2019est le cas et `False` sinon. Cette fonction s\u2019appuie sur la fonction\npr\u00e9c\u00e9dente.\n\nCompl\u00e9ter le code des trois fonctions ci-dessous.\n\n```python linenums='1'\ndef inverse_chaine(chaine):\n    result = ...\n    for caractere in chaine:\n        result = ...\n    return result\n\ndef est_palindrome(chaine):\n    inverse = inverse_chaine(chaine)\n    return ...\n\ndef est_nbre_palindrome(nbre):\n    chaine = ...\n    return est_palindrome(chaine)\n</code></pre> Exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; inverse_chaine('bac')\n'cab'\n&gt;&gt;&gt; est_palindrome('NSI')\nFalse\n&gt;&gt;&gt; est_palindrome('ISN-NSI')\nTrue\n&gt;&gt;&gt; est_nbre_palindrome(214312)\nFalse\n&gt;&gt;&gt; est_nbre_palindrome(213312)\nTrue\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-16","title":"\u25b6 Sujet 16","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-161","title":"Exercice 16.1","text":"<p>Exercice 16.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>recherche_indices_classement</code> qui prend en param\u00e8tres un entier <code>elt</code> et une liste d\u2019entiers <code>tab</code>, et qui renvoie trois listes :</p> <ul> <li>la premi\u00e8re liste contient les indices des valeurs de la liste <code>tab</code> strictement inf\u00e9rieures \u00e0 <code>elt</code> ;</li> <li>la deuxi\u00e8me liste contient les indices des valeurs de la liste <code>tab</code> \u00e9gales \u00e0 <code>elt</code> ;</li> <li>la troisi\u00e8me liste contient les indices des valeurs de la liste <code>tab</code> strictement sup\u00e9rieures \u00e0 <code>elt</code>.</li> </ul> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche_indices_classement(3, [1, 3, 4, 2, 4, 6, 3, 0])\n([0, 3, 7], [1, 6], [2, 4, 5])\n&gt;&gt;&gt; recherche_indices_classement(3, [1, 4, 2, 4, 6, 0])\n([0, 2, 5], [], [1, 3, 4])\n&gt;&gt;&gt;recherche_indices_classement(3, [1, 1, 1, 1])\n([0, 1, 2, 3], [], [])\n&gt;&gt;&gt; recherche_indices_classement(3, [])\n([], [], [])\n</code></pre> \ud83d\udc0d Script Python<pre><code>def recherche_indices_classement(elt, tab):\n    ind_inf = []\n    ind_egal = []\n    ind_sup = [] \n    for i in range(len(tab)):\n        if tab[i] &lt; elt:\n            ind_inf.append(i)\n        elif tab[i] &gt; elt:\n            ind_sup.append(i)\n        else:\n            ind_egal.append(i)\n    return (ind_inf, ind_egal, ind_sup)\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `recherche_indices_classement` qui prend en param\u00e8tres un\nentier `elt` et une liste d\u2019entiers `tab`, et qui renvoie trois listes :\n\n- la premi\u00e8re liste contient les indices des valeurs de la liste `tab` strictement\ninf\u00e9rieures \u00e0 `elt` ;\n- la deuxi\u00e8me liste contient les indices des valeurs de la liste `tab` \u00e9gales \u00e0 `elt` ;\n- la troisi\u00e8me liste contient les indices des valeurs de la liste `tab` strictement\nsup\u00e9rieures \u00e0 `elt`.\n\nExemples :\n\n```python\n&gt;&gt;&gt; recherche_indices_classement(3, [1, 3, 4, 2, 4, 6, 3, 0])\n([0, 3, 7], [1, 6], [2, 4, 5])\n&gt;&gt;&gt; recherche_indices_classement(3, [1, 4, 2, 4, 6, 0])\n([0, 2, 5], [], [1, 3, 4])\n&gt;&gt;&gt;recherche_indices_classement(3, [1, 1, 1, 1])\n([0, 1, 2, 3], [], [])\n&gt;&gt;&gt; recherche_indices_classement(3, [])\n([], [], [])\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-162","title":"Exercice 16.2","text":"<p>Exercice 16.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Un professeur de NSI d\u00e9cide de g\u00e9rer les r\u00e9sultats de sa classe sous la forme d\u2019un dictionnaire :</p> <ul> <li>les clefs sont les noms des \u00e9l\u00e8ves ;</li> <li>les valeurs sont des dictionnaires dont les clefs sont les types d\u2019\u00e9preuves sous forme de cha\u00eene de caract\u00e8res et les valeurs sont les notes obtenues associ\u00e9es \u00e0 leurs coefficients dans une liste.</li> </ul> <p>Avec :</p> \ud83d\udc0d Script Python<pre><code>resultats = {'Dupont': {\n                        'DS1': [15.5, 4],\n                        'DM1': [14.5, 1],\n                        'DS2': [13, 4],\n                        'PROJET1': [16, 3],\n                        'DS3': [14, 4]\n                    },\n            'Durand': {\n                        'DS1': [6 , 4],\n                        'DM1': [14.5, 1],\n                        'DS2': [8, 4],\n                        'PROJET1': [9, 3],\n                        'IE1': [7, 2],\n                        'DS3': [8, 4],\n                        'DS4':[15, 4]\n                    }\n            }\n</code></pre> <p>L\u2019\u00e9l\u00e8ve dont le nom est Durand a ainsi obtenu au DS2 la note de 8 avec un coefficient 4.</p> <p>Le professeur cr\u00e9e une fonction <code>moyenne</code> qui prend en param\u00e8tre le nom d\u2019un de ses \u00e9l\u00e8ves et renvoie sa moyenne arrondie au dixi\u00e8me.</p> <p>Compl\u00e9ter le code du professeur ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def moyenne(nom, dico_result):\n    if nom in ...:\n        notes = dico_result[nom]\n        total_points = ...\n        total_coefficients = ...\n        for ...  in notes.values():\n            note, coefficient = valeurs\n            total_points = total_points + ... * coefficient\n            total_coefficients = ... + coefficient\n        return round( ... / total_coefficients, 1 )\n    else:\n        return -1\n</code></pre> \ud83d\udc0d Script Python<pre><code>def moyenne(nom, dico_result):\n    if nom in dico_result:\n        notes = dico_result[nom]\n        total_points = 0.\n        total_coefficients = 0\n        for valeurs  in notes.values():\n            note, coefficient = valeurs\n            total_points = total_points + note * coefficient\n            total_coefficients = total_coefficients + coefficient\n        return round( total_points / total_coefficients, 1 )\n    else:\n        return -1\n</code></pre> Markdown<pre><code>Un professeur de NSI d\u00e9cide de g\u00e9rer les r\u00e9sultats de sa classe sous la forme d\u2019un\ndictionnaire :\n\n- les clefs sont les noms des \u00e9l\u00e8ves ;\n- les valeurs sont des dictionnaires dont les clefs sont les types d\u2019\u00e9preuves sous\nforme de cha\u00eene de caract\u00e8res et les valeurs sont les notes obtenues associ\u00e9es \u00e0\nleurs coefficients dans une liste.\n\nAvec :\n\n```python\nresultats = {'Dupont': {\n                        'DS1': [15.5, 4],\n                        'DM1': [14.5, 1],\n                        'DS2': [13, 4],\n                        'PROJET1': [16, 3],\n                        'DS3': [14, 4]\n                    },\n            'Durand': {\n                        'DS1': [6 , 4],\n                        'DM1': [14.5, 1],\n                        'DS2': [8, 4],\n                        'PROJET1': [9, 3],\n                        'IE1': [7, 2],\n                        'DS3': [8, 4],\n                        'DS4':[15, 4]\n                    }\n            }\n</code></pre> <p>L\u2019\u00e9l\u00e8ve dont le nom est Durand a ainsi obtenu au DS2 la note de 8 avec un coefficient 4.</p> <p>Le professeur cr\u00e9e une fonction <code>moyenne</code> qui prend en param\u00e8tre le nom d\u2019un de ses \u00e9l\u00e8ves et renvoie sa moyenne arrondie au dixi\u00e8me.</p> <p>Compl\u00e9ter le code du professeur ci-dessous :</p> <p>\ud83d\udc0d Script Python<pre><code>def moyenne(nom, dico_result):\n    if nom in ...:\n        notes = dico_result[nom]\n        total_points = ...\n        total_coefficients = ...\n        for ...  in notes.values():\n            note, coefficient = valeurs\n            total_points = total_points + ... * coefficient\n            total_coefficients = ... + coefficient\n        return round( ... / total_coefficients, 1 )\n    else:\n        return -1\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-17","title":"\u25b6 Sujet 17","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-171","title":"Exercice 17.1","text":"<p>Exercice 17.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>moyenne(liste_notes)</code> qui renvoie la moyenne pond\u00e9r\u00e9e des r\u00e9sultats contenus dans la liste <code>liste_notes</code>, non vide, donn\u00e9e en param\u00e8tre. Cette liste contient des couples <code>(note, coefficient)</code> dans lesquels :</p> <ul> <li><code>note</code> est un nombre de type flottant (<code>float</code>) compris entre 0 et 20 ;</li> <li><code>coefficient</code> est un nombre entier strictement positif.</li> </ul> <p>Ainsi l\u2019expression <code>moyenne([(15,2),(9,1),(12,3)])</code> devra renvoyer <code>12.5</code>.</p> <p>\\(\\dfrac{2 \\times 15 + 1 \\times 9 + 3 \\times 12 }{2+1+3}=12,5\\)</p> \ud83d\udc0d Script Python<pre><code>def moyenne(liste_notes):\n    somme_notes = 0\n    somme_coeffs = 0\n    for devoir in liste_notes:\n        note = devoir[0]\n        coeff = devoir[1]\n        somme_notes += note * coeff\n        somme_coeffs += coeff\n    return somme_notes / somme_coeffs\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `moyenne(liste_notes)` qui renvoie la moyenne pond\u00e9r\u00e9e des\nr\u00e9sultats contenus dans la liste `liste_notes`, non vide, donn\u00e9e en param\u00e8tre. Cette\nliste contient des couples `(note, coefficient)` dans lesquels :\n\n- `note` est un nombre de type flottant (`float`) compris entre 0 et 20 ;\n- `coefficient` est un nombre entier strictement positif.\n\nAinsi l\u2019expression `moyenne([(15,2),(9,1),(12,3)])` devra renvoyer `12.5`.\n\n$\\dfrac{2 \\times 15 + 1 \\times 9 + 3 \\times 12 }{2+1+3}=12,5$\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-172","title":"Exercice 17.2","text":"<p>Exercice 17.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On cherche \u00e0 d\u00e9terminer les valeurs du triangle de Pascal (Figure 1).</p> <p>Dans le triangle de Pascal, chaque ligne commence et se termine par le nombre 1. Comme l\u2019illustre la Figure 2, on additionne deux valeurs successives d\u2019une ligne pour obtenir la valeur qui se situe sous la deuxi\u00e8me valeur.</p> <p></p> <p>Compl\u00e9ter la fonction <code>pascal</code> ci-apr\u00e8s prenant en param\u00e8tre un entier <code>n</code> sup\u00e9rieur ou \u00e9gal \u00e0 2. Cette fonction doit renvoyer une liste correspondant au triangle de Pascal de la ligne 0 \u00e0 la ligne <code>n</code>. Le tableau repr\u00e9sentant le triangle de Pascal sera contenu dans la variable <code>triangle</code>.</p> \ud83d\udc0d Script Python<pre><code>def pascal(n):\n    triangle = [[1]]\n    for k in range(1,...):\n        ligne_k = [...]\n        for i in range(1,k):\n            ligne_k.append(triangle[...][i-1]+triangle[...][...])\n        ligne_k.append(...)\n        triangle.append(ligne_k)\n    return triangle\n</code></pre> <p>Pour <code>n = 4</code>, voici ce qu'on devra obtenir : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; pascal(4)\n[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n</code></pre> Pour <code>n = 5</code>, voici ce qu'on devra obtenir : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; pascal(5)\n[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1]]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def pascal(n):\n    triangle = [[1]]\n    for k in range(1, n+1):\n        ligne_k = [1]\n        for i in range(1, k):\n            ligne_k.append(triangle[k-1][i-1] + triangle[k-1][i])\n        ligne_k.append(1)\n        triangle.append(ligne_k)\n    return triangle\n</code></pre> Markdown<pre><code>On cherche \u00e0 d\u00e9terminer les valeurs du triangle de Pascal (Figure 1).\n\nDans le triangle de Pascal, chaque ligne commence et se termine par le nombre 1.\nComme l\u2019illustre la Figure 2, on additionne deux valeurs successives d\u2019une ligne pour\nobtenir la valeur qui se situe sous la deuxi\u00e8me valeur.\n\n![image](data2023/17_triangle.png){: .center width=60%}\n\nCompl\u00e9ter la fonction `pascal` ci-apr\u00e8s prenant en param\u00e8tre un entier `n` sup\u00e9rieur ou\n\u00e9gal \u00e0 2. Cette fonction doit renvoyer une liste correspondant au triangle de Pascal de la\nligne 0 \u00e0 la ligne `n`. Le tableau repr\u00e9sentant le triangle de Pascal sera contenu dans la\nvariable `triangle`.\n\n```python linenums='1'\ndef pascal(n):\n    triangle = [[1]]\n    for k in range(1,...):\n        ligne_k = [...]\n        for i in range(1,k):\n            ligne_k.append(triangle[...][i-1]+triangle[...][...])\n        ligne_k.append(...)\n        triangle.append(ligne_k)\n    return triangle\n</code></pre> <p>Pour <code>n = 4</code>, voici ce qu'on devra obtenir : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; pascal(4)\n[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n</code></pre> Pour <code>n = 5</code>, voici ce qu'on devra obtenir : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; pascal(5)\n[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1]]\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-18","title":"\u25b6 Sujet 18","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-181","title":"Exercice 18.1","text":"<p>Exercice 18.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>max_et_indice</code> qui prend en param\u00e8tre une liste non vide <code>tab</code> de nombres entiers et qui renvoie la valeur du plus grand \u00e9l\u00e9ment de cette liste ainsi que l\u2019indice de sa premi\u00e8re apparition dans cette liste.</p> <p>L\u2019utilisation de la fonction native <code>max</code> n\u2019est pas autoris\u00e9e.</p> <p>Ne pas oublier d\u2019ajouter au corps de la fonction une documentation et une ou plusieurs assertions pour v\u00e9rifier les pr\u00e9-conditions.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; max_et_indice([1, 5, 6, 9, 1, 2, 3, 7, 9, 8])\n(9, 3)\n&gt;&gt;&gt; max_et_indice([-2])\n(-2, 0)\n&gt;&gt;&gt; max_et_indice([-1, -1, 3, 3, 3])\n(3, 2)\n&gt;&gt;&gt; max_et_indice([1, 1, 1, 1])\n(1, 0)\n</code></pre> \ud83d\udc0d Script Python<pre><code>def max_et_indice(tab):\n    '''\n    renvoie la valeur du plus grand \u00e9l\u00e9ment de cette liste ainsi\n    que l\u2019indice de sa premi\u00e8re apparition dans cette liste.\n    '''\n    assert tab != [], 'le tableau est vide'\n\n    val_max = tab[0]\n    ind_max = 0\n    for i in range(len(tab)):\n        if tab[i] &gt; val_max:\n            val_max = tab[i]\n            ind_max = i\n    return (val_max, ind_max)\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `max_et_indice` qui prend en param\u00e8tre une liste non vide `tab` de\nnombres entiers et qui renvoie la valeur du plus grand \u00e9l\u00e9ment de cette liste ainsi que\nl\u2019indice de sa premi\u00e8re apparition dans cette liste.\n\nL\u2019utilisation de la fonction native `max` n\u2019est pas autoris\u00e9e.\n\nNe pas oublier d\u2019ajouter au corps de la fonction une documentation et une ou plusieurs\nassertions pour v\u00e9rifier les pr\u00e9-conditions.\n\nExemples :\n\n```python\n&gt;&gt;&gt; max_et_indice([1, 5, 6, 9, 1, 2, 3, 7, 9, 8])\n(9, 3)\n&gt;&gt;&gt; max_et_indice([-2])\n(-2, 0)\n&gt;&gt;&gt; max_et_indice([-1, -1, 3, 3, 3])\n(3, 2)\n&gt;&gt;&gt; max_et_indice([1, 1, 1, 1])\n(1, 0)\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-182","title":"Exercice 18.2","text":"<p>Exercice 18.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>L\u2019ordre des g\u00e8nes sur un chromosome est repr\u00e9sent\u00e9 par un tableau <code>ordre</code> de <code>n</code> cases d\u2019entiers distincts deux \u00e0 deux et compris entre 1 et <code>n</code>.</p> <p>Par exemple, <code>ordre = [5, 4, 3, 6, 7, 2, 1, 8, 9]</code> dans le cas <code>n = 9</code>.</p> <p>On dit qu\u2019il y a un point de rupture dans <code>ordre</code> dans chacune des situations suivantes :</p> <ul> <li>la premi\u00e8re valeur de <code>ordre</code> n\u2019est pas 1 ;</li> <li>l\u2019\u00e9cart entre deux g\u00e8nes cons\u00e9cutifs n\u2019est pas \u00e9gal \u00e0 1 ;</li> <li>la derni\u00e8re valeur de <code>ordre</code> n\u2019est pas n.</li> </ul> <p>Par exemple, si <code>ordre = [5, 4, 3, 6, 7, 2, 1, 8, 9]</code> avec <code>n = 9</code>, on a</p> <ul> <li>un point de rupture au d\u00e9but car 5 est diff\u00e9rent de 1</li> <li>un point de rupture entre 3 et 6 (l\u2019\u00e9cart est de 3)</li> <li>un point de rupture entre 7 et 2 (l\u2019\u00e9cart est de 5)</li> <li>un point de rupture entre 1 et 8 (l\u2019\u00e9cart est de 7)</li> </ul> <p>Il y a donc 4 points de rupture.</p> <p>Compl\u00e9ter les fonctions Python <code>est_un_ordre</code> et <code>nombre_points_rupture</code> propos\u00e9es \u00e0 la page suivante pour que :</p> <ul> <li> <p>la fonction <code>est_un_ordre</code> renvoie <code>True</code> si le tableau pass\u00e9 en param\u00e8tre repr\u00e9sente bien un ordre de g\u00e8nes de chromosome et <code>False</code> sinon ;</p> </li> <li> <p>la fonction <code>nombre_points_rupture</code> renvoie le nombre de points de rupture d\u2019un tableau pass\u00e9 en param\u00e8tre repr\u00e9sentant l\u2019ordre de g\u00e8nes d\u2019un chromosome.</p> </li> </ul> \ud83d\udc0d Script Python<pre><code>def est_un_ordre(tab):\n    '''\n    Renvoie True si tab est de longueur n et contient tous les entiers\n    de 1 \u00e0 n, False sinon\n    '''\n    for i in range(1,...):\n        if ...:\n            return False\n    return True\n\n\ndef nombre_points_rupture(ordre):\n    '''\n    Renvoie le nombre de point de rupture de ordre qui repr\u00e9sente un ordre\n    de g\u00e8nes de chromosome\n    '''\n    assert ... # ordre n'est pas un ordre de g\u00e8nes\n    n = len(ordre)\n    nb = 0\n    if ordre[...] != 1: # le premier n'est pas 1\n        nb = nb + 1\n    i = 0\n    while i &lt; ...:\n        if ... not in [-1, 1]: # l'\u00e9cart n'est pas 1\n            nb = nb + 1\n        i = i + 1\n    if ordre[...] != n: # le dernier n'est pas n\n        nb = nb + 1\n    return nb\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; est_un_ordre([1, 6, 2, 8, 3, 7])\nFalse\n&gt;&gt;&gt; est_un_ordre([5, 4, 3, 6, 7, 2, 1, 8, 9])\nTrue\n&gt;&gt;&gt; nombre_points_rupture([5, 4, 3, 6, 7, 2, 1, 8, 9])\n4\n&gt;&gt;&gt; nombre_points_rupture([1, 2, 3, 4, 5])\n0\n&gt;&gt;&gt; nombre_points_rupture([1, 6, 2, 8, 3, 7, 4, 5])\n7\n&gt;&gt;&gt; nombre_points_rupture([2, 1, 3, 4])\n2\n</code></pre> \ud83d\udc0d Script Python<pre><code>def est_un_ordre(tab):\n    '''\n    Renvoie True si tab est de longueur n et contient tous les entiers\n    de 1 \u00e0 n, False sinon\n    '''\n    for i in range(1, len(tab)+1):\n        if i not in tab:\n            return False\n    return True\n\n\ndef nombre_points_rupture(ordre):\n    '''\n    Renvoie le nombre de point de rupture de ordre qui repr\u00e9sente un ordre\n    de g\u00e8nes de chromosome\n    '''\n    assert est_un_ordre(ordre) # ordre n'est pas un ordre de g\u00e8nes\n    n = len(ordre)\n    nb = 0\n    if ordre[0] != 1: # le premier n'est pas 1\n        nb = nb + 1\n    i = 0\n    while i &lt; n-1:\n        if ordre[i+1] - ordre[i] not in [-1, 1]: # l'\u00e9cart n'est pas 1\n            nb = nb + 1\n        i = i + 1\n    if ordre[n-1] != n: # le dernier n'est pas n\n        nb = nb + 1\n    return nb\n</code></pre> Markdown<pre><code>L\u2019ordre des g\u00e8nes sur un chromosome est repr\u00e9sent\u00e9 par un tableau `ordre` de `n` cases\nd\u2019entiers distincts deux \u00e0 deux et compris entre 1 et `n`.\n\nPar exemple, `ordre = [5, 4, 3, 6, 7, 2, 1, 8, 9]` dans le cas `n = 9`.\n\nOn dit qu\u2019il y a un point de rupture dans `ordre` dans chacune des situations suivantes :\n\n- la premi\u00e8re valeur de `ordre` n\u2019est pas 1 ;\n- l\u2019\u00e9cart entre deux g\u00e8nes cons\u00e9cutifs n\u2019est pas \u00e9gal \u00e0 1 ;\n- la derni\u00e8re valeur de `ordre` n\u2019est pas n.\n\nPar exemple, si `ordre = [5, 4, 3, 6, 7, 2, 1, 8, 9]` avec `n = 9`, on a\n\n- un point de rupture au d\u00e9but car 5 est diff\u00e9rent de 1\n- un point de rupture entre 3 et 6 (l\u2019\u00e9cart est de 3)\n- un point de rupture entre 7 et 2 (l\u2019\u00e9cart est de 5)\n- un point de rupture entre 1 et 8 (l\u2019\u00e9cart est de 7)\n\nIl y a donc 4 points de rupture.\n\nCompl\u00e9ter les fonctions Python `est_un_ordre` et `nombre_points_rupture`\npropos\u00e9es \u00e0 la page suivante pour que :\n\n\n- la fonction `est_un_ordre` renvoie `True` si le tableau pass\u00e9 en param\u00e8tre\nrepr\u00e9sente bien un ordre de g\u00e8nes de chromosome et `False` sinon ;\n\n- la fonction `nombre_points_rupture` renvoie le nombre de points de rupture\nd\u2019un tableau pass\u00e9 en param\u00e8tre repr\u00e9sentant l\u2019ordre de g\u00e8nes d\u2019un\nchromosome.\n\n```python linenums='1'\ndef est_un_ordre(tab):\n    '''\n    Renvoie True si tab est de longueur n et contient tous les entiers\n    de 1 \u00e0 n, False sinon\n    '''\n    for i in range(1,...):\n        if ...:\n            return False\n    return True\n\n\ndef nombre_points_rupture(ordre):\n    '''\n    Renvoie le nombre de point de rupture de ordre qui repr\u00e9sente un ordre\n    de g\u00e8nes de chromosome\n    '''\n    assert ... # ordre n'est pas un ordre de g\u00e8nes\n    n = len(ordre)\n    nb = 0\n    if ordre[...] != 1: # le premier n'est pas 1\n        nb = nb + 1\n    i = 0\n    while i &lt; ...:\n        if ... not in [-1, 1]: # l'\u00e9cart n'est pas 1\n            nb = nb + 1\n        i = i + 1\n    if ordre[...] != n: # le dernier n'est pas n\n        nb = nb + 1\n    return nb\n</code></pre> <p>Exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; est_un_ordre([1, 6, 2, 8, 3, 7])\nFalse\n&gt;&gt;&gt; est_un_ordre([5, 4, 3, 6, 7, 2, 1, 8, 9])\nTrue\n&gt;&gt;&gt; nombre_points_rupture([5, 4, 3, 6, 7, 2, 1, 8, 9])\n4\n&gt;&gt;&gt; nombre_points_rupture([1, 2, 3, 4, 5])\n0\n&gt;&gt;&gt; nombre_points_rupture([1, 6, 2, 8, 3, 7, 4, 5])\n7\n&gt;&gt;&gt; nombre_points_rupture([2, 1, 3, 4])\n2\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-19","title":"\u25b6 Sujet 19","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-191","title":"Exercice 19.1","text":"<p>Exercice 19.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres un tableau <code>tab</code> de nombres entiers tri\u00e9s par ordre croissant et un nombre entier <code>n</code>, et qui effectue une recherche dichotomique du nombre entier <code>n</code> dans le tableau non vide <code>tab</code>.</p> <p>Cette fonction doit renvoyer un indice correspondant au nombre cherch\u00e9 s\u2019il est dans le tableau, <code>-1</code> sinon.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche([2, 3, 4, 5, 6], 5)\n3\n&gt;&gt;&gt; recherche([2, 3, 4, 6, 7], 5)\n-1\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(tab, n):\n    ind_debut = 0\n    ind_fin = len(tab) - 1\n    while ind_debut &lt;= ind_fin:\n        ind_milieu = (ind_debut + ind_fin) // 2\n        if tab[ind_milieu] == n:\n            return ind_milieu\n        elif tab[ind_milieu] &lt; n:\n            ind_debut = ind_milieu + 1\n        else:\n            ind_fin = ind_milieu - 1\n    return -1\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `recherche` qui prend en param\u00e8tres un tableau `tab` de nombres\nentiers tri\u00e9s par ordre croissant et un nombre entier `n`, et qui effectue une recherche\ndichotomique du nombre entier `n` dans le tableau non vide `tab`.\n\nCette fonction doit renvoyer un indice correspondant au nombre cherch\u00e9 s\u2019il est dans le\ntableau, `-1` sinon.\n\nExemples :\n```python\n&gt;&gt;&gt; recherche([2, 3, 4, 5, 6], 5)\n3\n&gt;&gt;&gt; recherche([2, 3, 4, 6, 7], 5)\n-1\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-192","title":"Exercice 19.2","text":"<p>Exercice 19.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Le codage de C\u00e9sar transforme un message en changeant chaque lettre en la d\u00e9calant dans l\u2019alphabet. Par exemple, avec un d\u00e9calage de 3, le A se transforme en D, le B en E, ..., le X en A, le Y en B et le Z en C. Les autres caract\u00e8res (\u2018!\u2019,\u2019 ?\u2019 ...) ne sont pas cod\u00e9s.</p> <p>La fonction <code>position_alphabet</code> ci-dessous prend en param\u00e8tre un caract\u00e8re <code>lettre</code> et renvoie la position de <code>lettre</code> dans la cha\u00eene de caract\u00e8res <code>ALPHABET</code> s\u2019il s\u2019y trouve.</p> <p>La fonction <code>cesar</code> prend en param\u00e8tre une cha\u00eene de caract\u00e8res <code>message</code> et un nombre entier <code>decalage</code> et renvoie le nouveau message cod\u00e9 avec le codage de C\u00e9sar utilisant le d\u00e9calage <code>decalage</code>.</p> \ud83d\udc0d Script Python<pre><code>ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef position_alphabet(lettre):\n    return ord(lettre) - ord('A')\n\ndef cesar(message, decalage):\n    resultat = ''\n    for ... in message:\n        if 'A' &lt;= c and c &lt;= 'Z':\n            indice = ( ... ) % 26\n            resultat = resultat + ALPHABET[indice]\n        else:\n            resultat = ...\n    return resultat\n</code></pre> <p>Compl\u00e9ter la fonction <code>cesar</code>.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; cesar('BONJOUR A TOUS. VIVE LA MATIERE NSI !', 4)\n'FSRNSYV E XSYW. ZMZI PE QEXMIVI RWM !'\n&gt;&gt;&gt; cesar('GTSOTZW F YTZX. ANAJ QF RFYNJWJ SXN !', -5)\n'BONJOUR A TOUS. VIVE LA MATIERE NSI !'\n</code></pre> \ud83d\udc0d Script Python<pre><code>ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef position_alphabet(lettre):\n    return ord(lettre) - ord('A')\n\ndef cesar(message, decalage):\n    resultat = ''\n    for c in message:\n        if 'A' &lt;= c and c &lt;= 'Z':\n            indice = (position_alphabet(c) + decalage) % 26\n            resultat = resultat + ALPHABET[indice]\n        else:\n            resultat = resultat + c\n    return resultat\n</code></pre> Markdown<pre><code>Le codage de C\u00e9sar transforme un message en changeant chaque lettre en la d\u00e9calant\ndans l\u2019alphabet.\nPar exemple, avec un d\u00e9calage de 3, le A se transforme en D, le B en E, ..., le X en A,\nle Y en B et le Z en C. Les autres caract\u00e8res (\u2018!\u2019,\u2019 ?\u2019 ...) ne sont pas cod\u00e9s.\n\nLa fonction `position_alphabet` ci-dessous prend en param\u00e8tre un caract\u00e8re `lettre`\net renvoie la position de `lettre` dans la cha\u00eene de caract\u00e8res `ALPHABET` s\u2019il s\u2019y trouve.\n\nLa fonction `cesar` prend en param\u00e8tre une cha\u00eene de caract\u00e8res `message` et un nombre\nentier `decalage` et renvoie le nouveau message cod\u00e9 avec le codage de C\u00e9sar utilisant\nle d\u00e9calage `decalage`.\n\n```python linenums='1'\nALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef position_alphabet(lettre):\n    return ord(lettre) - ord('A')\n\ndef cesar(message, decalage):\n    resultat = ''\n    for ... in message:\n        if 'A' &lt;= c and c &lt;= 'Z':\n            indice = ( ... ) % 26\n            resultat = resultat + ALPHABET[indice]\n        else:\n            resultat = ...\n    return resultat\n</code></pre> <p>Compl\u00e9ter la fonction <code>cesar</code>.</p> <p>Exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; cesar('BONJOUR A TOUS. VIVE LA MATIERE NSI !', 4)\n'FSRNSYV E XSYW. ZMZI PE QEXMIVI RWM !'\n&gt;&gt;&gt; cesar('GTSOTZW F YTZX. ANAJ QF RFYNJWJ SXN !', -5)\n'BONJOUR A TOUS. VIVE LA MATIERE NSI !'\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-20","title":"\u25b6 Sujet 20","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-201","title":"Exercice 20.1","text":"<p>Exercice 20.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>ajoute_dictionnaires</code> qui prend en param\u00e8tres deux dictionnaires <code>d1</code> et <code>d2</code> dont les cl\u00e9s sont des nombres et renvoie le dictionnaire <code>d</code> d\u00e9fini de la fa\u00e7on suivante :</p> <ul> <li>Les cl\u00e9s de <code>d</code> sont celles de <code>d1</code> et celles de <code>d2</code> r\u00e9unies.</li> <li>Si une cl\u00e9 est pr\u00e9sente dans les deux dictionnaires <code>d1</code> et <code>d2</code>, sa valeur associ\u00e9e dans le dictionnaire d est la somme de ses valeurs dans les dictionnaires <code>d1</code> et <code>d2</code>.</li> <li>Si une cl\u00e9 n\u2019est pr\u00e9sente que dans un des deux dictionnaires, sa valeur associ\u00e9e dans le dictionnaire <code>d</code> est la m\u00eame que sa valeur dans le dictionnaire o\u00f9 elle est pr\u00e9sente.</li> </ul> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; ajoute_dictionnaires({1: 5, 2: 7}, {2: 9, 3: 11})\n{1: 5, 2: 16, 3: 11}\n&gt;&gt;&gt; ajoute_dictionnaires({}, {2: 9, 3: 11})\n{2: 9, 3: 11}\n&gt;&gt;&gt; ajoute_dictionnaires({1: 5, 2: 7}, {})\n{1: 5, 2: 7}\n</code></pre> \ud83d\udc0d Script Python<pre><code>def ajoute_dictionnaires(d1, d2):\nfor cle in d2:\n    if cle in d1:\n        d1[cle] += d2[cle]\n    else:\n        d1[cle] = d2[cle]\nreturn d1\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `ajoute_dictionnaires` qui prend en param\u00e8tres deux\ndictionnaires `d1` et `d2` dont les cl\u00e9s sont des nombres et renvoie le dictionnaire `d` d\u00e9fini de\nla fa\u00e7on suivante :\n\n- Les cl\u00e9s de `d` sont celles de `d1` et celles de `d2` r\u00e9unies.\n- Si une cl\u00e9 est pr\u00e9sente dans les deux dictionnaires `d1` et `d2`, sa valeur associ\u00e9e\ndans le dictionnaire d est la somme de ses valeurs dans les dictionnaires `d1` et `d2`.\n- Si une cl\u00e9 n\u2019est pr\u00e9sente que dans un des deux dictionnaires, sa valeur associ\u00e9e\ndans le dictionnaire `d` est la m\u00eame que sa valeur dans le dictionnaire o\u00f9 elle est\npr\u00e9sente.\n\nExemples :\n\n```python\n&gt;&gt;&gt; ajoute_dictionnaires({1: 5, 2: 7}, {2: 9, 3: 11})\n{1: 5, 2: 16, 3: 11}\n&gt;&gt;&gt; ajoute_dictionnaires({}, {2: 9, 3: 11})\n{2: 9, 3: 11}\n&gt;&gt;&gt; ajoute_dictionnaires({1: 5, 2: 7}, {})\n{1: 5, 2: 7}\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-202","title":"Exercice 20.2","text":"<p>Exercice 20.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On consid\u00e8re une piste carr\u00e9e qui contient 4 cases par c\u00f4t\u00e9. Les cases sont num\u00e9rot\u00e9es de 0 inclus \u00e0 12 exclu comme ci-dessous :</p> <p></p> <p>L\u2019objectif de l\u2019exercice est d\u2019impl\u00e9menter le jeu suivant :</p> <p>Au d\u00e9part, le joueur place son pion sur la case 0. A chaque coup, il lance un d\u00e9 \u00e9quilibr\u00e9 \u00e0 six faces et avance son pion d\u2019autant de cases que le nombre indiqu\u00e9 par le d\u00e9 (entre 1 et 6 inclus) dans le sens des aiguilles d\u2019une montre.</p> <p>Par exemple, s\u2019il obtient 2 au premier lancer, il pose son pion sur la case 2 puis s\u2019il obtient 6 au deuxi\u00e8me lancer, il le pose sur la case 8, puis s\u2019il obtient \u00e0 nouveau 6, il pose le pion sur la case 2.</p> <p>Le jeu se termine lorsque le joueur a pos\u00e9 son pion sur toutes les cases de la piste.</p> <p>Compl\u00e9ter la fonction <code>nbre_coups</code> ci-dessous de sorte qu\u2019elle renvoie le nombre de lancers al\u00e9atoires n\u00e9cessaires pour terminer le jeu.</p> <p>Proposer ensuite quelques tests pour en v\u00e9rifier le fonctionnement.</p> \ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef nbre_coups():\n    n = ...\n    cases_vues = [0]\n    case_en_cours = 0\n    nbre_cases = 12\n    while ... &lt; ...:\n        x = randint(1, 6)\n        case_en_cours = (case_en_cours + ...) % ...\n        if ...:\n            cases_vues.append(case_en_cours)\n        n = ...\n    return n\n</code></pre> \ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef nbre_coups():\n    n = 0\n    cases_vues = [0]\n    case_en_cours = 0\n    nbre_cases = 12\n    while len(cases_vues) &lt; nbre_cases:\n        x = randint(1, 6)\n        case_en_cours = (case_en_cours + x) % nbre_cases\n        if case_en_cours not in cases_vues:\n            cases_vues.append(case_en_cours)\n        n = n + 1\n    return n\n</code></pre> <p>Markdown<pre><code>On consid\u00e8re une piste carr\u00e9e qui contient 4 cases par c\u00f4t\u00e9. Les cases sont num\u00e9rot\u00e9es\nde 0 inclus \u00e0 12 exclu comme ci-dessous :\n\n![image](data2023/20_carre.png){: .center width=20%}\n\nL\u2019objectif de l\u2019exercice est d\u2019impl\u00e9menter le jeu suivant :\n\nAu d\u00e9part, le joueur place son pion sur la case 0. A chaque coup, il lance un d\u00e9 \u00e9quilibr\u00e9\n\u00e0 six faces et avance son pion d\u2019autant de cases que le nombre indiqu\u00e9 par le d\u00e9 (entre\n1 et 6 inclus) dans le sens des aiguilles d\u2019une montre.\n\nPar exemple, s\u2019il obtient 2 au premier lancer, il pose son pion sur la case 2 puis s\u2019il\nobtient 6 au deuxi\u00e8me lancer, il le pose sur la case 8, puis s\u2019il obtient \u00e0 nouveau 6, il\npose le pion sur la case 2.\n\nLe jeu se termine lorsque le joueur a pos\u00e9 son pion sur **toutes les cases** de la piste.\n\nCompl\u00e9ter la fonction `nbre_coups` ci-dessous de sorte qu\u2019elle renvoie le nombre de\nlancers al\u00e9atoires n\u00e9cessaires pour terminer le jeu.\n\nProposer ensuite quelques tests pour en v\u00e9rifier le fonctionnement.\n\n```python linenums='1'\nfrom random import randint\n\ndef nbre_coups():\n    n = ...\n    cases_vues = [0]\n    case_en_cours = 0\n    nbre_cases = 12\n    while ... &lt; ...:\n        x = randint(1, 6)\n        case_en_cours = (case_en_cours + ...) % ...\n        if ...:\n            cases_vues.append(case_en_cours)\n        n = ...\n    return n\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-21","title":"\u25b6 Sujet 21","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-211","title":"Exercice 21.1","text":"<p>Exercice 21.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Le codage par diff\u00e9rence (delta encoding en anglais) permet de compresser un tableau de donn\u00e9es en indiquant pour chaque donn\u00e9e, sa diff\u00e9rence avec la pr\u00e9c\u00e9dente (plut\u00f4t que la donn\u00e9e elle-m\u00eame). On se retrouve alors avec un tableau de donn\u00e9es plus petit, n\u00e9cessitant moins de place en m\u00e9moire. Cette m\u00e9thode se r\u00e9v\u00e8le efficace lorsque les valeurs cons\u00e9cutives sont proches. </p> <p>Programmer la fonction <code>delta(liste)</code> qui prend en param\u00e8tre un tableau non vide de nombres entiers et qui renvoie un tableau contenant les valeurs enti\u00e8res compress\u00e9es \u00e0 l\u2019aide cette technique.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; delta([1000, 800, 802, 1000, 1003])\n[1000, -200, 2, 198, 3]\n&gt;&gt;&gt; delta([42])\n[42] \n</code></pre> \ud83d\udc0d Script Python<pre><code>def delta(tab):\n    diff = [tab[0]]\n    for i in range(1, len(tab)):\n        diff.append(tab[i] - tab[i-1])\n    return diff\n</code></pre> \ud83d\udccb Texte<pre><code>Le codage par diff\u00e9rence (*delta encoding* en anglais) permet de compresser un tableau de\ndonn\u00e9es en indiquant pour chaque donn\u00e9e, sa diff\u00e9rence avec la pr\u00e9c\u00e9dente (plut\u00f4t que la\ndonn\u00e9e elle-m\u00eame). On se retrouve alors avec un tableau de donn\u00e9es plus petit, n\u00e9cessitant\nmoins de place en m\u00e9moire. Cette m\u00e9thode se r\u00e9v\u00e8le efficace lorsque les valeurs cons\u00e9cutives\nsont proches.\n\nProgrammer la fonction `delta(liste)` qui prend en param\u00e8tre un tableau non vide de nombres entiers\net qui renvoie un tableau contenant les valeurs enti\u00e8res compress\u00e9es \u00e0 l\u2019aide cette technique.\n\nExemples :\n\n```python\n&gt;&gt;&gt; delta([1000, 800, 802, 1000, 1003])\n[1000, -200, 2, 198, 3]\n&gt;&gt;&gt; delta([42])\n[42] \n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-212","title":"Exercice 21.2","text":"<p>Exercice 21.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Une expression arithm\u00e9tique ne comportant que les quatre op\u00e9rations +, \u2212, \u00d7, \u00f7 peut \u00eatre repr\u00e9sent\u00e9e sous forme d\u2019arbre binaire. Les n\u0153uds internes sont des op\u00e9rateurs et les feuilles sont des nombres. Dans un tel arbre, la disposition des n\u0153uds joue le r\u00f4le des parenth\u00e8ses que nous connaissons bien.  </p> <p></p> <p>En parcourant en profondeur infixe l\u2019arbre binaire ci-dessus, on retrouve l\u2019expression not\u00e9e habituellement :  </p> \\[(3 \\times (8 + 7)) \u2212 (2 + 1)\\] <p>La classe <code>Noeud</code> ci-apr\u00e8s permet d\u2019impl\u00e9menter une structure d\u2019arbre binaire.</p> <p>Compl\u00e9ter la fonction r\u00e9cursive <code>expression_infixe</code> qui prend en param\u00e8tre un objet de la classe <code>Noeud</code> et qui renvoie l\u2019expression arithm\u00e9tique repr\u00e9sent\u00e9e par l\u2019arbre binaire pass\u00e9 en param\u00e8tre, sous forme d\u2019une cha\u00eene de caract\u00e8res contenant des parenth\u00e8ses.  </p> <p>R\u00e9sultat attendu avec l\u2019arbre ci-dessus :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; e = Noeud(Noeud(Noeud(None, 3, None), '*', Noeud(Noeud(None, 8, None),\n'+', Noeud(None, 7, None))), '-', Noeud(Noeud(None, 2, None), '+',\nNoeud(None, 1, None)))\n\n&gt;&gt;&gt; expression_infixe(e)\n'((3*(8+7))-(2+1))'\n</code></pre> \ud83d\udc0d Script Python<pre><code>class Noeud:\n    '''\n    classe impl\u00e9mentant un noeud d'arbre binaire\n    '''\n\n    def __init__(self, g, v, d):\n        '''\n        un objet Noeud poss\u00e8de 3 attributs :\n        - gauche : le sous-arbre gauche,\n        - valeur : la valeur de l'\u00e9tiquette,\n        - droit : le sous-arbre droit.\n        '''\n        self.gauche = g\n        self.valeur = v\n        self.droit = d\n\n    def __str__(self):\n        '''\n        renvoie la repr\u00e9sentation du noeud en chaine de caract\u00e8res\n        '''\n        return str(self.valeur)\n\n    def est_une_feuille(self):\n        '''\n        renvoie True si et seulement si le noeud est une feuille\n        '''\n        return self.gauche is None and self.droit is None\n\n\ndef expression_infixe(e):\n    s = ...\n    if e.gauche is not None:\n        s = '(' + s + expression_infixe(...)\n    s = s + ...\n    if ... is not None:\n        s = s + ... + ...\n    return s\n</code></pre> \ud83d\udc0d Script Python<pre><code>class Noeud:\n    '''\n    classe impl\u00e9mentant un noeud d'arbre binaire\n    '''\n\n    def __init__(self, g, v, d):\n        '''\n        un objet Noeud poss\u00e8de 3 attributs :\n        - gauche : le sous-arbre gauche,\n        - valeur : la valeur de l'\u00e9tiquette,\n        - droit : le sous-arbre droit.\n        '''\n        self.gauche = g\n        self.valeur = v\n        self.droit = d\n\n    def __str__(self):\n        '''\n        renvoie la repr\u00e9sentation du noeud en chaine de caract\u00e8res\n        '''\n        return str(self.valeur)\n\n    def est_une_feuille(self):\n        '''\n        renvoie True si et seulement si le noeud est une feuille\n        '''\n        return self.gauche is None and self.droit is None\n\n\ndef expression_infixe(e):\n    s = ''\n    if e.gauche is not None:\n        s = '(' + s + expression_infixe(e.gauche)\n    s = s + str(e.valeur)\n    if e.droit is not None:\n        s = s + expression_infixe(e.droit) + ')'\n    return s\n</code></pre> Markdown<pre><code>Une expression arithm\u00e9tique ne comportant que les quatre op\u00e9rations +, \u2212, \u00d7, \u00f7 peut \u00eatre\nrepr\u00e9sent\u00e9e sous forme d\u2019arbre binaire. Les n\u0153uds internes sont des op\u00e9rateurs et les feuilles\nsont des nombres. Dans un tel arbre, la disposition des n\u0153uds joue le r\u00f4le des parenth\u00e8ses que\nnous connaissons bien.  \n\n![image](data2023/21_arbre.png){: .center width=30%}\n\nEn parcourant en profondeur infixe l\u2019arbre binaire ci-dessus, on\nretrouve l\u2019expression not\u00e9e habituellement :  \n\n\n$$(3 \\times (8 + 7)) \u2212 (2 + 1)$$\n\n\nLa classe `Noeud` ci-apr\u00e8s permet d\u2019impl\u00e9menter une structure\nd\u2019arbre binaire.\n\nCompl\u00e9ter la fonction r\u00e9cursive `expression_infixe` qui prend\nen param\u00e8tre un objet de la classe `Noeud` et qui renvoie\nl\u2019expression arithm\u00e9tique repr\u00e9sent\u00e9e par l\u2019arbre binaire pass\u00e9\nen param\u00e8tre, sous forme d\u2019une cha\u00eene de caract\u00e8res contenant\ndes parenth\u00e8ses.  \n\nR\u00e9sultat attendu avec l\u2019arbre ci-dessus :\n\n```python\n&gt;&gt;&gt; e = Noeud(Noeud(Noeud(None, 3, None), '*', Noeud(Noeud(None, 8, None),\n'+', Noeud(None, 7, None))), '-', Noeud(Noeud(None, 2, None), '+',\nNoeud(None, 1, None)))\n\n&gt;&gt;&gt; expression_infixe(e)\n'((3*(8+7))-(2+1))'\n</code></pre> <p>\ud83d\udc0d Script Python<pre><code>class Noeud:\n    '''\n    classe impl\u00e9mentant un noeud d'arbre binaire\n    '''\n\n    def __init__(self, g, v, d):\n        '''\n        un objet Noeud poss\u00e8de 3 attributs :\n        - gauche : le sous-arbre gauche,\n        - valeur : la valeur de l'\u00e9tiquette,\n        - droit : le sous-arbre droit.\n        '''\n        self.gauche = g\n        self.valeur = v\n        self.droit = d\n\n    def __str__(self):\n        '''\n        renvoie la repr\u00e9sentation du noeud en chaine de caract\u00e8res\n        '''\n        return str(self.valeur)\n\n    def est_une_feuille(self):\n        '''\n        renvoie True si et seulement si le noeud est une feuille\n        '''\n        return self.gauche is None and self.droit is None\n\n\ndef expression_infixe(e):\n    s = ...\n    if e.gauche is not None:\n        s = '(' + s + expression_infixe(...)\n    s = s + ...\n    if ... is not None:\n        s = s + ... + ...\n    return s\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-22","title":"\u25b6 Sujet 22","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-221","title":"Exercice 22.1","text":"<p>Exercice 22.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>On rappelle que :</p> <ul> <li>le nombre \\(a^n\\) est le nombre \\(a \\times a \\times a \\times \\dots \\times a\\), o\u00f9 le facteur \\(a\\) appara\u00eet $n fois,</li> <li>en langage Python, l\u2019instruction <code>t[-1]</code> permet d\u2019acc\u00e9der au dernier \u00e9l\u00e9ment du tableau <code>t</code>.</li> </ul> <p>Dans cet exercice, l\u2019op\u00e9rateur <code>**</code>  et la fonction <code>pow</code> ne sont pas autoris\u00e9s.</p> <p>Programmer en langage Python une fonction <code>liste_puissances</code> qui prend en argument un nombre entier <code>a</code>, un entier strictement positif <code>n</code> et qui renvoie la liste de ses puissances \\(\\rm{[a^1, a^2, ..., a^n]}\\).</p> <p>Programmer \u00e9galement une fonction <code>liste_puisssances_borne</code> qui prend en argument un nombre entier <code>a</code> sup\u00e9rieur ou \u00e9gal \u00e0 2 et un entier <code>borne</code>, et qui renvoie la liste de ses puissances, \u00e0 l\u2019exclusion de \\(\\rm{a^0}\\), strictement inf\u00e9rieures \u00e0 <code>borne</code>.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; liste_puissances(3, 5)\n[3, 9, 27, 81, 243]\n&gt;&gt;&gt; liste_puissances(-2, 4)\n[-2, 4, -8, 16]\n&gt;&gt;&gt; liste_puissances_borne(2, 16)\n[2, 4, 8]\n&gt;&gt;&gt; liste_puissances_borne(2, 17)\n[2, 4, 8, 16]\n&gt;&gt;&gt; liste_puissances_borne(5, 5)\n[]\n</code></pre> \ud83d\udc0d Script Python<pre><code>def liste_puissances(a, n):\n    lst = [a]*n\n    for i in range(1, n):\n        lst[i] = a * lst[i-1]\n    return lst\n\ndef liste_puissances_borne(a, borne):\n    lst = []\n    val = a\n    while val &lt; borne:\n        lst.append(val)\n        val = val * a\n    return lst\n</code></pre> \ud83d\udccb Texte<pre><code>On rappelle que :\n\n- le nombre $a^n$ est le nombre $a \\times a \\times a \\times \\dots \\times a$, o\u00f9 le facteur $a$ appara\u00eet $n fois,\n- en langage Python, l\u2019instruction `t[-1]` permet d\u2019acc\u00e9der au dernier \u00e9l\u00e9ment du\ntableau `t`.\n\nDans cet exercice, l\u2019op\u00e9rateur ```**```  et la fonction `pow` ne sont pas autoris\u00e9s.\n\nProgrammer en langage Python une fonction `liste_puissances` qui prend en argument\nun nombre entier `a`, un entier strictement positif `n` et qui renvoie la liste de ses puissances\n$\\rm{[a^1, a^2, ..., a^n]}$.\n\nProgrammer \u00e9galement une fonction `liste_puisssances_borne` qui prend en\nargument un nombre entier `a` sup\u00e9rieur ou \u00e9gal \u00e0 2 et un entier `borne`, et qui renvoie la\nliste de ses puissances, \u00e0 l\u2019exclusion de $\\rm{a^0}$, strictement inf\u00e9rieures \u00e0 `borne`.\n\nExemples :\n\n```python\n&gt;&gt;&gt; liste_puissances(3, 5)\n[3, 9, 27, 81, 243]\n&gt;&gt;&gt; liste_puissances(-2, 4)\n[-2, 4, -8, 16]\n&gt;&gt;&gt; liste_puissances_borne(2, 16)\n[2, 4, 8]\n&gt;&gt;&gt; liste_puissances_borne(2, 17)\n[2, 4, 8, 16]\n&gt;&gt;&gt; liste_puissances_borne(5, 5)\n[]\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-222","title":"Exercice 22.2","text":"<p>Exercice 22.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On affecte \u00e0 chaque lettre de l'alphabet un code selon le tableau ci-dessous :</p> A B C D E F G H I J K L M 1 2 3 4 5 6 7 8 9 10 11 12 13 N O P Q R S T U V W X Y Z 14 15 16 17 18 19 20 21 22 23 24 25 26 <p>Pour un mot donn\u00e9, on d\u00e9termine d\u2019une part son code alphab\u00e9tique concat\u00e9n\u00e9, obtenu par la juxtaposition des codes de chacun de ses caract\u00e8res, et d\u2019autre part, son code additionn\u00e9, qui est la somme des codes de chacun de ses caract\u00e8res.</p> <p>Par ailleurs, on dit que ce mot est \u00ab parfait \u00bb si le code additionn\u00e9 divise le code concat\u00e9n\u00e9.</p> <p>Exemples :</p> <ul> <li> <p>Pour le mot <code>\"PAUL\"</code>, le code concat\u00e9n\u00e9 est la cha\u00eene <code>'1612112'</code>, soit l\u2019entier 1 612 112. Son code additionn\u00e9 est l\u2019entier 50 car 16 + 1 + 21 + 12 = 50. 50 ne divise pas l\u2019entier 1 612 112 ; par cons\u00e9quent, le mot <code>\"PAUL\"</code> n\u2019est pas parfait.</p> </li> <li> <p>Pour le mot <code>\"ALAIN\"</code>, le code concat\u00e9n\u00e9 est la cha\u00eene <code>'1121914'</code>, soit l\u2019entier 1 121 914. Le code additionn\u00e9 est l\u2019entier 37 car 1 + 12 + 1 + 9 + 14 = 37. 37 divise l\u2019entier 1 121 914 ; par cons\u00e9quent, le mot <code>\"ALAIN\"</code> est parfait.</p> </li> </ul> <p>Compl\u00e9ter la fonction <code>est_parfait</code> ci-dessous qui prend comme argument une cha\u00eene de caract\u00e8res <code>mot</code> (en lettres majuscules) et qui renvoie le code alphab\u00e9tique concat\u00e9n\u00e9, le code additionn\u00e9 de <code>mot</code>, ainsi qu\u2019un bool\u00e9en qui indique si <code>mot</code> est parfait ou pas.</p> \ud83d\udc0d Script Python<pre><code>dico = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6,\n        \"G\": 7, \"H\": 8, \"I\": 9, \"J\": 10, \"K\": 11, \"L\": 12,\n        \"M\": 13, \"N\": 14, \"O\": 15, \"P\": 16, \"Q\": 17,\n        \"R\": 18, \"S\": 19, \"T\": 20, \"U\": 21, \"V\": 22,\n        \"W\": 23, \"X\": 24, \"Y\": 25, \"Z\": 26}\n\n\ndef est_parfait(mot):\n    # mot est une cha\u00eene de caract\u00e8res (en lettres majuscules)\n    code_concatene = \"\"\n    code_additionne = ...\n    for c in mot:\n        code_concatene = code_concatene + ...\n        code_additionne = ...\n    code_concatene = int(code_concatene)\n    if ... :\n        mot_est_parfait = True\n    else:\n        mot_est_parfait = False\n    return code_additionne, code_concatene, mot_est_parfait\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; est_parfait(\"PAUL\")\n(50, 1612112, False)\n&gt;&gt;&gt; est_parfait(\"ALAIN\")\n(37, 1121914, True)\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>dico = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6,\n        \"G\": 7, \"H\": 8, \"I\": 9, \"J\": 10, \"K\": 11, \"L\": 12,\n        \"M\": 13, \"N\": 14, \"O\": 15, \"P\": 16, \"Q\": 17,\n        \"R\": 18, \"S\": 19, \"T\": 20, \"U\": 21, \"V\": 22,\n        \"W\": 23, \"X\": 24, \"Y\": 25, \"Z\": 26}\n\n\ndef est_parfait(mot):\n    # mot est une cha\u00eene de caract\u00e8res (en lettres majuscules)\n    code_concatene = \"\"\n    code_additionne = 0\n    for c in mot:\n        code_concatene = code_concatene + str(dico[c])\n        code_additionne = code_additionne + dico[c]\n    code_concatene = int(code_concatene)\n    if code_concatene % code_additionne == 0:\n        mot_est_parfait = True\n    else:\n        mot_est_parfait = False\n    return code_additionne, code_concatene, mot_est_parfait\n</code></pre> Markdown<pre><code>On affecte \u00e0 chaque lettre de l'alphabet un code selon le tableau ci-dessous :\n\n| A | B | C | D | E | F | G | H | I | J | K | L | M |\n|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|\n| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 |\n\n\n| N | O | P | Q | R | S | T | U | V | W | X | Y | Z | \n|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|\n| 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | \n\n\n\nPour un mot donn\u00e9, on d\u00e9termine d\u2019une part son *code alphab\u00e9tique concat\u00e9n\u00e9*, obtenu\npar la juxtaposition des codes de chacun de ses caract\u00e8res, et d\u2019autre part, *son code\nadditionn\u00e9*, qui est la somme des codes de chacun de ses caract\u00e8res.\n\nPar ailleurs, on dit que ce mot est \u00ab *parfait* \u00bb si le code additionn\u00e9 divise le code concat\u00e9n\u00e9.\n\nExemples :\n\n- Pour le mot `\"PAUL\"`, le code concat\u00e9n\u00e9 est la cha\u00eene `'1612112'`, soit l\u2019entier 1 612 112.\nSon code additionn\u00e9 est l\u2019entier 50 car 16 + 1 + 21 + 12 = 50.\n50 ne divise pas l\u2019entier 1 612 112 ; par cons\u00e9quent, le mot `\"PAUL\"` n\u2019est pas\nparfait.\n\n- Pour le mot `\"ALAIN\"`, le code concat\u00e9n\u00e9 est la cha\u00eene `'1121914'`, soit l\u2019entier\n1 121 914. Le code additionn\u00e9 est l\u2019entier 37 car 1 + 12 + 1 + 9 + 14 = 37.\n37 divise l\u2019entier 1 121 914 ; par cons\u00e9quent, le mot `\"ALAIN\"` est parfait.\n\n\nCompl\u00e9ter la fonction `est_parfait` ci-dessous qui prend comme argument une cha\u00eene\nde caract\u00e8res `mot` (en lettres majuscules) et qui renvoie le code alphab\u00e9tique concat\u00e9n\u00e9,\nle code additionn\u00e9 de `mot`, ainsi qu\u2019un bool\u00e9en qui indique si `mot` est parfait ou pas.\n\n```python linenums='1'\ndico = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6,\n        \"G\": 7, \"H\": 8, \"I\": 9, \"J\": 10, \"K\": 11, \"L\": 12,\n        \"M\": 13, \"N\": 14, \"O\": 15, \"P\": 16, \"Q\": 17,\n        \"R\": 18, \"S\": 19, \"T\": 20, \"U\": 21, \"V\": 22,\n        \"W\": 23, \"X\": 24, \"Y\": 25, \"Z\": 26}\n\n\ndef est_parfait(mot):\n    # mot est une cha\u00eene de caract\u00e8res (en lettres majuscules)\n    code_concatene = \"\"\n    code_additionne = ...\n    for c in mot:\n        code_concatene = code_concatene + ...\n        code_additionne = ...\n    code_concatene = int(code_concatene)\n    if ... :\n        mot_est_parfait = True\n    else:\n        mot_est_parfait = False\n    return code_additionne, code_concatene, mot_est_parfait\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; est_parfait(\"PAUL\")\n(50, 1612112, False)\n&gt;&gt;&gt; est_parfait(\"ALAIN\")\n(37, 1121914, True)\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-23","title":"\u25b6 Sujet 23","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-231","title":"Exercice 23.1","text":"<p>Exercice 23.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>On consid\u00e8re des tables (des tableaux de dictionnaires) qui contiennent des enregistrements relatifs \u00e0 des animaux h\u00e9berg\u00e9s dans un refuge. Les attributs des enregistrements sont <code>'nom'</code>, <code>'espece'</code>, <code>'age'</code>, <code>'enclos'</code>. Voici un exemple d'une telle table :</p> \ud83d\udc0d Script Python<pre><code>animaux = [ {'nom':'Medor', 'espece':'chien', 'age':5, 'enclos':2},\n            {'nom':'Titine', 'espece':'chat', 'age':2, 'enclos':5},\n            {'nom':'Tom', 'espece':'chat', 'age':7, 'enclos':4},\n            {'nom':'Belle', 'espece':'chien', 'age':6, 'enclos':3},\n            {'nom':'Mirza', 'espece':'chat', 'age':6, 'enclos':5}]\n</code></pre> <p>Programmer une fonction <code>selection_enclos</code> qui :</p> <ul> <li>prend en param\u00e8tres :<ul> <li>une table <code>table_animaux</code> contenant des enregistrements relatifs \u00e0 des animaux (comme dans l'exemple ci-dessus),</li> <li>un num\u00e9ro d'enclos <code>num_enclos</code> ;</li> </ul> </li> <li>renvoie une table contenant les enregistrements de <code>table_animaux</code> dont l'attribut <code>'enclos'</code> est <code>num_enclos</code>.</li> </ul> <p>Exemples avec la table <code>animaux</code> ci-dessus :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; selection_enclos(animaux, 5)\n[{'nom':'Titine', 'espece':'chat', 'age':2, 'enclos':5},\n {'nom':'Mirza', 'espece':'chat', 'age':6, 'enclos':5}]\n\n&gt;&gt;&gt; selection_enclos(animaux, 2)\n[{'nom':'Medor', 'espece':'chien', 'age':5, 'enclos':2}]\n\n&gt;&gt;&gt; selection_enclos(animaux, 7)\n[]\n</code></pre> \ud83d\udc0d Script Python<pre><code>def selection_enclos(table_animaux, num_enclos):\n    table = []\n    for animal in table_animaux:\n        if animal['enclos'] == num_enclos:\n            table.append(animal)\n    return table\n</code></pre> \ud83d\udccb Texte<pre><code>On consid\u00e8re des tables (des tableaux de dictionnaires) qui contiennent des enregistrements\nrelatifs \u00e0 des animaux h\u00e9berg\u00e9s dans un refuge. Les attributs des enregistrements sont\n`'nom'`, `'espece'`, `'age'`, `'enclos'`. Voici un exemple d'une telle table :\n\n```python\nanimaux = [ {'nom':'Medor', 'espece':'chien', 'age':5, 'enclos':2},\n            {'nom':'Titine', 'espece':'chat', 'age':2, 'enclos':5},\n            {'nom':'Tom', 'espece':'chat', 'age':7, 'enclos':4},\n            {'nom':'Belle', 'espece':'chien', 'age':6, 'enclos':3},\n            {'nom':'Mirza', 'espece':'chat', 'age':6, 'enclos':5}]\n```\n\nProgrammer une fonction `selection_enclos` qui :\n\n- prend en param\u00e8tres :\n    - une table `table_animaux` contenant des enregistrements relatifs \u00e0 des\nanimaux (comme dans l'exemple ci-dessus),\n    - un num\u00e9ro d'enclos `num_enclos` ;\n- renvoie une table contenant les enregistrements de `table_animaux` dont l'attribut\n`'enclos'` est `num_enclos`.\n\nExemples avec la table `animaux` ci-dessus :\n\n```python\n&gt;&gt;&gt; selection_enclos(animaux, 5)\n[{'nom':'Titine', 'espece':'chat', 'age':2, 'enclos':5},\n {'nom':'Mirza', 'espece':'chat', 'age':6, 'enclos':5}]\n\n&gt;&gt;&gt; selection_enclos(animaux, 2)\n[{'nom':'Medor', 'espece':'chien', 'age':5, 'enclos':2}]\n\n&gt;&gt;&gt; selection_enclos(animaux, 7)\n[]\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-232","title":"Exercice 23.2","text":"<p>Exercice 23.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On consid\u00e8re des tableaux de nombres dont tous les \u00e9l\u00e9ments sont pr\u00e9sents exactement trois fois et \u00e0 suivre, sauf un \u00e9l\u00e9ment qui est pr\u00e9sent une unique fois et que l'on appelle \u00ab l'intrus \u00bb. Voici quelques exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>tab_a = [3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8, 8, 5, 5, 5]\n#l'intrus est 7\n\ntab_b = [8, 5, 5, 5, 9, 9, 9, 18, 18, 18, 3, 3, 3]\n#l'intrus est 8\n\ntab_c = [5, 5, 5, 1, 1, 1, 0, 0, 0, 6, 6, 6, 3, 8, 8, 8]\n#l'intrus est 3\n</code></pre> On remarque qu'avec de tels tableaux :</p> <ul> <li>pour les indices multiples de 3 situ\u00e9s strictement avant l'intrus, l'\u00e9l\u00e9ment correspondant et son voisin de droite sont \u00e9gaux,</li> <li>pour les indices multiples de 3 situ\u00e9s apr\u00e8s l'intrus, l'\u00e9l\u00e9ment correspondant et son voisin de droite - s'il existe - sont diff\u00e9rents.</li> </ul> <p>Ce que l'on peut observer ci-dessous en observant les valeurs des paires de voisins marqu\u00e9es par des caract\u00e8res ^ :</p> \ud83d\udc0d Script Python<pre><code>[3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8, 8, 5, 5, 5]\n ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^\n 0        3        6        9        12       15       18       21\n</code></pre> <p>Dans des listes comme celles ci-dessus, un algorithme r\u00e9cursif pour trouver l'intrus consiste alors \u00e0 choisir un indice <code>i</code> multiple de 3 situ\u00e9 approximativement au milieu des indices parmi lesquels se trouve l'intrus. </p> <p>Puis, en fonction des valeurs de l'\u00e9l\u00e9ment d'indice <code>i</code> et de son voisin de droite, \u00e0 appliquer r\u00e9cursivement l'algorithme \u00e0 la moiti\u00e9 droite ou \u00e0 la moiti\u00e9 gauche des indices parmi lesquels se trouve l'intrus. </p> <p>Par exemple, si on s\u2019int\u00e9resse \u00e0 l\u2019indice 12, on voit les valeurs 2 et 4 qui sont diff\u00e9rentes : l\u2019intrus est donc \u00e0 gauche de l\u2019indice 12 (indice 12 compris)</p> <p>En revanche, si on s\u2019int\u00e9resse \u00e0 l\u2019indice 3, on voit les valeurs 9 et 9 qui sont identiques : l\u2019intrus est donc \u00e0 droite des indices 3-4-5, donc \u00e0 partir de l\u2019indice 6.</p> <p>Compl\u00e9ter la fonction r\u00e9cursive <code>trouver_intrus</code> propos\u00e9e page suivante qui met en \u0153uvre cet algorithme.</p> \ud83d\udc0d Script Python<pre><code>def trouver_intrus(tab, g, d):\n    '''\n    Renvoie la valeur de l'intrus situ\u00e9 entre les indices g et d \n    dans la liste tab o\u00f9 :\n    tab v\u00e9rifie les conditions de l'exercice,\n    g et d sont des multiples de 3.\n    '''\n    if g == d:\n        return ...\n\n    else:\n        nombre_de_triplets = (d - g) // ...\n        indice = g + 3 * (nombre_de_triplets // 2)\n        if ... :\n            return ...\n        else:\n            return ...\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; trouver_intrus([3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8,\n8, 5, 5, 5], 0, 21)\n7\n\n&gt;&gt;&gt; trouver_intrus([8, 5, 5, 5, 9, 9, 9, 18, 18, 18, 3, 3, 3], 0, 12)\n8\n\n&gt;&gt;&gt; trouver_intrus([5, 5, 5, 1, 1, 1, 0, 0, 0, 6, 6, 6, 3, 8, 8, 8], 0, 15)\n3\n</code></pre> \ud83d\udc0d Script Python<pre><code>def trouver_intrus(tab, g, d):\n    '''\n    Renvoie la valeur de l'intrus situ\u00e9 entre les indices g et d \n    dans la liste tab o\u00f9 :\n    tab v\u00e9rifie les conditions de l'exercice,\n    g et d sont des multiples de 3.\n    '''\n    if g == d:\n        return tab[g]\n\n    else:\n        nombre_de_triplets = (d - g) // 3\n        indice = g + 3 * (nombre_de_triplets // 2)\n        if tab[indice] != tab[indice + 1] :\n            return trouver_intrus(tab, g, indice)\n        else:\n            return trouver_intrus(tab, indice + 3, d)\n</code></pre> <p>Markdown<pre><code>On consid\u00e8re des tableaux de nombres dont tous les \u00e9l\u00e9ments sont pr\u00e9sents exactement\ntrois fois et \u00e0 suivre, sauf un \u00e9l\u00e9ment qui est pr\u00e9sent une unique fois et que l'on appelle \u00ab\nl'intrus \u00bb. Voici quelques exemples :\n\n```python\ntab_a = [3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8, 8, 5, 5, 5]\n#l'intrus est 7\n\ntab_b = [8, 5, 5, 5, 9, 9, 9, 18, 18, 18, 3, 3, 3]\n#l'intrus est 8\n\ntab_c = [5, 5, 5, 1, 1, 1, 0, 0, 0, 6, 6, 6, 3, 8, 8, 8]\n#l'intrus est 3\n</code></pre> On remarque qu'avec de tels tableaux :</p> <ul> <li>pour les indices multiples de 3 situ\u00e9s strictement avant l'intrus, l'\u00e9l\u00e9ment correspondant et son voisin de droite sont \u00e9gaux,</li> <li>pour les indices multiples de 3 situ\u00e9s apr\u00e8s l'intrus, l'\u00e9l\u00e9ment correspondant et son voisin de droite - s'il existe - sont diff\u00e9rents.</li> </ul> <p>Ce que l'on peut observer ci-dessous en observant les valeurs des paires de voisins marqu\u00e9es par des caract\u00e8res ^ :</p> \ud83d\udc0d Script Python<pre><code>[3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8, 8, 5, 5, 5]\n ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^\n 0        3        6        9        12       15       18       21\n</code></pre> <p>Dans des listes comme celles ci-dessus, un algorithme r\u00e9cursif pour trouver l'intrus consiste alors \u00e0 choisir un indice <code>i</code> multiple de 3 situ\u00e9 approximativement au milieu des indices parmi lesquels se trouve l'intrus. </p> <p>Puis, en fonction des valeurs de l'\u00e9l\u00e9ment d'indice <code>i</code> et de son voisin de droite, \u00e0 appliquer r\u00e9cursivement l'algorithme \u00e0 la moiti\u00e9 droite ou \u00e0 la moiti\u00e9 gauche des indices parmi lesquels se trouve l'intrus. </p> <p>Par exemple, si on s\u2019int\u00e9resse \u00e0 l\u2019indice 12, on voit les valeurs 2 et 4 qui sont diff\u00e9rentes : l\u2019intrus est donc \u00e0 gauche de l\u2019indice 12 (indice 12 compris)</p> <p>En revanche, si on s\u2019int\u00e9resse \u00e0 l\u2019indice 3, on voit les valeurs 9 et 9 qui sont identiques : l\u2019intrus est donc \u00e0 droite des indices 3-4-5, donc \u00e0 partir de l\u2019indice 6.</p> <p>Compl\u00e9ter la fonction r\u00e9cursive <code>trouver_intrus</code> propos\u00e9e page suivante qui met en \u0153uvre cet algorithme.</p> \ud83d\udc0d Script Python<pre><code>def trouver_intrus(tab, g, d):\n    '''\n    Renvoie la valeur de l'intrus situ\u00e9 entre les indices g et d \n    dans la liste tab o\u00f9 :\n    tab v\u00e9rifie les conditions de l'exercice,\n    g et d sont des multiples de 3.\n    '''\n    if g == d:\n        return ...\n\n    else:\n        nombre_de_triplets = (d - g) // ...\n        indice = g + 3 * (nombre_de_triplets // 2)\n        if ... :\n            return ...\n        else:\n            return ...\n</code></pre> <p>Exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; trouver_intrus([3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8,\n8, 5, 5, 5], 0, 21)\n7\n\n&gt;&gt;&gt; trouver_intrus([8, 5, 5, 5, 9, 9, 9, 18, 18, 18, 3, 3, 3], 0, 12)\n8\n\n&gt;&gt;&gt; trouver_intrus([5, 5, 5, 1, 1, 1, 0, 0, 0, 6, 6, 6, 3, 8, 8, 8], 0, 15)\n3\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-24","title":"\u25b6 Sujet 24","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-241","title":"Exercice 24.1","text":"<p>Exercice 24.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Le nombre d\u2019occurrences d\u2019un caract\u00e8re dans une cha\u00eene de caract\u00e8re est le nombre d\u2019apparitions de ce caract\u00e8re dans la cha\u00eene.</p> <p>Exemples :</p> <ul> <li>le nombre d\u2019occurrences du caract\u00e8re \u2018o\u2019 dans \u2018bonjour\u2019 est 2 ;</li> <li>le nombre d\u2019occurrences du caract\u00e8re \u2018b\u2019 dans \u2018B\u00e9b\u00e9\u2019 est 1 ;</li> <li>le nombre d\u2019occurrences du caract\u00e8re \u2018B\u2019 dans \u2018B\u00e9b\u00e9\u2019 est 1 ;</li> <li>le nombre d\u2019occurrences du caract\u00e8re \u2018 \u2018 dans \u2018Hello world !\u2019 est 2.</li> </ul> <p>On cherche les occurrences des caract\u00e8res dans une phrase. On souhaite stocker ces occurrences dans un dictionnaire dont les clefs seraient les caract\u00e8res de la phrase et les valeurs l\u2019occurrence de ces caract\u00e8res.</p> <p>Par exemple : avec la phrase 'Hello world !' le dictionnaire est le suivant :</p> <p><code>{'H': 1,'e': 1,'l': 3,'o': 2,' ': 2,'w': 1,'r': 1,'d': 1,'!': 1}</code></p> <p>L\u2019ordre des clefs n\u2019a pas d\u2019importance.</p> <p>\u00c9crire une fonction <code>nbr_occurrences</code> prenant comme param\u00e8tre une cha\u00eene de caract\u00e8res <code>chaine</code> et renvoyant le dictionnaire des nombres d\u2019occurrences des caract\u00e8res de cette cha\u00eene.</p> \ud83d\udc0d Script Python<pre><code>def nbr_occurrences(chaine):\n    nb_occ = {}\n    for caractere in chaine:\n        if caractere in nb_occ:\n            nb_occ[caractere] += 1\n        else:\n            nb_occ[caractere] = 1\n    return nb_occ\n</code></pre> \ud83d\udccb Texte<pre><code>Le nombre d\u2019occurrences d\u2019un caract\u00e8re dans une cha\u00eene de caract\u00e8re est le nombre\nd\u2019apparitions de ce caract\u00e8re dans la cha\u00eene.\n\nExemples :\n\n- le nombre d\u2019occurrences du caract\u00e8re \u2018o\u2019 dans \u2018bonjour\u2019 est 2 ;\n- le nombre d\u2019occurrences du caract\u00e8re \u2018b\u2019 dans \u2018B\u00e9b\u00e9\u2019 est 1 ;\n- le nombre d\u2019occurrences du caract\u00e8re \u2018B\u2019 dans \u2018B\u00e9b\u00e9\u2019 est 1 ;\n- le nombre d\u2019occurrences du caract\u00e8re \u2018 \u2018 dans \u2018Hello world !\u2019 est 2.\n\nOn cherche les occurrences des caract\u00e8res dans une phrase. On souhaite stocker ces\noccurrences dans un dictionnaire dont les clefs seraient les caract\u00e8res de la phrase et\nles valeurs l\u2019occurrence de ces caract\u00e8res.\n\nPar exemple : avec la phrase 'Hello world !' le dictionnaire est le suivant :\n\n`{'H': 1,'e': 1,'l': 3,'o': 2,' ': 2,'w': 1,'r': 1,'d': 1,'!': 1}`\n\n*L\u2019ordre des clefs n\u2019a pas d\u2019importance.*\n\n\u00c9crire une fonction `nbr_occurrences` prenant comme param\u00e8tre une cha\u00eene de\ncaract\u00e8res `chaine` et renvoyant le dictionnaire des nombres d\u2019occurrences des\ncaract\u00e8res de cette cha\u00eene.\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-242","title":"Exercice 24.2","text":"<p>Exercice 24.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>La fonction <code>fusion</code> prend deux listes <code>lst1</code>, <code>lst2</code> d\u2019entiers tri\u00e9es par ordre croissant et les fusionne en une liste tri\u00e9e <code>lst12</code> qu\u2019elle renvoie.</p> <p>Le code Python de la fonction <code>fusion</code> est</p> \ud83d\udc0d Script Python<pre><code>def fusion(lst1,lst2):\n    n1 = len(lst1)\n    n2 = len(lst2)\n    lst12 = [0] * (n1 + n2)\n    i1 = 0\n    i2 = 0\n    i = 0\n    while i1 &lt; n1 and ... :\n        if lst1[i1] &lt; lst2[i2]:\n            lst12[i] = ...\n            i1 = ...\n        else:\n            lst12[i] = lst2[i2]\n            i2 = ...\n        i += 1\n    while i1 &lt; n1:\n        lst12[i] = ...\n        i1 = i1 + 1\n        i = ...\n    while i2 &lt; n2:\n        lst12[i] = ...\n        i2 = i2 + 1\n        i = ...\n    return lst12\n</code></pre> <p>Compl\u00e9ter le code.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; fusion([1, 6, 10],[0, 7, 8, 9])\n[0, 1, 6, 7, 8, 9, 10]\n</code></pre> \ud83d\udc0d Script Python<pre><code>def fusion(lst1, lst2):\n    n1 = len(lst1)\n    n2 = len(lst2)\n    lst12 = [0] * (n1 + n2)\n    i1 = 0\n    i2 = 0\n    i = 0\n    while i1 &lt; n1 and i2 &lt; n2 :\n        if lst1[i1] &lt; lst2[i2]:\n            lst12[i] = lst1[i1]\n            i1 = i1 + 1\n        else:\n            lst12[i] = lst2[i2]\n            i2 = i2 + 1\n        i += 1\n    while i1 &lt; n1:\n        lst12[i] = lst1[i1]\n        i1 = i1 + 1\n        i = i + 1\n    while i2 &lt; n2:\n        lst12[i] = lst2[i2]\n        i2 = i2 + 1\n        i = i + 1\n    return lst12\n</code></pre> Markdown<pre><code>La fonction `fusion` prend deux listes `lst1`, `lst2` d\u2019entiers tri\u00e9es par ordre croissant et les\nfusionne en une liste tri\u00e9e `lst12` qu\u2019elle renvoie.\n\nLe code Python de la fonction `fusion` est\n\n```python linenums='1'\ndef fusion(lst1,lst2):\n    n1 = len(lst1)\n    n2 = len(lst2)\n    lst12 = [0] * (n1 + n2)\n    i1 = 0\n    i2 = 0\n    i = 0\n    while i1 &lt; n1 and ... :\n        if lst1[i1] &lt; lst2[i2]:\n            lst12[i] = ...\n            i1 = ...\n        else:\n            lst12[i] = lst2[i2]\n            i2 = ...\n        i += 1\n    while i1 &lt; n1:\n        lst12[i] = ...\n        i1 = i1 + 1\n        i = ...\n    while i2 &lt; n2:\n        lst12[i] = ...\n        i2 = i2 + 1\n        i = ...\n    return lst12\n</code></pre> <p>Compl\u00e9ter le code.</p> <p>Exemple :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; fusion([1, 6, 10],[0, 7, 8, 9])\n[0, 1, 6, 7, 8, 9, 10]\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-25","title":"\u25b6 Sujet 25","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-251","title":"Exercice 25.1","text":"<p>Exercice 25.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>enumere</code> qui prend en param\u00e8tre une liste <code>L</code> et renvoie un dictionnaire <code>d</code> dont les cl\u00e9s sont les \u00e9l\u00e9ments de <code>L</code> avec pour valeur associ\u00e9e la liste des indices de l\u2019\u00e9l\u00e9ment dans la liste <code>L</code>.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; enumere([1, 1, 2, 3, 2, 1])\n{1: [0, 1, 5], 2: [2, 4], 3: [3]}\n</code></pre> \ud83d\udc0d Script Python<pre><code>def enumere(L):\n    d = {}\n    for i in range(len(L)):\n        if L[i] in d:\n            d[L[i]].append(i)\n        else:\n            d[L[i]] = [i]\n    return d\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `enumere` qui prend en param\u00e8tre une liste `L` et renvoie un\ndictionnaire `d` dont les cl\u00e9s sont les \u00e9l\u00e9ments de `L` avec pour valeur associ\u00e9e la liste des\nindices de l\u2019\u00e9l\u00e9ment dans la liste `L`.\n\nExemple :\n\n```python\n&gt;&gt;&gt; enumere([1, 1, 2, 3, 2, 1])\n{1: [0, 1, 5], 2: [2, 4], 3: [3]}\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-252","title":"Exercice 25.2","text":"<p>Exercice 25.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Un arbre binaire est impl\u00e9ment\u00e9 par la classe <code>Arbre</code> donn\u00e9e ci-dessous. Les attributs <code>fg</code> et <code>fd</code> prennent pour valeurs des instances de la classe <code>Arbre</code> ou <code>None</code>.</p> \ud83d\udc0d Script Python<pre><code>class Arbre:\n    def __init__(self, etiquette):\n        self.v = etiquette\n        self.fg = None\n        self.fd = None\n\ndef parcours(arbre, liste):\n    if arbre != None:\n        parcours(arbre.fg, liste)\n        liste.append(arbre.v)\n        parcours(arbre.fd, liste)\n    return liste\n</code></pre> <p>La fonction r\u00e9cursive <code>parcours</code> renvoie la liste des \u00e9tiquettes des n\u0153uds de l\u2019arbre impl\u00e9ment\u00e9 par l\u2019instance <code>arbre</code> dans l\u2019ordre du parcours en profondeur infixe \u00e0 partir d\u2019une liste vide pass\u00e9e en argument.</p> <p>Compl\u00e9ter le code de la fonction <code>insere</code> qui ins\u00e8re un n\u0153ud d\u2019\u00e9tiquette <code>cle</code> en feuille de l\u2019arbre impl\u00e9ment\u00e9 par l\u2019instance <code>arbre</code> selon la sp\u00e9cification indiqu\u00e9e et de fa\u00e7on que l\u2019arbre ainsi compl\u00e9t\u00e9 soit encore un arbre binaire de recherche.</p> <p>Tester ensuite ce code en utilisant la fonction <code>parcours</code> et en ins\u00e9rant successivement des n\u0153uds d\u2019\u00e9tiquette 1, 4, 6 et 8 dans l\u2019arbre binaire de recherche repr\u00e9sent\u00e9 ci- dessous :</p> <p></p> \ud83d\udc0d Script Python<pre><code>def insere(arbre, cle):\n    \"\"\" arbre est une instance de la classe Arbre qui impl\u00e9mente\n        un arbre binaire de recherche.\n    \"\"\"\n    if ...:\n        if ...:\n            insere(arbre.fg, cle)\n        else:\n            arbre.fg = Arbre(cle)\n    else:\n        if ...:\n            insere(arbre.fd, cle)\n        else:\n            arbre.fd = Arbre(cle)\n</code></pre> \ud83d\udc0d Script Python<pre><code>def insere(arbre, cle):\n\"\"\" arbre est une instance de la classe Arbre qui impl\u00e9mente\n    un arbre binaire de recherche.\n\"\"\"\n    if cle &lt; arbre.v:\n        if arbre.fg is not None:\n            insere(arbre.fg, cle)\n        else:\n            arbre.fg = Arbre(cle)\n    else:\n        if arbre.fd is not None:\n            insere(arbre.fd, cle)\n        else:\n            arbre.fd = Arbre(cle)\n</code></pre> <p>Tests :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; a = Arbre(5)\n&gt;&gt;&gt; insere(a, 2)\n&gt;&gt;&gt; insere(a, 7)\n&gt;&gt;&gt; insere(a, 3)\n&gt;&gt;&gt; parcours(a, [])\n[2, 3, 5, 7]\n&gt;&gt;&gt; insere(a, 1)\n&gt;&gt;&gt; insere(a, 4)\n&gt;&gt;&gt; insere(a, 6)\n&gt;&gt;&gt; insere(a, 8)\n&gt;&gt;&gt; parcours(a, [])\n[1, 2, 3, 4, 5, 6, 7, 8]\n</code></pre> Markdown<pre><code>Un arbre binaire est impl\u00e9ment\u00e9 par la classe `Arbre` donn\u00e9e ci-dessous.  \nLes attributs `fg` et `fd` prennent pour valeurs des instances de la classe `Arbre` ou `None`.\n\n```python linenums='1'\nclass Arbre:\n    def __init__(self, etiquette):\n        self.v = etiquette\n        self.fg = None\n        self.fd = None\n\ndef parcours(arbre, liste):\n    if arbre != None:\n        parcours(arbre.fg, liste)\n        liste.append(arbre.v)\n        parcours(arbre.fd, liste)\n    return liste\n</code></pre> <p>La fonction r\u00e9cursive <code>parcours</code> renvoie la liste des \u00e9tiquettes des n\u0153uds de l\u2019arbre impl\u00e9ment\u00e9 par l\u2019instance <code>arbre</code> dans l\u2019ordre du parcours en profondeur infixe \u00e0 partir d\u2019une liste vide pass\u00e9e en argument.</p> <p>Compl\u00e9ter le code de la fonction <code>insere</code> qui ins\u00e8re un n\u0153ud d\u2019\u00e9tiquette <code>cle</code> en feuille de l\u2019arbre impl\u00e9ment\u00e9 par l\u2019instance <code>arbre</code> selon la sp\u00e9cification indiqu\u00e9e et de fa\u00e7on que l\u2019arbre ainsi compl\u00e9t\u00e9 soit encore un arbre binaire de recherche.</p> <p>Tester ensuite ce code en utilisant la fonction <code>parcours</code> et en ins\u00e9rant successivement des n\u0153uds d\u2019\u00e9tiquette 1, 4, 6 et 8 dans l\u2019arbre binaire de recherche repr\u00e9sent\u00e9 ci- dessous :</p> <p></p> <p>\ud83d\udc0d Script Python<pre><code>def insere(arbre, cle):\n    \"\"\" arbre est une instance de la classe Arbre qui impl\u00e9mente\n        un arbre binaire de recherche.\n    \"\"\"\n    if ...:\n        if ...:\n            insere(arbre.fg, cle)\n        else:\n            arbre.fg = Arbre(cle)\n    else:\n        if ...:\n            insere(arbre.fd, cle)\n        else:\n            arbre.fd = Arbre(cle)\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-26","title":"\u25b6 Sujet 26","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-261","title":"Exercice 26.1","text":"<p>Exercice 26.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Programmer la fonction <code>multiplication</code>, prenant en param\u00e8tres deux nombres entiers <code>n1</code> et <code>n2</code>, et qui renvoie le produit de ces deux nombres.</p> <p>Les seules op\u00e9rations autoris\u00e9es sont l\u2019addition et la soustraction. </p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; multiplication(3, 5)\n15\n&gt;&gt;&gt; multiplication(-4, -8)\n32\n&gt;&gt;&gt; multiplication(-2, 6)\n-12\n&gt;&gt;&gt; multiplication(-2, 0)\n0\n</code></pre> \ud83d\udc0d Script Python<pre><code>def multiplication(n1, n2):\n    # on se ram\u00e8ne d'abord au cas o\u00f9 n1 et n2 sont tous les deux positifs :\n    if n1 &lt; 0:\n        return -multiplication(-n1, n2)\n    if n2 &lt; 0:\n        return -multiplication(n1, -n2)\n\n    resultat = 0\n    for _ in range(n2):\n        resultat += n1\n    return resultat\n</code></pre> \ud83d\udccb Texte<pre><code>Programmer la fonction `multiplication`, prenant en param\u00e8tres deux nombres entiers\n`n1` et `n2`, et qui renvoie le produit de ces deux nombres.\n\nLes seules op\u00e9rations autoris\u00e9es sont l\u2019addition et la soustraction.\n\n```python\n&gt;&gt;&gt; multiplication(3, 5)\n15\n&gt;&gt;&gt; multiplication(-4, -8)\n32\n&gt;&gt;&gt; multiplication(-2, 6)\n-12\n&gt;&gt;&gt; multiplication(-2, 0)\n0\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-262","title":"Exercice 26.2","text":"<p>Exercice 26.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Recopier et compl\u00e9ter sous Python la fonction suivante en respectant la sp\u00e9cification. On ne recopiera pas les commentaires.</p> \ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n    \"\"\"\n    tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = ...\n        if x == tab[m]:\n            return ...\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = ...\n    return ...\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],28)\nTrue\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],27)\nFalse\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n    \"\"\"\n    tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = (debut + fin) // 2\n        if x == tab[m]:\n            return True\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = m - 1\n    return False\n</code></pre> Markdown<pre><code>Recopier et compl\u00e9ter sous Python la fonction suivante en respectant la sp\u00e9cification. On\nne recopiera pas les commentaires.\n\n```python linenums='1'\ndef dichotomie(tab, x):\n    \"\"\"\n    tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = ...\n        if x == tab[m]:\n            return ...\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = ...\n    return ...\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],28)\nTrue\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],27)\nFalse\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-27","title":"\u25b6 Sujet 27","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-271","title":"Exercice 27.1","text":"<p>Exercice 27.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>recherche_min</code> qui prend en param\u00e8tre un tableau de nombres non tri\u00e9 <code>tab</code>, et qui renvoie l'indice de la premi\u00e8re occurrence du minimum de ce tableau. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche_min([5])\n0\n&gt;&gt;&gt; recherche_min([2, 4, 1])\n2\n&gt;&gt;&gt; recherche_min([5, 3, 2, 2, 4])\n2\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche_min(tab):\n    indice_min = 0\n    for i in range(len(tab)):\n        if tab[i] &lt; tab[indice_min]:\n            indice_min = i\n    return indice_min\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `recherche_min` qui prend en param\u00e8tre un tableau de nombres non\ntri\u00e9 `tab`, et qui renvoie l'indice de la premi\u00e8re occurrence du minimum de ce tableau. Les\ntableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.\n\nExemples :\n```python\n&gt;&gt;&gt; recherche_min([5])\n0\n&gt;&gt;&gt; recherche_min([2, 4, 1])\n2\n&gt;&gt;&gt; recherche_min([5, 3, 2, 2, 4])\n2\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-272","title":"Exercice 27.2","text":"<p>Exercice 27.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On consid\u00e8re la fonction <code>separe</code> ci-dessous qui prend en argument un tableau <code>tab</code> dont les \u00e9l\u00e9ments sont des <code>0</code> et des <code>1</code> et qui s\u00e9pare les <code>0</code> des <code>1</code> en pla\u00e7ant les <code>0</code> en d\u00e9but de tableau et les <code>1</code> \u00e0 la suite.</p> \ud83d\udc0d Script Python<pre><code>def separe(tab):\n    gauche = 0\n    droite = ...\n    while gauche &lt; droite :\n        if tab[gauche] == 0 :\n            gauche = ...\n        else :\n            tab[gauche], tab[droite] = ...\n            droite = ...\n    return tab\n</code></pre> <p>Compl\u00e9ter la fonction <code>separe</code> ci-dessus.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; separe([1, 0, 1, 0, 1, 0, 1, 0])\n[0, 0, 0, 0, 1, 1, 1, 1]\n&gt;&gt;&gt; separe([1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0])\n[0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n</code></pre> <p>Description d\u2019\u00e9tapes effectu\u00e9es par la fonction separe sur le tableau ci-dessous : <code>tab = [1, 0, 1, 0, 1, 0, 1, 0]</code></p> <ul> <li> <p>Etape 1 : on regarde la premi\u00e8re case, qui contient un 1 : ce 1 va aller dans la seconde partie du tableau final et on l\u2019\u00e9change avec la derni\u00e8re case. Il est \u00e0 pr\u00e9sent bien positionn\u00e9 : on ne prend plus la derni\u00e8re case en compte. <code>tab = [0, 0, 1, 0, 1, 0, 1, 1]</code></p> </li> <li> <p>Etape 2 : on regarde \u00e0 nouveau la premi\u00e8re case, qui contient maintenant un 0 : ce 0 va aller dans la premi\u00e8re partie du tableau final et est bien positionn\u00e9 : on ne prend plus la premi\u00e8re case en compte. <code>tab = [0, 0, 1, 0, 1, 0, 1, 1]</code></p> </li> <li> <p>Etape 3 : on regarde la seconde case, qui contient un 0 : ce 0 va aller dans la premi\u00e8re partie du tableau final et est bien positionn\u00e9 : on ne prend plus la seconde case en compte. <code>tab = [0, 0, 1, 0, 1, 0, 1, 1]</code></p> </li> <li> <p>Etape 4 : on regarde la troisi\u00e8me case, qui contient un 1 : ce 1 va aller dans la seconde partie du tableau final et on l\u2019\u00e9change avec l\u2019avant-derni\u00e8re case. Il est \u00e0 pr\u00e9sent bien positionn\u00e9 : on ne prend plus l\u2019avant-derni\u00e8re case en compte. <code>tab = [0, 0, 1, 0, 1, 0, 1, 1]</code></p> </li> </ul> <p>Et ainsi de suite...</p> <p><code>tab = [0, 0, 0, 0, 1, 1, 1, 1]</code></p> <p>Compl\u00e9ter la fonction <code>separe</code> pr\u00e9sent\u00e9e \u00e0 la page pr\u00e9c\u00e9dente</p> \ud83d\udc0d Script Python<pre><code>def separe(tab):\n    gauche = 0\n    droite = len(tab) - 1\n    while gauche &lt; droite :\n        if tab[gauche] == 0 :\n            gauche = gauche + 1\n        else :\n            tab[gauche], tab[droite] = tab[droite], tab[gauche]\n            droite = droite - 1\n    return tab\n</code></pre> Markdown<pre><code>On consid\u00e8re la fonction `separe` ci-dessous qui prend en argument un tableau `tab` dont\nles \u00e9l\u00e9ments sont des `0` et des `1` et qui s\u00e9pare les `0` des `1` en pla\u00e7ant les `0` en d\u00e9but de\ntableau et les `1` \u00e0 la suite.\n\n```python linenums='1'\ndef separe(tab):\n    gauche = 0\n    droite = ...\n    while gauche &lt; droite :\n        if tab[gauche] == 0 :\n            gauche = ...\n        else :\n            tab[gauche], tab[droite] = ...\n            droite = ...\n    return tab\n</code></pre> <p>Compl\u00e9ter la fonction <code>separe</code> ci-dessus.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; separe([1, 0, 1, 0, 1, 0, 1, 0])\n[0, 0, 0, 0, 1, 1, 1, 1]\n&gt;&gt;&gt; separe([1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0])\n[0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n</code></pre> <p>Description d\u2019\u00e9tapes effectu\u00e9es par la fonction separe sur le tableau ci-dessous : <code>tab = [1, 0, 1, 0, 1, 0, 1, 0]</code></p> <ul> <li> <p>Etape 1 : on regarde la premi\u00e8re case, qui contient un 1 : ce 1 va aller dans la seconde partie du tableau final et on l\u2019\u00e9change avec la derni\u00e8re case. Il est \u00e0 pr\u00e9sent bien positionn\u00e9 : on ne prend plus la derni\u00e8re case en compte. <code>tab = [0, 0, 1, 0, 1, 0, 1, 1]</code></p> </li> <li> <p>Etape 2 : on regarde \u00e0 nouveau la premi\u00e8re case, qui contient maintenant un 0 : ce 0 va aller dans la premi\u00e8re partie du tableau final et est bien positionn\u00e9 : on ne prend plus la premi\u00e8re case en compte. <code>tab = [0, 0, 1, 0, 1, 0, 1, 1]</code></p> </li> <li> <p>Etape 3 : on regarde la seconde case, qui contient un 0 : ce 0 va aller dans la premi\u00e8re partie du tableau final et est bien positionn\u00e9 : on ne prend plus la seconde case en compte. <code>tab = [0, 0, 1, 0, 1, 0, 1, 1]</code></p> </li> <li> <p>Etape 4 : on regarde la troisi\u00e8me case, qui contient un 1 : ce 1 va aller dans la seconde partie du tableau final et on l\u2019\u00e9change avec l\u2019avant-derni\u00e8re case. Il est \u00e0 pr\u00e9sent bien positionn\u00e9 : on ne prend plus l\u2019avant-derni\u00e8re case en compte. <code>tab = [0, 0, 1, 0, 1, 0, 1, 1]</code></p> </li> </ul> <p>Et ainsi de suite...</p> <p><code>tab = [0, 0, 0, 0, 1, 1, 1, 1]</code></p> <p>Compl\u00e9ter la fonction <code>separe</code> pr\u00e9sent\u00e9e \u00e0 la page pr\u00e9c\u00e9dente ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-28","title":"\u25b6 Sujet 28","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-281","title":"Exercice 28.1","text":"<p>Exercice 28.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction qui prend en param\u00e8tre un tableau d'entiers non vide et qui renvoie la moyenne de ces entiers. La fonction est sp\u00e9cifi\u00e9e ci-apr\u00e8s et doit passer les assertions fournies. \ud83d\udc0d Script Python<pre><code>def moyenne (tab):\n    '''\n    moyenne(list) -&gt; float\n    Entr\u00e9e : un tableau non vide d'entiers\n    Sortie : nombre de type float\n    Correspondant \u00e0 la moyenne des valeurs pr\u00e9sentes dans le\n    tableau\n    '''\n\nassert moyenne([1]) == 1\nassert moyenne([1, 2, 3, 4, 5, 6, 7] == 4\nassert moyenne([1, 2]) == 1.5\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    '''\n    moyenne(list) -&gt; float\n    Entr\u00e9e : un tableau non vide d'entiers\n    Sortie : nombre de type float\n    Correspondant \u00e0 la moyenne des valeurs pr\u00e9sentes dans le\n    tableau\n    '''\n    somme = 0\n    for elt in tab:\n        somme += elt\n    return somme / len(tab)\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction qui prend en param\u00e8tre un tableau d'entiers non vide et qui renvoie la\nmoyenne de ces entiers. La fonction est sp\u00e9cifi\u00e9e ci-apr\u00e8s et doit passer les assertions\nfournies.\n```python\ndef moyenne (tab):\n    '''\n    moyenne(list) -&gt; float\n    Entr\u00e9e : un tableau non vide d'entiers\n    Sortie : nombre de type float\n    Correspondant \u00e0 la moyenne des valeurs pr\u00e9sentes dans le\n    tableau\n    '''\n\nassert moyenne([1]) == 1\nassert moyenne([1, 2, 3, 4, 5, 6, 7] == 4\nassert moyenne([1, 2]) == 1.5\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-282","title":"Exercice 28.2","text":"<p>Exercice 28.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Le but de l'exercice est de compl\u00e9ter une fonction qui d\u00e9termine si une valeur est pr\u00e9sente dans un tableau de valeurs tri\u00e9es dans l'ordre croissant.</p> <p>L'algorithme traite le cas du tableau vide et il est \u00e9crit pour que la recherche dichotomique ne se fasse que dans le cas o\u00f9 la valeur est comprise entre les valeurs extr\u00eames du tableau.</p> <p>On distingue les trois cas qui renvoient <code>False</code> en renvoyant <code>False, 1</code> , <code>False, 2</code> et <code>False, 3</code>.</p> <p>Compl\u00e9ter l'algorithme de dichotomie donn\u00e9 ci-apr\u00e8s.</p> \ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n    \"\"\"\n    tab : tableau tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    # cas du tableau vide\n    if ...:\n        return False, 1\n\n    # cas o\u00f9 x n'est pas compris entre les valeurs extr\u00eames\n    if (x &lt; tab[0]) or ...:\n        return False, 2\n\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = ...\n        if x == tab[m]:\n            return ...\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = ...\n    return ...\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],28)\nTrue\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],27)\n(False, 3)\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],1)\n(False, 2)\n&gt;&gt;&gt; dichotomie([],28)\n(False, 1)\n</code></pre> \ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n    \"\"\"\n    tab : tableau tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    # cas du tableau vide\n    if tab = []:\n        return False, 1\n\n    # cas o\u00f9 x n'est pas compris entre les valeurs extr\u00eames\n    if (x &lt; tab[0]) or (x &gt; tab[-1]):\n        return False, 2\n\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = (debut + fin) // 2\n        if x == tab[m]:\n            return True\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = m - 1\n    return False, 3\n</code></pre> Markdown<pre><code>Le but de l'exercice est de compl\u00e9ter une fonction qui d\u00e9termine si une valeur est pr\u00e9sente\ndans un tableau de valeurs tri\u00e9es dans l'ordre croissant.\n\nL'algorithme traite le cas du tableau vide et il est \u00e9crit pour que la recherche dichotomique ne se fasse que dans le cas o\u00f9\nla valeur est comprise entre les valeurs extr\u00eames du tableau.\n\nOn distingue les trois cas qui renvoient `False` en renvoyant `False, 1` , `False, 2` et\n`False, 3`.\n\nCompl\u00e9ter l'algorithme de dichotomie donn\u00e9 ci-apr\u00e8s.\n\n```python linenums='1'\ndef dichotomie(tab, x):\n    \"\"\"\n    tab : tableau tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    # cas du tableau vide\n    if ...:\n        return False, 1\n\n    # cas o\u00f9 x n'est pas compris entre les valeurs extr\u00eames\n    if (x &lt; tab[0]) or ...:\n        return False, 2\n\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = ...\n        if x == tab[m]:\n            return ...\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = ...\n    return ...\n</code></pre> <p>Exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],28)\nTrue\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],27)\n(False, 3)\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],1)\n(False, 2)\n&gt;&gt;&gt; dichotomie([],28)\n(False, 1)\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-29","title":"\u25b6 Sujet 29","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-291","title":"Exercice 29.1","text":"<p>Exercice 29.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Un arbre binaire est impl\u00e9ment\u00e9 par la classe <code>Arbre</code> donn\u00e9e ci-dessous. Les attributs <code>fg</code> et <code>fd</code> prennent pour valeurs des instances de la classe <code>Arbre</code> ou <code>None</code>.</p> \ud83d\udc0d Script Python<pre><code>class Arbre:\n    def __init__(self, etiquette):\n        self.v = etiquette\n        self.fg = None\n        self.fd = None\n</code></pre> <p></p> <p>L\u2019arbre ci-dessus sera donc impl\u00e9ment\u00e9 de la mani\u00e8re suivante : \ud83d\udc0d Script Python<pre><code>a = Arbre(1)\na.fg = Arbre(4)\na.fd = Arbre(0)\na.fd.fd = Arbre(7)\n</code></pre></p> <p>\u00c9crire une fonction r\u00e9cursive <code>taille</code> prenant en param\u00e8tre une instance <code>a</code> de la classe <code>Arbre</code> et qui renvoie la taille de l\u2019arbre que cette instance impl\u00e9mente.</p> <p>\u00c9crire de m\u00eame une fonction r\u00e9cursive <code>hauteur</code> prenant en param\u00e8tre une instance <code>a</code> de la classe <code>Arbre</code> et qui renvoie la hauteur de l\u2019arbre que cette instance impl\u00e9mente.</p> <p>Si un arbre a un seul n\u0153ud, sa taille et sa hauteur sont \u00e9gales \u00e0 1. S\u2019il est vide, sa taille et sa hauteur sont \u00e9gales \u00e0 0.</p> <p>Tester les deux fonctions sur l\u2019arbre repr\u00e9sent\u00e9 ci-dessous :</p> <p></p> \ud83d\udc0d Script Python<pre><code>def taille(a):\n    if a is None:\n        return 0\n    else:\n        return 1 + taille(a.fg) + taille(a.fd)\n\ndef hauteur(a):\n    if a is None:\n        return 0\n    else:\n        return 1 + max(hauteur(a.fg), hauteur(a.fd))\n</code></pre> <p>Tests :</p> \ud83d\udc0d Script Python<pre><code>a = Arbre(0)\na.fg = Arbre(1)\na.fd = Arbre(2)\na.fg.fg = Arbre(3)\na.fd.fg = Arbre(4)\na.fd.fd = Arbre(5)\na.fd.fg.fd = Arbre(6)\n</code></pre> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; taille(a)\n7\n&gt;&gt;&gt; hauteur(a)\n4\n</code></pre> \ud83d\udccb Texte<pre><code>Un arbre binaire est impl\u00e9ment\u00e9 par la classe `Arbre` donn\u00e9e ci-dessous.\nLes attributs `fg` et `fd` prennent pour valeurs des instances de la classe `Arbre` ou `None`.\n\n```python\nclass Arbre:\n    def __init__(self, etiquette):\n        self.v = etiquette\n        self.fg = None\n        self.fd = None\n```\n\n![image](data2023/29_arbre1.png){: .center}\n\nL\u2019arbre ci-dessus sera donc impl\u00e9ment\u00e9 de la mani\u00e8re suivante :\n```python\na = Arbre(1)\na.fg = Arbre(4)\na.fd = Arbre(0)\na.fd.fd = Arbre(7)\n```\n\n\u00c9crire une fonction r\u00e9cursive `taille` prenant en param\u00e8tre une instance `a` de la classe\n`Arbre` et qui renvoie la taille de l\u2019arbre que cette instance impl\u00e9mente.\n\n\u00c9crire de m\u00eame une fonction r\u00e9cursive `hauteur` prenant en param\u00e8tre une instance `a`\nde la classe `Arbre` et qui renvoie la hauteur de l\u2019arbre que cette instance impl\u00e9mente.\n\nSi un arbre a un seul n\u0153ud, sa taille et sa hauteur sont \u00e9gales \u00e0 1.\nS\u2019il est vide, sa taille et sa hauteur sont \u00e9gales \u00e0 0.\n\nTester les deux fonctions sur l\u2019arbre repr\u00e9sent\u00e9 ci-dessous :\n\n![image](data2023/29_arbre2.png){: .center}\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-292","title":"Exercice 29.2","text":"<p>Exercice 29.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>La m\u00e9thode <code>insert</code> de la classe <code>list</code> permet d\u2019ins\u00e9rer un \u00e9l\u00e9ment dans une liste \u00e0 un <code>indice</code> donn\u00e9.</p> <p>Le but de cet exercice est, sans utiliser cette m\u00e9thode, d\u2019\u00e9crire une fonction <code>ajoute</code> r\u00e9alisant cette insertion en produisant une nouvelle liste.</p> <p>Cette fonction <code>ajoute</code> prend en param\u00e8tres trois variables <code>indice</code>, <code>element</code> et <code>liste</code> et renvoie une liste <code>L</code> dans laquelle les \u00e9l\u00e9ments sont ceux de la liste <code>liste</code> avec, en plus, l\u2019\u00e9l\u00e9ment <code>element</code> \u00e0 l\u2019indice <code>indice</code>. On consid\u00e8re que les variables <code>indice</code> et <code>element</code> sont des entiers positifs et que les \u00e9l\u00e9ments de <code>liste</code> sont \u00e9galement des entiers positifs. Les \u00e9l\u00e9ments de la liste <code>liste</code>, dont les indices sont sup\u00e9rieurs ou \u00e9gaux \u00e0 <code>indice</code> apparaissent d\u00e9cal\u00e9s vers la droite dans la liste <code>L</code>. Si <code>indice</code> est sup\u00e9rieur ou \u00e9gal au nombre d\u2019\u00e9l\u00e9ments de la liste <code>liste</code>, l\u2019\u00e9l\u00e9ment element est ajout\u00e9 dans <code>L</code> apr\u00e8s tous les \u00e9l\u00e9ments de la liste <code>liste</code>.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; ajoute(1, 4, [7, 8, 9])\n[7, 4, 8, 9]\n&gt;&gt;&gt; ajoute(3, 4, [7, 8, 9])\n[7, 8, 9, 4]\n&gt;&gt;&gt; ajoute(4, 4, [7, 8, 9])\n[7, 8, 9, 4]\n</code></pre></p> <p>Compl\u00e9ter et tester le code ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def ajoute(indice, element, liste):\n    nbre_elts = len(liste)\n    L = [0 for i in range(nbre_elts + 1)]\n    if ...:\n        for i in range(indice):\n            L[i] = ...\n        L[...] = ...\n        for i in range(indice + 1, nbre_elts + 1):\n            L[i] = ...\n    else:\n        for i in range(nbre_elts):\n            L[i] = ...\n        L[...] = ...\n    return L\n</code></pre> \ud83d\udc0d Script Python<pre><code>def ajoute(indice, element, liste):\n    nbre_elts = len(liste)\n    L = [0 for i in range(nbre_elts + 1)]\n    if indice &lt; nbre_elts:\n        for i in range(indice):\n            L[i] = liste[i]\n        L[indice] = element\n        for i in range(indice + 1, nbre_elts + 1):\n            L[i] = liste[i-1]\n    else:\n        for i in range(nbre_elts):\n            L[i] = liste[i]\n        L[nbre_elts] = element \n    return L\n</code></pre> Markdown<pre><code>La m\u00e9thode `insert` de la classe `list` permet d\u2019ins\u00e9rer un \u00e9l\u00e9ment dans une liste \u00e0 un\n`indice` donn\u00e9.\n\nLe but de cet exercice est, *sans utiliser cette m\u00e9thode*, d\u2019\u00e9crire une fonction `ajoute`\nr\u00e9alisant cette insertion en produisant une nouvelle liste.\n\nCette fonction `ajoute` prend en param\u00e8tres trois variables `indice`, `element` et `liste`\net renvoie une liste `L` dans laquelle les \u00e9l\u00e9ments sont ceux de la liste `liste` avec, en\nplus, l\u2019\u00e9l\u00e9ment `element` \u00e0 l\u2019indice `indice`.  \nOn consid\u00e8re que les variables `indice` et `element` sont des entiers positifs et que les\n\u00e9l\u00e9ments de `liste` sont \u00e9galement des entiers positifs.  \nLes \u00e9l\u00e9ments de la liste `liste`, dont les indices sont sup\u00e9rieurs ou \u00e9gaux \u00e0 `indice`\napparaissent d\u00e9cal\u00e9s vers la droite dans la liste `L`.  \nSi `indice` est sup\u00e9rieur ou \u00e9gal au nombre d\u2019\u00e9l\u00e9ments de la liste `liste`, l\u2019\u00e9l\u00e9ment\nelement est ajout\u00e9 dans `L` apr\u00e8s tous les \u00e9l\u00e9ments de la liste `liste`.\n\nExemple :\n```python\n&gt;&gt;&gt; ajoute(1, 4, [7, 8, 9])\n[7, 4, 8, 9]\n&gt;&gt;&gt; ajoute(3, 4, [7, 8, 9])\n[7, 8, 9, 4]\n&gt;&gt;&gt; ajoute(4, 4, [7, 8, 9])\n[7, 8, 9, 4]\n</code></pre> <p>Compl\u00e9ter et tester le code ci-dessous :</p> <p>\ud83d\udc0d Script Python<pre><code>def ajoute(indice, element, liste):\n    nbre_elts = len(liste)\n    L = [0 for i in range(nbre_elts + 1)]\n    if ...:\n        for i in range(indice):\n            L[i] = ...\n        L[...] = ...\n        for i in range(indice + 1, nbre_elts + 1):\n            L[i] = ...\n    else:\n        for i in range(nbre_elts):\n            L[i] = ...\n        L[...] = ...\n    return L\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-30","title":"\u25b6 Sujet 30","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-301","title":"Exercice 30.1","text":"<p>Exercice 30.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>moyenne</code> qui prend en param\u00e8tre un tableau non vide de nombres flottants et qui renvoie la moyenne des valeurs du tableau. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; moyenne([1.0])\n1.0\n&gt;&gt;&gt; moyenne([1.0, 2.0, 4.0])\n2.3333333333333335\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    somme = 0\n    for val in tab:\n        somme += val\n    return somme / len(tab)\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `moyenne` qui prend en param\u00e8tre un tableau non vide de nombres\nflottants et qui renvoie la moyenne des valeurs du tableau. Les tableaux seront\nrepr\u00e9sent\u00e9s sous forme de liste Python.\n\nExemples :\n```python\n&gt;&gt;&gt; moyenne([1.0])\n1.0\n&gt;&gt;&gt; moyenne([1.0, 2.0, 4.0])\n2.3333333333333335\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-302","title":"Exercice 30.2","text":"<p>Exercice 30.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On consid\u00e8re la fonction <code>binaire</code> ci-dessous qui prend en param\u00e8tre un entier positif <code>a</code> en \u00e9criture d\u00e9cimale et qui renvoie son \u00e9criture binaire sous la forme d'une chaine de caract\u00e8res.</p> <p>L\u2019algorithme utilise la m\u00e9thode des divisions euclidiennes successives comme l\u2019illustre l\u2019exemple ci-apr\u00e8s.</p> <p></p> <p>\ud83d\udc0d Script Python<pre><code>def binaire(a):\n    bin_a = ...\n    a = a // 2\n    while a ... :\n        bin_a = ... + bin_a\n        a = ...\n    return bin_a\n</code></pre> Compl\u00e9ter le code de la fonction <code>binaire</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; binaire(83)\n'1010011'\n&gt;&gt;&gt; binaire(127)\n'1111111'\n&gt;&gt;&gt; binaire(0)\n'0'\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def binaire(a):\n    bin_a = str(a%2)\n    a = a // 2\n    while a != 0 :\n        bin_a = str(a%2) + bin_a\n        a = a // 2\n    return bin_a\n</code></pre> <p>Markdown<pre><code>On consid\u00e8re la fonction `binaire` ci-dessous qui prend en param\u00e8tre un entier positif `a` en \u00e9criture d\u00e9cimale et qui renvoie son \u00e9criture binaire sous la forme d'une chaine de caract\u00e8res.\n\nL\u2019algorithme utilise la m\u00e9thode des divisions euclidiennes successives comme l\u2019illustre\nl\u2019exemple ci-apr\u00e8s.\n\n![image](data2023/30_divisions.png){: .center}\n\n\n\n```python linenums='1'\ndef binaire(a):\n    bin_a = ...\n    a = a // 2\n    while a ... :\n        bin_a = ... + bin_a\n        a = ...\n    return bin_a\n</code></pre> Compl\u00e9ter le code de la fonction <code>binaire</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; binaire(83)\n'1010011'\n&gt;&gt;&gt; binaire(127)\n'1111111'\n&gt;&gt;&gt; binaire(0)\n'0'\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-31","title":"\u25b6 Sujet 31","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-311","title":"Exercice 31.1","text":"<p>Exercice 31.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction Python appel\u00e9e <code>nb_repetitions</code> qui prend en param\u00e8tres un \u00e9l\u00e9ment <code>elt</code> et une liste <code>tab</code> et renvoie le nombre de fois o\u00f9 l\u2019\u00e9l\u00e9ment appara\u00eet dans la liste.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; nb_repetitions(5, [2, 5, 3, 5, 6, 9, 5])\n3\n&gt;&gt;&gt; nb_repetitions('A', ['B', 'A', 'B', 'A', 'R'])\n2\n&gt;&gt;&gt; nb_repetitions(12, [1, '!', 7, 21, 36, 44])\n0\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def nb_repetitions(elt, tab):\n    nb = 0\n    for element in tab:\n        if element == elt:\n            nb += 1\n    return nb\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction Python appel\u00e9e `nb_repetitions` qui prend en param\u00e8tres un\n\u00e9l\u00e9ment `elt` et une liste `tab` et renvoie le nombre de fois o\u00f9 l\u2019\u00e9l\u00e9ment appara\u00eet dans la\nliste.\n\nExemples :\n```python\n&gt;&gt;&gt; nb_repetitions(5, [2, 5, 3, 5, 6, 9, 5])\n3\n&gt;&gt;&gt; nb_repetitions('A', ['B', 'A', 'B', 'A', 'R'])\n2\n&gt;&gt;&gt; nb_repetitions(12, [1, '!', 7, 21, 36, 44])\n0\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-312","title":"Exercice 31.2","text":"<p>Exercice 31.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Pour rappel, la conversion d\u2019un nombre entier positif en binaire peut s\u2019effectuer \u00e0 l\u2019aide des divisions successives comme illustr\u00e9 ici :</p> <p></p> <p>Voici une fonction Python bas\u00e9e sur la m\u00e9thode des divisions successives permettant de convertir un nombre entier positif en binaire :</p> <p>\ud83d\udc0d Script Python<pre><code>def binaire(a):\n    bin_a = str(...)\n    a = a // 2\n    while a ... :\n        bin_a = ...(a%2) + ...\n        a = ...\n    return bin_a\n</code></pre> Compl\u00e9ter la fonction <code>binaire</code>.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; binaire(0)\n'0'\n&gt;&gt;&gt; binaire(77)\n'1001101'\n</code></pre> \ud83d\udc0d Script Python<pre><code>def binaire(a):\n    bin_a = str(a%2)\n    a = a // 2\n    while a != 0 :\n        bin_a = str(a%2) + bin_a\n        a = a // 2\n    return bin_a\n</code></pre> <p>Markdown<pre><code>Pour rappel, la conversion d\u2019un nombre entier positif en binaire peut s\u2019effectuer \u00e0 l\u2019aide\ndes divisions successives comme illustr\u00e9 ici :\n\n![image](data2023/31_divisions.png){: .center}\n\nVoici une fonction Python bas\u00e9e sur la m\u00e9thode des divisions successives permettant de\nconvertir un nombre entier positif en binaire :\n\n```python linenums='1'\ndef binaire(a):\n    bin_a = str(...)\n    a = a // 2\n    while a ... :\n        bin_a = ...(a%2) + ...\n        a = ...\n    return bin_a\n</code></pre> Compl\u00e9ter la fonction <code>binaire</code>.</p> <p>Exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; binaire(0)\n'0'\n&gt;&gt;&gt; binaire(77)\n'1001101'\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-32","title":"\u25b6 Sujet 32","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-321","title":"Exercice 32.1","text":"<p>Exercice 32.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>min_et_max</code> qui prend en param\u00e8tre un tableau de nombres <code>tab</code> non vide, et qui renvoie la plus petite et la plus grande valeur du tableau sous la forme d\u2019un dictionnaire \u00e0 deux cl\u00e9s <code>min</code> et <code>max</code>. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>L\u2019utilisation des fonctions natives <code>min</code>, <code>max</code> et <code>sorted</code>, ainsi que la m\u00e9thode <code>sort</code> n\u2019est pas autoris\u00e9e.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; min_et_max([0, 1, 4, 2, -2, 9, 3, 1, 7, 1])\n{'min': -2, 'max': 9}\n&gt;&gt;&gt; min_et_max([0, 1, 2, 3])\n{'min': 0, 'max': 3}\n&gt;&gt;&gt; min_et_max([3])\n{'min': 3, 'max': 3}\n&gt;&gt;&gt; min_et_max([1, 3, 2, 1, 3])\n{'min': 1, 'max': 3}\n&gt;&gt;&gt; min_et_max([-1, -1, -1, -1, -1])\n{'min': -1, 'max': -1}\n</code></pre> \ud83d\udc0d Script Python<pre><code>def min_et_max(tab):\n    d = {}\n    d['min'] = tab[0]\n    d['max'] = tab[0]\n    for val in tab:\n        if val &lt; d['min']:\n            d['min'] = val\n        if val &gt; d['max']:\n            d['max'] = val\n    return d\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `min_et_max` qui prend en param\u00e8tre un tableau de nombres `tab` non vide, et qui renvoie la plus petite et la plus grande valeur du tableau sous la\nforme d\u2019un dictionnaire \u00e0 deux cl\u00e9s `min` et `max`. Les tableaux seront repr\u00e9sent\u00e9s sous\nforme de liste Python.\n\nLes tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.\n\nL\u2019utilisation des fonctions natives `min`, `max` et `sorted`, ainsi que la m\u00e9thode `sort` n\u2019est pas\nautoris\u00e9e.\n\nExemples :\n\n```python\n&gt;&gt;&gt; min_et_max([0, 1, 4, 2, -2, 9, 3, 1, 7, 1])\n{'min': -2, 'max': 9}\n&gt;&gt;&gt; min_et_max([0, 1, 2, 3])\n{'min': 0, 'max': 3}\n&gt;&gt;&gt; min_et_max([3])\n{'min': 3, 'max': 3}\n&gt;&gt;&gt; min_et_max([1, 3, 2, 1, 3])\n{'min': 1, 'max': 3}\n&gt;&gt;&gt; min_et_max([-1, -1, -1, -1, -1])\n{'min': -1, 'max': -1}\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-322","title":"Exercice 32.2","text":"<p>Exercice 32.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On dispose d\u2019une classe <code>Carte</code> permettant de cr\u00e9er des objets mod\u00e9lisant des cartes \u00e0 jouer.</p> <p>Compl\u00e9ter la classe <code>Paquet_de_cartes</code> suivante en respectant les sp\u00e9cifications donn\u00e9es dans les cha\u00eenes de documentation.</p> <p>Ajouter une assertion dans la m\u00e9thode <code>get_carte</code> afin de v\u00e9rifier que le param\u00e8tre <code>pos</code> est correct.</p> \ud83d\udc0d Script Python<pre><code>class Carte:\n    def __init__(self, c, v):\n        \"\"\" Initialise les attributs couleur (entre 1 et 4), et valeur (entre 1 et 13). \"\"\"\n        self.couleur = c\n        self.valeur = v\n\n    def get_valeur(self):\n        \"\"\" Renvoie la valeur de la carte : As, 2, ..., 10, Valet, Dame, Roi \"\"\"\n        valeurs = ['As','2', '3', '4', '5', '6', '7', '8', '9', '10', 'Valet', 'Dame', 'Roi']\n        return valeurs[self.valeur - 1]\n\n    def get_couleur(self):\n        \"\"\" Renvoie la couleur de la carte (parmi pique, coeur, carreau, tr\u00e8fle). \"\"\"\n        couleurs = ['pique', 'coeur', 'carreau', 'tr\u00e8fle']\n        return couleurs[self.couleur - 1]\n\nclass Paquet_de_cartes:\n    def __init__(self):\n        \"\"\" Initialise l'attribut contenu avec une liste des 52 objets Carte possibles\n            rang\u00e9s par valeurs croissantes en commen\u00e7ant par pique, puis coeur,\n            carreau et tr\u00e9fle. \"\"\"\n        # A compl\u00e9ter\n\n    def get_carte(self, pos):\n        \"\"\" Renvoie la carte qui se trouve \u00e0 la position pos (entier compris entre 0 et 51). \"\"\"\n        # A compl\u00e9ter\n</code></pre> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>Exemple :\n&gt;&gt;&gt; jeu = Paquet_de_cartes()\n&gt;&gt;&gt; carte1 = jeu.get_carte(20)\n&gt;&gt;&gt; print(carte1.get_valeur() + \" de \" + carte1.get_couleur())\n8 de coeur\n&gt;&gt;&gt; carte2 = jeu.get_carte(0)\n&gt;&gt;&gt; print(carte2.get_valeur() + \" de \" + carte2.get_couleur())\nAs de pique\n&gt;&gt;&gt; carte3 = jeu.get_carte(52)\nAssertionError : param\u00e8tre pos invalide\n</code></pre> \ud83d\udc0d Script Python<pre><code>class Carte:\n    def __init__(self, c, v):\n        \"\"\" Initialise les attributs couleur (entre 1 et 4), et valeur (entre 1 et 13). \"\"\"\n        self.couleur = c\n        self.valeur = v\n\n    def get_valeur(self):\n        \"\"\" Renvoie la valeur de la carte : As, 2, ..., 10, Valet, Dame, Roi \"\"\"\n        valeurs = ['As','2', '3', '4', '5', '6', '7', '8', '9', '10', 'Valet', 'Dame', 'Roi']\n        return valeurs[self.valeur - 1]\n\n    def get_couleur(self):\n        \"\"\" Renvoie la couleur de la carte (parmi pique, coeur, carreau, tr\u00e8fle). \"\"\"\n        couleurs = ['pique', 'coeur', 'carreau', 'tr\u00e8fle']\n        return couleurs[self.couleur - 1]\n\nclass Paquet_de_cartes:\n    def __init__(self):\n        \"\"\" Initialise l'attribut contenu avec une liste des 52 objets Carte possibles\n            rang\u00e9s par valeurs croissantes en commen\u00e7ant par pique, puis coeur,\n            carreau et tr\u00e9fle. \"\"\"\n        self.contenu = [Carte(c, v) for c in range(1, 5) for v in range(1, 14)]  \n\n    def get_carte(self, pos):\n        \"\"\" Renvoie la carte qui se trouve \u00e0 la position pos (entier compris entre 0 et 51). \"\"\"\n        assert 0 &lt;= pos &lt;= 51,  'param\u00e8tre pos invalide'\n        return self.contenu[pos]\n</code></pre> Markdown<pre><code>On dispose d\u2019une classe `Carte` permettant de cr\u00e9er des objets mod\u00e9lisant des cartes \u00e0\njouer.\n\nCompl\u00e9ter la classe `Paquet_de_cartes` suivante en respectant les sp\u00e9cifications\ndonn\u00e9es dans les cha\u00eenes de documentation.\n\nAjouter une assertion dans la m\u00e9thode `get_carte` afin de v\u00e9rifier que le param\u00e8tre `pos`\nest correct.\n\n```python linenums='1'\nclass Carte:\n    def __init__(self, c, v):\n        \"\"\" Initialise les attributs couleur (entre 1 et 4), et valeur (entre 1 et 13). \"\"\"\n        self.couleur = c\n        self.valeur = v\n\n    def get_valeur(self):\n        \"\"\" Renvoie la valeur de la carte : As, 2, ..., 10, Valet, Dame, Roi \"\"\"\n        valeurs = ['As','2', '3', '4', '5', '6', '7', '8', '9', '10', 'Valet', 'Dame', 'Roi']\n        return valeurs[self.valeur - 1]\n\n    def get_couleur(self):\n        \"\"\" Renvoie la couleur de la carte (parmi pique, coeur, carreau, tr\u00e8fle). \"\"\"\n        couleurs = ['pique', 'coeur', 'carreau', 'tr\u00e8fle']\n        return couleurs[self.couleur - 1]\n\nclass Paquet_de_cartes:\n    def __init__(self):\n        \"\"\" Initialise l'attribut contenu avec une liste des 52 objets Carte possibles\n            rang\u00e9s par valeurs croissantes en commen\u00e7ant par pique, puis coeur,\n            carreau et tr\u00e9fle. \"\"\"\n        # A compl\u00e9ter\n\n    def get_carte(self, pos):\n        \"\"\" Renvoie la carte qui se trouve \u00e0 la position pos (entier compris entre 0 et 51). \"\"\"\n        # A compl\u00e9ter\n</code></pre> <p>Exemple :</p> <p>\ud83d\udc0d Script Python<pre><code>Exemple :\n&gt;&gt;&gt; jeu = Paquet_de_cartes()\n&gt;&gt;&gt; carte1 = jeu.get_carte(20)\n&gt;&gt;&gt; print(carte1.get_valeur() + \" de \" + carte1.get_couleur())\n8 de coeur\n&gt;&gt;&gt; carte2 = jeu.get_carte(0)\n&gt;&gt;&gt; print(carte2.get_valeur() + \" de \" + carte2.get_couleur())\nAs de pique\n&gt;&gt;&gt; carte3 = jeu.get_carte(52)\nAssertionError : param\u00e8tre pos invalide\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-33","title":"\u25b6 Sujet 33","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-331","title":"Exercice 33.1","text":"<p>Exercice 33.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Dans cet exercice, un arbre binaire de caract\u00e8res est stock\u00e9 sous la forme d\u2019un dictionnaire o\u00f9 les clefs sont les caract\u00e8res des n\u0153uds de l\u2019arbre et les valeurs, pour chaque clef, la liste des caract\u00e8res des fils gauche et droit du n\u0153ud.</p> <p>Par exemple, l\u2019arbre</p> <p></p> <p>est stock\u00e9 dans</p> \ud83d\udc0d Script Python<pre><code>a = {'F':['B','G'], 'B':['A','D'], 'A':['',''], 'D':['C','E'], \\\n'C':['',''], 'E':['',''], 'G':['','I'], 'I':['','H'], \\\n'H':['','']}\n</code></pre> <p>\u00c9crire une fonction r\u00e9cursive <code>taille</code> prenant en param\u00e8tres un arbre binaire <code>arbre</code> sous la forme d\u2019un dictionnaire et un caract\u00e8re <code>lettre</code> qui est la valeur du sommet de l\u2019arbre, et qui renvoie la taille de l\u2019arbre \u00e0 savoir le nombre total de n\u0153uds.  </p> <p>On observe que, par exemple, <code>arbre[lettre][0]</code>, respectivement <code>arbre[lettre][1]</code>, permet d\u2019atteindre la cl\u00e9 du sous-arbre gauche, respectivement droit, de l\u2019arbre <code>arbre</code> de sommet <code>lettre</code>.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; taille(a, \u2019F\u2019)\n9\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>a = {'F':['B','G'], 'B':['A','D'], 'A':['',''], 'D':['C','E'], 'C':['',''], 'E':['',''], 'G':['','I'], 'I':['','H'], 'H':['','']}\n\ndef taille(arbre, lettre):\n    fils_gauche = arbre[lettre][0]\n    fils_droit = arbre[lettre][1]\n\n    if fils_gauche != '' and fils_droit != '':\n        return 1 + taille(arbre, fils_gauche) + taille(arbre, fils_droit)\n\n    if fils_gauche != '' and fils_droit == '':\n        return 1 + taille(arbre, fils_gauche)\n\n    if fils_gauche == '' and fils_droit != '':\n        return 1 + taille(arbre, fils_droit)\n\n    else:\n        return 1\n</code></pre> \ud83d\udccb Texte<pre><code>Dans cet exercice, un arbre binaire de caract\u00e8res est stock\u00e9 sous la forme d\u2019un\ndictionnaire o\u00f9 les clefs sont les caract\u00e8res des n\u0153uds de l\u2019arbre et les valeurs, pour\nchaque clef, la liste des caract\u00e8res des fils gauche et droit du n\u0153ud.\n\nPar exemple, l\u2019arbre\n\n![image](data2023/33_arbre.png){: .center}\n\nest stock\u00e9 dans\n\n```python\na = {'F':['B','G'], 'B':['A','D'], 'A':['',''], 'D':['C','E'], \\\n'C':['',''], 'E':['',''], 'G':['','I'], 'I':['','H'], \\\n'H':['','']}\n```\n\n\u00c9crire une fonction r\u00e9cursive `taille` prenant en param\u00e8tres un arbre binaire `arbre`\nsous la forme d\u2019un dictionnaire et un caract\u00e8re `lettre` qui est la valeur du sommet de\nl\u2019arbre, et qui renvoie la taille de l\u2019arbre \u00e0 savoir le nombre total de n\u0153uds.\n\nOn observe que, par exemple, `arbre[lettre][0]`, respectivement\n`arbre[lettre][1]`, permet d\u2019atteindre la cl\u00e9 du sous-arbre gauche, respectivement\ndroit, de l\u2019arbre `arbre` de sommet `lettre`.\n\nExemple :\n```python\n&gt;&gt;&gt; taille(a, \u2019F\u2019)\n9\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-332","title":"Exercice 33.2","text":"<p>Exercice 33.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On consid\u00e8re l'algorithme de tri de tableau suivant : \u00e0 chaque \u00e9tape, on parcourt le sous- tableau des \u00e9l\u00e9ments non rang\u00e9s et on place le plus petit \u00e9l\u00e9ment en premi\u00e8re position de ce sous-tableau.</p> <p>Exemple avec le tableau : <code>t = [41, 55, 21, 18, 12, 6, 25]</code> </p> <ul> <li> <p>\u00c9tape 1 : on parcourt tous les \u00e9l\u00e9ments du tableau, on permute le plus petit \u00e9l\u00e9ment avec le premier. Le tableau devient <code>t = [6, 55, 21, 18, 12, 41, 25]</code></p> </li> <li> <p>\u00c9tape 2 : on parcourt tous les \u00e9l\u00e9ments sauf le premier, on permute le plus petit \u00e9l\u00e9ment trouv\u00e9 avec le second. Le tableau devient : <code>t = [6, 12, 21, 18, 55, 41, 25]</code> </p> </li> </ul> <p>Et ainsi de suite. </p> <p>La code de la fonction <code>tri_selection</code> qui impl\u00e9mente cet algorithme est donn\u00e9 ci- dessous.</p> \ud83d\udc0d Script Python<pre><code>def tri_selection(tab):\n    N = len(tab)\n    for k in range(...):\n        imin = ...\n        for i in range(... , N):\n            if tab[i] &lt; ... :\n                imin = i\n        ... , tab[imin] = tab[imin] , ...\n</code></pre> <p>Compl\u00e9ter le code de cette fonction de fa\u00e7on \u00e0 obtenir :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; liste = [41, 55, 21, 18, 12, 6, 25]\n&gt;&gt;&gt; tri_selection(liste)\n&gt;&gt;&gt; liste\n[6, 12, 18, 21, 25, 41, 55]\n</code></pre> <p>On rappelle que l'instruction <code>a, b = b, a</code> \u00e9change les contenus de <code>a</code> et de <code>b</code>.</p> \ud83d\udc0d Script Python<pre><code>def tri_selection(tab):\n    N = len(tab)\n    for k in range(N):\n        imin = k\n        for i in range(k, N):\n            if tab[i] &lt; tab[imin] :\n                imin = i\n        tab[k] , tab[imin] = tab[imin] , tab[k]\n</code></pre> Markdown<pre><code>On consid\u00e8re l'algorithme de tri de tableau suivant : \u00e0 chaque \u00e9tape, on parcourt le sous-\ntableau des \u00e9l\u00e9ments non rang\u00e9s et on place le plus petit \u00e9l\u00e9ment en premi\u00e8re position de\nce sous-tableau.\n\nExemple avec le tableau : ```t = [41, 55, 21, 18, 12, 6, 25]``` \n\n- \u00c9tape 1 : on parcourt tous les \u00e9l\u00e9ments du tableau, on permute le plus petit \u00e9l\u00e9ment avec\nle premier. Le tableau devient `t = [6, 55, 21, 18, 12, 41, 25]`\n\n- \u00c9tape 2 : on parcourt tous les \u00e9l\u00e9ments sauf le premier, on permute le plus petit \u00e9l\u00e9ment\ntrouv\u00e9 avec le second. Le tableau devient : ```t = [6, 12, 21, 18, 55, 41, 25]``` \n\nEt ainsi de suite. \n\nLa code de la fonction `tri_selection` qui impl\u00e9mente cet algorithme est donn\u00e9 ci-\ndessous.\n\n\n```python linenums='1'\ndef tri_selection(tab):\n    N = len(tab)\n    for k in range(...):\n        imin = ...\n        for i in range(... , N):\n            if tab[i] &lt; ... :\n                imin = i\n        ... , tab[imin] = tab[imin] , ...\n</code></pre> <p>Compl\u00e9ter le code de cette fonction de fa\u00e7on \u00e0 obtenir :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; liste = [41, 55, 21, 18, 12, 6, 25]\n&gt;&gt;&gt; tri_selection(liste)\n&gt;&gt;&gt; liste\n[6, 12, 18, 21, 25, 41, 55]\n</code></pre> <p>On rappelle que l'instruction <code>a, b = b, a</code> \u00e9change les contenus de <code>a</code> et de <code>b</code>. ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-34","title":"\u25b6 Sujet 34","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-341","title":"Exercice 34.1","text":"<p>Exercice 34.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Programmer la fonction <code>moyenne</code>   prenant en param\u00e8tre un tableau d'entiers <code>tab</code> (de type <code>list</code>) qui renvoie la moyenne de ses \u00e9l\u00e9ments si le tableau est non vide. Proposer une fa\u00e7on de traiter le cas o\u00f9 le tableau pass\u00e9 en param\u00e8tre est vide.</p> <p>Dans cet exercice, on s\u2019interdira d\u2019utiliser la fonction Python <code>sum</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; moyenne([5,3,8])\n5.333333333333333\n&gt;&gt;&gt; moyenne([1,2,3,4,5,6,7,8,9,10])\n5.5\n&gt;&gt;&gt; moyenne([])\n# Comportement diff\u00e9rent suivant le traitement propos\u00e9.\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    if tab == []:\n        print('Le tableau donn\u00e9 est vide')\n        return None\n    else:\n        somme = 0\n        for elt in tab:\n            somme += elt\n        return somme / len(tab)\n</code></pre> \ud83d\udccb Texte<pre><code>Programmer la fonction ```moyenne```   prenant en param\u00e8tre un tableau d'entiers ```tab``` (de type\n`list`) qui renvoie la moyenne de ses \u00e9l\u00e9ments si le tableau est non vide. Proposer une\nfa\u00e7on de traiter le cas o\u00f9 le tableau pass\u00e9 en param\u00e8tre est vide.\n\nDans cet exercice, on s\u2019interdira d\u2019utiliser la fonction Python `sum`.\n\nExemples :\n```python\n&gt;&gt;&gt; moyenne([5,3,8])\n5.333333333333333\n&gt;&gt;&gt; moyenne([1,2,3,4,5,6,7,8,9,10])\n5.5\n&gt;&gt;&gt; moyenne([])\n# Comportement diff\u00e9rent suivant le traitement propos\u00e9.\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-342","title":"Exercice 34.2","text":"<p>Exercice 34.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On consid\u00e8re un tableau d'entiers <code>tab</code> (de type <code>list</code>) dont les \u00e9l\u00e9ments sont des <code>0</code> ou des <code>1</code>). On se propose de trier ce tableau selon l'algorithme suivant : \u00e0 chaque \u00e9tape du tri, le tableau est constitu\u00e9 de trois zones cons\u00e9cutives, la premi\u00e8re ne contenant que des <code>0</code>, la seconde n'\u00e9tant pas tri\u00e9e et la derni\u00e8re ne contenant que des <code>1</code>.</p> <p> Zone de 0Zone non tri\u00e9eZone de 1 </p> <p>Tant que la zone non tri\u00e9e n'est pas r\u00e9duite \u00e0 un seul \u00e9l\u00e9ment, on regarde son premier \u00e9l\u00e9ment :</p> <ul> <li>si cet \u00e9l\u00e9ment vaut 0, on consid\u00e8re qu'il appartient d\u00e9sormais \u00e0 la zone ne contenant que des 0 ;</li> <li>si cet \u00e9l\u00e9ment vaut 1, il est \u00e9chang\u00e9 avec le dernier \u00e9l\u00e9ment de la zone non tri\u00e9e et on consid\u00e8re alors qu\u2019il appartient \u00e0 la zone ne contenant que des 1.</li> </ul> <p>Dans tous les cas, la longueur de la zone non tri\u00e9e diminue de 1.</p> <p>Recopier sous Python en la compl\u00e9tant la fonction <code>tri</code> suivante :</p> \ud83d\udc0d Script Python<pre><code>def tri(tab):\n    # i est le premier indice de la zone non tri\u00e9e,\n    # j est le dernier indice de cette zone non tri\u00e9e.\n    # Au d\u00e9but, la zone non tri\u00e9e est le tableau complet.\n    i = ...\n    j = ...\n    while i != j:\n        if tab[i]== 0:\n            i = ...\n        else:\n            valeur = tab[j]\n            tab[j] = ...\n            ...\n            j = ...\n    ...\n</code></pre> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tri([0,1,0,1,0,1,0,1,0])\n[0, 0, 0, 0, 0, 1, 1, 1, 1]       \n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def tri(tab):\n    # i est le premier indice de la zone non tri\u00e9e,\n    # j est le dernier indice de cette zone non tri\u00e9e.\n    # Au d\u00e9but, la zone non tri\u00e9e est le tableau complet.\n    i = 0\n    j = len(tab) - 1\n    while i != j :\n        if tab[i] == 0:\n            i = i + 1\n        else :\n            valeur = tab[j]\n            tab[j] = tab[i]\n            tab[i] = valeur\n            j = j - 1\n    return tab\n</code></pre> Markdown<pre><code>On consid\u00e8re un tableau d'entiers `tab` (de type `list`) dont les \u00e9l\u00e9ments sont des `0` ou des `1`). On se propose de trier ce tableau selon l'algorithme suivant : \u00e0 chaque \u00e9tape du tri, le tableau est constitu\u00e9 de trois zones cons\u00e9cutives, la premi\u00e8re ne contenant que des `0`,\nla seconde n'\u00e9tant pas tri\u00e9e et la derni\u00e8re ne contenant que des `1`.\n\n&lt;table&gt;\n&lt;tr&gt;\n&lt;td&gt;Zone de 0&lt;/td&gt;&lt;td&gt;Zone non tri\u00e9e&lt;/td&gt;&lt;td&gt;Zone de 1&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\n\nTant que la zone non tri\u00e9e n'est pas r\u00e9duite \u00e0 un seul \u00e9l\u00e9ment, on regarde son premier\n\u00e9l\u00e9ment :\n\n- si cet \u00e9l\u00e9ment vaut 0, on consid\u00e8re qu'il appartient d\u00e9sormais \u00e0 la zone ne contenant\nque des 0 ;\n- si cet \u00e9l\u00e9ment vaut 1, il est \u00e9chang\u00e9 avec le dernier \u00e9l\u00e9ment de la zone non tri\u00e9e et on\nconsid\u00e8re alors qu\u2019il appartient \u00e0 la zone ne contenant que des 1.\n\nDans tous les cas, la longueur de la zone non tri\u00e9e diminue de 1.\n\nRecopier sous Python en la compl\u00e9tant la fonction `tri` suivante :\n\n```python linenums='1'\ndef tri(tab):\n    # i est le premier indice de la zone non tri\u00e9e,\n    # j est le dernier indice de cette zone non tri\u00e9e.\n    # Au d\u00e9but, la zone non tri\u00e9e est le tableau complet.\n    i = ...\n    j = ...\n    while i != j:\n        if tab[i]== 0:\n            i = ...\n        else:\n            valeur = tab[j]\n            tab[j] = ...\n            ...\n            j = ...\n    ...\n</code></pre> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tri([0,1,0,1,0,1,0,1,0])\n[0, 0, 0, 0, 0, 1, 1, 1, 1]       \n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-35","title":"\u25b6 Sujet 35","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-351","title":"Exercice 35.1","text":"<p>Exercice 35.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>L'op\u00e9rateur \u00ab ou exclusif \u00bb entre deux bits renvoie 0 si les deux bits sont \u00e9gaux et 1 s'ils sont diff\u00e9rents. Il est symbolis\u00e9 par le caract\u00e8re \u2295. Ainsi :</p> <ul> <li>0 \u2295 0 = 0</li> <li>0 \u2295 1 = 1</li> <li>1 \u2295 0 = 1</li> <li>1 \u2295 1 = 0  </li> </ul> <p>On repr\u00e9sente ici une suite de bits par un tableau contenant des 0 et des 1.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>a = [1, 0, 1, 0, 1, 1, 0, 1]\nb = [0, 1, 1, 1, 0, 1, 0, 0]\nc = [1, 1, 0, 1]\nd = [0, 0, 1, 1]\n</code></pre> <p>\u00c9crire la fonction <code>ou_exclusif</code> qui prend en param\u00e8tres deux tableaux de m\u00eame longueur et qui renvoie un tableau o\u00f9 l\u2019\u00e9l\u00e9ment situ\u00e9 \u00e0 position <code>i</code> est le r\u00e9sultat, par l\u2019op\u00e9rateur \u00ab ou exclusif \u00bb, des \u00e9l\u00e9ments \u00e0 la position <code>i</code> des tableaux pass\u00e9s en param\u00e8tres.</p> <p>En consid\u00e9rant les quatre exemples ci-dessus, cette fonction donne :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; ou_exclusif(a, b)\n[1, 1, 0, 1, 1, 0, 0, 1])\n&gt;&gt;&gt; ou_exclusif(c, d)\n[1, 1, 1, 0]\n</code></pre> \ud83d\udc0d Script Python<pre><code>def ou_exclusif(tab1, tab2):\n    resultat = []\n    taille = len(tab1)\n    for i in range(taille):\n        resultat.append(tab1[i] ^ tab2[i])\n    return resultat\n</code></pre> <p>Si on ne connait pas la fonction native ^ qui fait le \u00abou exclusif\u00bb de deux entiers en Python, on peut la recoder :</p> \ud83d\udc0d Script Python<pre><code>def ou_exc(a, b):\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 1:\n        return 1\n    if a == 1 and b == 0:\n        return 1\n    if a == 1 and b == 1:\n        return 0\n</code></pre> <p>Le code devient alors :</p> \ud83d\udc0d Script Python<pre><code>def ou_exclusif(tab1, tab2):\n    resultat = []\n    taille = len(tab1)\n    for i in range(taille):\n        resultat.append(ou_exc(tab1[i],tab2[i]))\n    return resultat\n</code></pre> \ud83d\udccb Texte<pre><code>L'op\u00e9rateur \u00ab ou exclusif \u00bb entre deux bits renvoie 0 si les deux bits sont \u00e9gaux et 1 s'ils sont\ndiff\u00e9rents. Il est symbolis\u00e9 par le caract\u00e8re \u2295.\nAinsi :\n\n- 0 \u2295 0 = 0\n- 0 \u2295 1 = 1\n- 1 \u2295 0 = 1\n- 1 \u2295 1 = 0\n\nOn repr\u00e9sente ici une suite de bits par un tableau contenant des 0 et des 1.\n\nExemples :\n\n```python\na = [1, 0, 1, 0, 1, 1, 0, 1]\nb = [0, 1, 1, 1, 0, 1, 0, 0]\nc = [1, 1, 0, 1]\nd = [0, 0, 1, 1]\n```\n\n\u00c9crire la fonction ```ou_exclusif``` qui prend en param\u00e8tres deux tableaux de m\u00eame longueur et qui renvoie\nun tableau o\u00f9 l\u2019\u00e9l\u00e9ment situ\u00e9 \u00e0 position `i` est le r\u00e9sultat, par l\u2019op\u00e9rateur \u00ab ou exclusif \u00bb, des\n\u00e9l\u00e9ments \u00e0 la position `i` des tableaux pass\u00e9s en param\u00e8tres.\n\nEn consid\u00e9rant les quatre exemples ci-dessus, cette fonction donne :\n\n```python\n&gt;&gt;&gt; ou_exclusif(a, b)\n[1, 1, 0, 1, 1, 0, 0, 1])\n&gt;&gt;&gt; ou_exclusif(c, d)\n[1, 1, 1, 0]\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-352","title":"Exercice 35.2","text":"<p>Exercice 35.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Dans cet exercice, on appelle carr\u00e9 d\u2019ordre \\(n\\) un tableau de \\(n\\) lignes et \\(n\\) colonnes dont chaque case contient un entier naturel.</p> <p>Exemples : </p> <p>Un carr\u00e9 est dit semimagique lorsque les sommes des \u00e9l\u00e9ments situ\u00e9s sur chaque ligne, chaque colonne sont \u00e9gales.</p> <ul> <li> <p>Ainsi c2 et c3 sont semimagiques car la somme de chaque ligne, chaque colonne et chaque diagonale est \u00e9gale \u00e0 8 pour c2 et 12 pour c3.</p> </li> <li> <p>Le carre c3bis n'est pas semimagique car la somme de la premi\u00e8re ligne est \u00e9gale \u00e0 15 alors que celle de la deuxi\u00e8me ligne est \u00e9gale \u00e0 10.</p> </li> </ul> <p>La classe <code>Carre</code> ci-apr\u00e8s contient des m\u00e9thodes qui permettent de manipuler des carr\u00e9s.</p> <ul> <li> <p>La m\u00e9thode constructeur cr\u00e9e un carr\u00e9 sous forme d\u2019un tableau \u00e0 deux dimensions \u00e0 partir d\u2019une liste d\u2019entiers, et d\u2019un ordre.</p> </li> <li> <p>La m\u00e9thode <code>affiche</code> permet d\u2019afficher le carr\u00e9 cr\u00e9\u00e9.</p> </li> </ul> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; liste = (3, 4, 5, 4, 4, 4, 5, 4, 3)\n&gt;&gt;&gt; c3 = Carre(liste, 3)\n&gt;&gt;&gt; c3.affiche()\n[3, 4, 5]\n[4, 4, 4]\n[5, 4, 3]\n</code></pre> <p>Compl\u00e9ter la m\u00e9thode <code>est_semimagique</code> qui renvoie <code>True</code> si le carr\u00e9 est semimagique, <code>False</code> sinon. Puis tester la fonction <code>est_semimagique</code> sur les carr\u00e9s c2, c3 et c3bis.</p> \ud83d\udc0d Script Python<pre><code>class Carre:\n    def __init__(self, liste, n):\n        self.ordre = n\n        self.tableau = [[liste[i + j * n] for i in range(n)] for j in range(n)]\n\n    def affiche(self):\n        '''Affiche un carr\u00e9'''\n        for i in range(self.ordre):\n            print(self.tableau[i])\n\n    def somme_ligne(self, i):\n        '''Calcule la somme des valeurs de la ligne i'''\n        somme = 0\n        for j in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def somme_col(self, j):\n        '''Calcule la somme des valeurs de la colonne j'''\n        somme = 0\n        for i in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def est_semimagique(self):\n        s = self.somme_ligne(0)\n\n        #test de la somme de chaque ligne\n        for i in range(...):\n            if ... != s:\n                return ...\n\n        #test de la somme de chaque colonne\n        for j in range(...):\n            if ... != s:\n                return ...\n\n        return ...\n</code></pre> <p>Listes permettant de g\u00e9n\u00e9rer les carr\u00e9s c2, c3 et c3bis :</p> \ud83d\udc0d Script Python<pre><code>lst_c2 = [1, 7, 7, 1]\nlst_c3 = [3, 4, 5, 4, 4, 4, 5, 4, 3]\nlst_c3bis = [2, 9, 4, 7, 0, 3, 6, 1, 8]\n</code></pre> \ud83d\udc0d Script Python<pre><code>class Carre:\n    def __init__(self, liste, n):\n        self.ordre = n\n        self.tableau = [[liste[i + j * n] for i in range(n)] for j in range(n)]\n\n    def affiche(self):\n        '''Affiche un carr\u00e9'''\n        for i in range(self.ordre):\n            print(self.tableau[i])\n\n    def somme_ligne(self, i):\n        '''Calcule la somme des valeurs de la ligne i'''\n        somme = 0\n        for j in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def somme_col(self, j):\n        '''Calcule la somme des valeurs de la colonne j'''\n        somme = 0\n        for i in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def est_semimagique(self):\n        s = self.somme_ligne(0)\n\n        #test de la somme de chaque ligne\n        for i in range(self.ordre):\n            if self.somme_ligne(i) != s:\n                return False\n\n        #test de la somme de chaque colonne\n        for j in range(self.ordre):\n            if self.somme_col(j) != s:\n                return False\n\n        return True\n</code></pre> <p>Tests avec :</p> \ud83d\udc0d Script Python<pre><code>lst_c2 = [1, 7, 7, 1]\nlst_c3 = [3, 4, 5, 4, 4, 4, 5, 4, 3]\nlst_c3bis = [2, 9, 4, 7, 0, 3, 6, 1, 8]\n</code></pre> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; c2 = Carre(lst_c2, 2)\n&gt;&gt;&gt; c2.est_semimagique()\nTrue\n\n&gt;&gt;&gt; c3 = Carre(lst_c3, 3)\n&gt;&gt;&gt; c3.est_semimagique()\nTrue\n\n&gt;&gt;&gt; c3bis = Carre(lst_c3bis, 2)\n&gt;&gt;&gt; c3bis.est_semimagique()\nFalse\n</code></pre> Markdown<pre><code>Dans cet exercice, on appelle carr\u00e9 d\u2019ordre $n$ un tableau de $n$ lignes et $n$ colonnes dont chaque case contient un entier naturel.\n\nExemples :\n![image](data2023/35_carre.png){: .center}\n\nUn carr\u00e9 est dit semimagique lorsque les sommes des \u00e9l\u00e9ments situ\u00e9s sur chaque ligne, chaque\ncolonne sont \u00e9gales.\n\n- Ainsi c2 et c3 sont semimagiques car la somme de chaque\nligne, chaque colonne et chaque diagonale est \u00e9gale \u00e0 8 pour c2 et 12 pour c3.\n\n- Le carre c3bis n'est pas semimagique car la somme de la premi\u00e8re ligne est \u00e9gale \u00e0 15 alors que celle de la deuxi\u00e8me ligne\nest \u00e9gale \u00e0 10.\n\nLa classe `Carre` ci-apr\u00e8s contient des m\u00e9thodes qui permettent de manipuler des carr\u00e9s.\n\n- La m\u00e9thode constructeur cr\u00e9e un carr\u00e9 sous forme d\u2019un tableau \u00e0 deux dimensions\n\u00e0 partir d\u2019une liste d\u2019entiers, et d\u2019un ordre.\n\n- La m\u00e9thode `affiche` permet d\u2019afficher le carr\u00e9 cr\u00e9\u00e9.\n\nExemple :\n\n```python\n&gt;&gt;&gt; liste = (3, 4, 5, 4, 4, 4, 5, 4, 3)\n&gt;&gt;&gt; c3 = Carre(liste, 3)\n&gt;&gt;&gt; c3.affiche()\n[3, 4, 5]\n[4, 4, 4]\n[5, 4, 3]\n</code></pre> <p>Compl\u00e9ter la m\u00e9thode <code>est_semimagique</code> qui renvoie <code>True</code> si le carr\u00e9 est semimagique, <code>False</code> sinon. Puis tester la fonction <code>est_semimagique</code> sur les carr\u00e9s c2, c3 et c3bis.</p> \ud83d\udc0d Script Python<pre><code>class Carre:\n    def __init__(self, liste, n):\n        self.ordre = n\n        self.tableau = [[liste[i + j * n] for i in range(n)] for j in range(n)]\n\n    def affiche(self):\n        '''Affiche un carr\u00e9'''\n        for i in range(self.ordre):\n            print(self.tableau[i])\n\n    def somme_ligne(self, i):\n        '''Calcule la somme des valeurs de la ligne i'''\n        somme = 0\n        for j in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def somme_col(self, j):\n        '''Calcule la somme des valeurs de la colonne j'''\n        somme = 0\n        for i in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def est_semimagique(self):\n        s = self.somme_ligne(0)\n\n        #test de la somme de chaque ligne\n        for i in range(...):\n            if ... != s:\n                return ...\n\n        #test de la somme de chaque colonne\n        for j in range(...):\n            if ... != s:\n                return ...\n\n        return ...\n</code></pre> <p>Listes permettant de g\u00e9n\u00e9rer les carr\u00e9s c2, c3 et c3bis :</p> <p>\ud83d\udc0d Script Python<pre><code>lst_c2 = [1, 7, 7, 1]\nlst_c3 = [3, 4, 5, 4, 4, 4, 5, 4, 3]\nlst_c3bis = [2, 9, 4, 7, 0, 3, 6, 1, 8]\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-36","title":"\u25b6 Sujet 36","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-361","title":"Exercice 36.1","text":"<p>Exercice 36.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>couples_consecutifs</code> qui prend en param\u00e8tre une liste de nombres entiers <code>tab</code> non vide, et qui renvoie la liste (\u00e9ventuellement vide) des couples d'entiers cons\u00e9cutifs successifs qu'il peut y avoir dans <code>tab</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; couples_consecutifs([1, 4, 3, 5])\n[]\n&gt;&gt;&gt; couples_consecutifs([1, 4, 5, 3])\n[(4, 5)]\n&gt;&gt;&gt; couples_consecutifs([1, 1, 2, 4])\n[(1, 2)]\n&gt;&gt;&gt; couples_consecutifs([7, 1, 2, 5, 3, 4])\n[(1, 2), (3, 4)]\n&gt;&gt;&gt; couples_consecutifs([5, 1, 2, 3, 8, -5, -4, 7])\n[(1, 2), (2, 3), (-5, -4)]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def couples_consecutifs(tab):\n    solution = []\n    for i in range(len(tab)-1):\n        if tab[i] + 1 == tab[i+1]:\n            solution.append((tab[i], tab[i+1]))\n    return solution\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `couples_consecutifs` qui prend en param\u00e8tre une liste de\nnombres entiers `tab` non vide, et qui renvoie la liste (\u00e9ventuellement vide) des couples d'entiers cons\u00e9cutifs\nsuccessifs qu'il peut y avoir dans `tab`.\n\nExemples :\n```python\n&gt;&gt;&gt; couples_consecutifs([1, 4, 3, 5])\n[]\n&gt;&gt;&gt; couples_consecutifs([1, 4, 5, 3])\n[(4, 5)]\n&gt;&gt;&gt; couples_consecutifs([1, 1, 2, 4])\n[(1, 2)]\n&gt;&gt;&gt; couples_consecutifs([7, 1, 2, 5, 3, 4])\n[(1, 2), (3, 4)]\n&gt;&gt;&gt; couples_consecutifs([5, 1, 2, 3, 8, -5, -4, 7])\n[(1, 2), (2, 3), (-5, -4)]\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-362","title":"Exercice 36.2","text":"<p>Exercice 36.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Soit une image binaire repr\u00e9sent\u00e9e dans un tableau \u00e0 2 dimensions. Les \u00e9l\u00e9ments <code>M[i][j]</code>, appel\u00e9s pixels, sont \u00e9gaux soit \u00e0 <code>0</code> soit \u00e0 <code>1</code>.</p> <p>Une composante d\u2019une image est un sous-ensemble de l\u2019image constitu\u00e9 uniquement de <code>1</code> et de <code>0</code> qui sont c\u00f4te \u00e0 c\u00f4te, soit horizontalement soit verticalement.</p> <p>Par exemple, les composantes de  sont </p> <p>On souhaite, \u00e0 partir d\u2019un pixel \u00e9gal \u00e0 <code>1</code> dans une image <code>M</code>, donner la valeur <code>val</code> \u00e0 tous les pixels de la composante \u00e0 laquelle appartient ce pixel.</p> <p>La fonction <code>propager</code> prend pour param\u00e8tre une image <code>M</code> (repr\u00e9sent\u00e9e par une liste de listes), deux entiers <code>i</code> et <code>j</code> et unevaleur enti\u00e8re <code>val</code>. Elle met \u00e0 la valeur <code>val</code> tous les pixels de la composante du pixel <code>M[i][j]</code> s\u2019il vaut <code>1</code> et ne fait rien s\u2019il vaut <code>0</code>.</p> <p>Par exemple, <code>propager(M, 2, 1, 3)</code> donne </p> <p>Compl\u00e9ter le code r\u00e9cursif de la fonction <code>propager</code> donn\u00e9 ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def propager(M, i, j, val):\n    if M[i][j] == ...:\n        M[i][j] = val\n\n    # l'element en haut fait partie de la composante\n    if i-1 &gt;= 0 and M[i-1][j] == ...:\n        propager(M, i-1, j, val)\n\n    # l'element en bas fait partie de la composante\n    if ... &lt; len(M) and M[i+1][j] == 1:\n        propager(M, ..., j, val)\n\n    # l'element \u00e0 gauche fait partie de la composante\n    if ... and M[i][j-1] == 1:\n        propager(M, ..., ..., val)\n\n    # l'element \u00e0 droite fait partie de la composante\n    if ... and ...:\n        propager(..., ..., ..., ...)\n</code></pre> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; M = [[0, 0, 1, 0], [0, 1, 0, 1], [1, 1, 1, 0], [0, 1, 1, 0]]\n&gt;&gt;&gt; propager(M, 2, 1, 3)\n&gt;&gt;&gt; M\n[[0, 0, 1, 0], [0, 3, 0, 1], [3, 3, 3, 0], [0, 3, 3, 0]]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def propager(M, i, j, val):\n    if M[i][j] == 1:\n        M[i][j] = val\n\n    # l'element en haut fait partie de la composante\n    if i-1 &gt;= 0 and M[i-1][j] == 1:\n        propager(M, i-1, j, val)\n\n    # l'element en bas fait partie de la composante\n    if i+1 &lt; len(M) and M[i+1][j] == 1:\n        propager(M, i+1, j, val)\n\n    # l'element \u00e0 gauche fait partie de la composante\n    if j-1 and M[i][j-1] == 1:\n        propager(M, i, j-1, val)\n\n    # l'element \u00e0 droite fait partie de la composante\n    if j+1 and M[i][j+1] == 1:\n        propager(M, i, j+1, val)\n</code></pre> Markdown<pre><code>Soit une image binaire repr\u00e9sent\u00e9e dans un tableau \u00e0 2 dimensions. Les \u00e9l\u00e9ments\n`M[i][j]`, appel\u00e9s pixels, sont \u00e9gaux soit \u00e0 `0` soit \u00e0 `1`.\n\nUne composante d\u2019une image est un sous-ensemble de l\u2019image constitu\u00e9 uniquement de\n`1` et de `0` qui sont c\u00f4te \u00e0 c\u00f4te, soit horizontalement soit verticalement.\n\nPar exemple, les composantes de\n![image](data2023/36_carre1.png){: .center}\nsont\n![image](data2023/36_carre2.png){: .center width=30%}\n\nOn souhaite, \u00e0 partir d\u2019un pixel \u00e9gal \u00e0 `1` dans une image `M`, donner la valeur `val` \u00e0 tous\nles pixels de la composante \u00e0 laquelle appartient ce pixel.\n\nLa fonction `propager` prend pour param\u00e8tre une image `M` (repr\u00e9sent\u00e9e par une liste de\nlistes), deux entiers `i` et `j` et unevaleur enti\u00e8re `val`. Elle met \u00e0 la valeur `val` tous les pixels de la composante du pixel\n`M[i][j]` s\u2019il vaut `1` et ne fait rien s\u2019il vaut `0`.\n\nPar exemple, `propager(M, 2, 1, 3)` donne\n![image](data2023/36_carre3.png){: .center width=30%}\n\nCompl\u00e9ter le code r\u00e9cursif de la fonction `propager` donn\u00e9 ci-dessous :\n\n```python linenums='1'\ndef propager(M, i, j, val):\n    if M[i][j] == ...:\n        M[i][j] = val\n\n    # l'element en haut fait partie de la composante\n    if i-1 &gt;= 0 and M[i-1][j] == ...:\n        propager(M, i-1, j, val)\n\n    # l'element en bas fait partie de la composante\n    if ... &lt; len(M) and M[i+1][j] == 1:\n        propager(M, ..., j, val)\n\n    # l'element \u00e0 gauche fait partie de la composante\n    if ... and M[i][j-1] == 1:\n        propager(M, ..., ..., val)\n\n    # l'element \u00e0 droite fait partie de la composante\n    if ... and ...:\n        propager(..., ..., ..., ...)\n</code></pre> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; M = [[0, 0, 1, 0], [0, 1, 0, 1], [1, 1, 1, 0], [0, 1, 1, 0]]\n&gt;&gt;&gt; propager(M, 2, 1, 3)\n&gt;&gt;&gt; M\n[[0, 0, 1, 0], [0, 3, 0, 1], [3, 3, 3, 0], [0, 3, 3, 0]]\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-37","title":"\u25b6 Sujet 37","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-371","title":"Exercice 37.1","text":"<p>Exercice 37.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>elt</code> un nombre entier et <code>tab</code> un tableau de nombres entiers, et qui renvoie l\u2019indice de la derni\u00e8re occurrence de <code>elt</code> dans <code>tab</code> si <code>elt</code> est dans <code>tab</code> et <code>-1</code> sinon.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(1, [2, 3, 4])\n-1\n&gt;&gt;&gt; recherche(1, [10, 12, 1, 56])\n2\n&gt;&gt;&gt; recherche(1, [1, 0, 42, 7])\n0\n&gt;&gt;&gt; recherche(1, [1, 50, 1])\n2\n&gt;&gt;&gt; recherche(1, [8, 1, 10, 1, 7, 1, 8])\n5\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(elt, tab):\n    for i in range(len(tab)-1, -1, -1):\n        if tab[i] == elt:\n            return i\n    return -1\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `recherche` qui prend en param\u00e8tres `elt` un nombre entier et `tab`\nun tableau de nombres entiers, et qui renvoie l\u2019indice de la derni\u00e8re occurrence de `elt`\ndans `tab` si `elt` est dans `tab` et `-1` sinon.\n\nExemples :\n```python\n&gt;&gt;&gt; recherche(1, [2, 3, 4])\n-1\n&gt;&gt;&gt; recherche(1, [10, 12, 1, 56])\n2\n&gt;&gt;&gt; recherche(1, [1, 0, 42, 7])\n0\n&gt;&gt;&gt; recherche(1, [1, 50, 1])\n2\n&gt;&gt;&gt; recherche(1, [8, 1, 10, 1, 7, 1, 8])\n5\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-372","title":"Exercice 37.2","text":"<p>Exercice 37.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On d\u00e9finit une classe g\u00e9rant une adresse IPv4.</p> <p>On rappelle qu\u2019une adresse IPv4 est une adresse de longueur 4 octets, not\u00e9e en d\u00e9cimale \u00e0 point, en s\u00e9parant chacun des octets par un point. On consid\u00e8re un r\u00e9seau priv\u00e9 avec une plage d\u2019adresses IP de <code>192.168.0.0</code> \u00e0 <code>192.168.0.255</code>.</p> <p>On consid\u00e8re que les adresses IP saisies sont valides.</p> <p>Les adresses IP <code>192.168.0.0</code> et <code>192.168.0.255</code> sont des adresses r\u00e9serv\u00e9es.</p> <p>Le code ci-dessous impl\u00e9mente la classe <code>AdresseIP</code>.</p> <p>\ud83d\udc0d Script Python<pre><code>class AdresseIP:\n    def __init__(self, adresse):\n        self.adresse = ...\n\n    def liste_octet(self):\n        \"\"\"renvoie une liste de nombres entiers,\n        la liste des octets de l'adresse IP\"\"\"\n        return [int(i) for i in self.adresse.split(\".\")]\n\n    def est_reservee(self):\n        \"\"\"renvoie True si l'adresse IP est une adresse\n        r\u00e9serv\u00e9e, False sinon\"\"\"\n        return ... or ...\n\n    def adresse_suivante(self):\n        \"\"\"renvoie un objet de AdresseIP avec l'adresse\n        IP qui suit l\u2019adresse self\n        si elle existe et False sinon\"\"\"\n        if ... &lt; 254:\n            octet_nouveau = ... + ...\n            return AdresseIP('192.168.0.' + ...)\n        else:\n            return False\n</code></pre> Compl\u00e9ter le code ci-dessus et instancier trois objets : <code>adresse1</code>, <code>adresse2</code>, <code>adresse3</code> avec respectivement les arguments suivants :</p> <p><code>'192.168.0.1'</code>, <code>'192.168.0.2'</code>, <code>'192.168.0.0'</code></p> <p>V\u00e9rifier que :  \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; adresse1.est_reservee()\nFalse\n&gt;&gt;&gt; adresse3.est_reservee()\nTrue\n&gt;&gt;&gt; adresse2.adresse_suivante().adresse\n'192.168.0.3'\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>class AdresseIP:\n    def __init__(self, adresse):\n        self.adresse = adresse\n\n    def liste_octet(self):\n        \"\"\"renvoie une liste de nombres entiers,\n        la liste des octets de l'adresse IP\"\"\"\n        return [int(i) for i in self.adresse.split(\".\")]\n\n    def est_reservee(self):\n        \"\"\"renvoie True si l'adresse IP est une adresse\n        r\u00e9serv\u00e9e, False sinon\"\"\"\n        return self.liste_octet()[3] == 0 or self.liste_octet()[3] == 255\n\n    def adresse_suivante(self):\n        \"\"\"renvoie un objet de AdresseIP avec l'adresse\n        IP qui suit l\u2019adresse self\n        si elle existe et False sinon\"\"\"\n        if self.liste_octet()[3] &lt; 254:\n            octet_nouveau = self.liste_octet()[3] + 1\n            return AdresseIP('192.168.0.' + str(octet_nouveau))\n        else:\n            return False\n\nadresse1 = AdresseIP('192.168.0.1')\nadresse2 = AdresseIP('192.168.0.2')\nadresse3 = AdresseIP('192.168.0.0')\n</code></pre> <p>Markdown<pre><code>On d\u00e9finit une classe g\u00e9rant une adresse IPv4.\n\nOn rappelle qu\u2019une adresse IPv4 est une adresse de longueur 4 octets, not\u00e9e en d\u00e9cimale\n\u00e0 point, en s\u00e9parant chacun des octets par un point. On consid\u00e8re un r\u00e9seau priv\u00e9 avec\nune plage d\u2019adresses IP de `192.168.0.0` \u00e0 `192.168.0.255`.\n\nOn consid\u00e8re que les adresses IP saisies sont valides.\n\nLes adresses IP `192.168.0.0` et `192.168.0.255` sont des adresses r\u00e9serv\u00e9es.\n\nLe code ci-dessous impl\u00e9mente la classe `AdresseIP`.\n\n```python linenums='1'\nclass AdresseIP:\n    def __init__(self, adresse):\n        self.adresse = ...\n\n    def liste_octet(self):\n        \"\"\"renvoie une liste de nombres entiers,\n        la liste des octets de l'adresse IP\"\"\"\n        return [int(i) for i in self.adresse.split(\".\")]\n\n    def est_reservee(self):\n        \"\"\"renvoie True si l'adresse IP est une adresse\n        r\u00e9serv\u00e9e, False sinon\"\"\"\n        return ... or ...\n\n    def adresse_suivante(self):\n        \"\"\"renvoie un objet de AdresseIP avec l'adresse\n        IP qui suit l\u2019adresse self\n        si elle existe et False sinon\"\"\"\n        if ... &lt; 254:\n            octet_nouveau = ... + ...\n            return AdresseIP('192.168.0.' + ...)\n        else:\n            return False\n</code></pre> Compl\u00e9ter le code ci-dessus et instancier trois objets : <code>adresse1</code>, <code>adresse2</code>, <code>adresse3</code> avec respectivement les arguments suivants :</p> <p><code>'192.168.0.1'</code>, <code>'192.168.0.2'</code>, <code>'192.168.0.0'</code></p> <p>V\u00e9rifier que :  \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; adresse1.est_reservee()\nFalse\n&gt;&gt;&gt; adresse3.est_reservee()\nTrue\n&gt;&gt;&gt; adresse2.adresse_suivante().adresse\n'192.168.0.3'\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-38","title":"\u25b6 Sujet 38","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-381","title":"Exercice 38.1","text":"<p>Exercice 38.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>On consid\u00e8re des mots \u00e0 trous : ce sont des cha\u00eenes de caract\u00e8res contenant uniquement des majuscules et des caract\u00e8res <code>*</code>. Par exemple <code>INFO*MA*IQUE</code>, <code>***I***E**</code> et <code>*S*</code> sont des mots \u00e0 trous.  </p> <p>Programmer une fonction <code>correspond</code> qui :</p> <ul> <li>prend en param\u00e8tres deux cha\u00eenes de caract\u00e8res <code>mot</code> et <code>mot_a_trous</code> o\u00f9 <code>mot_a_trous</code> est un mot \u00e0 trous comme indiqu\u00e9 ci-dessus, </li> <li>renvoie :<ul> <li><code>True</code> si on peut obtenir <code>mot</code> en rempla\u00e7ant convenablement les caract\u00e8res <code>'*'</code> de <code>mot_a_trous</code>.</li> <li><code>False</code> sinon.</li> </ul> </li> </ul> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; correspond('INFORMATIQUE', 'INFO*MA*IQUE')\nTrue\n&gt;&gt;&gt; correspond('AUTOMATIQUE', 'INFO*MA*IQUE')\nFalse\n&gt;&gt;&gt; correspond('STOP', 'S*')\nFalse\n&gt;&gt;&gt; correspond('AUTO', '*UT*')\nTrue\n</code></pre> \ud83d\udc0d Script Python<pre><code>def correspond(mot, mot_a_trous):\n    if len(mot) != len(mot_a_trous):\n        return False\n    for i in range(len(mot)):\n        if mot[i] != mot_a_trous[i] and mot_a_trous[i] != '*':\n            return False\n    return True\n</code></pre> \ud83d\udccb Texte<pre><code>On consid\u00e8re des mots \u00e0 trous : ce sont des cha\u00eenes de caract\u00e8res contenant uniquement\ndes majuscules et des caract\u00e8res `*`. Par exemple `INFO*MA*IQUE`, `***I***E**` et\n`*S*` sont des mots \u00e0 trous.\n\nProgrammer une fonction `correspond` qui :\n\n- prend en param\u00e8tres deux cha\u00eenes de caract\u00e8res `mot` et `mot_a_trous` o\u00f9\n`mot_a_trous` est un mot \u00e0 trous comme indiqu\u00e9 ci-dessus, \n- renvoie :\n    - `True` si on peut obtenir `mot` en rempla\u00e7ant convenablement les caract\u00e8res\n`'*'` de `mot_a_trous`.\n    - `False` sinon.\n\nExemple :\n\n```python\n&gt;&gt;&gt; correspond('INFORMATIQUE', 'INFO*MA*IQUE')\nTrue\n&gt;&gt;&gt; correspond('AUTOMATIQUE', 'INFO*MA*IQUE')\nFalse\n&gt;&gt;&gt; correspond('STOP', 'S*')\nFalse\n&gt;&gt;&gt; correspond('AUTO', '*UT*')\nTrue\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-382","title":"Exercice 38.2","text":"<p>Exercice 38.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On consid\u00e8re au plus 26 personnes A, B, C, D, E, F ... qui peuvent s'envoyer des messages avec deux r\u00e8gles \u00e0 respecter :</p> <ul> <li>chaque personne ne peut envoyer des messages qu'\u00e0 une seule personne (\u00e9ventuellement elle-m\u00eame),</li> <li>chaque personne ne peut recevoir des messages qu'en provenance d'une seule personne (\u00e9ventuellement elle-m\u00eame).</li> </ul> <p>Voici un exemple - avec 6 personnes - de \u00ab plan d'envoi des messages \u00bb qui respecte les r\u00e8gles ci-dessus, puisque chaque personne est pr\u00e9sente une seule fois dans chaque colonne :</p> <ul> <li>A envoie ses messages \u00e0 E</li> <li>E envoie ses messages \u00e0 B</li> <li>B envoie ses messages \u00e0 F</li> <li>F envoie ses messages \u00e0 A</li> <li>C envoie ses messages \u00e0 D</li> <li>D envoie ses messages \u00e0 C</li> </ul> <p>Et le dictionnaire correspondant \u00e0 ce plan d'envoi est le suivant :</p> <p><code>plan_a = {'A':'E', 'B':'F', 'C':'D', 'D':'C', 'E':'B', 'F':'A'}</code></p> <p>Un cycle est une suite de personnes dans laquelle la derni\u00e8re est la m\u00eame que la premi\u00e8re.</p> <p>Sur le plan d'envoi <code>plan_a</code> des messages ci-dessus, il y a deux cycles distincts : un premier cycle avec A, E, B, F et un second cycle avec C et D.</p> <p>En revanche, le plan d\u2019envoi <code>plan_b</code> ci-dessous :</p> <p><code>plan_b = {'A':'C', 'B':'F', 'C':'E', 'D':'A', 'E':'B', 'F':'D'}</code></p> <p>comporte un unique cycle : A, C, E, B, F, D. Dans ce cas, lorsqu\u2019un plan d\u2019envoi comporte un unique cycle, on dit que le plan d\u2019envoi est cyclique.</p> <p>Pour savoir si un plan d'envoi de messages comportant N personnes est cyclique, on peut utiliser l'algorithme ci-dessous :</p> <ul> <li>on part d\u2019un exp\u00e9diteur (ici A) et on inspecte son destinataire dans le plan d'envoi,</li> <li>chaque destinataire devient \u00e0 son tour exp\u00e9diteur, selon le plan d\u2019envoi, tant qu\u2019on ne \u00ab retombe \u00bb pas sur l\u2019exp\u00e9diteur initial,</li> <li>le plan d\u2019envoi est cyclique si on l\u2019a parcouru en entier.</li> </ul> <p>Compl\u00e9ter la fonction <code>est_cyclique</code> en respectant la sp\u00e9cification.</p> <p>Remarque : la fonction python <code>len</code> permet d'obtenir la longueur d'un dictionnaire.</p> \ud83d\udc0d Script Python<pre><code>def est_cyclique(plan):\n    '''\n    Prend en param\u00e8tre un dictionnaire `plan` correspondant \u00e0 un plan d'envoi de messages (ici entre les personnes A, B, C, D, E, F).\n    Renvoie True si le plan d'envoi de messages est cyclique et False sinon.\n    '''\n    expediteur = 'A'\n    destinataire = plan[ ... ]\n    nb_destinaires = 1\n\n    while destinataire != ...:\n        destinataire = plan[ ... ]\n        nb_destinaires += ...\n\n    return nb_destinaires == ...\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; est_cyclique({'A':'E', 'F':'A', 'C':'D', 'E':'B', 'B':'F', 'D':'C'})\nFalse\n&gt;&gt;&gt; est_cyclique({'A':'E', 'F':'C', 'C':'D', 'E':'B', 'B':'F', 'D':'A'})\nTrue\n&gt;&gt;&gt; est_cyclique({'A':'B', 'F':'C', 'C':'D', 'E':'A', 'B':'F', 'D':'E'})\nTrue\n&gt;&gt;&gt; est_cyclique({'A':'B', 'F':'A', 'C':'D', 'E':'C', 'B':'F', 'D':'E'})\nFalse\n</code></pre> \ud83d\udc0d Script Python<pre><code>def est_cyclique(plan):\n    '''\n    Prend en param\u00e8tre un dictionnaire `plan` correspondant \u00e0 un plan d'envoi de messages (ici entre les personnes A, B, C, D, E, F).\n    Renvoie True si le plan d'envoi de messages est cyclique et False sinon.\n    '''\n    expediteur = 'A'\n    destinataire = plan[expediteur]\n    nb_destinaires = 1\n\n    while destinataire != expediteur:\n        destinataire = plan[destinataire]\n        nb_destinaires += 1\n\n    return nb_destinaires == len(plan)\n\n#tests\nprint(est_cyclique({'A':'E', 'F':'A', 'C':'D', 'E':'B', 'B':'F', 'D':'C'}))\nprint(est_cyclique({'A':'E', 'F':'C', 'C':'D', 'E':'B', 'B':'F', 'D':'A'}))\nprint(est_cyclique({'A':'B', 'F':'C', 'C':'D', 'E':'A', 'B':'F', 'D':'E'}))\nprint(est_cyclique({'A':'B', 'F':'A', 'C':'D', 'E':'C', 'B':'F', 'D':'E'}))\n</code></pre> Markdown<pre><code>On consid\u00e8re au plus 26 personnes A, B, C, D, E, F ... qui peuvent s'envoyer des messages\navec deux r\u00e8gles \u00e0 respecter :\n\n- chaque personne ne peut envoyer des messages qu'\u00e0 une seule personne\n(\u00e9ventuellement elle-m\u00eame),\n- chaque personne ne peut recevoir des messages qu'en provenance d'une seule\npersonne (\u00e9ventuellement elle-m\u00eame).\n\n\nVoici un exemple - avec 6 personnes - de \u00ab plan d'envoi des messages \u00bb qui respecte les\nr\u00e8gles ci-dessus, puisque chaque personne est pr\u00e9sente une seule fois dans chaque\ncolonne :\n\n- A envoie ses messages \u00e0 E\n- E envoie ses messages \u00e0 B\n- B envoie ses messages \u00e0 F\n- F envoie ses messages \u00e0 A\n- C envoie ses messages \u00e0 D\n- D envoie ses messages \u00e0 C\n\nEt le dictionnaire correspondant \u00e0 ce plan d'envoi est le suivant :\n\n`plan_a = {'A':'E', 'B':'F', 'C':'D', 'D':'C', 'E':'B', 'F':'A'}`\n\nUn cycle est une suite de personnes dans laquelle la derni\u00e8re est la m\u00eame que la\npremi\u00e8re.\n\nSur le plan d'envoi `plan_a` des messages ci-dessus, il y a deux cycles distincts : un premier\ncycle avec A, E, B, F et un second cycle avec C et D.\n\nEn revanche, le plan d\u2019envoi `plan_b` ci-dessous :\n\n`plan_b = {'A':'C', 'B':'F', 'C':'E', 'D':'A', 'E':'B', 'F':'D'}`\n\ncomporte un unique cycle : A, C, E, B, F, D. Dans ce cas, lorsqu\u2019un plan d\u2019envoi comporte un\n*unique cycle*, on dit que le plan d\u2019envoi est *cyclique*.\n\nPour savoir si un plan d'envoi de messages comportant N personnes est cyclique, on peut\nutiliser l'algorithme ci-dessous :\n\n\n- on part d\u2019un exp\u00e9diteur (ici A) et on inspecte son destinataire dans le plan d'envoi,\n- chaque destinataire devient \u00e0 son tour exp\u00e9diteur, selon le plan d\u2019envoi, tant\nqu\u2019on ne \u00ab retombe \u00bb pas sur l\u2019exp\u00e9diteur initial,\n- le plan d\u2019envoi est cyclique si on l\u2019a parcouru en entier.\n\n\nCompl\u00e9ter la fonction `est_cyclique` en respectant la sp\u00e9cification.\n\n*Remarque :* la fonction python `len` permet d'obtenir la longueur d'un dictionnaire.\n\n\n```python linenums='1'\ndef est_cyclique(plan):\n    '''\n    Prend en param\u00e8tre un dictionnaire `plan` correspondant \u00e0 un plan d'envoi de messages (ici entre les personnes A, B, C, D, E, F).\n    Renvoie True si le plan d'envoi de messages est cyclique et False sinon.\n    '''\n    expediteur = 'A'\n    destinataire = plan[ ... ]\n    nb_destinaires = 1\n\n    while destinataire != ...:\n        destinataire = plan[ ... ]\n        nb_destinaires += ...\n\n    return nb_destinaires == ...\n</code></pre> <p>Exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; est_cyclique({'A':'E', 'F':'A', 'C':'D', 'E':'B', 'B':'F', 'D':'C'})\nFalse\n&gt;&gt;&gt; est_cyclique({'A':'E', 'F':'C', 'C':'D', 'E':'B', 'B':'F', 'D':'A'})\nTrue\n&gt;&gt;&gt; est_cyclique({'A':'B', 'F':'C', 'C':'D', 'E':'A', 'B':'F', 'D':'E'})\nTrue\n&gt;&gt;&gt; est_cyclique({'A':'B', 'F':'A', 'C':'D', 'E':'C', 'B':'F', 'D':'E'})\nFalse\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-39","title":"\u25b6 Sujet 39","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-391","title":"Exercice 39.1","text":"<p>Exercice 39.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>On s\u2019int\u00e9resse \u00e0 la suite d\u2019entiers d\u00e9finie par :</p> <ul> <li>les deux premiers termes sont \u00e9gaux \u00e0 1,</li> <li>ensuite, chaque terme est obtenu en faisant la somme des deux termes qui le pr\u00e9c\u00e8dent.</li> </ul> <p>En math\u00e9matiques, on le formule ainsi :</p> <p>\\(U_1 = 1\\), \\(U_2 = 1\\) et, pour tout entier naturel non nul \\(n\\), par \\(U_{n+2} = U_{n+1} + U_n\\).</p> <p>Cette suite est connue sous le nom de suite de Fibonacci. \u00c9crire en Python une fonction <code>fibonacci</code> qui prend en param\u00e8tre un entier <code>n</code> suppos\u00e9 strictement positif et qui renvoie le terme d\u2019indice <code>n</code> de cette suite.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; fibonacci(1)\n1\n&gt;&gt;&gt; fibonacci(2)\n1\n&gt;&gt;&gt; fibonacci(25)\n75025\n&gt;&gt;&gt; fibonacci(45)\n1134903170\n</code></pre> <p>Version r\u00e9cursive :</p> \ud83d\udc0d Script Python<pre><code>def fibonacci(n):\n    if n == 0 :\n        return 0   \n    elif n == 1 :\n        return 1\n    else :\n        return fibonacci(n-1) + fibonacci(n-2)\n</code></pre> <p>Version imp\u00e9rative : \ud83d\udc0d Script Python<pre><code>def fibonacci(n):\n    a = 0\n    b = 1\n    for k in range(n-1):\n        t = b\n        b = a + b\n        a = t\n    return b\n</code></pre></p> <p>Version programmation dynamique :</p> \ud83d\udc0d Script Python<pre><code>def fibonacci(n):\n    d = {}\n    d[1] = 1\n    d[2] = 1\n    for k in range(3, n+1):\n        d[k] = d[k-1] + d[k-2]\n    return d[n]\n</code></pre> \ud83d\udccb Texte<pre><code>On s\u2019int\u00e9resse \u00e0 la suite d\u2019entiers d\u00e9finie par :\n\n- les deux premiers termes sont \u00e9gaux \u00e0 1,\n- ensuite, chaque terme est obtenu en faisant la somme des deux termes qui le\npr\u00e9c\u00e8dent.\n\nEn math\u00e9matiques, on le formule ainsi :\n\n$U_1 = 1$, $U_2 = 1$ et, pour tout entier naturel non nul $n$, par $U_{n+2} = U_{n+1} + U_n$.\n\nCette suite est connue sous le nom de suite de Fibonacci.  \n\u00c9crire en Python une fonction `fibonacci` qui prend en param\u00e8tre un entier `n` suppos\u00e9\nstrictement positif et qui renvoie le terme d\u2019indice `n` de cette suite.\n\nExemples :\n\n```python\n&gt;&gt;&gt; fibonacci(1)\n1\n&gt;&gt;&gt; fibonacci(2)\n1\n&gt;&gt;&gt; fibonacci(25)\n75025\n&gt;&gt;&gt; fibonacci(45)\n1134903170\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-392","title":"Exercice 39.2","text":"<p>Exercice 39.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On consid\u00e8re la fonction <code>pantheon</code> prenant en param\u00e8tres <code>eleves</code> et <code>notes</code> deux tableaux de m\u00eame longueur, le premier contenant le nom des \u00e9l\u00e8ves et le second, des entiers positifs d\u00e9signant leur note \u00e0 un contr\u00f4le de sorte que <code>eleves[i]</code> a obtenu la note <code>notes[i]</code>. Cette fonction renvoie le couple constitu\u00e9 de la note maximale attribu\u00e9e et des noms des \u00e9l\u00e8ves ayant obtenu cette note regroup\u00e9s dans un tableau. Ainsi, l\u2019instruction <code>pantheon(['a', 'b', 'c', 'd'], [15, 18, 12, 18])</code> renvoie le couple <code>(18, ['b', 'd'])</code>.</p> \ud83d\udc0d Script Python<pre><code>def pantheon(eleves, notes):\n    note_maxi = 0\n    meilleurs_eleves =  ...\n\n    for i in range(...) :\n        if notes[i] == ... :\n            meilleurs_eleves.append(...)\n        elif notes[i] &gt; note_maxi:\n            note_maxi = ...\n            meilleurs_eleves = [...]\n\n    return (note_maxi,meilleurs_eleves)\n</code></pre> <p>Compl\u00e9ter ce code.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; eleves_nsi = ['a','b','c','d','e','f','g','h','i','j']\n&gt;&gt;&gt; notes_nsi = [30, 40, 80, 60, 58, 80, 75, 80, 60, 24]\n&gt;&gt;&gt; pantheon(eleves_nsi, notes_nsi)\n(80, ['c', 'f', 'h'])\n&gt;&gt;&gt; pantheon([],[])\n(0, [])\n</code></pre> \ud83d\udc0d Script Python<pre><code>def pantheon(eleves, notes):\n    note_maxi = 0\n    meilleurs_eleves =  []\n\n    for i in range(len(eleves)) :\n        if notes[i] == note_maxi :\n            meilleurs_eleves.append(eleves[i])\n        elif notes[i] &gt; note_maxi:\n            note_maxi = notes[i]\n            meilleurs_eleves = [i]\n\n    return (note_maxi, meilleurs_eleves)\n</code></pre> Markdown<pre><code>On consid\u00e8re la fonction `pantheon` prenant en param\u00e8tres `eleves` et `notes` deux\ntableaux de m\u00eame longueur, le premier contenant le nom des \u00e9l\u00e8ves et le second, des\nentiers positifs d\u00e9signant leur note \u00e0 un contr\u00f4le de sorte que `eleves[i]` a obtenu la\nnote `notes[i]`.  \nCette fonction renvoie le couple constitu\u00e9 de la note maximale attribu\u00e9e et des noms\ndes \u00e9l\u00e8ves ayant obtenu cette note regroup\u00e9s dans un tableau.  \nAinsi, l\u2019instruction `pantheon(['a', 'b', 'c', 'd'], [15, 18, 12, 18])` renvoie\nle couple `(18, ['b', 'd'])`.\n\n```python linenums='1'\ndef pantheon(eleves, notes):\n    note_maxi = 0\n    meilleurs_eleves =  ...\n\n    for i in range(...) :\n        if notes[i] == ... :\n            meilleurs_eleves.append(...)\n        elif notes[i] &gt; note_maxi:\n            note_maxi = ...\n            meilleurs_eleves = [...]\n\n    return (note_maxi,meilleurs_eleves)\n</code></pre> <p>Compl\u00e9ter ce code.</p> <p>Exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; eleves_nsi = ['a','b','c','d','e','f','g','h','i','j']\n&gt;&gt;&gt; notes_nsi = [30, 40, 80, 60, 58, 80, 75, 80, 60, 24]\n&gt;&gt;&gt; pantheon(eleves_nsi, notes_nsi)\n(80, ['c', 'f', 'h'])\n&gt;&gt;&gt; pantheon([],[])\n(0, [])\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-40","title":"\u25b6 Sujet 40","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-401","title":"Exercice 40.1","text":"<p>Exercice 40.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Pour cet exercice :</p> <ul> <li> <p>On appelle \u00ab mot \u00bb une cha\u00eene de caract\u00e8res compos\u00e9e avec des caract\u00e8res choisis parmi les 26 lettres minuscules ou majuscules de l'alphabet,</p> </li> <li> <p>On appelle \u00ab phrase \u00bb une cha\u00eene de caract\u00e8res :</p> <ul> <li>compos\u00e9e avec un ou plusieurs \u00ab mots \u00bb s\u00e9par\u00e9s entre eux par un seul caract\u00e8re espace <code>' '</code>,</li> <li>se finissant :<ul> <li>soit par un point <code>'.'</code> qui est alors coll\u00e9 au dernier mot,</li> <li>soit par un point d'exclamation <code>'!'</code> ou d'interrogation <code>'?'</code> qui est alors s\u00e9par\u00e9 du dernier mot par un seul caract\u00e8re espace <code>' '</code>.</li> </ul> </li> </ul> </li> </ul> <p>Exemples :</p> <ul> <li>'Cet exercice est simple.'</li> <li>'Le point d exclamation est separe !'</li> </ul> <p>Apr\u00e8s avoir remarqu\u00e9 le lien entre le nombre de mots et le nombres de caract\u00e8res espace dans une phrase, programmer une fonction <code>nombre_de_mots</code> qui prend en param\u00e8tre une phrase et renvoie le nombre de mots pr\u00e9sents dans cette phrase.</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; nombre_de_mots('Le point d exclamation est separe !')\n6\n&gt;&gt;&gt; nombre_de_mots('Il y a un seul espace entre les mots !')\n9\n&gt;&gt;&gt; nombre_de_mots('Combien de mots y a t il dans cette phrase ?')\n10\n&gt;&gt;&gt; nombre_de_mots('Fin.')\n1\n</code></pre> \ud83d\udc0d Script Python<pre><code>def nombre_de_mots(phrase):\n    nb_mots = 0\n    for caractere in phrase:\n        if caractere == ' ' or caractere == '.':\n            nb_mots += 1\n    return nb_mots\n</code></pre> \ud83d\udccb Texte<pre><code>Pour cet exercice :\n\n- On appelle \u00ab mot \u00bb une cha\u00eene de caract\u00e8res compos\u00e9e avec des caract\u00e8res choisis\nparmi les 26 lettres minuscules ou majuscules de l'alphabet,\n\n- On appelle \u00ab phrase \u00bb une cha\u00eene de caract\u00e8res :\n    - compos\u00e9e avec un ou plusieurs \u00ab mots \u00bb s\u00e9par\u00e9s entre eux par un seul\ncaract\u00e8re espace `' '`,\n    - se finissant :\n        - soit par un point `'.'` qui est alors coll\u00e9 au dernier mot,\n        - soit par un point d'exclamation `'!'` ou d'interrogation `'?'` qui est alors\ns\u00e9par\u00e9 du dernier mot par un seul caract\u00e8re espace `' '`.\n\n*Exemples :*\n\n- 'Cet exercice est simple.'\n- 'Le point d exclamation est separe !'\n\nApr\u00e8s avoir remarqu\u00e9 le lien entre le nombre de mots et le nombres de caract\u00e8res espace\ndans une phrase, programmer une fonction `nombre_de_mots` qui prend en param\u00e8tre une\nphrase et renvoie le nombre de mots pr\u00e9sents dans cette phrase.\n\n```python\n&gt;&gt;&gt; nombre_de_mots('Le point d exclamation est separe !')\n6\n&gt;&gt;&gt; nombre_de_mots('Il y a un seul espace entre les mots !')\n9\n&gt;&gt;&gt; nombre_de_mots('Combien de mots y a t il dans cette phrase ?')\n10\n&gt;&gt;&gt; nombre_de_mots('Fin.')\n1\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-402","title":"Exercice 40.2","text":"<p>Exercice 40.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>La classe ABR ci-dessous permet d'impl\u00e9menter une structure d'arbre binaire de recherche.</p> \ud83d\udc0d Script Python<pre><code>class Noeud:\n    def __init__(self, valeur):\n        '''M\u00e9thode constructeur pour la classe Noeud.\n        Param\u00e8tre d'entr\u00e9e : valeur (str)'''\n        self.valeur = valeur\n        self.gauche = None\n        self.droit = None\n\n    def getValeur(self):\n        '''M\u00e9thode accesseur pour obtenir la valeur du noeud\n        Aucun param\u00e8tre en entr\u00e9e'''\n        return self.valeur\n\n    def droitExiste(self):\n        '''M\u00e9thode renvoyant True si l'enfant droit existe\n        Aucun param\u00e8tre en entr\u00e9e'''\n        return (self.droit is not None)\n\n    def gaucheExiste(self):\n        '''M\u00e9thode renvoyant True si l'enfant gauche existe\n        Aucun param\u00e8tre en entr\u00e9e'''\n        return (self.gauche is not None)\n\n    def inserer(self, cle):\n        '''M\u00e9thode d'insertion de cl\u00e9 dans un arbre binaire de recherche\n        Param\u00e8tre d'entr\u00e9e : cle (int)'''\n        if cle &lt; ...:\n            # on ins\u00e8re \u00e0 gauche\n            if self.gaucheExiste():\n                # on descend \u00e0 gauche et on retente l'insertion de la cl\u00e9\n                ...\n            else:\n                # on cr\u00e9e un fils gauche\n                self.gauche = ...\n        elif cle &gt; ... :\n            # on ins\u00e8re \u00e0 droite\n            if ... :\n                # on descend \u00e0 droite et on retente l'insertion de la cl\u00e9\n                ...\n            else:\n                # on cr\u00e9e un fils droit\n                ... = Noeud(cle)\n</code></pre> <p>Compl\u00e9ter la fonction r\u00e9cursive <code>inserer</code> afin qu'elle permette d\u2019ins\u00e9rer un n\u0153ud dans l\u2019arbre binaire de recherche propos\u00e9, \u00e0 l\u2019aide de sa cl\u00e9.</p> <p>Voici un exemple d'utilisation :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; arbre = Noeud(7)\n&gt;&gt;&gt; for cle in (3, 9, 1, 6):\n        arbre.inserer(cle)\n&gt;&gt;&gt; arbre.gauche.getValeur()\n3\n&gt;&gt;&gt; arbre.droit.getValeur()\n9\n&gt;&gt;&gt; arbre.gauche.gauche.getValeur()\n1\n&gt;&gt;&gt; arbre.gauche.droit.getValeur()\n6\n</code></pre> \ud83d\udc0d Script Python<pre><code>class Noeud:\n    def __init__(self, valeur):\n        '''M\u00e9thode constructeur pour la classe Noeud.\n        Param\u00e8tre d'entr\u00e9e : valeur (str)'''\n        self.valeur = valeur\n        self.gauche = None\n        self.droit = None\n\n    def getValeur(self):\n        '''M\u00e9thode accesseur pour obtenir la valeur du noeud\n        Aucun param\u00e8tre en entr\u00e9e'''\n        return self.valeur\n\n    def droitExiste(self):\n        '''M\u00e9thode renvoyant True si l'enfant droit existe\n        Aucun param\u00e8tre en entr\u00e9e'''\n        return (self.droit is not None)\n\n    def gaucheExiste(self):\n        '''M\u00e9thode renvoyant True si l'enfant gauche existe\n        Aucun param\u00e8tre en entr\u00e9e'''\n        return (self.gauche is not None)\n\n    def inserer(self, cle):\n        '''M\u00e9thode d'insertion de cl\u00e9 dans un arbre binaire de recherche\n        Param\u00e8tre d'entr\u00e9e : cle (int)'''\n        if cle &lt; self.valeur:\n            # on ins\u00e8re \u00e0 gauche\n            if self.gaucheExiste():\n                # on descend \u00e0 gauche et on retente l'insertion de la cl\u00e9\n                self.gauche.inserer(cle)\n            else:\n                # on cr\u00e9e un fils gauche\n                self.gauche = Noeud(cle)\n        elif cle &gt; self.valeur:\n            # on ins\u00e8re \u00e0 droite\n            if self.droitExiste():\n                # on descend \u00e0 droite et on retente l'insertion de la cl\u00e9\n                self.droit.inserer(cle)\n            else:\n                # on cr\u00e9e un fils droit\n                self.droit = Noeud(cle)\n</code></pre> Markdown<pre><code>La classe ABR ci-dessous permet d'impl\u00e9menter une structure d'arbre binaire de recherche.\n\n```python linenums='1'\nclass Noeud:\n    def __init__(self, valeur):\n        '''M\u00e9thode constructeur pour la classe Noeud.\n        Param\u00e8tre d'entr\u00e9e : valeur (str)'''\n        self.valeur = valeur\n        self.gauche = None\n        self.droit = None\n\n    def getValeur(self):\n        '''M\u00e9thode accesseur pour obtenir la valeur du noeud\n        Aucun param\u00e8tre en entr\u00e9e'''\n        return self.valeur\n\n    def droitExiste(self):\n        '''M\u00e9thode renvoyant True si l'enfant droit existe\n        Aucun param\u00e8tre en entr\u00e9e'''\n        return (self.droit is not None)\n\n    def gaucheExiste(self):\n        '''M\u00e9thode renvoyant True si l'enfant gauche existe\n        Aucun param\u00e8tre en entr\u00e9e'''\n        return (self.gauche is not None)\n\n    def inserer(self, cle):\n        '''M\u00e9thode d'insertion de cl\u00e9 dans un arbre binaire de recherche\n        Param\u00e8tre d'entr\u00e9e : cle (int)'''\n        if cle &lt; ...:\n            # on ins\u00e8re \u00e0 gauche\n            if self.gaucheExiste():\n                # on descend \u00e0 gauche et on retente l'insertion de la cl\u00e9\n                ...\n            else:\n                # on cr\u00e9e un fils gauche\n                self.gauche = ...\n        elif cle &gt; ... :\n            # on ins\u00e8re \u00e0 droite\n            if ... :\n                # on descend \u00e0 droite et on retente l'insertion de la cl\u00e9\n                ...\n            else:\n                # on cr\u00e9e un fils droit\n                ... = Noeud(cle)\n</code></pre> <p>Compl\u00e9ter la fonction r\u00e9cursive <code>inserer</code> afin qu'elle permette d\u2019ins\u00e9rer un n\u0153ud dans l\u2019arbre binaire de recherche propos\u00e9, \u00e0 l\u2019aide de sa cl\u00e9.</p> <p>Voici un exemple d'utilisation :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; arbre = Noeud(7)\n&gt;&gt;&gt; for cle in (3, 9, 1, 6):\n        arbre.inserer(cle)\n&gt;&gt;&gt; arbre.gauche.getValeur()\n3\n&gt;&gt;&gt; arbre.droit.getValeur()\n9\n&gt;&gt;&gt; arbre.gauche.gauche.getValeur()\n1\n&gt;&gt;&gt; arbre.gauche.droit.getValeur()\n6\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-41","title":"\u25b6 Sujet 41","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-411","title":"Exercice 41.1","text":"<p>Exercice 41.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>recherche(caractere, chaine)</code> qui prend en param\u00e8tres <code>caractere</code>, un unique caract\u00e8re (c\u2019est-\u00e0-dire une cha\u00eene de caract\u00e8re de longueur 1), et <code>chaine</code>, une cha\u00eene de caract\u00e8res. Cette fonction renvoie le nombre d\u2019occurrences de <code>caractere</code> dans <code>chaine</code>, c\u2019est-\u00e0-dire le nombre de fois o\u00f9 <code>caractere</code> appara\u00eet dans chaine.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche('e', \"sciences\")\n2\n&gt;&gt;&gt; recherche('i',\"mississippi\")\n4\n&gt;&gt;&gt; recherche('a',\"mississippi\")\n0\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(caractere, chaine):\n    somme = 0\n    for lettre in chaine:\n        if lettre == caractere:\n            somme += 1\n    return somme\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `recherche(caractere, chaine)` qui prend en param\u00e8tres\n`caractere`, un unique caract\u00e8re (c\u2019est-\u00e0-dire une cha\u00eene de caract\u00e8re de longueur 1),\net `chaine`, une cha\u00eene de caract\u00e8res. Cette fonction renvoie le nombre d\u2019occurrences\nde `caractere` dans `chaine`, c\u2019est-\u00e0-dire le nombre de fois o\u00f9 `caractere` appara\u00eet\ndans chaine.\n\nExemples :\n```python\n&gt;&gt;&gt; recherche('e', \"sciences\")\n2\n&gt;&gt;&gt; recherche('i',\"mississippi\")\n4\n&gt;&gt;&gt; recherche('a',\"mississippi\")\n0\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-412","title":"Exercice 41.2","text":"<p>Exercice 41.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On s\u2019int\u00e9resse \u00e0 un algorithme r\u00e9cursif qui permet de rendre la monnaie \u00e0 partir d\u2019une liste donn\u00e9e de valeurs de pi\u00e8ces et de billets.</p> <p>Le syst\u00e8me mon\u00e9taire est donn\u00e9 sous forme d\u2019une liste <code>valeurs = [100, 50, 20, 10, 5, 2, 1]</code>. On suppose que les pi\u00e8ces et billets sont disponibles sans limitation.</p> <p>On cherche \u00e0 donner la liste des valeurs \u00e0 rendre pour une somme donn\u00e9e en argument. L\u2019algorithme utilis\u00e9 est de type glouton.</p> <p>Compl\u00e9ter le code Python ci-dessous de la fonction <code>rendu_glouton</code> qui impl\u00e9mente cet algorithme et renvoie la liste des pi\u00e8ces \u00e0 rendre.</p> \ud83d\udc0d Script Python<pre><code>valeurs = [100, 50, 20, 10, 5, 2, 1]\n\ndef rendu_glouton(a_rendre, rang):\n    if a_rendre == 0:\n        return ...\n    v = valeurs[rang]\n    if v &lt;= ... :\n        return ... + rendu_glouton(a_rendre - v, rang)\n    else :\n        return rendu_glouton(a_rendre, ...)\n</code></pre> <p>On devra obtenir :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt;rendu_glouton(67, 0)\n[50, 10, 5, 2]\n&gt;&gt;&gt;rendu_glouton(291, 0)\n[100, 100, 50, 20, 20, 1]\n&gt;&gt;&gt; rendu_glouton(291,1) # si on ne dispose pas de billets de 100\n[50, 50, 50, 50, 50, 20, 20, 1]\n</code></pre> \ud83d\udc0d Script Python<pre><code>valeurs = [100,50,20,10,5,2,1]\n\ndef rendu_glouton(a_rendre, rang):\n    if a_rendre == 0:\n        return []\n    v = valeurs[rang]\n    if v &lt;= a_rendre :\n        return [v] + rendu_glouton(a_rendre - v, rang)\n    else :\n        return rendu_glouton(a_rendre, rang + 1)\n</code></pre> Markdown<pre><code>On s\u2019int\u00e9resse \u00e0 un algorithme r\u00e9cursif qui permet de rendre la monnaie \u00e0 partir d\u2019une\nliste donn\u00e9e de valeurs de pi\u00e8ces et de billets.\n\nLe syst\u00e8me mon\u00e9taire est donn\u00e9 sous forme d\u2019une liste `valeurs = [100, 50, 20,\n10, 5, 2, 1]`. On suppose que les pi\u00e8ces et billets sont disponibles sans limitation.\n\n\nOn cherche \u00e0 donner la liste des valeurs \u00e0 rendre pour une somme donn\u00e9e en\nargument. L\u2019algorithme utilis\u00e9 est de type glouton.\n\nCompl\u00e9ter le code Python ci-dessous de la fonction `rendu_glouton` qui impl\u00e9mente cet\nalgorithme et renvoie la liste des pi\u00e8ces \u00e0 rendre.\n\n```python linenums='1'\nvaleurs = [100, 50, 20, 10, 5, 2, 1]\n\ndef rendu_glouton(a_rendre, rang):\n    if a_rendre == 0:\n        return ...\n    v = valeurs[rang]\n    if v &lt;= ... :\n        return ... + rendu_glouton(a_rendre - v, rang)\n    else :\n        return rendu_glouton(a_rendre, ...)\n</code></pre> <p>On devra obtenir :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt;rendu_glouton(67, 0)\n[50, 10, 5, 2]\n&gt;&gt;&gt;rendu_glouton(291, 0)\n[100, 100, 50, 20, 20, 1]\n&gt;&gt;&gt; rendu_glouton(291,1) # si on ne dispose pas de billets de 100\n[50, 50, 50, 50, 50, 20, 20, 1]\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-42","title":"\u25b6 Sujet 42","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-421","title":"Exercice 42.1","text":"<p>Exercice 42.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>tri_selection</code> qui prend en param\u00e8tre une liste <code>tab</code> de nombres entiers et qui renvoie la liste tri\u00e9e par ordre croissant. Il est demand\u00e9 de ne pas cr\u00e9er de nouvelle liste mais de modifier celle fournie.</p> <p>On utilisera l\u2019algorithme suivant :</p> <ul> <li>on recherche le plus petit \u00e9l\u00e9ment de la liste, en la parcourant du rang 0 au dernier rang, et on l'\u00e9change avec l'\u00e9l\u00e9ment d'indice 0 ;</li> <li>on recherche ensuite le plus petit \u00e9l\u00e9ment de la liste restreinte du rang 1 au dernier rang, et on l'\u00e9change avec l'\u00e9l\u00e9ment d'indice 1 ;</li> <li>on continue de cette fa\u00e7on jusqu'\u00e0 ce que la liste soit enti\u00e8rement tri\u00e9e.</li> </ul> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tri_selection([1, 52, 6, -9, 12])\n[-9, 1, 6, 12, 52]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def tri_selection(tab):\n    for i in range(len(tab)-1):\n        indice_min = i\n        for j in range(i+1, len(tab)):\n            if tab[j] &lt; tab[indice_min]:\n                indice_min = j\n        tab[i], tab[indice_min] = tab[indice_min], tab[i]\n    return tab\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `tri_selection` qui prend en param\u00e8tre une liste `tab` de nombres\nentiers et qui renvoie la liste tri\u00e9e par ordre croissant. Il est demand\u00e9 de ne pas cr\u00e9er de\nnouvelle liste mais de modifier celle fournie.\n\nOn utilisera l\u2019algorithme suivant :\n\n- on recherche le plus petit \u00e9l\u00e9ment de la liste, en la parcourant du rang 0 au dernier\nrang, et on l'\u00e9change avec l'\u00e9l\u00e9ment d'indice 0 ;\n- on recherche ensuite le plus petit \u00e9l\u00e9ment de la liste restreinte du rang 1 au dernier\nrang, et on l'\u00e9change avec l'\u00e9l\u00e9ment d'indice 1 ;\n- on continue de cette fa\u00e7on jusqu'\u00e0 ce que la liste soit enti\u00e8rement tri\u00e9e.\n\nExemple :\n```python\n&gt;&gt;&gt; tri_selection([1, 52, 6, -9, 12])\n[-9, 1, 6, 12, 52]\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-422","title":"Exercice 42.2","text":"<p>Exercice 42.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Le jeu du \u00ab plus ou moins \u00bb consiste \u00e0 deviner un nombre entier choisi entre 1 et 99.</p> <p>Un \u00e9l\u00e8ve de NSI d\u00e9cide de le coder en langage Python de la mani\u00e8re suivante :</p> <ul> <li>le programme g\u00e9n\u00e8re un nombre entier al\u00e9atoire compris entre 1 et 99 ;</li> <li>si la proposition de l\u2019utilisateur est plus petite que le nombre cherch\u00e9, l\u2019utilisateur en est averti. Il peut alors en tester un autre ;</li> <li>si la proposition de l\u2019utilisateur est plus grande que le nombre cherch\u00e9, l\u2019utilisateur en est averti. Il peut alors en tester un autre ;</li> <li>si l\u2019utilisateur trouve le bon nombre en 10 essais ou moins, il gagne ;</li> <li>si l\u2019utilisateur a fait plus de 10 essais sans trouver le bon nombre, il perd.</li> </ul> <p>La fonction <code>randint</code> est utilis\u00e9e. Si a et b sont des entiers tels que <code>a &lt;= b</code>, <code>randint(a,b)</code> renvoie un nombre entier compris entre <code>a</code> et <code>b</code>.</p> <p>Compl\u00e9ter le code ci-dessous et le tester :</p> \ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef plus_ou_moins():\n    nb_mystere = randint(1,...)\n    nb_test = int(input(\"Proposez un nombre entre 1 et 99 : \"))\n    compteur = ...\n\n    while nb_mystere != ... and compteur &lt; ... :\n        compteur = compteur + ...\n        if nb_mystere ... nb_test:\n            nb_test = int(input(\"Trop petit ! Testez encore : \"))\n        else:\n            nb_test = int(input(\"Trop grand ! Testez encore : \"))\n\n    if nb_mystere == nb_test:\n        print (\"Bravo ! Le nombre \u00e9tait \",...)\n        print(\"Nombre d'essais: \",...)\n    else:\n        print (\"Perdu ! Le nombre \u00e9tait \",...)\n</code></pre> \ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef plus_ou_moins():\n    nb_mystere = randint(1,99)\n    nb_test = int(input('Proposez un nombre entre 1 et 99 : '))\n    compteur = 1\n\n    while nb_mystere != nb_test and compteur &lt; 10 :\n        compteur = compteur + 1\n        if nb_mystere &gt; nb_test:\n            nb_test = int(input('Trop petit ! Testez encore : '))\n        else:\n            nb_test = int(input('Trop grand ! Testez encore : '))\n\n    if nb_mystere == nb_test:\n        print ('Bravo ! Le nombre \u00e9tait ', nb_mystere)\n        print('Nombre d essais: ', compteur)\n    else:\n        print ('Perdu ! Le nombre \u00e9tait ', nb_mystere)\n</code></pre> <p>Markdown<pre><code>Le jeu du \u00ab plus ou moins \u00bb consiste \u00e0 deviner un nombre entier choisi entre 1 et 99.\n\nUn \u00e9l\u00e8ve de NSI d\u00e9cide de le coder en langage Python de la mani\u00e8re suivante :\n\n- le programme g\u00e9n\u00e8re un nombre entier al\u00e9atoire compris entre 1 et 99 ;\n- si la proposition de l\u2019utilisateur est plus petite que le nombre cherch\u00e9, l\u2019utilisateur en\nest averti. Il peut alors en tester un autre ;\n- si la proposition de l\u2019utilisateur est plus grande que le nombre cherch\u00e9, l\u2019utilisateur en\nest averti. Il peut alors en tester un autre ;\n- si l\u2019utilisateur trouve le bon nombre en 10 essais ou moins, il gagne ;\n- si l\u2019utilisateur a fait plus de 10 essais sans trouver le bon nombre, il perd.\n\nLa fonction `randint` est utilis\u00e9e.  \nSi a et b sont des entiers tels que `a &lt;= b`, `randint(a,b)` renvoie un\nnombre entier compris entre `a` et `b`.\n\n\nCompl\u00e9ter le code ci-dessous et le tester :\n\n```python linenums='1'\nfrom random import randint\n\ndef plus_ou_moins():\n    nb_mystere = randint(1,...)\n    nb_test = int(input(\"Proposez un nombre entre 1 et 99 : \"))\n    compteur = ...\n\n    while nb_mystere != ... and compteur &lt; ... :\n        compteur = compteur + ...\n        if nb_mystere ... nb_test:\n            nb_test = int(input(\"Trop petit ! Testez encore : \"))\n        else:\n            nb_test = int(input(\"Trop grand ! Testez encore : \"))\n\n    if nb_mystere == nb_test:\n        print (\"Bravo ! Le nombre \u00e9tait \",...)\n        print(\"Nombre d'essais: \",...)\n    else:\n        print (\"Perdu ! Le nombre \u00e9tait \",...)\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-43","title":"\u25b6 Sujet 43","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-431","title":"Exercice 43.1","text":"<p>Exercice 43.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>ecriture_binaire_entier_positif</code> qui prend en param\u00e8tre un entier positif <code>n</code> et renvoie une liste d'entiers correspondant \u00e0 l\u2018\u00e9criture binaire de <code>n</code>.</p> <p>Ne pas oublier d\u2019ajouter au corps de la fonction une documentation et une ou plusieurs assertions pour v\u00e9rifier les pr\u00e9-conditions.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; ecriture_binaire_entier_positif(0)\n[0]\n&gt;&gt;&gt; ecriture_binaire_entier_positif(2)\n[1, 0]\n&gt;&gt;&gt; ecriture_binaire_entier_positif(105)\n[1, 1, 0, 1, 0, 0, 1]\n</code></pre> <p>Aide :</p> <ul> <li>l'op\u00e9rateur <code>//</code> donne le quotient de la division euclidienne : <code>5//2</code> donne <code>2</code> ;</li> <li>l'op\u00e9rateur <code>%</code> donne le reste de la division euclidienne :<code>5%2</code> donne <code>1</code> ;</li> <li><code>append</code> est une m\u00e9thode qui ajoute un \u00e9l\u00e9ment \u00e0 une liste existante : Soit <code>T=[5,2,4]</code>, alors <code>T.append(10)</code> ajoute <code>10</code> \u00e0 la liste <code>T</code>. Ainsi, <code>T</code> devient <code>[5,2,4,10]</code>.</li> <li><code>reverse</code> est une m\u00e9thode qui renverse les \u00e9l\u00e9ments d'une liste. Soit <code>T=[5,2,4,10]</code>. Apr\u00e8s <code>T.reverse()</code>, la liste devient <code>[10,4,2,5]</code>.</li> </ul> <p>On remarquera qu\u2019on r\u00e9cup\u00e8re la repr\u00e9sentation binaire d\u2019un entier <code>n</code> en partant de la gauche en appliquant successivement les instructions :</p> <p><code>b = n%2</code></p> <p><code>n = n//2</code></p> <p>r\u00e9p\u00e9t\u00e9es autant que n\u00e9cessaire.</p> \ud83d\udc0d Script Python<pre><code>def ecriture_binaire_entier_positif(n):\n    # cas particulier pour n = 0\n    if n == 0:\n        return [0]\n    # cas g\u00e9n\u00e9ral\n    b = []\n    bits = 0\n    while n != 0:\n        b.append(n % 2)\n        bits += 1\n        n = n // 2\n    b.reverse()\n    return b\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `ecriture_binaire_entier_positif` qui prend en param\u00e8tre un\nentier positif `n` et renvoie une liste d'entiers correspondant \u00e0 l\u2018\u00e9criture binaire de `n`.\n\nNe pas oublier d\u2019ajouter au corps de la fonction une documentation et une ou plusieurs\nassertions pour v\u00e9rifier les pr\u00e9-conditions.\n\nExemples :\n\n```python\n&gt;&gt;&gt; ecriture_binaire_entier_positif(0)\n[0]\n&gt;&gt;&gt; ecriture_binaire_entier_positif(2)\n[1, 0]\n&gt;&gt;&gt; ecriture_binaire_entier_positif(105)\n[1, 1, 0, 1, 0, 0, 1]\n```\n\nAide :\n\n- l'op\u00e9rateur `//` donne le quotient de la division euclidienne : `5//2` donne `2` ;\n- l'op\u00e9rateur `%` donne le reste de la division euclidienne :` 5%2` donne `1` ;\n- `append` est une m\u00e9thode qui ajoute un \u00e9l\u00e9ment \u00e0 une liste existante :\nSoit `T=[5,2,4]`, alors `T.append(10)` ajoute `10` \u00e0 la liste `T`. Ainsi, `T` devient\n`[5,2,4,10]`.\n- `reverse` est une m\u00e9thode qui renverse les \u00e9l\u00e9ments d'une liste.\nSoit `T=[5,2,4,10]`. Apr\u00e8s `T.reverse()`, la liste devient `[10,4,2,5]`.\n\nOn remarquera qu\u2019on r\u00e9cup\u00e8re la repr\u00e9sentation binaire d\u2019un entier `n` en partant de la gauche en appliquant successivement les instructions :\n\n`b = n%2`\n\n`n = n//2`\n\nr\u00e9p\u00e9t\u00e9es autant que n\u00e9cessaire.\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-432","title":"Exercice 43.2","text":"<p>Exercice 43.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>La fonction <code>tri_bulles</code> prend en param\u00e8tre une liste <code>T</code> d\u2019entiers non tri\u00e9s et renvoie la liste tri\u00e9e par ordre croissant.</p> <p>Le tri \u00e0 bulles est un tri en place qui commence par placer le plus grand \u00e9l\u00e9ment en derni\u00e8re position en parcourant la liste de gauche \u00e0 droite et en \u00e9changeant au passage les \u00e9l\u00e9ments voisins mal ordonn\u00e9s (si la valeur de l\u2019\u00e9l\u00e9ment d\u2019indice <code>i</code> a une valeur strictement sup\u00e9rieure \u00e0 celle de l\u2019indice <code>i + 1</code>, ils sont \u00e9chang\u00e9s). Le tri place ensuite en avant-derni\u00e8re position le plus grand \u00e9l\u00e9ment de la liste priv\u00e9e de son dernier \u00e9l\u00e9ment en proc\u00e9dant encore \u00e0 des \u00e9changes d\u2019\u00e9l\u00e9ments voisins. Ce principe est r\u00e9p\u00e9t\u00e9 jusqu\u2019\u00e0 placer le minimum en premi\u00e8re position.</p> <p>Exemple : pour trier la liste <code>[7, 9, 4, 3]</code> :</p> <ul> <li>premi\u00e8re \u00e9tape : 7 et 9 ne sont pas \u00e9chang\u00e9s, puis 9 et 4 sont \u00e9chang\u00e9s, puis 9 et 3 sont \u00e9chang\u00e9s, la liste est alors <code>[7, 4, 3, 9]</code></li> <li>deuxi\u00e8me \u00e9tape : 7 et 4 sont \u00e9chang\u00e9s, puis 7 et 3 sont \u00e9chang\u00e9s, la liste est alors <code>[4, 3, 7, 9]</code></li> <li>troisi\u00e8me \u00e9tape : 4 et 3 sont \u00e9chang\u00e9s, la liste est alors <code>[3, 4, 7, 9]</code></li> </ul> <p>Compl\u00e9ter le code Python ci-dessous qui impl\u00e9mente la fonction tri_bulles.</p> \ud83d\udc0d Script Python<pre><code>def tri_bulles(T):\n    '''\n    Renvoie le tableau T tri\u00e9 par ordre croissant\n    '''\n    n = len(T)\n    for i in range(...,...,-1):\n        for j in range(i):\n            if T[j] &gt; T[...]:\n                ... = T[j]\n                T[j] = T[...]\n                T[j+1] = temp\n    return T\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tri_bulles([])\n[]\n&gt;&gt;&gt; tri_bulles([7])\n[7]\n&gt;&gt;&gt; tri_bulles([9, 3, 7, 2, 3, 1, 6])\n[1, 2, 3, 3, 6, 7, 9]\n&gt;&gt;&gt; tri_bulles([9, 7, 4, 3])\n[3, 4, 7, 9]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def tri_bulles(T):\n    '''\n    Renvoie le tableau T tri\u00e9 par ordre croissant\n    '''\n    n = len(T)\n    for i in range(n-1,-1,-1):\n        for j in range(i):\n            if T[j] &gt; T[j+1]:\n                temp = T[j]\n                T[j] = T[j+1]\n                T[j+1] = temp\n    return T\n</code></pre> Markdown<pre><code>La fonction `tri_bulles` prend en param\u00e8tre une liste `T` d\u2019entiers non tri\u00e9s et renvoie la\nliste tri\u00e9e par ordre croissant.\n\n\nLe tri \u00e0 bulles est un tri en place qui commence par placer le plus grand \u00e9l\u00e9ment en\nderni\u00e8re position en parcourant la liste de gauche \u00e0 droite et en \u00e9changeant au passage\nles \u00e9l\u00e9ments voisins mal ordonn\u00e9s (si la valeur de l\u2019\u00e9l\u00e9ment d\u2019indice `i` a une valeur\nstrictement sup\u00e9rieure \u00e0 celle de l\u2019indice `i + 1`, ils sont \u00e9chang\u00e9s). Le tri place ensuite\nen avant-derni\u00e8re position le plus grand \u00e9l\u00e9ment de la liste priv\u00e9e de son dernier \u00e9l\u00e9ment\nen proc\u00e9dant encore \u00e0 des \u00e9changes d\u2019\u00e9l\u00e9ments voisins. Ce principe est r\u00e9p\u00e9t\u00e9 jusqu\u2019\u00e0\nplacer le minimum en premi\u00e8re position.\n\n\nExemple : pour trier la liste `[7, 9, 4, 3]` :\n\n- premi\u00e8re \u00e9tape : 7 et 9 ne sont pas \u00e9chang\u00e9s, puis 9 et 4 sont \u00e9chang\u00e9s, puis 9 et\n3 sont \u00e9chang\u00e9s, la liste est alors `[7, 4, 3, 9]`\n- deuxi\u00e8me \u00e9tape : 7 et 4 sont \u00e9chang\u00e9s, puis 7 et 3 sont \u00e9chang\u00e9s, la liste est\nalors `[4, 3, 7, 9]`\n- troisi\u00e8me \u00e9tape : 4 et 3 sont \u00e9chang\u00e9s, la liste est alors `[3, 4, 7, 9]`\n\n\nCompl\u00e9ter le code Python ci-dessous qui impl\u00e9mente la fonction tri_bulles.\n\n```python linenums='1'\ndef tri_bulles(T):\n    '''\n    Renvoie le tableau T tri\u00e9 par ordre croissant\n    '''\n    n = len(T)\n    for i in range(...,...,-1):\n        for j in range(i):\n            if T[j] &gt; T[...]:\n                ... = T[j]\n                T[j] = T[...]\n                T[j+1] = temp\n    return T\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tri_bulles([])\n[]\n&gt;&gt;&gt; tri_bulles([7])\n[7]\n&gt;&gt;&gt; tri_bulles([9, 3, 7, 2, 3, 1, 6])\n[1, 2, 3, 3, 6, 7, 9]\n&gt;&gt;&gt; tri_bulles([9, 7, 4, 3])\n[3, 4, 7, 9]\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-44","title":"\u25b6 Sujet 44","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-441","title":"Exercice 44.1","text":"<p>Exercice 44.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Programmer une fonction <code>renverse</code>, prenant en param\u00e8tre une cha\u00eene de caract\u00e8res non vide <code>mot</code> et renvoie une cha\u00eene de caract\u00e8res en inversant ceux de la cha\u00eene <code>mot</code>.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; renverse(\"informatique\")\n\"euqitamrofni\"\n</code></pre> \ud83d\udc0d Script Python<pre><code>def renverse(mot):\n    sol = ''\n    for lettre in mot:\n        sol = lettre + sol\n    return sol\n</code></pre> \ud83d\udccb Texte<pre><code>Programmer une fonction `renverse`, prenant en param\u00e8tre une cha\u00eene de caract\u00e8res non vide\n`mot` et renvoie une cha\u00eene de caract\u00e8res en inversant ceux de la cha\u00eene `mot`.\n\nExemple :\n\n```python\n&gt;&gt;&gt; renverse(\"informatique\")\n\"euqitamrofni\"\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-442","title":"Exercice 44.2","text":"<p>Exercice 44.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Un nombre premier est un nombre entier naturel qui admet exactement deux diviseurs distincts entiers et positifs : 1 et lui-m\u00eame. </p> <p>Le crible d\u2019\u00c9ratosth\u00e8ne permet de d\u00e9terminer les nombres premiers plus petit qu\u2019un certain nombre <code>n</code> fix\u00e9. </p> <p>On consid\u00e8re pour cela un tableau <code>tab</code> de <code>n</code>bool\u00e9ens, initialement tous \u00e9gaux \u00e0 <code>True</code>, sauf <code>tab[0]</code> et <code>tab[1]</code> qui valent <code>False</code>, 0 et 1 n\u2019\u00e9tant pas des nombres premiers.  </p> <p>On parcourt alors ce tableau de gauche \u00e0 droite.  </p> <p>Pour chaque indice <code>i</code> :</p> <ul> <li> <p>si <code>tab[i]</code> vaut <code>True</code> : le nombre <code>i</code> est premier et on donne la valeur <code>False</code> \u00e0 toutes les cases du tableau dont l\u2019indice est un multiple de <code>i</code>, \u00e0 partir de <code>2*i</code> (c\u2019est-\u00e0-dire <code>2*i</code>, <code>3*i</code> ...).</p> </li> <li> <p>si <code>tab[i]</code> vaut <code>False</code> : le nombre <code>i</code> n\u2019est pas premier et on n\u2019effectue aucun changement sur le tableau. </p> </li> </ul> <p>On dispose de la fonction <code>crible</code>, incompl\u00e8te et donn\u00e9e ci-dessous, prenant en param\u00e8tre un entier <code>n</code> strictement positif et renvoyant un tableau contenant tous les nombres premiers plus petits que <code>n</code>.</p> \ud83d\udc0d Script Python<pre><code>def crible(n):\n    \"\"\"\n    Renvoie un tableau contenant tous les nombres premiers plus petits que N\n    \"\"\"\n    premiers = []\n    tab = [True] * n\n    tab[0], tab[1] = False, False\n    for i in range(..., n):\n        if tab[i] == ...:\n            premiers.append(...)\n            for multiple in range(2*i, n, ...):\n                tab[multiple] = ...\n    return premiers\n\nassert crible(40) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n</code></pre> <p>Compl\u00e9ter le code de cette fonction.</p> \ud83d\udc0d Script Python<pre><code>def crible(n):\n    \"\"\"\n    Renvoie un tableau contenant tous les nombres premiers plus petits que N\n    \"\"\"\n    premiers = []\n    tab = [True] * n\n    tab[0], tab[1] = False, False\n    for i in range(2, n):\n        if tab[i] == True:\n            premiers.append(i)\n            for multiple in range(2*i, n, i):\n                tab[multiple] = False\n    return premiers\n\nassert crible(40) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n</code></pre> Markdown<pre><code>Un nombre premier est un nombre entier naturel qui admet exactement deux diviseurs distincts\nentiers et positifs : 1 et lui-m\u00eame. \n\nLe crible d\u2019\u00c9ratosth\u00e8ne permet de d\u00e9terminer les nombres premiers plus petit qu\u2019un certain\nnombre `n` fix\u00e9. \n\nOn consid\u00e8re pour cela un tableau `tab` de `n`bool\u00e9ens, initialement tous \u00e9gaux \u00e0 `True`, sauf\n`tab[0]` et `tab[1]` qui valent `False`, 0 et 1 n\u2019\u00e9tant pas des nombres premiers.  \n\nOn parcourt alors ce tableau de gauche \u00e0 droite.  \n\nPour chaque indice `i` :\n\n- si `tab[i]` vaut `True` : le nombre `i` est premier et on donne la valeur `False` \u00e0 toutes les\ncases du tableau dont l\u2019indice est un multiple de `i`, \u00e0 partir de `2*i` (c\u2019est-\u00e0-dire `2*i`, `3*i` ...).\n\n- si `tab[i]` vaut `False` : le nombre `i` n\u2019est pas premier et on n\u2019effectue aucun\nchangement sur le tableau. \n\nOn dispose de la fonction `crible`, incompl\u00e8te et donn\u00e9e ci-dessous, prenant en param\u00e8tre un\nentier `n` strictement positif et renvoyant un tableau contenant tous les nombres premiers plus\npetits que `n`.\n\n```python linenums='1'\ndef crible(n):\n    \"\"\"\n    Renvoie un tableau contenant tous les nombres premiers plus petits que N\n    \"\"\"\n    premiers = []\n    tab = [True] * n\n    tab[0], tab[1] = False, False\n    for i in range(..., n):\n        if tab[i] == ...:\n            premiers.append(...)\n            for multiple in range(2*i, n, ...):\n                tab[multiple] = ...\n    return premiers\n\nassert crible(40) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n</code></pre> <p>Compl\u00e9ter le code de cette fonction.</p> <p>```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#sujet-45","title":"\u25b6 Sujet 45","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-451","title":"Exercice 45.1","text":"<p>Exercice 45.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>On veut trier par ordre croissant les notes d\u2019une \u00e9valuation qui sont des nombres entiers compris entre 0 et 10 (inclus).</p> <p>Ces notes sont contenues dans une liste <code>notes_eval</code>.</p> <p>\u00c9crire une fonction <code>rangement_valeurs</code> prenant en param\u00e8tre la liste <code>notes_eval</code> et renvoyant une liste de longueur 11 telle que la valeur de cette liste \u00e0 chaque rang est \u00e9gale au nombre de notes valant ce rang. Ainsi le terme de rang 0 indique le nombre de note 0, le terme de rang 1 le nombre de note 1, etc.</p> <p>\u00c9crire ensuite une fonction <code>notes_triees</code> prenant en param\u00e8tre la liste des effectifs des notes et renvoyant une liste contenant la liste, tri\u00e9e dans l\u2019ordre croissant, des notes des \u00e9l\u00e8ves.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; notes_eval = [2, 0, 5, 9, 6, 9, 10, 5, 7, 9, 9, 5, 0, 9, 6, 5, 4]\n\n&gt;&gt;&gt; effectifs_notes = rangement_valeurs(notes_eval)\n&gt;&gt;&gt; effectifs_notes\n[2, 0, 1, 0, 1, 4, 2, 1, 0, 5, 1]\n\n&gt;&gt;&gt; notes_triees(effectifs_notes)\n[0, 0, 2, 4, 5, 5, 5, 5, 6, 6, 7, 9, 9, 9, 9, 9, 10]\n</code></pre> \ud83d\udc0d Script Python<pre><code>def rangement_valeurs(notes_eval):\n    lst = [0]*11\n    for note in notes_eval:\n        lst[note] += 1\n    return lst\n\ndef notes_triees(effectifs_notes):\n    triees = []\n    for i in range(11):\n        if effectifs_notes[i] != 0:\n            for _ in range(effectifs_notes[i]):\n                triees.append(i)\n    return triees\n</code></pre> \ud83d\udccb Texte<pre><code>On veut trier par ordre croissant les notes d\u2019une \u00e9valuation qui sont des nombres entiers\ncompris entre 0 et 10 (inclus).\n\nCes notes sont contenues dans une liste `notes_eval`.\n\n\u00c9crire une fonction `rangement_valeurs` prenant en param\u00e8tre la liste `notes_eval` et\nrenvoyant une liste de longueur 11 telle que la valeur de cette liste \u00e0 chaque rang est\n\u00e9gale au nombre de notes valant ce rang. Ainsi le terme de rang 0 indique le nombre de\nnote 0, le terme de rang 1 le nombre de note 1, etc.\n\n\u00c9crire ensuite une fonction `notes_triees` prenant en param\u00e8tre la liste des effectifs\ndes notes et renvoyant une liste contenant la liste, tri\u00e9e dans l\u2019ordre croissant, des notes\ndes \u00e9l\u00e8ves.\n\nExemple :\n\n```python\n&gt;&gt;&gt; notes_eval = [2, 0, 5, 9, 6, 9, 10, 5, 7, 9, 9, 5, 0, 9, 6, 5, 4]\n\n&gt;&gt;&gt; effectifs_notes = rangement_valeurs(notes_eval)\n&gt;&gt;&gt; effectifs_notes\n[2, 0, 1, 0, 1, 4, 2, 1, 0, 5, 1]\n\n&gt;&gt;&gt; notes_triees(effectifs_notes)\n[0, 0, 2, 4, 5, 5, 5, 5, 6, 6, 7, 9, 9, 9, 9, 9, 10]\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2023/#exercice-452","title":"Exercice 45.2","text":"<p>Exercice 45.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>L\u2019objectif de cet exercice est d\u2019\u00e9crire deux fonctions r\u00e9cursives <code>dec_to_bin</code> et <code>bin_to_dec</code> assurant respectivement la conversion de l\u2019\u00e9criture d\u00e9cimale d\u2019un nombre entier vers son \u00e9criture en binaire et, r\u00e9ciproquement, la conversion de l\u2019\u00e9criture en binaire d\u2019un nombre vers son \u00e9criture d\u00e9cimale.</p> <p>Dans cet exercice, on s\u2019interdit l\u2019usage des fonctions Python <code>bin</code> et <code>int</code>.</p> <p>On rappelle sur l\u2019exemple ci-dessous une fa\u00e7on d\u2019obtenir l\u2019\u00e9criture en binaire du nombre 25 :</p> <p>\\(25 = 1 + 2 \\times 12\\) \\(\\phantom{25} = 1 + 2 \\times 12\\) \\(\\phantom{25} = 1 + 2 (0 + 2 \\times 6)\\) \\(\\phantom{25} = 1 + 2 (0 + 2 (0 + 2 \\times 3))\\) \\(\\phantom{25} = 1 + 2 (0 + 2 (0 + 2 (1 + 2 \\times 1)))\\) \\(\\phantom{25} = 1 \\times 2^0 + 0 \\times 2^1 + 0 \\times 2^2 + 1 \\times 2^3 + 1 \\times 2^4\\) </p> <p>L'\u00e9criture binaire de 25 est donc <code>11001</code>.</p> <p>0n rappelle \u00e9galement que :</p> <ul> <li><code>a // 2</code> renvoie le quotient de la division euclidienne de <code>a</code> par 2.</li> <li><code>a % 2</code> renvoie le reste dans la division euclidienne de <code>a</code> par 2.</li> </ul> <p>On indique enfin qu\u2019en Python si <code>mot = \"informatique\"</code> alors :</p> <ul> <li><code>mot[-1]</code> renvoie <code>'e'</code>, c\u2019est-\u00e0-dire le dernier caract\u00e8re de la cha\u00eene de caract\u00e8res <code>mot</code>.</li> <li><code>mot[:-1]</code> renvoie <code>'informatiqu'</code> , c\u2019est-\u00e0-dire l\u2019ensemble de la cha\u00eene de caract\u00e8res <code>mot</code> priv\u00e9e de son dernier caract\u00e8re.</li> </ul> <p>Compl\u00e9ter, puis tester, les codes de deux fonctions ci-dessous.  On pr\u00e9cise que la fonction r\u00e9cursive <code>dec_to_bin</code> prend en param\u00e8tre un nombre entier et renvoie une cha\u00eene de caract\u00e8res contenant l\u2019\u00e9criture en binaire du nombre pass\u00e9 en param\u00e8tre.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dec_to_bin(25)\n'11001'\n</code></pre> <p>La fonction r\u00e9cursive <code>bin_to_dec</code> prend en param\u00e8tre une cha\u00eene de caract\u00e8res repr\u00e9sentant l\u2019\u00e9criture d\u2019un nombre en binaire et renvoie l\u2019\u00e9criture d\u00e9cimale de ce nombre.</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; bin_to_dec('101010')\n42\n</code></pre> \ud83d\udc0d Script Python<pre><code>def dec_to_bin(nb_dec):\n    q, r = nb_dec // 2, nb_dec % 2\n    if q == ...:\n        return str(r)\n    else:\n        return dec_to_bin(...) + ...\n\ndef bin_to_dec(nb_bin):\n    if nb_bin == '0':\n        return 0\n    elif ...:\n        return 1\n    else:\n        if nb_bin[-1] == '0':\n            bit_droit = 0\n        else:\n            bit_droit = ...\n        return ... * bin_to_dec(nb_bin[:-1]) + ...\n</code></pre> \ud83d\udc0d Script Python<pre><code>def dec_to_bin(nb_dec):\n    q, r = nb_dec // 2, nb_dec % 2\n    if q == 0:\n        return str(r)\n    else:\n        return dec_to_bin(q) + str(r)\n\ndef bin_to_dec(nb_bin):\n    if nb_bin == '0':\n        return 0\n    elif nb_bin == '1':\n        return 1\n    else:\n        if nb_bin[-1] == '0':\n            bit_droit = 0\n        else:\n            bit_droit = 1\n        return 2 * bin_to_dec(nb_bin[:-1]) + bit_droit\n</code></pre> Markdown<pre><code>L\u2019objectif de cet exercice est d\u2019\u00e9crire deux fonctions r\u00e9cursives `dec_to_bin` et\n`bin_to_dec` assurant respectivement la conversion de l\u2019\u00e9criture d\u00e9cimale d\u2019un nombre\nentier vers son \u00e9criture en binaire et, r\u00e9ciproquement, la conversion de l\u2019\u00e9criture en\nbinaire d\u2019un nombre vers son \u00e9criture d\u00e9cimale.\n\nDans cet exercice, on s\u2019interdit l\u2019usage des fonctions Python `bin` et `int`.\n\nOn rappelle sur l\u2019exemple ci-dessous une fa\u00e7on d\u2019obtenir l\u2019\u00e9criture en binaire du\nnombre 25 :\n\n$25 = 1 + 2 \\times 12$  \n$\\phantom{25} = 1 + 2 \\times 12$  \n$\\phantom{25} = 1 + 2 (0 + 2 \\times 6)$  \n$\\phantom{25} = 1 + 2 (0 + 2 (0 + 2 \\times 3))$     \n$\\phantom{25} = 1 + 2 (0 + 2 (0 + 2 (1 + 2 \\times 1)))$   \n$\\phantom{25} = 1 \\times 2^0 + 0 \\times 2^1 + 0 \\times 2^2 + 1 \\times 2^3 + 1 \\times 2^4$   \n\nL'\u00e9criture binaire de 25 est donc ```11001```.\n\n0n rappelle \u00e9galement que :\n\n- `a // 2` renvoie le quotient de la division euclidienne de `a` par 2.\n- ` a % 2` renvoie le reste dans la division euclidienne de `a` par 2.\n\nOn indique enfin qu\u2019en Python si `mot = \"informatique\"` alors :\n\n- `mot[-1]` renvoie `'e'`, c\u2019est-\u00e0-dire le dernier caract\u00e8re de la cha\u00eene de caract\u00e8res `mot`.\n- `mot[:-1]` renvoie `'informatiqu'` , c\u2019est-\u00e0-dire l\u2019ensemble de la cha\u00eene de\ncaract\u00e8res `mot` priv\u00e9e de son dernier caract\u00e8re.\n\nCompl\u00e9ter, puis tester, les codes de deux fonctions ci-dessous. \nOn pr\u00e9cise que la fonction r\u00e9cursive `dec_to_bin` prend en param\u00e8tre un nombre entier\net renvoie une cha\u00eene de caract\u00e8res contenant l\u2019\u00e9criture en binaire du nombre pass\u00e9 en\nparam\u00e8tre.\n\nExemple :\n\n```python\n&gt;&gt;&gt; dec_to_bin(25)\n'11001'\n</code></pre> <p>La fonction r\u00e9cursive <code>bin_to_dec</code> prend en param\u00e8tre une cha\u00eene de caract\u00e8res repr\u00e9sentant l\u2019\u00e9criture d\u2019un nombre en binaire et renvoie l\u2019\u00e9criture d\u00e9cimale de ce nombre.</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; bin_to_dec('101010')\n42\n</code></pre> <p>\ud83d\udc0d Script Python<pre><code>def dec_to_bin(nb_dec):\n    q, r = nb_dec // 2, nb_dec % 2\n    if q == ...:\n        return str(r)\n    else:\n        return dec_to_bin(...) + ...\n\ndef bin_to_dec(nb_bin):\n    if nb_bin == '0':\n        return 0\n    elif ...:\n        return 1\n    else:\n        if nb_bin[-1] == '0':\n            bit_droit = 0\n        else:\n            bit_droit = ...\n        return ... * bin_to_dec(nb_bin[:-1]) + ...\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/","title":"\u00c9preuve Pratique BNS 2024","text":"<p>Cr\u00e9dit</p> <p>Les pages de synth\u00e8se et de correction ont \u00e9t\u00e9 r\u00e9alis\u00e9es par G. Lassus - acad\u00e9mie de Bordeaux</p> <p>Les sujets ci-dessous correspondent \u00e0 la derni\u00e8re version officielle, publi\u00e9e le 12/03/2024.    </p> <p> T\u00e9l\u00e9chargements </p> <ul> <li>Une archive contenant les 48 dossiers (contenant chacun le sujet en <code>.pdf</code> et le script en <code>.py</code>) : BNS_2024.zip (1,6 Mo)</li> <li>Un pdf unique de tous les sujets : BNS_2024_pdf_unique.pdf (2,1 Mo) </li> </ul>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-01","title":"\u25b6 Sujet 01","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-011","title":"Exercice 01.1","text":"<p>Exercice 01.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Dans cet exercice, un arbre binaire de caract\u00e8res est stock\u00e9 sous la forme d\u2019un dictionnaire o\u00f9 les clefs sont les caract\u00e8res des n\u0153uds de l\u2019arbre et les valeurs, pour chaque clef, la liste des caract\u00e8res des fils gauche et droit du n\u0153ud.</p> <p>On utilise la valeur <code>''</code> pour repr\u00e9senter un fils vide.</p> <p>Par exemple, l\u2019arbre</p> <p></p> <p>est stock\u00e9 dans</p> \ud83d\udc0d Script Python<pre><code>a = {'F':['B','G'], 'B':['A','D'], 'A':['',''], 'D':['C','E'], \\\n'C':['',''], 'E':['',''], 'G':['','I'], 'I':['','H'], \\\n'H':['','']}\n</code></pre> <p>\u00c9crire une fonction r\u00e9cursive <code>taille</code> prenant en param\u00e8tres un arbre binaire <code>arbre</code> non vide sous la forme d\u2019un dictionnaire et un caract\u00e8re <code>lettre</code> qui est la valeur du sommet de l\u2019arbre, et qui renvoie la taille de l\u2019arbre \u00e0 savoir le nombre total de n\u0153uds.  </p> <p>On observe que, par exemple, <code>arbre[lettre][0]</code>, respectivement <code>arbre[lettre][1]</code>, permet d\u2019atteindre la cl\u00e9 du sous-arbre gauche, respectivement droit, de l\u2019arbre <code>arbre</code> de sommet <code>lettre</code>.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; taille(a, \u2019F\u2019)\n9\n&gt;&gt;&gt; taille(a, 'B')\n5\n&gt;&gt;&gt; taille(a, 'I')\n2\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>a = {'F':['B','G'], 'B':['A','D'], 'A':['',''], 'D':['C','E'], 'C':['',''], 'E':['',''], 'G':['','I'], 'I':['','H'], 'H':['','']}\n\n\ndef taille(arbre, lettre):\n    if lettre == '':\n        return 0\n    return 1 + taille(arbre, arbre[lettre][0]) + taille(arbre, arbre[lettre][1])\n</code></pre> \ud83d\udccb Texte<pre><code>Dans cet exercice, un arbre binaire de caract\u00e8res est stock\u00e9 sous la forme d\u2019un\ndictionnaire o\u00f9 les clefs sont les caract\u00e8res des n\u0153uds de l\u2019arbre et les valeurs, pour\nchaque clef, la liste des caract\u00e8res des fils gauche et droit du n\u0153ud.\n\nOn utilise la valeur `''` pour repr\u00e9senter un fils vide.\n\nPar exemple, l\u2019arbre\n\n![image](data2023/33_arbre.png){: .center}\n\nest stock\u00e9 dans\n\n```python\na = {'F':['B','G'], 'B':['A','D'], 'A':['',''], 'D':['C','E'], \\\n'C':['',''], 'E':['',''], 'G':['','I'], 'I':['','H'], \\\n'H':['','']}\n```\n\n\u00c9crire une fonction r\u00e9cursive `taille` prenant en param\u00e8tres un arbre binaire `arbre` non vide\nsous la forme d\u2019un dictionnaire et un caract\u00e8re `lettre` qui est la valeur du sommet de\nl\u2019arbre, et qui renvoie la taille de l\u2019arbre \u00e0 savoir le nombre total de n\u0153uds.\n\nOn observe que, par exemple, `arbre[lettre][0]`, respectivement\n`arbre[lettre][1]`, permet d\u2019atteindre la cl\u00e9 du sous-arbre gauche, respectivement\ndroit, de l\u2019arbre `arbre` de sommet `lettre`.\n\nExemple :\n```python\n&gt;&gt;&gt; taille(a, \u2019F\u2019)\n9\n&gt;&gt;&gt; taille(a, 'B')\n5\n&gt;&gt;&gt; taille(a, 'I')\n2\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-012","title":"Exercice 01.2","text":"<p>Exercice 01.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On consid\u00e8re l'algorithme de tri de tableau suivant : \u00e0 chaque \u00e9tape, on parcourt le sous- tableau des \u00e9l\u00e9ments non rang\u00e9s et on place le plus petit \u00e9l\u00e9ment en premi\u00e8re position de ce sous-tableau.</p> <p>Exemple avec le tableau : <code>t = [41, 55, 21, 18, 12, 6, 25]</code> </p> <ul> <li> <p>\u00c9tape 1 : on parcourt tous les \u00e9l\u00e9ments du tableau, on permute le plus petit \u00e9l\u00e9ment avec le premier. Le tableau devient <code>t = [6, 55, 21, 18, 12, 41, 25]</code></p> </li> <li> <p>\u00c9tape 2 : on parcourt tous les \u00e9l\u00e9ments sauf le premier, on permute le plus petit \u00e9l\u00e9ment trouv\u00e9 avec le second. Le tableau devient : <code>t = [6, 12, 21, 18, 55, 41, 25]</code> </p> </li> </ul> <p>Et ainsi de suite. </p> <p>Le programme ci-dessous impl\u00e9mente cet algorithme.</p> \ud83d\udc0d Script Python<pre><code>def echange(tab, i, j):\n    '''Echange les \u00e9l\u00e9ments d'indice i et j dans le tableau tab.'''\n    temp = ... \n    tab[i] = ... \n    tab[j] = ... \n\ndef tri_selection(tab):\n    '''Trie le tableau tab dans l'ordre croissant\n    par la m\u00e9thode du tri par s\u00e9lection.'''\n    N = len(tab)\n    for k in range(...): \n        imin = ... \n        for i in range(..., N): \n            if tab[i] &lt; ...: \n                imin = i\n        echange(tab, ..., ...) \n</code></pre> <p>Compl\u00e9ter le code de cette fonction de fa\u00e7on \u00e0 obtenir :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; liste = [41, 55, 21, 18, 12, 6, 25]\n&gt;&gt;&gt; tri_selection(liste)\n&gt;&gt;&gt; liste\n[6, 12, 18, 21, 25, 41, 55]\n</code></pre> \ud83d\udc0d Script Python<pre><code>def echange(tab, i, j):\n    '''Echange les \u00e9l\u00e9ments d'indice i et j dans le tableau tab.'''\n    temp = tab[i] \n    tab[i] = tab[j] \n    tab[j] = temp \n\ndef tri_selection(tab):\n    '''Trie le tableau tab dans l'ordre croissant\n    par la m\u00e9thode du tri par s\u00e9lection.'''\n    N = len(tab)\n    for k in range(N): \n        imin = k \n        for i in range(k + 1, N): \n            if tab[i] &lt; tab[imin]: \n                imin = i\n        echange(tab, k, imin) \n</code></pre> Markdown<pre><code>On consid\u00e8re l'algorithme de tri de tableau suivant : \u00e0 chaque \u00e9tape, on parcourt le sous-\ntableau des \u00e9l\u00e9ments non rang\u00e9s et on place le plus petit \u00e9l\u00e9ment en premi\u00e8re position de\nce sous-tableau.\n\nExemple avec le tableau : ```t = [41, 55, 21, 18, 12, 6, 25]``` \n\n- \u00c9tape 1 : on parcourt tous les \u00e9l\u00e9ments du tableau, on permute le plus petit \u00e9l\u00e9ment avec\nle premier. Le tableau devient `t = [6, 55, 21, 18, 12, 41, 25]`\n\n- \u00c9tape 2 : on parcourt tous les \u00e9l\u00e9ments **sauf le premier**, on permute le plus petit \u00e9l\u00e9ment\ntrouv\u00e9 avec le second.  \nLe tableau devient : ```t = [6, 12, 21, 18, 55, 41, 25]``` \n\nEt ainsi de suite. \n\nLe programme ci-dessous impl\u00e9mente cet algorithme.\n\n\n```python linenums='1'\ndef echange(tab, i, j):\n    '''Echange les \u00e9l\u00e9ments d'indice i et j dans le tableau tab.'''\n    temp = ... \n    tab[i] = ... \n    tab[j] = ... \n\ndef tri_selection(tab):\n    '''Trie le tableau tab dans l'ordre croissant\n    par la m\u00e9thode du tri par s\u00e9lection.'''\n    N = len(tab)\n    for k in range(...): \n        imin = ... \n        for i in range(..., N): \n            if tab[i] &lt; ...: \n                imin = i\n        echange(tab, ..., ...) \n</code></pre> <p>Compl\u00e9ter le code de cette fonction de fa\u00e7on \u00e0 obtenir :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; liste = [41, 55, 21, 18, 12, 6, 25]\n&gt;&gt;&gt; tri_selection(liste)\n&gt;&gt;&gt; liste\n[6, 12, 18, 21, 25, 41, 55]\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-02","title":"\u25b6 Sujet 02","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-021","title":"Exercice 02.1","text":"<p>Exercice 02.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>On consid\u00e8re des cha\u00eenes de caract\u00e8res contenant uniquement des majuscules et des carac- t\u00e8res <code>*</code> appel\u00e9es mots \u00e0 trous. </p> <p>Par exemple <code>INFO*MA*IQUE</code>, <code>***I***E**</code> et <code>*S*</code> sont des mots \u00e0 trous.  </p> <p>Programmer une fonction <code>correspond</code> qui :</p> <ul> <li>prend en param\u00e8tres deux cha\u00eenes de caract\u00e8res <code>mot</code> et <code>mot_a_trous</code> o\u00f9 <code>mot_a_trous</code> est un mot \u00e0 trous comme indiqu\u00e9 ci-dessus, </li> <li>renvoie :<ul> <li><code>True</code> si on peut obtenir <code>mot</code> en rempla\u00e7ant convenablement les caract\u00e8res <code>'*'</code> de <code>mot_a_trous</code>.</li> <li><code>False</code> sinon.</li> </ul> </li> </ul> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; correspond('INFORMATIQUE', 'INFO*MA*IQUE')\nTrue\n&gt;&gt;&gt; correspond('AUTOMATIQUE', 'INFO*MA*IQUE')\nFalse\n&gt;&gt;&gt; correspond('STOP', 'S*')\nFalse\n&gt;&gt;&gt; correspond('AUTO', '*UT*')\nTrue\n</code></pre> \ud83d\udc0d Script Python<pre><code>def correspond(mot, mot_a_trous):\n    if len(mot) != len(mot_a_trous):\n        return False\n    for i in range(len(mot)):\n        if mot[i] != mot_a_trous[i] and mot_a_trous[i] != '*':\n            return False\n    return True\n</code></pre> \ud83d\udccb Texte<pre><code>On consid\u00e8re des cha\u00eenes de caract\u00e8res contenant uniquement des majuscules et des carac-\nt\u00e8res `*` appel\u00e9es *mots \u00e0 trous*.\n\nPar exemple `INFO*MA*IQUE`, `***I***E**` et\n`*S*` sont des mots \u00e0 trous.\n\nProgrammer une fonction `correspond` qui :\n\n- prend en param\u00e8tres deux cha\u00eenes de caract\u00e8res `mot` et `mot_a_trous` o\u00f9\n`mot_a_trous` est un mot \u00e0 trous comme indiqu\u00e9 ci-dessus, \n- renvoie :\n    - `True` si on peut obtenir `mot` en rempla\u00e7ant convenablement les caract\u00e8res\n`'*'` de `mot_a_trous`.\n    - `False` sinon.\n\nExemple :\n\n```python\n&gt;&gt;&gt; correspond('INFORMATIQUE', 'INFO*MA*IQUE')\nTrue\n&gt;&gt;&gt; correspond('AUTOMATIQUE', 'INFO*MA*IQUE')\nFalse\n&gt;&gt;&gt; correspond('STOP', 'S*')\nFalse\n&gt;&gt;&gt; correspond('AUTO', '*UT*')\nTrue\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-022","title":"Exercice 02.2","text":"<p>Exercice 02.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On consid\u00e8re au plus 26 personnes A, B, C, D, E, F ... qui peuvent s'envoyer des messages avec deux r\u00e8gles \u00e0 respecter :</p> <ul> <li>chaque personne ne peut envoyer des messages qu'\u00e0 une seule personne (\u00e9ventuellement elle-m\u00eame),</li> <li>chaque personne ne peut recevoir des messages qu'en provenance d'une seule personne (\u00e9ventuellement elle-m\u00eame).</li> </ul> <p>Voici un exemple - avec 6 personnes - de \u00ab plan d'envoi des messages \u00bb qui respecte les r\u00e8gles ci-dessus, puisque chaque personne est pr\u00e9sente une seule fois dans chaque colonne :</p> <ul> <li>A envoie ses messages \u00e0 E</li> <li>E envoie ses messages \u00e0 B</li> <li>B envoie ses messages \u00e0 F</li> <li>F envoie ses messages \u00e0 A</li> <li>C envoie ses messages \u00e0 D</li> <li>D envoie ses messages \u00e0 C</li> </ul> <p>Et le dictionnaire correspondant \u00e0 ce plan d'envoi est le suivant :</p> <p><code>plan_a = {'A':'E', 'B':'F', 'C':'D', 'D':'C', 'E':'B', 'F':'A'}</code></p> <p>Un cycle est une suite de personnes dans laquelle la derni\u00e8re est la m\u00eame que la premi\u00e8re.</p> <p>Sur le plan d'envoi <code>plan_a</code> des messages ci-dessus, il y a deux cycles distincts : un premier cycle avec A, E, B, F et un second cycle avec C et D.</p> <p>En revanche, le plan d\u2019envoi <code>plan_b</code> ci-dessous :</p> <p><code>plan_b = {'A':'C', 'B':'F', 'C':'E', 'D':'A', 'E':'B', 'F':'D'}</code></p> <p>comporte un unique cycle : A, C, E, B, F, D. Dans ce cas, lorsqu\u2019un plan d\u2019envoi comporte un unique cycle, on dit que le plan d\u2019envoi est cyclique.</p> <p>Pour savoir si un plan d'envoi de messages comportant N personnes est cyclique, on peut utiliser l'algorithme ci-dessous :</p> <ul> <li>on part d\u2019un exp\u00e9diteur (ici A) et on inspecte son destinataire dans le plan d'envoi,</li> <li>chaque destinataire devient \u00e0 son tour exp\u00e9diteur, selon le plan d\u2019envoi, tant qu\u2019on ne \u00ab retombe \u00bb pas sur l\u2019exp\u00e9diteur initial,</li> <li>le plan d\u2019envoi est cyclique si on l\u2019a parcouru en entier.</li> </ul> <p>Compl\u00e9ter la fonction <code>est_cyclique</code> en respectant la sp\u00e9cification.</p> <p>On rappelle que la fonction Python <code>len</code> permet d'obtenir la longueur d'un dictionnaire.</p> \ud83d\udc0d Script Python<pre><code>def est_cyclique(plan):\n    '''Prend en param\u00e8tre un dictionnaire `plan` correspondant \u00e0 \n    un plan d'envoi de messages (ici entre les personnes A, B, C,\n    D, E, F).\n    Renvoie True si le plan d'envoi de messages est cyclique et \n    False sinon.'''\n    expediteur = 'A'\n    destinataire = plan[...] \n    nb_destinataires = 1\n\n    while destinataire != expediteur:\n        destinataire = ... \n        nb_destinataires = ... \n\n    return nb_destinataires == ... \n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; est_cyclique({'A':'E', 'F':'A', 'C':'D', 'E':'B', 'B':'F', 'D':'C'})\nFalse\n&gt;&gt;&gt; est_cyclique({'A':'E', 'F':'C', 'C':'D', 'E':'B', 'B':'F', 'D':'A'})\nTrue\n&gt;&gt;&gt; est_cyclique({'A':'B', 'F':'C', 'C':'D', 'E':'A', 'B':'F', 'D':'E'})\nTrue\n&gt;&gt;&gt; est_cyclique({'A':'B', 'F':'A', 'C':'D', 'E':'C', 'B':'F', 'D':'E'})\nFalse\n</code></pre> \ud83d\udc0d Script Python<pre><code>def est_cyclique(plan):\n    '''Prend en param\u00e8tre un dictionnaire `plan` correspondant \u00e0 \n    un plan d'envoi de messages (ici entre les personnes A, B, C,\n    D, E, F).\n    Renvoie True si le plan d'envoi de messages est cyclique et \n    False sinon.'''\n    expediteur = 'A'\n    destinataire = plan[expediteur]\n    nb_destinaires = 1\n\n    while destinataire != expediteur:\n        destinataire = plan[destinataire]\n        nb_destinaires += 1\n\n    return nb_destinaires == len(plan)\n\n#tests\nprint(est_cyclique({'A':'E', 'F':'A', 'C':'D', 'E':'B', 'B':'F', 'D':'C'}))\nprint(est_cyclique({'A':'E', 'F':'C', 'C':'D', 'E':'B', 'B':'F', 'D':'A'}))\nprint(est_cyclique({'A':'B', 'F':'C', 'C':'D', 'E':'A', 'B':'F', 'D':'E'}))\nprint(est_cyclique({'A':'B', 'F':'A', 'C':'D', 'E':'C', 'B':'F', 'D':'E'}))\n</code></pre> Markdown<pre><code>On consid\u00e8re au plus 26 personnes A, B, C, D, E, F ... qui peuvent s'envoyer des messages\navec deux r\u00e8gles \u00e0 respecter :\n\n- chaque personne ne peut envoyer des messages qu'\u00e0 une seule personne\n(\u00e9ventuellement elle-m\u00eame),\n- chaque personne ne peut recevoir des messages qu'en provenance d'une seule\npersonne (\u00e9ventuellement elle-m\u00eame).\n\n\nVoici un exemple - avec 6 personnes - de \u00ab plan d'envoi des messages \u00bb qui respecte les\nr\u00e8gles ci-dessus, puisque chaque personne est pr\u00e9sente une seule fois dans chaque\ncolonne :\n\n- A envoie ses messages \u00e0 E\n- E envoie ses messages \u00e0 B\n- B envoie ses messages \u00e0 F\n- F envoie ses messages \u00e0 A\n- C envoie ses messages \u00e0 D\n- D envoie ses messages \u00e0 C\n\nEt le dictionnaire correspondant \u00e0 ce plan d'envoi est le suivant :\n\n`plan_a = {'A':'E', 'B':'F', 'C':'D', 'D':'C', 'E':'B', 'F':'A'}`\n\nUn cycle est une suite de personnes dans laquelle la derni\u00e8re est la m\u00eame que la\npremi\u00e8re.\n\nSur le plan d'envoi `plan_a` des messages ci-dessus, il y a deux cycles distincts : un premier\ncycle avec A, E, B, F et un second cycle avec C et D.\n\nEn revanche, le plan d\u2019envoi `plan_b` ci-dessous :\n\n`plan_b = {'A':'C', 'B':'F', 'C':'E', 'D':'A', 'E':'B', 'F':'D'}`\n\ncomporte un unique cycle : A, C, E, B, F, D. Dans ce cas, lorsqu\u2019un plan d\u2019envoi comporte un\n*unique cycle*, on dit que le plan d\u2019envoi est *cyclique*.\n\nPour savoir si un plan d'envoi de messages comportant N personnes est cyclique, on peut\nutiliser l'algorithme ci-dessous :\n\n\n- on part d\u2019un exp\u00e9diteur (ici A) et on inspecte son destinataire dans le plan d'envoi,\n- chaque destinataire devient \u00e0 son tour exp\u00e9diteur, selon le plan d\u2019envoi, tant\nqu\u2019on ne \u00ab retombe \u00bb pas sur l\u2019exp\u00e9diteur initial,\n- le plan d\u2019envoi est cyclique si on l\u2019a parcouru en entier.\n\n\nCompl\u00e9ter la fonction `est_cyclique` en respectant la sp\u00e9cification.\n\nOn rappelle que la fonction Python `len` permet d'obtenir la longueur d'un dictionnaire.\n\n\n```python linenums='1'\ndef est_cyclique(plan):\n    '''Prend en param\u00e8tre un dictionnaire `plan` correspondant \u00e0 \n    un plan d'envoi de messages (ici entre les personnes A, B, C,\n    D, E, F).\n    Renvoie True si le plan d'envoi de messages est cyclique et \n    False sinon.'''\n    expediteur = 'A'\n    destinataire = plan[...] \n    nb_destinataires = 1\n\n    while destinataire != expediteur:\n        destinataire = ... \n        nb_destinataires = ... \n\n    return nb_destinataires == ... \n</code></pre> <p>Exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; est_cyclique({'A':'E', 'F':'A', 'C':'D', 'E':'B', 'B':'F', 'D':'C'})\nFalse\n&gt;&gt;&gt; est_cyclique({'A':'E', 'F':'C', 'C':'D', 'E':'B', 'B':'F', 'D':'A'})\nTrue\n&gt;&gt;&gt; est_cyclique({'A':'B', 'F':'C', 'C':'D', 'E':'A', 'B':'F', 'D':'E'})\nTrue\n&gt;&gt;&gt; est_cyclique({'A':'B', 'F':'A', 'C':'D', 'E':'C', 'B':'F', 'D':'E'})\nFalse\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-03","title":"\u25b6 Sujet 03","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-031","title":"Exercice 03.1","text":"<p>Exercice 03.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire la fonction <code>maximum_tableau</code>, prenant en param\u00e8tre un tableau non vide de nombres <code>tab</code> (de type <code>list</code>) et renvoyant le plus grand \u00e9l\u00e9ment de ce tableau.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; maximum_tableau([98, 12, 104, 23, 131, 9])\n131\n&gt;&gt;&gt; maximum_tableau([-27, 24, -3, 15])\n24\n</code></pre> \ud83d\udc0d Script Python<pre><code>def maximum_tableau(tab):\n    maximum = tab[0]\n    for element in tab:\n        if element &gt; maximum:\n            maximum = element\n    return maximum\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire la fonction `maximum_tableau`, prenant en param\u00e8tre un tableau non vide de nombres `tab` (de type\n`list`) et renvoyant le plus grand \u00e9l\u00e9ment de ce tableau.\n\nExemples :\n\n```python\n&gt;&gt;&gt; maximum_tableau([98, 12, 104, 23, 131, 9])\n131\n&gt;&gt;&gt; maximum_tableau([-27, 24, -3, 15])\n24\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-032","title":"Exercice 03.2","text":"<p>Exercice 03.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On dispose de cha\u00eenes de caract\u00e8res contenant uniquement des parenth\u00e8ses ouvrantes et fermantes. </p> <p>Un parenth\u00e9sage est correct si :</p> <ul> <li>le nombre de parenth\u00e8ses ouvrantes de la cha\u00eene est \u00e9gal au nombre de parenth\u00e8ses fermantes.</li> <li>en parcourant la cha\u00eene de gauche \u00e0 droite, le nombre de parenth\u00e8ses d\u00e9j\u00e0 ouvertes doit \u00eatre, \u00e0 tout moment, sup\u00e9rieur ou \u00e9gal au nombre de parenth\u00e8ses d\u00e9j\u00e0 ferm\u00e9es.</li> </ul> <p>Ainsi, <code>((()())(()))</code> est un parenth\u00e9sage correct. </p> <p>Les parenth\u00e9sages <code>())(()</code> et <code>(())(()</code> sont, eux, incorrects.</p> <p>On dispose du code de la classe <code>Pile</code> suivant :</p> \ud83d\udc0d Script Python<pre><code>class Pile:\n    \"\"\"Classe d\u00e9finissant une structure de pile.\"\"\"\n    def __init__(self):\n        self.contenu = []\n\n    def est_vide(self):\n        \"\"\"Renvoie un bool\u00e9en indiquant si la pile est vide.\"\"\"\n        return self.contenu == []\n\n    def empiler(self, v):\n        \"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\"\n        self.contenu.append(v)\n\n    def depiler(self):\n        \"\"\"\n        Retire et renvoie l'\u00e9l\u00e9ment plac\u00e9 au sommet de la pile,\n        si la pile n\u2019est pas vide. Produit une erreur sinon.\n        \"\"\"\n        assert not self.est_vide()\n        return self.contenu.pop()\n</code></pre> <p>On souhaite programmer une fonction <code>bon_parenthesage</code> qui prend en param\u00e8tre une cha\u00eene de caract\u00e8res <code>ch</code> form\u00e9e de parenth\u00e8ses et renvoie <code>True</code> si la cha\u00eene est bien parenth\u00e9s\u00e9e et <code>False</code> sinon.</p> <p>Cette fonction utilise une pile et suit le principe suivant : en parcourant la cha\u00eene de gauche \u00e0 droite, si on trouve une parenth\u00e8se ouvrante, on l\u2019empile au sommet de la pile et si on trouve une parenth\u00e8se fermante, on d\u00e9pile (si possible) la parenth\u00e8se ouvrante stock\u00e9e au sommet de la pile. </p> <p>La cha\u00eene est alors bien parenth\u00e9s\u00e9e si, \u00e0 la fin du parcours, la pile est vide. </p> <p>Elle est, par contre, mal parenth\u00e9s\u00e9e : </p> <ul> <li>si dans le parcours, on trouve une parenth\u00e8se fermante, alors que la pile est vide ;</li> <li>ou si, \u00e0 la fin du parcours, la pile n\u2019est pas vide.</li> </ul> <p>Compl\u00e9ter le code de la fonction <code>bon_parenthesage</code> ci-dessous:</p> \ud83d\udc0d Script Python<pre><code>def bon_parenthesage(ch):\n    \"\"\"Renvoie un bool\u00e9en indiquant si la cha\u00eene ch \n    est bien parenth\u00e9s\u00e9e\"\"\"\n    p = Pile()\n    for c in ch:\n        if c == ...: \n            p.empiler(c)\n        elif c == ...: \n            if p.est_vide():\n                ...\n            else:\n                ...\n    return ... \n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; bon_parenthesage(\"((()())(()))\")\nTrue\n&gt;&gt;&gt; bon_parenthesage(\"())(()\")\nFalse\n&gt;&gt;&gt; bon_parenthesage(\"(())(()\")\nFalse\n</code></pre> \ud83d\udc0d Script Python<pre><code>class Pile:\n    \"\"\"Classe d\u00e9finissant une structure de pile.\"\"\"\n    def __init__(self):\n        self.contenu = []\n\n    def est_vide(self):\n        \"\"\"Renvoie un bool\u00e9en indiquant si la pile est vide.\"\"\"\n        return self.contenu == []\n\n    def empiler(self, v):\n        \"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\"\n        self.contenu.append(v)\n\n    def depiler(self):\n        \"\"\"\n        Retire et renvoie l'\u00e9l\u00e9ment plac\u00e9 au sommet de la pile,\n        si la pile n\u2019est pas vide. Produit une erreur sinon.\n        \"\"\"\n        assert not self.est_vide()\n        return self.contenu.pop()\n\ndef bon_parenthesage(ch):\n    \"\"\"Renvoie un bool\u00e9en indiquant si la cha\u00eene ch est bien parenth\u00e9s\u00e9e\"\"\"\n    p = Pile()\n    for c in ch:\n        if c == '(':\n            p.empiler(c)\n        elif c == ')':\n            if p.est_vide():\n                return False\n            else:\n                p.depiler()\n    return p.est_vide()\n</code></pre> Markdown<pre><code>On dispose de cha\u00eenes de caract\u00e8res contenant uniquement des parenth\u00e8ses ouvrantes et\nfermantes. \n\nUn parenth\u00e9sage est correct si :\n\n- le nombre de parenth\u00e8ses ouvrantes de la cha\u00eene est \u00e9gal au nombre de parenth\u00e8ses\nfermantes.\n- en parcourant la cha\u00eene de gauche \u00e0 droite, le nombre de parenth\u00e8ses d\u00e9j\u00e0 ouvertes doit\n\u00eatre, \u00e0 tout moment, sup\u00e9rieur ou \u00e9gal au nombre de parenth\u00e8ses d\u00e9j\u00e0 ferm\u00e9es.\n\n\nAinsi, `((()())(()))` est un parenth\u00e9sage correct. \n\nLes parenth\u00e9sages `())(()` et `(())(()` sont, eux, incorrects.\n\n\nOn dispose du code de la classe `Pile` suivant :\n\n```python linenums='1'\nclass Pile:\n    \"\"\"Classe d\u00e9finissant une structure de pile.\"\"\"\n    def __init__(self):\n        self.contenu = []\n\n    def est_vide(self):\n        \"\"\"Renvoie un bool\u00e9en indiquant si la pile est vide.\"\"\"\n        return self.contenu == []\n\n    def empiler(self, v):\n        \"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\"\n        self.contenu.append(v)\n\n    def depiler(self):\n        \"\"\"\n        Retire et renvoie l'\u00e9l\u00e9ment plac\u00e9 au sommet de la pile,\n        si la pile n\u2019est pas vide. Produit une erreur sinon.\n        \"\"\"\n        assert not self.est_vide()\n        return self.contenu.pop()\n</code></pre> <p>On souhaite programmer une fonction <code>bon_parenthesage</code> qui prend en param\u00e8tre une cha\u00eene de caract\u00e8res <code>ch</code> form\u00e9e de parenth\u00e8ses et renvoie <code>True</code> si la cha\u00eene est bien parenth\u00e9s\u00e9e et <code>False</code> sinon.</p> <p>Cette fonction utilise une pile et suit le principe suivant : en parcourant la cha\u00eene de gauche \u00e0 droite, si on trouve une parenth\u00e8se ouvrante, on l\u2019empile au sommet de la pile et si on trouve une parenth\u00e8se fermante, on d\u00e9pile (si possible) la parenth\u00e8se ouvrante stock\u00e9e au sommet de la pile. </p> <p>La cha\u00eene est alors bien parenth\u00e9s\u00e9e si, \u00e0 la fin du parcours, la pile est vide. </p> <p>Elle est, par contre, mal parenth\u00e9s\u00e9e : </p> <ul> <li>si dans le parcours, on trouve une parenth\u00e8se fermante, alors que la pile est vide ;</li> <li>ou si, \u00e0 la fin du parcours, la pile n\u2019est pas vide.</li> </ul> <p>Compl\u00e9ter le code de la fonction <code>bon_parenthesage</code> ci-dessous:</p> \ud83d\udc0d Script Python<pre><code>def bon_parenthesage(ch):\n    \"\"\"Renvoie un bool\u00e9en indiquant si la cha\u00eene ch \n    est bien parenth\u00e9s\u00e9e\"\"\"\n    p = Pile()\n    for c in ch:\n        if c == ...: \n            p.empiler(c)\n        elif c == ...: \n            if p.est_vide():\n                ...\n            else:\n                ...\n    return ... \n</code></pre> <p>Exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; bon_parenthesage(\"((()())(()))\")\nTrue\n&gt;&gt;&gt; bon_parenthesage(\"())(()\")\nFalse\n&gt;&gt;&gt; bon_parenthesage(\"(())(()\")\nFalse\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-04","title":"\u25b6 Sujet 04","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-041","title":"Exercice 04.1","text":"<p>Exercice 04.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Programmer la fonction <code>recherche</code>, prenant en param\u00e8tres un tableau non vide <code>tab</code> (type <code>list</code>) d'entiers et un entier <code>n</code>, et qui renvoie l'indice de la derni\u00e8re occurrence de l'\u00e9l\u00e9ment cherch\u00e9. Si l'\u00e9l\u00e9ment n'est pas pr\u00e9sent, la fonction renvoie <code>None</code>.</p> <p>Exemples \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche([5, 3], 1) # renvoie None\n2\n&gt;&gt;&gt; recherche([2, 4], 2)\n0\n&gt;&gt;&gt; recherche([2, 3, 5, 2, 4], 2)\n3\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(tab, n):\n    indice_solution = None\n    for i in range(len(tab)):\n        if tab[i] == n:\n            indice_solution = i\n    return indice_solution\n</code></pre> \ud83d\udccb Texte<pre><code>Programmer la fonction `recherche`, prenant en param\u00e8tres un tableau non vide `tab` (type `list`) d'entiers et un entier `n`, et qui renvoie l'indice de la **derni\u00e8re** occurrence de l'\u00e9l\u00e9ment cherch\u00e9. Si l'\u00e9l\u00e9ment n'est pas pr\u00e9sent, la fonction renvoie `None`.\n\nExemples\n```python\n&gt;&gt;&gt; recherche([5, 3], 1) # renvoie None\n2\n&gt;&gt;&gt; recherche([2, 4], 2)\n0\n&gt;&gt;&gt; recherche([2, 3, 5, 2, 4], 2)\n3\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-042","title":"Exercice 04.2","text":"<p>Exercice 04.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On souhaite programmer une fonction donnant la distance la plus courte entre un point de d\u00e9part et une liste de points. Les points sont tous \u00e0 coordonn\u00e9es enti\u00e8res. Les points sont donn\u00e9s sous la forme d'un tuple de deux entiers. La liste des points \u00e0 traiter est donc un tableau de tuples.</p> <p>On rappelle que la distance entre deux points du plan de coordonn\u00e9es \\((x;y)\\) et \\((x';y')\\) v\u00e9rifie la formule :</p> \\[d^2=(x-x')^2+(y-y')^2\\] <p>Compl\u00e9ter le code des fonctions <code>distance_carre</code> et <code>point_le_plus_proche</code> fournies ci-dessous pour qu\u2019elles r\u00e9pondent \u00e0 leurs sp\u00e9cifications.</p> \ud83d\udc0d Script Python<pre><code>def distance_carre(point1, point2):\n    \"\"\" Calcule et renvoie la distance au carre entre \n    deux points.\"\"\"\n    return (...)**2 + (...)**2 \n\ndef point_le_plus_proche(depart, tab):\n    \"\"\" Renvoie les coordonn\u00e9es du premier point du tableau tab se \n    trouvant \u00e0 la plus courte distance du point depart.\"\"\"\n    min_point = tab[0]\n    min_dist = ... \n    for i in range(1, len(tab)):\n        if distance_carre(tab[i], depart) &lt; ...: \n            min_point = ... \n            min_dist = ... \n    return min_point\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; distance_carre((1, 0), (5, 3))\n25\n&gt;&gt;&gt; distance_carre((1, 0), (0, 1))\n2\n&gt;&gt;&gt; plus_courte_distance([(7, 9), (2, 5), (5, 2)], (0, 0))\n(2, 5)\n&gt;&gt;&gt; plus_courte_distance([(7, 9), (2, 5), (5, 2)], (5, 2))\n(5, 2)\n</code></pre> \ud83d\udc0d Script Python<pre><code>def distance_carre(point1, point2):\n    \"\"\" Calcule et renvoie la distance au carre entre \n    deux points.\"\"\"\n    return (point1[0] - point2[0])**2 + ((point1[1] - point2[1]))**2\n\ndef point_le_plus_proche(depart, tab):\n    \"\"\" Renvoie les coordonn\u00e9es du premier point du tableau tab se \n    trouvant \u00e0 la plus courte distance du point depart.\"\"\"\n    min_point = tab[0]\n    min_dist = distance_carre(min_point, depart) \n    for i in range(1, len(tab)):\n        if distance_carre(tab[i], depart) &lt; min_dist: \n            min_point = tab[i] \n            min_dist = distance_carre(tab[i], depart) \n    return min_point\n</code></pre> Markdown<pre><code>On souhaite programmer une fonction donnant la distance la plus courte entre un point\nde d\u00e9part et une liste de points. Les points sont tous \u00e0 coordonn\u00e9es enti\u00e8res.\nLes points sont donn\u00e9s sous la forme d'un tuple de deux entiers.\nLa liste des points \u00e0 traiter est donc un tableau de tuples.\n\nOn rappelle que la distance entre deux points du plan de coordonn\u00e9es $(x;y)$ et $(x';y')$\nv\u00e9rifie la formule :\n\n$$d^2=(x-x')^2+(y-y')^2$$\n\n\n\nCompl\u00e9ter le code des fonctions `distance_carre` et `point_le_plus_proche` fournies ci-dessous pour qu\u2019elles r\u00e9pondent \u00e0 leurs sp\u00e9cifications.\n\n```python linenums='1'\ndef distance_carre(point1, point2):\n    \"\"\" Calcule et renvoie la distance au carre entre \n    deux points.\"\"\"\n    return (...)**2 + (...)**2 \n\ndef point_le_plus_proche(depart, tab):\n    \"\"\" Renvoie les coordonn\u00e9es du premier point du tableau tab se \n    trouvant \u00e0 la plus courte distance du point depart.\"\"\"\n    min_point = tab[0]\n    min_dist = ... \n    for i in range(1, len(tab)):\n        if distance_carre(tab[i], depart) &lt; ...: \n            min_point = ... \n            min_dist = ... \n    return min_point\n</code></pre> <p>Exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; distance_carre((1, 0), (5, 3))\n25\n&gt;&gt;&gt; distance_carre((1, 0), (0, 1))\n2\n&gt;&gt;&gt; plus_courte_distance([(7, 9), (2, 5), (5, 2)], (0, 0))\n(2, 5)\n&gt;&gt;&gt; plus_courte_distance([(7, 9), (2, 5), (5, 2)], (5, 2))\n(5, 2)\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-05","title":"\u25b6 Sujet 05","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-051","title":"Exercice 05.1","text":"<p>Exercice 05.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>max_et_indice</code> qui prend en param\u00e8tre un tableau non vide <code>tab</code> de nombres entiers et qui renvoie la valeur du plus grand \u00e9l\u00e9ment de ce tableau ainsi que l\u2019indice de sa premi\u00e8re apparition dans ce tableau.</p> <p>L\u2019utilisation de la fonction native <code>max</code> n\u2019est pas autoris\u00e9e.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; max_et_indice([1, 5, 6, 9, 1, 2, 3, 7, 9, 8])\n(9, 3)\n&gt;&gt;&gt; max_et_indice([-2])\n(-2, 0)\n&gt;&gt;&gt; max_et_indice([-1, -1, 3, 3, 3])\n(3, 2)\n&gt;&gt;&gt; max_et_indice([1, 1, 1, 1])\n(1, 0)\n</code></pre> \ud83d\udc0d Script Python<pre><code>def max_et_indice(tab):\n    '''\n    renvoie la valeur du plus grand \u00e9l\u00e9ment de ce tableau ainsi\n    que l\u2019indice de sa premi\u00e8re apparition dans ce tableau.\n    '''\n    val_max = tab[0]\n    ind_max = 0\n    for i in range(len(tab)):\n        if tab[i] &gt; val_max:\n            val_max = tab[i]\n            ind_max = i\n    return (val_max, ind_max)\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `max_et_indice` qui prend en param\u00e8tre un tableau non vide `tab` de\nnombres entiers et qui renvoie la valeur du plus grand \u00e9l\u00e9ment de ce tableau ainsi que\nl\u2019indice de sa premi\u00e8re apparition dans ce tableau.\n\nL\u2019utilisation de la fonction native `max` n\u2019est pas autoris\u00e9e.\n\nExemples :\n\n```python\n&gt;&gt;&gt; max_et_indice([1, 5, 6, 9, 1, 2, 3, 7, 9, 8])\n(9, 3)\n&gt;&gt;&gt; max_et_indice([-2])\n(-2, 0)\n&gt;&gt;&gt; max_et_indice([-1, -1, 3, 3, 3])\n(3, 2)\n&gt;&gt;&gt; max_et_indice([1, 1, 1, 1])\n(1, 0)\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-052","title":"Exercice 05.2","text":"<p>Exercice 05.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>L\u2019ordre des g\u00e8nes sur un chromosome est repr\u00e9sent\u00e9 par un tableau <code>ordre</code> de <code>n</code> cases d\u2019entiers distincts deux \u00e0 deux et compris entre 1 et <code>n</code>.</p> <p>Par exemple, <code>ordre = [5, 4, 3, 6, 7, 2, 1, 8, 9]</code> dans le cas <code>n = 9</code>.</p> <p>On dit qu\u2019il y a un point de rupture dans <code>ordre</code> dans chacune des situations suivantes :</p> <ul> <li>la premi\u00e8re valeur de <code>ordre</code> n\u2019est pas 1 ;</li> <li>l\u2019\u00e9cart entre deux g\u00e8nes cons\u00e9cutifs n\u2019est pas \u00e9gal \u00e0 1 ;</li> <li>la derni\u00e8re valeur de <code>ordre</code> n\u2019est pas n.</li> </ul> <p>Par exemple, si <code>ordre = [5, 4, 3, 6, 7, 2, 1, 8, 9]</code> avec <code>n = 9</code>, on a</p> <ul> <li>un point de rupture au d\u00e9but car 5 est diff\u00e9rent de 1</li> <li>un point de rupture entre 3 et 6 (l\u2019\u00e9cart est de 3)</li> <li>un point de rupture entre 7 et 2 (l\u2019\u00e9cart est de 5)</li> <li>un point de rupture entre 1 et 8 (l\u2019\u00e9cart est de 7)</li> </ul> <p>Il y a donc 4 points de rupture.</p> <p>Compl\u00e9ter les fonctions Python <code>est_un_ordre</code> et <code>nombre_points_rupture</code> propos\u00e9es \u00e0 la page suivante pour que :</p> <ul> <li> <p>la fonction <code>est_un_ordre</code> renvoie <code>True</code> si le tableau pass\u00e9 en param\u00e8tre repr\u00e9sente bien un ordre de g\u00e8nes de chromosome et <code>False</code> sinon ;</p> </li> <li> <p>la fonction <code>nombre_points_rupture</code> renvoie le nombre de points de rupture d\u2019un tableau pass\u00e9 en param\u00e8tre repr\u00e9sentant l\u2019ordre de g\u00e8nes d\u2019un chromosome.</p> </li> </ul> \ud83d\udc0d Script Python<pre><code>def est_un_ordre(tab):\n    '''\n    Renvoie True si tab est de longueur n et contient tous les\n    entiers de 1 \u00e0 n, False sinon\n    '''\n    n = len(tab)\n    # les entiers vus lors du parcours\n    vus = ... \n\n    for x in tab:\n        if x &lt; ... or x &gt;... or ...: \n            return False\n        ... .append(...) \n    return True\n\ndef nombre_points_rupture(ordre):\n    '''\n    Renvoie le nombre de point de rupture de ordre qui repr\u00e9sente \n    un ordre de g\u00e8nes de chromosome\n    '''\n    # on v\u00e9rifie que ordre est un ordre de g\u00e8nes\n    assert ... \n    n = len(ordre)\n    nb = 0\n    if ordre[...] != 1: # le premier n'est pas 1 \n        nb = nb + 1\n    i = 0\n    while i &lt; ...: \n        if ... not in [-1, 1]: # l'\u00e9cart n'est pas 1 \n            nb = nb + 1\n        i = i + 1\n    if ordre[i] != ...: # le dernier n'est pas n \n        nb = nb + 1\n    return nb\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; est_un_ordre([1, 6, 2, 8, 3, 7])\nFalse\n&gt;&gt;&gt; est_un_ordre([5, 4, 3, 6, 7, 2, 1, 8, 9])\nTrue\n&gt;&gt;&gt; nombre_points_rupture([5, 4, 3, 6, 7, 2, 1, 8, 9])\n4\n&gt;&gt;&gt; nombre_points_rupture([1, 2, 3, 4, 5])\n0\n&gt;&gt;&gt; nombre_points_rupture([1, 6, 2, 8, 3, 7, 4, 5])\n7\n&gt;&gt;&gt; nombre_points_rupture([2, 1, 3, 4])\n2\n</code></pre> \ud83d\udc0d Script Python<pre><code>def est_un_ordre(tab):\n    '''\n    Renvoie True si tab est de longueur n et contient tous les\n    entiers de 1 \u00e0 n, False sinon\n    '''\n    n = len(tab)\n    # les entiers vus lors du parcours\n    vus = [] \n\n    for x in tab:\n        if x &lt; 1 or x &gt; n or x in vus: \n            return False\n        vus.append(x) \n    return True\n\ndef nombre_points_rupture(ordre):\n    '''\n    Renvoie le nombre de point de rupture de ordre qui repr\u00e9sente \n    un ordre de g\u00e8nes de chromosome\n    '''\n    # on v\u00e9rifie que ordre est un ordre de g\u00e8nes\n    assert est_un_ordre(ordre) \n    n = len(ordre)\n    nb = 0\n    if ordre[0] != 1: # le premier n'est pas 1 \n        nb = nb + 1\n    i = 0\n    while i &lt; n - 1: \n        if ordre[i+1] - ordre[i] not in [-1, 1]: # l'\u00e9cart n'est pas 1 \n            nb = nb + 1\n        i = i + 1\n    if ordre[i] != n: # le dernier n'est pas n \n        nb = nb + 1\n    return nb\n</code></pre> Markdown<pre><code>L\u2019ordre des g\u00e8nes sur un chromosome est repr\u00e9sent\u00e9 par un tableau `ordre` de `n` cases\nd\u2019entiers distincts deux \u00e0 deux et compris entre 1 et `n`.\n\nPar exemple, `ordre = [5, 4, 3, 6, 7, 2, 1, 8, 9]` dans le cas `n = 9`.\n\nOn dit qu\u2019il y a un point de rupture dans `ordre` dans chacune des situations suivantes :\n\n- la premi\u00e8re valeur de `ordre` n\u2019est pas 1 ;\n- l\u2019\u00e9cart entre deux g\u00e8nes cons\u00e9cutifs n\u2019est pas \u00e9gal \u00e0 1 ;\n- la derni\u00e8re valeur de `ordre` n\u2019est pas n.\n\nPar exemple, si `ordre = [5, 4, 3, 6, 7, 2, 1, 8, 9]` avec `n = 9`, on a\n\n- un point de rupture au d\u00e9but car 5 est diff\u00e9rent de 1\n- un point de rupture entre 3 et 6 (l\u2019\u00e9cart est de 3)\n- un point de rupture entre 7 et 2 (l\u2019\u00e9cart est de 5)\n- un point de rupture entre 1 et 8 (l\u2019\u00e9cart est de 7)\n\nIl y a donc 4 points de rupture.\n\nCompl\u00e9ter les fonctions Python `est_un_ordre` et `nombre_points_rupture`\npropos\u00e9es \u00e0 la page suivante pour que :\n\n\n- la fonction `est_un_ordre` renvoie `True` si le tableau pass\u00e9 en param\u00e8tre\nrepr\u00e9sente bien un ordre de g\u00e8nes de chromosome et `False` sinon ;\n\n- la fonction `nombre_points_rupture` renvoie le nombre de points de rupture\nd\u2019un tableau pass\u00e9 en param\u00e8tre repr\u00e9sentant l\u2019ordre de g\u00e8nes d\u2019un\nchromosome.\n\n```python linenums='1'\ndef est_un_ordre(tab):\n    '''\n    Renvoie True si tab est de longueur n et contient tous les\n    entiers de 1 \u00e0 n, False sinon\n    '''\n    n = len(tab)\n    # les entiers vus lors du parcours\n    vus = ... \n\n    for x in tab:\n        if x &lt; ... or x &gt;... or ...: \n            return False\n        ... .append(...) \n    return True\n\ndef nombre_points_rupture(ordre):\n    '''\n    Renvoie le nombre de point de rupture de ordre qui repr\u00e9sente \n    un ordre de g\u00e8nes de chromosome\n    '''\n    # on v\u00e9rifie que ordre est un ordre de g\u00e8nes\n    assert ... \n    n = len(ordre)\n    nb = 0\n    if ordre[...] != 1: # le premier n'est pas 1 \n        nb = nb + 1\n    i = 0\n    while i &lt; ...: \n        if ... not in [-1, 1]: # l'\u00e9cart n'est pas 1 \n            nb = nb + 1\n        i = i + 1\n    if ordre[i] != ...: # le dernier n'est pas n \n        nb = nb + 1\n    return nb\n</code></pre> <p>Exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; est_un_ordre([1, 6, 2, 8, 3, 7])\nFalse\n&gt;&gt;&gt; est_un_ordre([5, 4, 3, 6, 7, 2, 1, 8, 9])\nTrue\n&gt;&gt;&gt; nombre_points_rupture([5, 4, 3, 6, 7, 2, 1, 8, 9])\n4\n&gt;&gt;&gt; nombre_points_rupture([1, 2, 3, 4, 5])\n0\n&gt;&gt;&gt; nombre_points_rupture([1, 6, 2, 8, 3, 7, 4, 5])\n7\n&gt;&gt;&gt; nombre_points_rupture([2, 1, 3, 4])\n2\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-06","title":"\u25b6 Sujet 06","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-061","title":"Exercice 06.1","text":"<p>Exercice 06.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>verifie</code> qui prend en param\u00e8tre un tableau de valeurs num\u00e9riques et qui renvoie <code>True</code> si ce tableau est tri\u00e9 dans l\u2019ordre croissant, <code>False</code> sinon.</p> <p>Un tableau vide est consid\u00e9r\u00e9 comme tri\u00e9.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>Exemples :\n&gt;&gt;&gt; verifie([0, 5, 8, 8, 9])\nTrue\n&gt;&gt;&gt; verifie([8, 12, 4])\nFalse\n&gt;&gt;&gt; verifie([-1, 4])\nTrue\n&gt;&gt;&gt; verifie([])\nTrue\n&gt;&gt;&gt; verifie([5])\nTrue\n</code></pre> \ud83d\udc0d Script Python<pre><code>def verifie(tab):\n    for i in range(1, len(tab)):\n        if tab[i] &lt; tab[i-1]:\n            return False\n    return True\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `verifie` qui prend en param\u00e8tre un tableau de valeurs num\u00e9riques et qui renvoie `True` si ce tableau est tri\u00e9 dans l\u2019ordre croissant, `False` sinon.\n\nUn tableau vide est consid\u00e9r\u00e9 comme tri\u00e9.\n\nExemples :\n\n```python\nExemples :\n&gt;&gt;&gt; verifie([0, 5, 8, 8, 9])\nTrue\n&gt;&gt;&gt; verifie([8, 12, 4])\nFalse\n&gt;&gt;&gt; verifie([-1, 4])\nTrue\n&gt;&gt;&gt; verifie([])\nTrue\n&gt;&gt;&gt; verifie([5])\nTrue\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-062","title":"Exercice 06.2","text":"<p>Exercice 06.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On consid\u00e8re dans cet exercice l\u2019\u00e9lection d\u2019un vainqueur \u00e0 l\u2019issue d\u2019un vote. Les r\u00e9sultats du vote sont stock\u00e9s dans un tableau : chaque vote exprim\u00e9 est le nom d\u2019un ou d\u2019une candidate. Par exemple, les r\u00e9sultats pourraient correspondre au tableau :</p> \ud83d\udc0d Script Python<pre><code>urne = ['A', 'A', 'A', 'B', 'C', 'B', 'C', 'B', 'C', 'B']\n</code></pre> <p>indiquant que 3 candidats ont obtenus au moins un vote chacun : A, B et C.</p> <p>On cherche \u00e0 d\u00e9terminer le ou les candidats ayant obtenu le plus de suffrages. Pour cela, on propose d\u2019\u00e9crire deux fonctions :</p> <ul> <li>La fonction <code>depouille</code> doit permettre de compter le nombre de votes exprim\u00e9s pour chaque artiste. Elle prend en param\u00e8tre un tableau et renvoie le r\u00e9sultat dans un dictionnaire dont les cl\u00e9s sont les noms des issues et les valeurs le nombre de votes en leur faveur.</li> <li>La fonction <code>vainqueurs</code> doit d\u00e9signer le nom du ou des gagnants. Elle prend en param\u00e8tre un dictionnaire non vide dont la structure est celle du dictionnaire renvoy\u00e9 par la fonction <code>depouille</code> et renvoie un tableau. Ce tableau peut donc contenir plusieurs \u00e9l\u00e9ments s\u2019il y a des artistes ex- aequo. Compl\u00e9ter les fonctions <code>depouille</code> et <code>vainqueurs</code> ci-apr\u00e8s pour qu\u2019elles renvoient les r\u00e9sultats attendus.</li> </ul> \ud83d\udc0d Script Python<pre><code>def depouille(urne):\n    '''prend en param\u00e8tre une liste de suffrages et renvoie un \n    dictionnaire avec le nombre de voix pour chaque candidat'''\n    resultat = ... \n    for bulletin in urne:\n        if ...: \n            resultat[bulletin] = resultat[bulletin] + 1\n        else:\n            ...\n    return resultat\n\ndef vainqueurs(election):\n    '''prend en param\u00e8tre un dictionnaire non vide avec le nombre de voix\n    pour chaque candidat et renvoie la liste des vainqueurs'''\n    nmax = 0\n    for candidat in election:\n        if ... &gt; ... : \n            nmax = ... \n    liste_finale = [ nom for nom in election if ... ] \n    return ... \n</code></pre> <p>Exemples d\u2019utilisation :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; depouille([ 'A', 'B', 'A' ])\n{'A': 2, 'B': 1}\n&gt;&gt;&gt; depouille([])\n{}\n&gt;&gt;&gt; election = depouille(['A', 'A', 'A', 'B', 'C',\n'B', 'C', 'B', 'C', 'B'])\n&gt;&gt;&gt; election\n{'A': 3, 'B': 4, 'C': 3}\n&gt;&gt;&gt; vainqueurs(election)\n['B']\n&gt;&gt;&gt; vainqueurs({ 'A' : 2, 'B' : 2, 'C' : 1})\n['A', 'B']\n</code></pre> \ud83d\udc0d Script Python<pre><code>def depouille(urne):\n    '''prend en param\u00e8tre une liste de suffrages et renvoie un \n    dictionnaire avec le nombre de voix pour chaque candidat'''\n    resultat = {}\n    for bulletin in urne:\n        if bulletin in resultat:\n            resultat[bulletin] = resultat[bulletin] + 1\n        else:\n            resultat[bulletin] = 1\n    return resultat\n\ndef vainqueurs(election):\n    '''prend en param\u00e8tre un dictionnaire non vide avec le nombre de voix\n    pour chaque candidat et renvoie la liste des vainqueurs'''\n    nmax = 0\n    for candidat in election:\n        if election[candidat] &gt; nmax: \n            nmax = election[candidat] \n    liste_finale = [ nom for nom in election if election[nom] == nmax ]\n    return liste_finale\n</code></pre> Markdown<pre><code>On consid\u00e8re dans cet exercice l\u2019\u00e9lection d\u2019un vainqueur \u00e0 l\u2019issue d\u2019un vote. Les r\u00e9sultats\ndu vote sont stock\u00e9s dans un tableau : chaque vote exprim\u00e9 est le nom d\u2019un ou d\u2019une\ncandidate.  \nPar exemple, les r\u00e9sultats pourraient correspondre au tableau :\n\n```python\nurne = ['A', 'A', 'A', 'B', 'C', 'B', 'C', 'B', 'C', 'B']\n</code></pre> <p>indiquant que 3 candidats ont obtenus au moins un vote chacun : A, B et C.</p> <p>On cherche \u00e0 d\u00e9terminer le ou les candidats ayant obtenu le plus de suffrages. Pour cela, on propose d\u2019\u00e9crire deux fonctions :</p> <ul> <li>La fonction <code>depouille</code> doit permettre de compter le nombre de votes exprim\u00e9s pour chaque artiste. Elle prend en param\u00e8tre un tableau et renvoie le r\u00e9sultat dans un dictionnaire dont les cl\u00e9s sont les noms des issues et les valeurs le nombre de votes en leur faveur.</li> <li>La fonction <code>vainqueurs</code> doit d\u00e9signer le nom du ou des gagnants. Elle prend en param\u00e8tre un dictionnaire non vide dont la structure est celle du dictionnaire renvoy\u00e9 par la fonction <code>depouille</code> et renvoie un tableau. Ce tableau peut donc contenir plusieurs \u00e9l\u00e9ments s\u2019il y a des artistes ex- aequo. Compl\u00e9ter les fonctions <code>depouille</code> et <code>vainqueurs</code> ci-apr\u00e8s pour qu\u2019elles renvoient les r\u00e9sultats attendus.</li> </ul> \ud83d\udc0d Script Python<pre><code>def depouille(urne):\n    '''prend en param\u00e8tre une liste de suffrages et renvoie un \n    dictionnaire avec le nombre de voix pour chaque candidat'''\n    resultat = ... \n    for bulletin in urne:\n        if ...: \n            resultat[bulletin] = resultat[bulletin] + 1\n        else:\n            ...\n    return resultat\n\ndef vainqueurs(election):\n    '''prend en param\u00e8tre un dictionnaire non vide avec le nombre de voix\n    pour chaque candidat et renvoie la liste des vainqueurs'''\n    nmax = 0\n    for candidat in election:\n        if ... &gt; ... : \n            nmax = ... \n    liste_finale = [ nom for nom in election if ... ] \n    return ... \n</code></pre> <p>Exemples d\u2019utilisation :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; depouille([ 'A', 'B', 'A' ])\n{'A': 2, 'B': 1}\n&gt;&gt;&gt; depouille([])\n{}\n&gt;&gt;&gt; election = depouille(['A', 'A', 'A', 'B', 'C',\n'B', 'C', 'B', 'C', 'B'])\n&gt;&gt;&gt; election\n{'A': 3, 'B': 4, 'C': 3}\n&gt;&gt;&gt; vainqueurs(election)\n['B']\n&gt;&gt;&gt; vainqueurs({ 'A' : 2, 'B' : 2, 'C' : 1})\n['A', 'B']\n</code></pre> <p>```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-07","title":"\u25b6 Sujet 07","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-071","title":"Exercice 07.1","text":"<p>Exercice 07.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>On consid\u00e8re dans cet exercice une repr\u00e9sentation binaire d\u2019un entier non sign\u00e9 en tant que tableau de bool\u00e9ens. Si</p> \ud83d\udc0d Script Python<pre><code>tab = [True, False, True, False, False, True, True]\n</code></pre> <p>est un tel tableau, alors l\u2019entier qu\u2019il repr\u00e9sente est \\(2^6 +2^4 + 2^1 + 2^0 = 83\\). Cette repr\u00e9sentation consistant \u00e0 placer en premier le bool\u00e9en indiquant la puissance la plus \u00e9lev\u00e9e de 2 est dite big-endian ou grand-boutiste.</p> <p>\u00c9crire une fonction <code>gb_vers_entier</code> qui prend en param\u00e8tre un tel tableau et renvoie l\u2019entier qu\u2019il repr\u00e9sente.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; gb_vers_entier([])\n0\n&gt;&gt;&gt; gb_vers_entier([True])\n1\n&gt;&gt;&gt; gb_vers_entier([True, False, True, False, False, True, True])\n83\n&gt;&gt;&gt; gb_vers_entier([True, False, False, False, False, False, True, False])\n130\n</code></pre> \ud83d\udc0d Script Python<pre><code>def gb_vers_entier(tab):\n    somme = 0\n    for i in range(len(tab)):\n        if tab[i]:\n            somme += 2**(len(tab)-1-i)\n    return somme \n</code></pre> \ud83d\udccb Texte<pre><code>On consid\u00e8re dans cet exercice une repr\u00e9sentation binaire d\u2019un entier non sign\u00e9 en tant que\ntableau de bool\u00e9ens.\nSi\n\n```python\ntab = [True, False, True, False, False, True, True]\n```\n\nest un tel tableau, alors l\u2019entier qu\u2019il repr\u00e9sente est $2^6 +2^4 + 2^1 + 2^0 = 83$. Cette repr\u00e9sentation consistant \u00e0 placer en premier le bool\u00e9en indiquant la puissance la plus \u00e9lev\u00e9e de 2\nest dite *big-endian* ou grand-boutiste.\n\n\u00c9crire une fonction `gb_vers_entier` qui prend en param\u00e8tre un tel tableau et renvoie\nl\u2019entier qu\u2019il repr\u00e9sente.\n\nExemple :\n\n```python\n&gt;&gt;&gt; gb_vers_entier([])\n0\n&gt;&gt;&gt; gb_vers_entier([True])\n1\n&gt;&gt;&gt; gb_vers_entier([True, False, True, False, False, True, True])\n83\n&gt;&gt;&gt; gb_vers_entier([True, False, False, False, False, False, True, False])\n130\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-072","title":"Exercice 07.2","text":"<p>Exercice 07.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>La fonction <code>tri_insertion</code> suivante prend en argument un tableau <code>tab</code> et trie ce tableau en utilisant la m\u00e9thode du tri par insertion. Compl\u00e9ter cette fonction pour qu'elle r\u00e9ponde \u00e0 la sp\u00e9cification demand\u00e9e.</p> <p>On rappelle le principe du tri par insertion : on consid\u00e8re les \u00e9l\u00e9ments \u00e0 trier un par un, le premier \u00e9l\u00e9ment constituant, \u00e0 lui tout seul, un tableau tri\u00e9 de longueur 1. On range ensuite le second \u00e9l\u00e9ment pour constituer un tableau tri\u00e9 de longueur 2, puis on range le troisi\u00e8me \u00e9l\u00e9ment pour avoir un tableau tri\u00e9 de longueur 3 et ainsi de suite...</p> <p>A chaque \u00e9tape, le premier \u00e9l\u00e9ment du sous-tableau non tri\u00e9 est plac\u00e9 dans le sous-tableau des \u00e9l\u00e9ments d\u00e9j\u00e0 tri\u00e9s de sorte que ce sous-tableau demeure tri\u00e9.</p> <p>Le principe du tri par insertion est donc d'ins\u00e9rer \u00e0 la n-i\u00e8me it\u00e9ration, le n-i\u00e8me \u00e9l\u00e9ment \u00e0 la bonne place.</p> \ud83d\udc0d Script Python<pre><code>def tri_insertion(tab):\n    '''Trie le tableau tab par ordre croissant\n    en appliquant l'algorithme de tri par insertion'''\n    n = len(tab)\n    for i in range(1, n):\n        valeur_insertion = ... \n        # la variable j sert \u00e0 d\u00e9terminer \n        # o\u00f9 placer la valeur \u00e0 ranger\n        j = ... \n        # tant qu'on n'a pas trouv\u00e9 la place de l'\u00e9l\u00e9ment \u00e0\n        # ins\u00e9rer on d\u00e9cale les valeurs du tableau vers la droite\n        while j &gt; ... and valeur_insertion &lt; tab[...]: \n            tab[j] = tab[j-1]\n            j = ... \n        tab[j] = ... \n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tab = [98, 12, 104, 23, 131, 9]\n&gt;&gt;&gt; tri_insertion(tab)\n&gt;&gt;&gt; tab\n[9, 12, 23, 98, 104, 131]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def tri_insertion(tab):\n    '''Trie le tableau tab par ordre croissant\n    en appliquant l'algorithme de tri par insertion'''\n    n = len(tab)\n    for i in range(1, n):\n        valeur_insertion = tab[i]\n        # la variable j sert \u00e0 d\u00e9terminer \n        # o\u00f9 placer la valeur \u00e0 ranger\n        j = i \n        # tant qu'on n'a pas trouv\u00e9 la place de l'\u00e9l\u00e9ment \u00e0\n        # ins\u00e9rer on d\u00e9cale les valeurs du tableau vers la droite\n        while j &gt; 0 and valeur_insertion &lt; tab[j-1]: \n            tab[j] = tab[j-1]\n            j = j - 1 \n        tab[j] = valeur_insertion \n</code></pre> Markdown<pre><code>La fonction `tri_insertion` suivante prend en argument un tableau `tab` et trie ce tableau en\nutilisant la m\u00e9thode du tri par insertion. Compl\u00e9ter cette fonction pour qu'elle r\u00e9ponde \u00e0 la\nsp\u00e9cification demand\u00e9e.\n\nOn rappelle le principe du tri par insertion : on consid\u00e8re les \u00e9l\u00e9ments \u00e0 trier un par un,\nle premier \u00e9l\u00e9ment constituant, \u00e0 lui tout seul, un tableau tri\u00e9 de longueur 1. On range\nensuite le second \u00e9l\u00e9ment pour constituer un tableau tri\u00e9 de longueur 2, puis on range le\ntroisi\u00e8me \u00e9l\u00e9ment pour avoir un tableau tri\u00e9 de longueur 3 et ainsi de suite...\n\nA chaque \u00e9tape, le premier \u00e9l\u00e9ment du sous-tableau non tri\u00e9 est plac\u00e9 dans le sous-tableau\ndes \u00e9l\u00e9ments d\u00e9j\u00e0 tri\u00e9s de sorte que ce sous-tableau demeure tri\u00e9.\n\nLe principe du tri par insertion est donc d'ins\u00e9rer \u00e0 la n-i\u00e8me it\u00e9ration, le n-i\u00e8me \u00e9l\u00e9ment\n\u00e0 la bonne place.\n\n\n```python linenums='1'\ndef tri_insertion(tab):\n    '''Trie le tableau tab par ordre croissant\n    en appliquant l'algorithme de tri par insertion'''\n    n = len(tab)\n    for i in range(1, n):\n        valeur_insertion = ... \n        # la variable j sert \u00e0 d\u00e9terminer \n        # o\u00f9 placer la valeur \u00e0 ranger\n        j = ... \n        # tant qu'on n'a pas trouv\u00e9 la place de l'\u00e9l\u00e9ment \u00e0\n        # ins\u00e9rer on d\u00e9cale les valeurs du tableau vers la droite\n        while j &gt; ... and valeur_insertion &lt; tab[...]: \n            tab[j] = tab[j-1]\n            j = ... \n        tab[j] = ... \n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tab = [98, 12, 104, 23, 131, 9]\n&gt;&gt;&gt; tri_insertion(tab)\n&gt;&gt;&gt; tab\n[9, 12, 23, 98, 104, 131]\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-08","title":"\u25b6 Sujet 08","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-081","title":"Exercice 08.1","text":"<p>Exercice 08.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Le codage par diff\u00e9rence (delta encoding en anglais) permet de compresser un tableau de donn\u00e9es en indiquant pour chaque donn\u00e9e, sa diff\u00e9rence avec la pr\u00e9c\u00e9dente (plut\u00f4t que la donn\u00e9e elle-m\u00eame). On se retrouve alors avec un tableau de donn\u00e9es plus petit, n\u00e9cessitant moins de place en m\u00e9moire. Cette m\u00e9thode se r\u00e9v\u00e8le efficace lorsque les valeurs cons\u00e9cutives sont proches. </p> <p>Programmer la fonction <code>delta(liste)</code> qui prend en param\u00e8tre un tableau non vide de nombres entiers et qui renvoie un tableau contenant les valeurs enti\u00e8res compress\u00e9es \u00e0 l\u2019aide cette technique.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; delta([1000, 800, 802, 1000, 1003])\n[1000, -200, 2, 198, 3]\n&gt;&gt;&gt; delta([42])\n[42] \n</code></pre> \ud83d\udc0d Script Python<pre><code>def delta(tab):\n    diff = [tab[0]]\n    for i in range(1, len(tab)):\n        diff.append(tab[i] - tab[i-1])\n    return diff\n</code></pre> \ud83d\udccb Texte<pre><code>Le codage par diff\u00e9rence (*delta encoding* en anglais) permet de compresser un tableau de\ndonn\u00e9es en indiquant pour chaque donn\u00e9e, sa diff\u00e9rence avec la pr\u00e9c\u00e9dente (plut\u00f4t que la\ndonn\u00e9e elle-m\u00eame). On se retrouve alors avec un tableau de donn\u00e9es plus petit, n\u00e9cessitant\nmoins de place en m\u00e9moire. Cette m\u00e9thode se r\u00e9v\u00e8le efficace lorsque les valeurs cons\u00e9cutives\nsont proches.\n\nProgrammer la fonction `delta(liste)` qui prend en param\u00e8tre un tableau non vide de nombres entiers\net qui renvoie un tableau contenant les valeurs enti\u00e8res compress\u00e9es \u00e0 l\u2019aide cette technique.\n\nExemples :\n\n```python\n&gt;&gt;&gt; delta([1000, 800, 802, 1000, 1003])\n[1000, -200, 2, 198, 3]\n&gt;&gt;&gt; delta([42])\n[42] \n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-082","title":"Exercice 08.2","text":"<p>Exercice 08.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Une expression arithm\u00e9tique ne comportant que les quatre op\u00e9rations +, \u2212, \u00d7, \u00f7 peut \u00eatre repr\u00e9sent\u00e9e sous forme d\u2019arbre binaire. Les n\u0153uds internes sont des op\u00e9rateurs et les feuilles sont des nombres. Dans un tel arbre, la disposition des n\u0153uds joue le r\u00f4le des parenth\u00e8ses que nous connaissons bien.  </p> <p></p> <p>En parcourant en profondeur infixe l\u2019arbre binaire ci-dessus, on retrouve l\u2019expression not\u00e9e habituellement :  </p> \\[(3 \\times (8 + 7)) \u2212 (2 + 1)\\] <p>La classe <code>Expr</code> ci-apr\u00e8s permet d\u2019impl\u00e9menter une structure d\u2019arbre binaire pour repr\u00e9senter de telles expressions.</p> <p>Compl\u00e9ter la m\u00e9thode r\u00e9cursive <code>infixe</code> qui renvoie une cha\u00eene de caract\u00e8res contenant des parenth\u00e8ses repr\u00e9sentant l\u2019expression arithm\u00e9tique sur laquelle on l\u2019applique.</p> \ud83d\udc0d Script Python<pre><code>class Expr:\n    \"\"\"Classe impl\u00e9mentant un arbre d'expression.\"\"\"\n\n    def __init__(self, g, v, d):\n        \"\"\"un objet Expr poss\u00e8de 3 attributs :\n        - gauche : la sous-expression gauche ;\n        - valeur : la valeur de l'\u00e9tiquette, op\u00e9rande ou nombre ;\n        - droite : la sous-expression droite.\"\"\"\n        self.gauche = g\n        self.valeur = v\n        self.droite = d\n\n    def est_une_feuille(self):\n        \"\"\"renvoie True si et seulement \n        si le noeud est une feuille\"\"\"\n        return self.gauche is None and self.droite is None\n\n    def infixe(self):\n        \"\"\"renvoie la repr\u00e9sentation infixe de l'expression en\n        chaine de caract\u00e8res\"\"\"\n        s = ... \n        if self.gauche is not None:\n            s = '(' + s + ... .infixe() \n        s = s + ... \n        if ... is not None: \n            s = s + ... + ... \n        return s\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; a = Expr(Expr(None, 1, None), '+', Expr(None, 2, None))\n&gt;&gt;&gt; a.infixe()\n'(1+2)'\n&gt;&gt;&gt; b = Expr(Expr(Expr(None, 1, None), '+', Expr(None, 2, None)), '*', Expr(Expr(None, 3, None), '+', Expr(None, 4, None)))\n&gt;&gt;&gt; b.infixe()\n'((1+2)*(3+4))'\n&gt;&gt;&gt; e = Expr(Expr(Expr(None, 3, None), '*', Expr(Expr(None, 8, None), '+', Expr(None, 7, None))),\n'-', Expr(Expr(None, 2, None), '+', Expr(None, 1, None)))\n&gt;&gt;&gt; e.infixe()\n'((3*(8+7))-(2+1))'\n</code></pre> \ud83d\udc0d Script Python<pre><code>class Expr:\n    \"\"\"Classe impl\u00e9mentant un arbre d'expression.\"\"\"\n\n    def __init__(self, g, v, d):\n        \"\"\"un objet Expr poss\u00e8de 3 attributs :\n        - gauche : la sous-expression gauche ;\n        - valeur : la valeur de l'\u00e9tiquette, op\u00e9rande ou nombre ;\n        - droite : la sous-expression droite.\"\"\"\n        self.gauche = g\n        self.valeur = v\n        self.droite = d\n\n    def est_une_feuille(self):\n        \"\"\"renvoie True si et seulement \n        si le noeud est une feuille\"\"\"\n        return self.gauche is None and self.droite is None\n\n    def infixe(self):\n        \"\"\"renvoie la repr\u00e9sentation infixe de l'expression en\n        chaine de caract\u00e8res\"\"\"\n        s = '' \n        if self.gauche is not None:\n            s = '(' + s + self.gauche.infixe() \n        s = s + str(self.valeur) \n        if self.droite is not None: \n            s = s + self.droite.infixe() + ')' \n        return s\n</code></pre> Markdown<pre><code>Une expression arithm\u00e9tique ne comportant que les quatre op\u00e9rations +, \u2212, \u00d7, \u00f7 peut \u00eatre\nrepr\u00e9sent\u00e9e sous forme d\u2019arbre binaire. Les n\u0153uds internes sont des op\u00e9rateurs et les feuilles\nsont des nombres. Dans un tel arbre, la disposition des n\u0153uds joue le r\u00f4le des parenth\u00e8ses que\nnous connaissons bien.  \n\n![image](data2023/21_arbre.png){: .center width=30%}\n\nEn parcourant en profondeur infixe l\u2019arbre binaire ci-dessus, on\nretrouve l\u2019expression not\u00e9e habituellement :  \n\n\n$$(3 \\times (8 + 7)) \u2212 (2 + 1)$$\n\n\nLa classe `Expr` ci-apr\u00e8s permet d\u2019impl\u00e9menter une structure\nd\u2019arbre binaire pour repr\u00e9senter de telles expressions.\n\nCompl\u00e9ter la m\u00e9thode r\u00e9cursive `infixe` qui renvoie une cha\u00eene de caract\u00e8res contenant\ndes parenth\u00e8ses repr\u00e9sentant l\u2019expression arithm\u00e9tique sur laquelle on l\u2019applique.\n\n\n```python linenums='1'\nclass Expr:\n    \"\"\"Classe impl\u00e9mentant un arbre d'expression.\"\"\"\n\n    def __init__(self, g, v, d):\n        \"\"\"un objet Expr poss\u00e8de 3 attributs :\n        - gauche : la sous-expression gauche ;\n        - valeur : la valeur de l'\u00e9tiquette, op\u00e9rande ou nombre ;\n        - droite : la sous-expression droite.\"\"\"\n        self.gauche = g\n        self.valeur = v\n        self.droite = d\n\n    def est_une_feuille(self):\n        \"\"\"renvoie True si et seulement \n        si le noeud est une feuille\"\"\"\n        return self.gauche is None and self.droite is None\n\n    def infixe(self):\n        \"\"\"renvoie la repr\u00e9sentation infixe de l'expression en\n        chaine de caract\u00e8res\"\"\"\n        s = ... \n        if self.gauche is not None:\n            s = '(' + s + ... .infixe() \n        s = s + ... \n        if ... is not None: \n            s = s + ... + ... \n        return s\n</code></pre> <p>Exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; a = Expr(Expr(None, 1, None), '+', Expr(None, 2, None))\n&gt;&gt;&gt; a.infixe()\n'(1+2)'\n&gt;&gt;&gt; b = Expr(Expr(Expr(None, 1, None), '+', Expr(None, 2, None)), '*', Expr(Expr(None, 3, None), '+', Expr(None, 4, None)))\n&gt;&gt;&gt; b.infixe()\n'((1+2)*(3+4))'\n&gt;&gt;&gt; e = Expr(Expr(Expr(None, 3, None), '*', Expr(Expr(None, 8, None), '+', Expr(None, 7, None))),\n'-', Expr(Expr(None, 2, None), '+', Expr(None, 1, None)))\n&gt;&gt;&gt; e.infixe()\n'((3*(8+7))-(2+1))'\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-09","title":"\u25b6 Sujet 09","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-091","title":"Exercice 09.1","text":"<p>Exercice 09.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>On veut trier par ordre croissant les notes d\u2019une \u00e9valuation qui sont des nombres entiers compris entre 0 et 10 (inclus).</p> <p>Ces notes sont contenues dans un tableau <code>notes_eval</code> (type <code>list</code>)</p> <p>\u00c9crire une fonction <code>effectif_notes</code> prenant en param\u00e8tre le tableau <code>notes_eval</code> et renvoyant un tableau de longueur 11 tel que la valeur d\u2019indice <code>i</code> soit le nombre de notes valant <code>i</code> dans le tableau <code>notes_eval</code>.</p> <p>\u00c9crire ensuite une fonction <code>notes_triees</code> prenant en param\u00e8tre le tableau des effectifs des notes et renvoyant un tableau contenant les m\u00eames valeurs que <code>notes_eval</code> mais tri\u00e9es dans l\u2019ordre croissant.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; notes_eval = [2, 0, 5, 9, 6, 9, 10, 5, 7, 9, 9, 5, 0, 9, 6, 5, 4]\n&gt;&gt;&gt; eff = effectif_notes(notes_eval)\n&gt;&gt;&gt; eff\n[2, 0, 1, 0, 1, 4, 2, 1, 0, 5, 1]\n&gt;&gt;&gt; notes_triees(eff)\n[0, 0, 2, 4, 5, 5, 5, 5, 6, 6, 7, 9, 9, 9, 9, 9, 10]\n</code></pre> \ud83d\udc0d Script Python<pre><code>def effectif_notes(notes_eval):\n    tab = [0]*11\n    for note in notes_eval:\n        tab[note] += 1\n    return tab\n\ndef notes_triees(eff):\n    triees = []\n    for i in range(11):\n        if eff[i] != 0:\n            for _ in range(eff[i]):\n                triees.append(i)\n    return triees\n</code></pre> \ud83d\udccb Texte<pre><code>On veut trier par ordre croissant les notes d\u2019une \u00e9valuation qui sont des nombres entiers\ncompris entre 0 et 10 (inclus).\n\nCes notes sont contenues dans un tableau `notes_eval` (type `list`)\n\n\u00c9crire une fonction `effectif_notes` prenant en param\u00e8tre le tableau `notes_eval` et\nrenvoyant un tableau de longueur 11 tel que la valeur d\u2019indice `i` soit le nombre de notes\nvalant `i` dans le tableau `notes_eval`.\n\n\u00c9crire ensuite une fonction `notes_triees` prenant en param\u00e8tre le tableau des effectifs\ndes notes et renvoyant un tableau contenant les m\u00eames valeurs que `notes_eval` mais\ntri\u00e9es dans l\u2019ordre croissant.\n\nExemple :\n\n```python\n&gt;&gt;&gt; notes_eval = [2, 0, 5, 9, 6, 9, 10, 5, 7, 9, 9, 5, 0, 9, 6, 5, 4]\n&gt;&gt;&gt; eff = effectif_notes(notes_eval)\n&gt;&gt;&gt; eff\n[2, 0, 1, 0, 1, 4, 2, 1, 0, 5, 1]\n&gt;&gt;&gt; notes_triees(eff)\n[0, 0, 2, 4, 5, 5, 5, 5, 6, 6, 7, 9, 9, 9, 9, 9, 10]\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-092","title":"Exercice 09.2","text":"<p>Exercice 09.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>L\u2019objectif de cet exercice est d\u2019\u00e9crire deux fonctions r\u00e9cursives <code>dec_to_bin</code> et <code>bin_to_dec</code> assurant respectivement la conversion de l\u2019\u00e9criture d\u00e9cimale d\u2019un nombre entier vers son \u00e9criture en binaire et, r\u00e9ciproquement, la conversion de l\u2019\u00e9criture en binaire d\u2019un nombre vers son \u00e9criture d\u00e9cimale.</p> <p>Dans cet exercice, on s\u2019interdit l\u2019usage des fonctions Python <code>bin</code> et <code>int</code>.</p> <p>On rappelle sur l\u2019exemple ci-dessous une fa\u00e7on d\u2019obtenir l\u2019\u00e9criture en binaire du nombre 25 :</p> <p>\\(25 = 1 + 2 \\times 12\\) \\(\\phantom{25} = 1 + 2 \\times 12\\) \\(\\phantom{25} = 1 + 2 (0 + 2 \\times 6)\\) \\(\\phantom{25} = 1 + 2 (0 + 2 (0 + 2 \\times 3))\\) \\(\\phantom{25} = 1 + 2 (0 + 2 (0 + 2 (1 + 2 \\times 1)))\\) \\(\\phantom{25} = 1 \\times 2^0 + 0 \\times 2^1 + 0 \\times 2^2 + 1 \\times 2^3 + 1 \\times 2^4\\) </p> <p>L'\u00e9criture binaire de 25 est donc <code>11001</code>.</p> <p>0n rappelle \u00e9galement que :</p> <ul> <li><code>a // 2</code> renvoie le quotient de la division euclidienne de <code>a</code> par 2.</li> <li><code>a % 2</code> renvoie le reste dans la division euclidienne de <code>a</code> par 2.</li> </ul> <p>On indique enfin qu\u2019en Python si <code>mot = \"informatique\"</code> alors :</p> <ul> <li><code>mot[-1]</code> renvoie <code>'e'</code>, c\u2019est-\u00e0-dire le dernier caract\u00e8re de la cha\u00eene de caract\u00e8res <code>mot</code>.</li> <li><code>mot[:-1]</code> renvoie <code>'informatiqu'</code> , c\u2019est-\u00e0-dire l\u2019ensemble de la cha\u00eene de caract\u00e8res <code>mot</code> priv\u00e9e de son dernier caract\u00e8re.</li> </ul> <p>Compl\u00e9ter, puis tester, les codes de deux fonctions ci-dessous.  On pr\u00e9cise que la fonction r\u00e9cursive <code>dec_to_bin</code> prend en param\u00e8tre un nombre entier et renvoie une cha\u00eene de caract\u00e8res contenant l\u2019\u00e9criture en binaire du nombre pass\u00e9 en param\u00e8tre.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dec_to_bin(25)\n'11001'\n</code></pre> <p>La fonction r\u00e9cursive <code>bin_to_dec</code> prend en param\u00e8tre une cha\u00eene de caract\u00e8res repr\u00e9sentant l\u2019\u00e9criture d\u2019un nombre en binaire et renvoie l\u2019\u00e9criture d\u00e9cimale de ce nombre.</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; bin_to_dec('101010')\n42\n</code></pre> \ud83d\udc0d Script Python<pre><code>def dec_to_bin(nb_dec):\n    q, r = nb_dec // 2, nb_dec % 2\n    if q == ...: \n        return ... \n    else:\n        return dec_to_bin(...) + ... \n\ndef bin_to_dec(nb_bin):\n    if len(nb_bin) == 1:\n        if ... == '0': \n            return 0\n        else:\n            return ... \n    else:\n        if nb_bin[-1] == '0':\n            bit_droit = 0\n        else:\n            ...\n        return ... * bin_to_dec(nb_bin[:-1]) + ... \n</code></pre> \ud83d\udc0d Script Python<pre><code>def dec_to_bin(nb_dec):\n    q, r = nb_dec // 2, nb_dec % 2\n    if q == 0: \n        return str(r) \n    else:\n        return dec_to_bin(q) + str(r) \n\ndef bin_to_dec(nb_bin):\n    if len(nb_bin) == 1:\n        if nb_bin == '0': \n            return 0\n        else:\n            return 1 \n    else:\n        if nb_bin[-1] == '0':\n            bit_droit = 0\n        else:\n            bit_droit = 1\n        return 2 * bin_to_dec(nb_bin[:-1]) + bit_droit\n</code></pre> Markdown<pre><code>L\u2019objectif de cet exercice est d\u2019\u00e9crire deux fonctions r\u00e9cursives `dec_to_bin` et\n`bin_to_dec` assurant respectivement la conversion de l\u2019\u00e9criture d\u00e9cimale d\u2019un nombre\nentier vers son \u00e9criture en binaire et, r\u00e9ciproquement, la conversion de l\u2019\u00e9criture en\nbinaire d\u2019un nombre vers son \u00e9criture d\u00e9cimale.\n\nDans cet exercice, on s\u2019interdit l\u2019usage des fonctions Python `bin` et `int`.\n\nOn rappelle sur l\u2019exemple ci-dessous une fa\u00e7on d\u2019obtenir l\u2019\u00e9criture en binaire du\nnombre 25 :\n\n$25 = 1 + 2 \\times 12$  \n$\\phantom{25} = 1 + 2 \\times 12$  \n$\\phantom{25} = 1 + 2 (0 + 2 \\times 6)$  \n$\\phantom{25} = 1 + 2 (0 + 2 (0 + 2 \\times 3))$     \n$\\phantom{25} = 1 + 2 (0 + 2 (0 + 2 (1 + 2 \\times 1)))$   \n$\\phantom{25} = 1 \\times 2^0 + 0 \\times 2^1 + 0 \\times 2^2 + 1 \\times 2^3 + 1 \\times 2^4$   \n\nL'\u00e9criture binaire de 25 est donc ```11001```.\n\n0n rappelle \u00e9galement que :\n\n- `a // 2` renvoie le quotient de la division euclidienne de `a` par 2.\n- ` a % 2` renvoie le reste dans la division euclidienne de `a` par 2.\n\nOn indique enfin qu\u2019en Python si `mot = \"informatique\"` alors :\n\n- `mot[-1]` renvoie `'e'`, c\u2019est-\u00e0-dire le dernier caract\u00e8re de la cha\u00eene de caract\u00e8res `mot`.\n- `mot[:-1]` renvoie `'informatiqu'` , c\u2019est-\u00e0-dire l\u2019ensemble de la cha\u00eene de\ncaract\u00e8res `mot` priv\u00e9e de son dernier caract\u00e8re.\n\nCompl\u00e9ter, puis tester, les codes de deux fonctions ci-dessous. \nOn pr\u00e9cise que la fonction r\u00e9cursive `dec_to_bin` prend en param\u00e8tre un nombre entier\net renvoie une cha\u00eene de caract\u00e8res contenant l\u2019\u00e9criture en binaire du nombre pass\u00e9 en\nparam\u00e8tre.\n\nExemple :\n\n```python\n&gt;&gt;&gt; dec_to_bin(25)\n'11001'\n</code></pre> <p>La fonction r\u00e9cursive <code>bin_to_dec</code> prend en param\u00e8tre une cha\u00eene de caract\u00e8res repr\u00e9sentant l\u2019\u00e9criture d\u2019un nombre en binaire et renvoie l\u2019\u00e9criture d\u00e9cimale de ce nombre.</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; bin_to_dec('101010')\n42\n</code></pre> <p>\ud83d\udc0d Script Python<pre><code>def dec_to_bin(nb_dec):\n    q, r = nb_dec // 2, nb_dec % 2\n    if q == ...: \n        return ... \n    else:\n        return dec_to_bin(...) + ... \n\ndef bin_to_dec(nb_bin):\n    if len(nb_bin) == 1:\n        if ... == '0': \n            return 0\n        else:\n            return ... \n    else:\n        if nb_bin[-1] == '0':\n            bit_droit = 0\n        else:\n            ...\n        return ... * bin_to_dec(nb_bin[:-1]) + ... \n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-10","title":"\u25b6 Sujet 10","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-101","title":"Exercice 10.1","text":"<p>Exercice 10.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Dans cet exercice on cherche \u00e0 calculer la moyenne pond\u00e9r\u00e9e d\u2019un \u00e9l\u00e8ve dans une mati\u00e8re donn\u00e9e. Chaque note est associ\u00e9e \u00e0 un coefficient qui la pond\u00e8re.</p> <p>Par exemple, si ses notes sont : 14 avec coefficient 3, 12 avec coefficient 1 et 16 avec coeffi- cient 2, sa moyenne pond\u00e9r\u00e9e sera donn\u00e9e par</p> \\[\\dfrac{14 \\times 3 + 12 \\times 1 + 16 \\times 2}{3+1+2}=14,333... \\] <p>\u00c9crire une fonction <code>moyenne</code> :</p> <ul> <li>qui prend en param\u00e8tre une liste notes non vide de tuples \u00e0 deux \u00e9l\u00e9ments entiers de la forme <code>(note, coefficient)</code> (<code>int</code> ou <code>float</code>) positifs ou nuls ;</li> <li>et qui renvoie la moyenne pond\u00e9r\u00e9e des notes de la liste sous forme de flottant si la somme des coefficients est non nulle, <code>None</code> sinon.</li> </ul> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; moyenne([(8, 2), (12, 0), (13.5, 1), (5, 0.5)])\n9.142857142857142\n&gt;&gt;&gt; moyenne([(3, 0), (5, 0)])\nNone\n</code></pre> \ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    somme = 0\n    coeffs = 0\n    for couple in tab:\n        somme += couple[0] * couple[1]\n        coeffs += couple[1]\n    if coeffs == 0:\n        return None\n    return somme / coeffs\n</code></pre> \ud83d\udccb Texte<pre><code>Dans cet exercice on cherche \u00e0 calculer la moyenne pond\u00e9r\u00e9e d\u2019un \u00e9l\u00e8ve dans une mati\u00e8re\ndonn\u00e9e. Chaque note est associ\u00e9e \u00e0 un coefficient qui la pond\u00e8re.\n\nPar exemple, si ses notes sont : 14 avec coefficient 3, 12 avec coefficient 1 et 16 avec coeffi-\ncient 2, sa moyenne pond\u00e9r\u00e9e sera donn\u00e9e par\n\n$$\\dfrac{14 \\times 3 + 12 \\times 1 + 16 \\times 2}{3+1+2}=14,333... $$\n\n\u00c9crire une fonction `moyenne` :\n\n- qui prend en param\u00e8tre une liste notes non vide de tuples \u00e0 deux \u00e9l\u00e9ments entiers\nde la forme `(note, coefficient)` (`int` ou `float`) positifs ou nuls ;\n- et qui renvoie la moyenne pond\u00e9r\u00e9e des notes de la liste sous forme de flottant si la\nsomme des coefficients est non nulle, `None` sinon.\n\nExemple :\n\n```python\n&gt;&gt;&gt; moyenne([(8, 2), (12, 0), (13.5, 1), (5, 0.5)])\n9.142857142857142\n&gt;&gt;&gt; moyenne([(3, 0), (5, 0)])\nNone\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-102","title":"Exercice 10.2","text":"<p>Exercice 10.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p> On travaille sur des dessins en noir et blanc obtenu \u00e0 partir de pixels noirs et blancs : La figure \u00ab c\u0153ur \u00bb ci-dessus va servir d\u2019exemple. On la repr\u00e9sente par une grille de nombres, c\u2019est-\u00e0-dire par une liste compos\u00e9e de sous-listes de m\u00eame longueurs. Chaque sous-liste repr\u00e9sentera donc une ligne du dessin.</p> <p>Dans le code ci-dessous, la fonction <code>affiche</code> permet d\u2019afficher le dessin. Les pixels noirs (1 dans la grille) seront repr\u00e9sent\u00e9s par le caract\u00e8re \"*\" et les blancs (0 dans la grille) par deux espaces.</p> <p>La fonction <code>liste_zoom</code> prend en arguments une liste <code>liste_depart</code> et un entier <code>k</code>. Elle renvoie une liste o\u00f9 chaque \u00e9l\u00e9ment de <code>liste_depart</code> est dupliqu\u00e9 <code>k</code> fois.</p> <p>La fonction <code>dessin_zoom</code> prend en argument la grille <code>dessin</code> et renvoie une grille o\u00f9 toutes les lignes de <code>dessin</code> sont zoom\u00e9es <code>k</code> fois et r\u00e9p\u00e9t\u00e9es <code>k</code> fois.</p> <p>Compl\u00e9ter les fonctions <code>liste_zoom</code> et <code>dessin_zoom</code> du code suivant :</p> \ud83d\udc0d Script Python<pre><code>def affiche(dessin):\n    ''' affichage d'une grille : les 1 sont repr\u00e9sent\u00e9s par \n        des \"*\" , les 0 par un espace \" \" '''\n    for ligne in dessin:\n        affichage = ''\n        for col in ligne:\n            if col == 1:\n                affichage = affichage + \"*\"\n            else:\n                affichage = affichage + \" \"\n        print(affichage)\n\n\ndef liste_zoom(liste_depart,k):\n    '''renvoie une liste contenant k fois chaque \u00e9l\u00e9ment de\n       liste_depart'''\n    liste_zoomee = ... \n    for elt in ... : \n        for i in range(k):\n            ...\n    return liste_zoomee\n\ndef dessin_zoom(grille,k):\n    '''renvoie une grille o\u00f9 les lignes sont zoom\u00e9es k fois \n       ET r\u00e9p\u00e9t\u00e9es k fois'''\n    grille_zoomee=[]\n    for ligne in grille:\n        ligne_zoomee = ... \n        for i in range(k):\n            ... .append(...) \n    return grille_zoomee\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; coeur = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \n        [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], \n        [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], \n        [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], \n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \n        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], \n        [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], \n        [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], \n        [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], \n        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n&gt;&gt;&gt; affiche(coeur)\n\n       * *       * *      \n     *     *   *     *    \n   *         *         *  \n   *                   *  \n   *                   *  \n     *               *    \n       *           *      \n         *       *        \n           *   *          \n             *            \n\n&gt;&gt;&gt; affiche(dessin_zoom(coeur,2))\n\n\n             * * * *             * * * *            \n             * * * *             * * * *            \n         * *         * *     * *         * *        \n         * *         * *     * *         * *        \n     * *                 * *                 * *    \n     * *                 * *                 * *    \n     * *                                     * *    \n     * *                                     * *    \n     * *                                     * *    \n     * *                                     * *    \n         * *                             * *        \n         * *                             * *        \n             * *                     * *            \n             * *                     * *            \n                 * *             * *                \n                 * *             * *                \n                     * *     * *                    \n                     * *     * *                    \n                         * *                        \n                         * *                        \n\n\n&gt;&gt;&gt; liste_zoom([1,2,3],3)\n[1, 1, 1, 2, 2, 2, 3, 3, 3]\n</code></pre> \ud83d\udc0d Script Python<pre><code>coeur = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \n        [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], \n        [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], \n        [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], \n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \n        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], \n        [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], \n        [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], \n        [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], \n        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n\ndef affiche(dessin):\n    ''' affichage d'une grille : les 1 sont repr\u00e9sent\u00e9s par \n    des \" *\" , les 0 par deux espaces \"  \" '''\n    for ligne in dessin:\n        affichage = ''\n        for col in ligne:\n            if col == 1:\n                affichage = affichage + \"*\"\n            else:\n                affichage = affichage + \" \"\n        print(affichage)\n\n\ndef liste_zoom(liste_depart, k):\n    '''renvoie une liste contenant k fois chaque \n    \u00e9l\u00e9ment de liste_depart'''\n    liste_zoomee = []\n    for elt in liste_depart:\n        for i in range(k):\n            liste_zoomee.append(elt)\n    return liste_zoomee\n\ndef dessin_zoom(grille, k):\n    '''renvoie une grille o\u00f9 les lignes sont zoom\u00e9es k fois \n    ET r\u00e9p\u00e9t\u00e9es k fois'''\n    grille_zoomee = []\n    for ligne in grille:\n        liste_zoomee = liste_zoom(ligne, k)\n        for i in range(k):\n            grille_zoomee.append(liste_zoomee)\n    return grille_zoomee\n</code></pre> Markdown<pre><code>![image](data2023/03_coeur.png){: .center width=30%}\nOn travaille sur des dessins en noir et blanc obtenu \u00e0 partir de pixels noirs et blancs :\nLa figure \u00ab c\u0153ur \u00bb ci-dessus va servir d\u2019exemple.\nOn la repr\u00e9sente par une grille de nombres, c\u2019est-\u00e0-dire par une liste compos\u00e9e de sous-listes de m\u00eame longueurs.\nChaque sous-liste repr\u00e9sentera donc une ligne du dessin.\n\nDans le code ci-dessous, la fonction `affiche` permet d\u2019afficher le dessin. Les pixels noirs\n(1 dans la grille) seront repr\u00e9sent\u00e9s par le caract\u00e8re \"*\" et les blancs (0 dans la grille) par\ndeux espaces.\n\nLa fonction `liste_zoom` prend en arguments une liste `liste_depart` et un entier `k`. Elle\nrenvoie une liste o\u00f9 chaque \u00e9l\u00e9ment de `liste_depart` est dupliqu\u00e9 `k` fois.\n\nLa fonction `dessin_zoom` prend en argument la grille `dessin` et renvoie une grille o\u00f9\ntoutes les lignes de `dessin` sont zoom\u00e9es `k` fois et r\u00e9p\u00e9t\u00e9es `k` fois.\n\nCompl\u00e9ter les fonctions `liste_zoom` et `dessin_zoom` du code suivant :\n\n```python linenums='1'\ndef affiche(dessin):\n    ''' affichage d'une grille : les 1 sont repr\u00e9sent\u00e9s par \n        des \"*\" , les 0 par un espace \" \" '''\n    for ligne in dessin:\n        affichage = ''\n        for col in ligne:\n            if col == 1:\n                affichage = affichage + \"*\"\n            else:\n                affichage = affichage + \" \"\n        print(affichage)\n\n\ndef liste_zoom(liste_depart,k):\n    '''renvoie une liste contenant k fois chaque \u00e9l\u00e9ment de\n       liste_depart'''\n    liste_zoomee = ... \n    for elt in ... : \n        for i in range(k):\n            ...\n    return liste_zoomee\n\ndef dessin_zoom(grille,k):\n    '''renvoie une grille o\u00f9 les lignes sont zoom\u00e9es k fois \n       ET r\u00e9p\u00e9t\u00e9es k fois'''\n    grille_zoomee=[]\n    for ligne in grille:\n        ligne_zoomee = ... \n        for i in range(k):\n            ... .append(...) \n    return grille_zoomee\n</code></pre> <p>Exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; coeur = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \n        [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0], \n        [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], \n        [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], \n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], \n        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], \n        [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], \n        [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], \n        [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], \n        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], \n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n&gt;&gt;&gt; affiche(coeur)\n\n       * *       * *      \n     *     *   *     *    \n   *         *         *  \n   *                   *  \n   *                   *  \n     *               *    \n       *           *      \n         *       *        \n           *   *          \n             *            \n\n&gt;&gt;&gt; affiche(dessin_zoom(coeur,2))\n\n\n             * * * *             * * * *            \n             * * * *             * * * *            \n         * *         * *     * *         * *        \n         * *         * *     * *         * *        \n     * *                 * *                 * *    \n     * *                 * *                 * *    \n     * *                                     * *    \n     * *                                     * *    \n     * *                                     * *    \n     * *                                     * *    \n         * *                             * *        \n         * *                             * *        \n             * *                     * *            \n             * *                     * *            \n                 * *             * *                \n                 * *             * *                \n                     * *     * *                    \n                     * *     * *                    \n                         * *                        \n                         * *                        \n\n\n&gt;&gt;&gt; liste_zoom([1,2,3],3)\n[1, 1, 1, 2, 2, 2, 3, 3, 3]\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-11","title":"\u25b6 Sujet 11","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-111","title":"Exercice 11.1","text":"<p>Exercice 11.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Dans cet exercice, on consid\u00e8re des phrases compos\u00e9es de mots.</p> <ul> <li> <p>On appelle \u00ab mot \u00bb une cha\u00eene de caract\u00e8res compos\u00e9e avec des caract\u00e8res choisis parmi les 26 lettres minuscules ou majuscules de l'alphabet,</p> </li> <li> <p>On appelle phrase une cha\u00eene de caract\u00e8res :</p> <ul> <li>compos\u00e9e avec un ou plusieurs mots s\u00e9par\u00e9s entre eux par un seul caract\u00e8re espace <code>' '</code>,</li> <li>se finissant :<ul> <li>soit par un point <code>'.'</code> qui est alors coll\u00e9 au dernier mot,</li> <li>soit par un point d'exclamation <code>'!'</code> ou d'interrogation <code>'?'</code> qui est alors s\u00e9par\u00e9 du dernier mot par un seul caract\u00e8re espace <code>' '</code>.</li> </ul> </li> </ul> </li> </ul> <p>Voici deux exemples de phrases :</p> <ul> <li>'Cet exercice est simple.'</li> <li>'Le point d exclamation est separe !'</li> </ul> <p>Apr\u00e8s avoir remarqu\u00e9 le lien entre le nombre de mots et le nombres de caract\u00e8res espace dans une phrase, programmer une fonction <code>nombre_de_mots</code> qui prend en param\u00e8tre une phrase et renvoie le nombre de mots pr\u00e9sents dans cette phrase.</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; nombre_de_mots('Cet exercice est simple.')\n4\n&gt;&gt;&gt; nombre_de_mots('Le point d exclamation est s\u00e9par\u00e9 !')\n6\n&gt;&gt;&gt; nombre_de_mots('Combien de mots y a t il dans cette phrase ?')\n10\n&gt;&gt;&gt; nombre_de_mots('Fin.')\n1\n</code></pre> \ud83d\udc0d Script Python<pre><code>def nombre_de_mots(phrase):\n    nb_mots = 0\n    for caractere in phrase:\n        if caractere == ' ' or caractere == '.':\n            nb_mots += 1\n    return nb_mots\n</code></pre> \ud83d\udccb Texte<pre><code>Dans cet exercice, on consid\u00e8re des phrases compos\u00e9es de mots.\n\n- On appelle \u00ab mot \u00bb une cha\u00eene de caract\u00e8res compos\u00e9e avec des caract\u00e8res choisis\nparmi les 26 lettres minuscules ou majuscules de l'alphabet,\n\n- On appelle *phrase* une cha\u00eene de caract\u00e8res :\n    - compos\u00e9e avec un ou plusieurs *mots* s\u00e9par\u00e9s entre eux par un seul\ncaract\u00e8re espace `' '`,\n    - se finissant :\n        - soit par un point `'.'` qui est alors coll\u00e9 au dernier mot,\n        - soit par un point d'exclamation `'!'` ou d'interrogation `'?'` qui est alors\ns\u00e9par\u00e9 du dernier mot par un seul caract\u00e8re espace `' '`.\n\nVoici deux exemples de phrases :\n\n- 'Cet exercice est simple.'\n- 'Le point d exclamation est separe !'\n\nApr\u00e8s avoir remarqu\u00e9 le lien entre le nombre de mots et le nombres de caract\u00e8res espace\ndans une phrase, programmer une fonction `nombre_de_mots` qui prend en param\u00e8tre une\nphrase et renvoie le nombre de mots pr\u00e9sents dans cette phrase.\n\n```python\n&gt;&gt;&gt; nombre_de_mots('Cet exercice est simple.')\n4\n&gt;&gt;&gt; nombre_de_mots('Le point d exclamation est s\u00e9par\u00e9 !')\n6\n&gt;&gt;&gt; nombre_de_mots('Combien de mots y a t il dans cette phrase ?')\n10\n&gt;&gt;&gt; nombre_de_mots('Fin.')\n1\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-112","title":"Exercice 11.2","text":"<p>Exercice 11.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Un arbre binaire de recherche est soit vide, repr\u00e9sent\u00e9 en Python par la valeur None, soit un n\u0153ud, contenant une \u00e9tiquette et deux sous-arbres gauche et droit et repr\u00e9sent\u00e9 par une instance de la classe Noeud donn\u00e9e ci-dessous.</p> <p>On consid\u00e8re ici que les \u00e9tiquettes des n\u0153uds sont des entiers et que les arbres binaires de recherche consid\u00e9r\u00e9s ne contiennent pas de doublons.</p> \ud83d\udc0d Script Python<pre><code>class Noeud:\n    def __init__(self, etiquette):\n        '''M\u00e9thode constructeur pour la classe Noeud.\n        Cr\u00e9e une feuille d'\u00e9tiquette donn\u00e9e.'''\n        self.etiquette = etiquette\n        self.gauche = None\n        self.droit = None\n\n    def inserer(self, cle):\n        '''Ins\u00e8re la cl\u00e9 dans l'arbre binaire de recherche\n        en pr\u00e9servant sa structure.'''\n        if cle &lt; self.etiquette:\n            if self.gauche != None:\n                ...\n            else:\n                self.gauche = ... \n        else:\n            ...\n                ...\n            else:\n                ... = Noeud(cle) \n</code></pre> <p>Compl\u00e9ter la m\u00e9thode r\u00e9cursive <code>inserer</code> afin qu\u2019elle permette d\u2019ins\u00e9rer une cl\u00e9 dans l\u2019arbre binaire de recherche non vide sur lequel on l\u2019appelle.</p> <p>Voici un exemple d'utilisation :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; arbre = Noeud(7)\n&gt;&gt;&gt; for cle in (3, 9, 1, 6):\n        arbre.inserer(cle)\n&gt;&gt;&gt; arbre.gauche.etiquette\n3\n&gt;&gt;&gt; arbre.droit.etiquette\n9\n&gt;&gt;&gt; arbre.gauche.gauche.etiquette\n1\n&gt;&gt;&gt; arbre.gauche.droit.etiquette\n6\n</code></pre> \ud83d\udc0d Script Python<pre><code>class Noeud:\n    def __init__(self, etiquette):\n        '''M\u00e9thode constructeur pour la classe Noeud.\n        Cr\u00e9e une feuille d'\u00e9tiquette donn\u00e9e.'''\n        self.etiquette = etiquette\n        self.gauche = None\n        self.droit = None\n\n    def inserer(self, cle):\n        '''Ins\u00e8re la cl\u00e9 dans l'arbre binaire de recherche\n        en pr\u00e9servant sa structure.'''\n        if cle &lt; self.etiquette:\n            if self.gauche != None:\n                self.gauche.inserer(cle)\n            else:\n                self.gauche = Noeud(cle) \n        else:\n            if self.droit != None:\n                self.droit.inserer(cle)\n            else:\n                self.droit = Noeud(cle) \n</code></pre> Markdown<pre><code>Un arbre binaire de recherche est soit vide, repr\u00e9sent\u00e9 en Python par la valeur None, soit\nun n\u0153ud, contenant une \u00e9tiquette et deux sous-arbres gauche et droit et repr\u00e9sent\u00e9 par\nune instance de la classe Noeud donn\u00e9e ci-dessous.\n\nOn consid\u00e8re ici que les \u00e9tiquettes des n\u0153uds sont des entiers et que les arbres binaires de\nrecherche consid\u00e9r\u00e9s ne contiennent pas de doublons.\n\n```python linenums='1'\nclass Noeud:\n    def __init__(self, etiquette):\n        '''M\u00e9thode constructeur pour la classe Noeud.\n        Cr\u00e9e une feuille d'\u00e9tiquette donn\u00e9e.'''\n        self.etiquette = etiquette\n        self.gauche = None\n        self.droit = None\n\n    def inserer(self, cle):\n        '''Ins\u00e8re la cl\u00e9 dans l'arbre binaire de recherche\n        en pr\u00e9servant sa structure.'''\n        if cle &lt; self.etiquette:\n            if self.gauche != None:\n                ...\n            else:\n                self.gauche = ... \n        else:\n            ...\n                ...\n            else:\n                ... = Noeud(cle) \n</code></pre> <p>Compl\u00e9ter la m\u00e9thode r\u00e9cursive <code>inserer</code> afin qu\u2019elle permette d\u2019ins\u00e9rer une cl\u00e9 dans l\u2019arbre binaire de recherche non vide sur lequel on l\u2019appelle.</p> <p>Voici un exemple d'utilisation :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; arbre = Noeud(7)\n&gt;&gt;&gt; for cle in (3, 9, 1, 6):\n        arbre.inserer(cle)\n&gt;&gt;&gt; arbre.gauche.etiquette\n3\n&gt;&gt;&gt; arbre.droit.etiquette\n9\n&gt;&gt;&gt; arbre.gauche.gauche.etiquette\n1\n&gt;&gt;&gt; arbre.gauche.droit.etiquette\n6\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-12","title":"\u25b6 Sujet 12","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-121","title":"Exercice 12.1","text":"<p>Exercice 12.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>tri_selection</code> qui prend en param\u00e8tre un tableau <code>tab</code> de nombres entiers (type <code>list</code>) et qui le modifie afin qu\u2019il soit tri\u00e9 par ordre croissant.</p> <p>On utilisera l\u2019algorithme suivant :</p> <ul> <li>on recherche le plus petit \u00e9l\u00e9ment du tableau, en la parcourant du rang 0 au dernier rang, et on l\u2019\u00e9change avec l\u2019\u00e9l\u00e9ment d\u2019indice 0 ;</li> <li>on recherche ensuite le plus petit \u00e9l\u00e9ment du tableau restreint du rang 1 au dernier rang, et on l\u2019\u00e9change avec l\u2019\u00e9l\u00e9ment d\u2019indice 1 ;</li> <li>on continue de cette fa\u00e7on jusqu\u2019\u00e0 ce que le tableau soit enti\u00e8rement tri\u00e9.</li> </ul> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tab = [1, 52, 6, -9, 12]\n&gt;&gt;&gt; tri_selection(tab)\n&gt;&gt;&gt; tab\n[-9, 1, 6, 12, 52]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def tri_selection(tab):\n    for i in range(len(tab)-1):\n        indice_min = i\n        for j in range(i+1, len(tab)):\n            if tab[j] &lt; tab[indice_min]:\n                indice_min = j\n        tab[i], tab[indice_min] = tab[indice_min], tab[i]\n    return tab\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `tri_selection` qui prend en param\u00e8tre un tableau `tab` de nombres\nentiers (type `list`) et qui le modifie afin qu\u2019il soit tri\u00e9 par ordre croissant.\n\nOn utilisera l\u2019algorithme suivant :\n\n- on recherche le plus petit \u00e9l\u00e9ment du tableau, en la parcourant du rang 0 au dernier\nrang, et on l\u2019\u00e9change avec l\u2019\u00e9l\u00e9ment d\u2019indice 0 ;\n- on recherche ensuite le plus petit \u00e9l\u00e9ment du tableau restreint du rang 1 au dernier\nrang, et on l\u2019\u00e9change avec l\u2019\u00e9l\u00e9ment d\u2019indice 1 ;\n- on continue de cette fa\u00e7on jusqu\u2019\u00e0 ce que le tableau soit enti\u00e8rement tri\u00e9.\n\nExemple :\n```python\n&gt;&gt;&gt; tab = [1, 52, 6, -9, 12]\n&gt;&gt;&gt; tri_selection(tab)\n&gt;&gt;&gt; tab\n[-9, 1, 6, 12, 52]\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-122","title":"Exercice 12.2","text":"<p>Exercice 12.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Le jeu du \u00ab plus ou moins \u00bb consiste \u00e0 deviner un nombre entier choisi entre 1 et 99.</p> <p>Une \u00e9l\u00e8ve de NSI d\u00e9cide de le coder en langage Python de la mani\u00e8re suivante :</p> <ul> <li>le programme g\u00e9n\u00e8re un nombre entier al\u00e9atoire compris entre 1 et 99 ;</li> <li>si la proposition de l\u2019utilisatrice est plus petite que le nombre cherch\u00e9, l\u2019utilisatrice en est avertie. Elle peut alors en tester un autre ;</li> <li>si la proposition de l\u2019utilisatrice est plus grande que le nombre cherch\u00e9, l\u2019utilisatrice en est avertie. Elle peut alors en tester un autre ;</li> <li>si l\u2019utilisatrice trouve le bon nombre en 10 essais ou moins, elle gagne ;</li> <li>si l\u2019utilisatrice a fait plus de 10 essais sans trouver le bon nombre, elle perd.</li> </ul> <p>La fonction <code>randint</code> est utilis\u00e9e. Si a et b sont des entiers tels que <code>a &lt;= b</code>, <code>randint(a,b)</code> renvoie un nombre entier compris entre <code>a</code> et <code>b</code>.</p> <p>Compl\u00e9ter le code ci-dessous et le tester :</p> \ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef plus_ou_moins():\n    nb_mystere = randint(1,...)\n    nb_test = int(input(\"Proposez un nombre entre 1 et 99 : \"))\n    compteur = ...\n\n    while nb_mystere != ... and compteur &lt; ... :\n        compteur = compteur + ...\n        if nb_mystere ... nb_test:\n            nb_test = int(input(\"Trop petit ! Testez encore : \"))\n        else:\n            nb_test = int(input(\"Trop grand ! Testez encore : \"))\n\n    if nb_mystere == nb_test:\n        print (\"Bravo ! Le nombre \u00e9tait \",...)\n        print(\"Nombre d'essais: \",...)\n    else:\n        print (\"Perdu ! Le nombre \u00e9tait \",...)\n</code></pre> \ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef plus_ou_moins():\n    nb_mystere = randint(1,99)\n    nb_test = int(input('Proposez un nombre entre 1 et 99 : '))\n    compteur = 1\n\n    while nb_mystere != nb_test and compteur &lt; 10 :\n        compteur = compteur + 1\n        if nb_mystere &gt; nb_test:\n            nb_test = int(input('Trop petit ! Testez encore : '))\n        else:\n            nb_test = int(input('Trop grand ! Testez encore : '))\n\n    if nb_mystere == nb_test:\n        print ('Bravo ! Le nombre \u00e9tait ', nb_mystere)\n        print('Nombre d essais: ', compteur)\n    else:\n        print ('Perdu ! Le nombre \u00e9tait ', nb_mystere)\n</code></pre> <p>Markdown<pre><code>Le jeu du \u00ab plus ou moins \u00bb consiste \u00e0 deviner un nombre entier choisi entre 1 et 99.\n\nUne \u00e9l\u00e8ve de NSI d\u00e9cide de le coder en langage Python de la mani\u00e8re suivante :\n\n- le programme g\u00e9n\u00e8re un nombre entier al\u00e9atoire compris entre 1 et 99 ;\n- si la proposition de l\u2019utilisatrice est plus petite que le nombre cherch\u00e9, l\u2019utilisatrice en\nest avertie. Elle peut alors en tester un autre ;\n- si la proposition de l\u2019utilisatrice est plus grande que le nombre cherch\u00e9, l\u2019utilisatrice en\nest avertie. Elle peut alors en tester un autre ;\n- si l\u2019utilisatrice trouve le bon nombre en 10 essais ou moins, elle gagne ;\n- si l\u2019utilisatrice a fait plus de 10 essais sans trouver le bon nombre, elle perd.\n\nLa fonction `randint` est utilis\u00e9e.  \nSi a et b sont des entiers tels que `a &lt;= b`, `randint(a,b)` renvoie un\nnombre entier compris entre `a` et `b`.\n\n\nCompl\u00e9ter le code ci-dessous et le tester :\n\n```python linenums='1'\nfrom random import randint\n\ndef plus_ou_moins():\n    nb_mystere = randint(1,...)\n    nb_test = int(input(\"Proposez un nombre entre 1 et 99 : \"))\n    compteur = ...\n\n    while nb_mystere != ... and compteur &lt; ... :\n        compteur = compteur + ...\n        if nb_mystere ... nb_test:\n            nb_test = int(input(\"Trop petit ! Testez encore : \"))\n        else:\n            nb_test = int(input(\"Trop grand ! Testez encore : \"))\n\n    if nb_mystere == nb_test:\n        print (\"Bravo ! Le nombre \u00e9tait \",...)\n        print(\"Nombre d'essais: \",...)\n    else:\n        print (\"Perdu ! Le nombre \u00e9tait \",...)\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-13","title":"\u25b6 Sujet 13","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-131","title":"Exercice 13.1","text":"<p>Exercice 13.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>elt</code> un nombre entier et <code>tab</code> un tableau de nombres entiers (type <code>list</code>), et qui renvoie l\u2019indice de la premi\u00e8re occurrence de <code>elt</code> dans <code>tab</code> si <code>elt</code> est dans <code>tab</code> et <code>None</code> sinon.</p> <p>L\u2019objectif de cet exercice est de parcourir un tableau, il est interdit d\u2019utiliser la m\u00e9thode <code>index</code> des listes Python.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(1, [2, 3, 4]) # renvoie None\n&gt;&gt;&gt; recherche(1, [10, 12, 1, 56])\n2\n&gt;&gt;&gt; recherche(50, [1, 50, 1])\n1\n&gt;&gt;&gt; recherche(15, [8, 9, 10, 15])\n3\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(elt, tab):\n    for i in range(len(tab)):\n        if tab[i] == elt:\n            return i        \n    return None         \n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `recherche` qui prend en param\u00e8tres `elt` un nombre entier et `tab`\nun tableau de nombres entiers (type `list`), et qui renvoie l\u2019indice de la premi\u00e8re occurrence de `elt` dans `tab` si `elt` est dans `tab` et `None` sinon.\n\nL\u2019objectif de cet exercice est de parcourir un tableau, il est interdit d\u2019utiliser la m\u00e9thode\n`index` des listes Python.\n\nExemples :\n```python\n&gt;&gt;&gt; recherche(1, [2, 3, 4]) # renvoie None\n&gt;&gt;&gt; recherche(1, [10, 12, 1, 56])\n2\n&gt;&gt;&gt; recherche(50, [1, 50, 1])\n1\n&gt;&gt;&gt; recherche(15, [8, 9, 10, 15])\n3\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-132","title":"Exercice 13.2","text":"<p>Exercice 13.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On consid\u00e8re la fonction <code>insere</code> ci-dessous qui prend en argument un tableau <code>tab</code> d\u2019en- tiers tri\u00e9s par ordre croissant et un entier <code>a</code>. </p> <p>Cette fonction cr\u00e9e et renvoie un nouveau tableau \u00e0 partir de celui fourni en param\u00e8tre en y ins\u00e9rant la valeur <code>a</code> de sorte que le tableau renvoy\u00e9 soit encore tri\u00e9 par ordre croissant. Les tableaux seront repr\u00e9sent\u00e9s sous la forme de listes Python.</p> \ud83d\udc0d Script Python<pre><code>def insere(tab, a):\n    \"\"\"\n    Ins\u00e8re l'\u00e9l\u00e9ment a (int) dans le tableau tab (list)\n    tri\u00e9 par ordre croissant \u00e0 sa place et renvoie le\n    nouveau tableau.\n    \"\"\"\n    tab_a = [ a ] + tab # nouveau tableau contenant a \n                        # suivi des \u00e9l\u00e9ments de tab\n    i = 0\n    while i &lt; ... and a &gt; ...: \n        tab_a[i] = ... \n        tab_a[i+1] = a\n        i = ... \n    return tab_a\n</code></pre> <p>Compl\u00e9ter la fonction <code>insere</code> ci-dessus.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; insere([1, 2, 4, 5], 3)\n[1, 2, 3, 4, 5]\n&gt;&gt;&gt; insere([1, 2, 7, 12, 14, 25], 30)\n[1, 2, 7, 12, 14, 25, 30]\n&gt;&gt;&gt; insere([2, 3, 4], 1)\n[1, 2, 3, 4]\n&gt;&gt;&gt; insere([], 1)\n[1]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def insere(tab, a):\n    \"\"\"\n    Ins\u00e8re l'\u00e9l\u00e9ment a (int) dans le tableau tab (list)\n    tri\u00e9 par ordre croissant \u00e0 sa place et renvoie le\n    nouveau tableau.\n    \"\"\"\n    tab_a = [ a ] + tab # nouveau tableau contenant a \n                        # suivi des \u00e9l\u00e9ments de tab\n    i = 0\n    while i &lt; len(tab_a) - 1 and a &gt; tab_a[i+1]: \n        tab_a[i] = tab_a[i+1] \n        tab_a[i+1] = a\n        i = i + 1 \n    return tab_a\n</code></pre> Markdown<pre><code>On consid\u00e8re la fonction `insere` ci-dessous qui prend en argument un tableau `tab` d\u2019en-\ntiers tri\u00e9s par ordre croissant et un entier `a`. \n\nCette fonction cr\u00e9e et renvoie un nouveau tableau \u00e0 partir de celui fourni en param\u00e8tre en y\nins\u00e9rant la valeur `a` de sorte que le tableau renvoy\u00e9 soit encore tri\u00e9 par ordre croissant. Les\ntableaux seront repr\u00e9sent\u00e9s sous la forme de listes Python.\n\n```python linenums='1'\ndef insere(tab, a):\n    \"\"\"\n    Ins\u00e8re l'\u00e9l\u00e9ment a (int) dans le tableau tab (list)\n    tri\u00e9 par ordre croissant \u00e0 sa place et renvoie le\n    nouveau tableau.\n    \"\"\"\n    tab_a = [ a ] + tab # nouveau tableau contenant a \n                        # suivi des \u00e9l\u00e9ments de tab\n    i = 0\n    while i &lt; ... and a &gt; ...: \n        tab_a[i] = ... \n        tab_a[i+1] = a\n        i = ... \n    return tab_a\n</code></pre> <p>Compl\u00e9ter la fonction <code>insere</code> ci-dessus.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; insere([1, 2, 4, 5], 3)\n[1, 2, 3, 4, 5]\n&gt;&gt;&gt; insere([1, 2, 7, 12, 14, 25], 30)\n[1, 2, 7, 12, 14, 25, 30]\n&gt;&gt;&gt; insere([2, 3, 4], 1)\n[1, 2, 3, 4]\n&gt;&gt;&gt; insere([], 1)\n[1]\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-14","title":"\u25b6 Sujet 14","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-141","title":"Exercice 14.1","text":"<p>Exercice 14.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>min_et_max</code> qui prend en param\u00e8tre un tableau de nombres <code>tab</code> non vide, et qui renvoie la plus petite et la plus grande valeur du tableau sous la forme d\u2019un dictionnaire \u00e0 deux cl\u00e9s <code>min</code> et <code>max</code>.</p> <p>Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>L\u2019utilisation des fonctions natives <code>min</code>, <code>max</code> et <code>sorted</code>, ainsi que la m\u00e9thode <code>sort</code> n\u2019est pas autoris\u00e9e.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; min_et_max([0, 1, 4, 2, -2, 9, 3, 1, 7, 1])\n{'min': -2, 'max': 9}\n&gt;&gt;&gt; min_et_max([0, 1, 2, 3])\n{'min': 0, 'max': 3}\n&gt;&gt;&gt; min_et_max([3])\n{'min': 3, 'max': 3}\n&gt;&gt;&gt; min_et_max([1, 3, 2, 1, 3])\n{'min': 1, 'max': 3}\n&gt;&gt;&gt; min_et_max([-1, -1, -1, -1, -1])\n{'min': -1, 'max': -1}\n</code></pre> \ud83d\udc0d Script Python<pre><code>def min_et_max(tab):\n    d = {}\n    d['min'] = tab[0]\n    d['max'] = tab[0]\n    for val in tab:\n        if val &lt; d['min']:\n            d['min'] = val\n        if val &gt; d['max']:\n            d['max'] = val\n    return d\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `min_et_max` qui prend en param\u00e8tre un tableau de nombres `tab` non vide, et qui renvoie la plus petite et la plus grande valeur du tableau sous la\nforme d\u2019un dictionnaire \u00e0 deux cl\u00e9s `min` et `max`.\n\nLes tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.\n\nL\u2019utilisation des fonctions natives `min`, `max` et `sorted`, ainsi que la m\u00e9thode `sort` n\u2019est pas\nautoris\u00e9e.\n\nExemples :\n\n```python\n&gt;&gt;&gt; min_et_max([0, 1, 4, 2, -2, 9, 3, 1, 7, 1])\n{'min': -2, 'max': 9}\n&gt;&gt;&gt; min_et_max([0, 1, 2, 3])\n{'min': 0, 'max': 3}\n&gt;&gt;&gt; min_et_max([3])\n{'min': 3, 'max': 3}\n&gt;&gt;&gt; min_et_max([1, 3, 2, 1, 3])\n{'min': 1, 'max': 3}\n&gt;&gt;&gt; min_et_max([-1, -1, -1, -1, -1])\n{'min': -1, 'max': -1}\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-142","title":"Exercice 14.2","text":"<p>Exercice 14.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On dispose d\u2019une classe <code>Carte</code> permettant de cr\u00e9er des objets mod\u00e9lisant des cartes \u00e0 jouer.</p> <p>Compl\u00e9ter la classe <code>Paquet_de_cartes</code> suivante en respectant les sp\u00e9cifications donn\u00e9es dans les cha\u00eenes de documentation.</p> <p>Ajouter une assertion dans la m\u00e9thode <code>recuperer_carte</code> afin de v\u00e9rifier que le param\u00e8tre <code>pos</code> est correct.</p> <p>On rappelle que l\u2019instruction</p> \ud83d\udc0d Script Python<pre><code>assert condition, message\n</code></pre> <p>permet de v\u00e9rifier que la condition est vraie. Si ce n\u2019est pas le cas, le programme s\u2019arr\u00eate et affiche le message d\u2019erreur fourni.</p> \ud83d\udc0d Script Python<pre><code>class Carte:\n    def __init__(self, c, v):\n        \"\"\" Initialise les attributs couleur (entre 1 et 4), et valeur (entre 1 et 13). \"\"\"\n        self.couleur = c\n        self.valeur = v\n\n    def recuperer_valeur(self):\n        \"\"\" Renvoie la valeur de la carte : As, 2, ..., 10, Valet, Dame, Roi \"\"\"\n        valeurs = ['As','2', '3', '4', '5', '6', '7', '8', '9', '10', 'Valet', 'Dame', 'Roi']\n        return valeurs[self.valeur - 1]\n\n    def recuperer_couleur(self):\n        \"\"\" Renvoie la couleur de la carte (parmi pique, coeur, carreau, tr\u00e8fle). \"\"\"\n        couleurs = ['pique', 'coeur', 'carreau', 'tr\u00e8fle']\n        return couleurs[self.couleur - 1]\n\nclass Paquet_de_cartes:\n    def __init__(self):\n        \"\"\" Initialise l'attribut contenu avec une liste des 52 objets Carte possibles\n            rang\u00e9s par valeurs croissantes en commen\u00e7ant par pique, puis coeur,\n            carreau et tr\u00e9fle. \"\"\"\n        ...\n        ...\n            ...\n                ...\n\n    def recuperer_carte(self, pos):\n        \"\"\" Renvoie la carte qui se trouve \u00e0 la position pos (entier compris entre 0 et 51). \"\"\"\n        ...\n        ...\n</code></pre> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; jeu = Paquet_de_cartes()\n&gt;&gt;&gt; carte1 = jeu.recuperer_carte(20)\n&gt;&gt;&gt; carte1.recuperer_valeur() + \" de \" + carte1.recuperer_couleur()\n\"8 de coeur\"\n&gt;&gt;&gt; carte2 = jeu.recuperer_carte(0)\n&gt;&gt;&gt; carte2.recuperer_valeur() + \" de \" + carte2.recuperer_couleur()\n\"As de pique\"\n&gt;&gt;&gt; carte3 = jeu.recuperer_carte(52)\nAssertionError : param\u00e8tre pos invalide\n</code></pre> \ud83d\udc0d Script Python<pre><code>class Carte:\n    def __init__(self, c, v):\n        \"\"\"Initialise les attributs couleur (entre 1 et 4), \n        et valeur (entre 1 et 13). \"\"\"\n        self.couleur = c\n        self.valeur = v\n\n    def recuperer_valeur(self):\n        \"\"\" Renvoie la valeur de la carte : \n        As, 2, ..., 10, Valet, Dame, Roi \"\"\"\n        valeurs = ['As','2', '3', '4', '5', '6', '7', '8', \n                   '9', '10', 'Valet', 'Dame', 'Roi']\n        return valeurs[self.valeur - 1]\n\n    def recuperer_couleur(self):\n        \"\"\" Renvoie la couleur de la carte \n        (parmi pique, coeur, carreau, tr\u00e8fle). \"\"\"\n        couleurs = ['pique', 'coeur', 'carreau', 'tr\u00e8fle']\n        return couleurs[self.couleur - 1]\n\nclass Paquet_de_cartes:\n    def __init__(self):\n        \"\"\" Initialise l'attribut contenu avec une liste des 52\n        objets Carte possibles rang\u00e9s par valeurs croissantes en\n        commen\u00e7ant par pique, puis c\u0153ur, carreau et tr\u00e8fle. \"\"\"\n        self.contenu = []\n        for c in range(1, 5):\n            for v in range(1, 14):\n                self.contenu.append(Carte(c,v))\n\n    def recuperer_carte(self, pos):\n        \"\"\" Renvoie la carte qui se trouve \u00e0 la position pos \n        (entier compris entre 0 et 51). \"\"\"\n        assert 0 &lt;= pos &lt;= 51,  'param\u00e8tre pos invalide'\n        return self.contenu[pos]\n</code></pre> Markdown<pre><code>On dispose d\u2019une classe `Carte` permettant de cr\u00e9er des objets mod\u00e9lisant des cartes \u00e0\njouer.\n\nCompl\u00e9ter la classe `Paquet_de_cartes` suivante en respectant les sp\u00e9cifications\ndonn\u00e9es dans les cha\u00eenes de documentation.\n\nAjouter une assertion dans la m\u00e9thode `recuperer_carte` afin de v\u00e9rifier que le param\u00e8tre `pos`\nest correct.\n\nOn rappelle que l\u2019instruction\n\n```python\nassert condition, message\n</code></pre> <p>permet de v\u00e9rifier que la condition est vraie. Si ce n\u2019est pas le cas, le programme s\u2019arr\u00eate et affiche le message d\u2019erreur fourni.</p> \ud83d\udc0d Script Python<pre><code>class Carte:\n    def __init__(self, c, v):\n        \"\"\" Initialise les attributs couleur (entre 1 et 4), et valeur (entre 1 et 13). \"\"\"\n        self.couleur = c\n        self.valeur = v\n\n    def recuperer_valeur(self):\n        \"\"\" Renvoie la valeur de la carte : As, 2, ..., 10, Valet, Dame, Roi \"\"\"\n        valeurs = ['As','2', '3', '4', '5', '6', '7', '8', '9', '10', 'Valet', 'Dame', 'Roi']\n        return valeurs[self.valeur - 1]\n\n    def recuperer_couleur(self):\n        \"\"\" Renvoie la couleur de la carte (parmi pique, coeur, carreau, tr\u00e8fle). \"\"\"\n        couleurs = ['pique', 'coeur', 'carreau', 'tr\u00e8fle']\n        return couleurs[self.couleur - 1]\n\nclass Paquet_de_cartes:\n    def __init__(self):\n        \"\"\" Initialise l'attribut contenu avec une liste des 52 objets Carte possibles\n            rang\u00e9s par valeurs croissantes en commen\u00e7ant par pique, puis coeur,\n            carreau et tr\u00e9fle. \"\"\"\n        ...\n        ...\n            ...\n                ...\n\n    def recuperer_carte(self, pos):\n        \"\"\" Renvoie la carte qui se trouve \u00e0 la position pos (entier compris entre 0 et 51). \"\"\"\n        ...\n        ...\n</code></pre> <p>Exemple :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; jeu = Paquet_de_cartes()\n&gt;&gt;&gt; carte1 = jeu.recuperer_carte(20)\n&gt;&gt;&gt; carte1.recuperer_valeur() + \" de \" + carte1.recuperer_couleur()\n\"8 de coeur\"\n&gt;&gt;&gt; carte2 = jeu.recuperer_carte(0)\n&gt;&gt;&gt; carte2.recuperer_valeur() + \" de \" + carte2.recuperer_couleur()\n\"As de pique\"\n&gt;&gt;&gt; carte3 = jeu.recuperer_carte(52)\nAssertionError : param\u00e8tre pos invalide\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-15","title":"\u25b6 Sujet 15","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-151","title":"Exercice 15.1","text":"<p>Exercice 15.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>moyenne</code> qui prend en param\u00e8tre un tableau non vide de nombres flottants et qui renvoie la moyenne des valeurs du tableau. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; moyenne([1.0])\n1.0\n&gt;&gt;&gt; moyenne([1.0, 2.0, 4.0])\n2.3333333333333335\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    somme = 0\n    for val in tab:\n        somme += val\n    return somme / len(tab)\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `moyenne` qui prend en param\u00e8tre un tableau non vide de nombres\nflottants et qui renvoie la moyenne des valeurs du tableau. Les tableaux seront\nrepr\u00e9sent\u00e9s sous forme de liste Python.\n\nExemples :\n```python\n&gt;&gt;&gt; moyenne([1.0])\n1.0\n&gt;&gt;&gt; moyenne([1.0, 2.0, 4.0])\n2.3333333333333335\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-152","title":"Exercice 15.2","text":"<p>Exercice 15.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On consid\u00e8re la fonction <code>binaire</code> ci-dessous qui prend en param\u00e8tre un entier positif <code>a</code> en \u00e9criture d\u00e9cimale et qui renvoie son \u00e9criture binaire sous la forme d'une chaine de caract\u00e8res.</p> <p>L\u2019algorithme utilise la m\u00e9thode des divisions euclidiennes successives comme l\u2019illustre l\u2019exemple ci-apr\u00e8s.</p> <p></p> <p>\ud83d\udc0d Script Python<pre><code>def binaire(a):\n    bin_a = ...\n    a = a // 2\n    while a ... :\n        bin_a = ... + bin_a\n        a = ...\n    return bin_a\n</code></pre> Compl\u00e9ter le code de la fonction <code>binaire</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; binaire(83)\n'1010011'\n&gt;&gt;&gt; binaire(127)\n'1111111'\n&gt;&gt;&gt; binaire(0)\n'0'\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def binaire(a):\n    '''convertit un nombre entier a en sa representation \n    binaire sous forme de chaine de caract\u00e8res.'''\n    if a == 0:\n        return '0' \n    bin_a = '' \n    while a != 0 : \n        bin_a = str(a % 2) + bin_a \n        a = a // 2\n    return bin_a\n</code></pre> <p>Markdown<pre><code>On consid\u00e8re la fonction `binaire` ci-dessous qui prend en param\u00e8tre un entier positif `a` en \u00e9criture d\u00e9cimale et qui renvoie son \u00e9criture binaire sous la forme d'une chaine de caract\u00e8res.\n\nL\u2019algorithme utilise la m\u00e9thode des divisions euclidiennes successives comme l\u2019illustre\nl\u2019exemple ci-apr\u00e8s.\n\n![image](data2023/30_divisions.png){: .center}\n\n\n\n```python linenums='1'\ndef binaire(a):\n    bin_a = ...\n    a = a // 2\n    while a ... :\n        bin_a = ... + bin_a\n        a = ...\n    return bin_a\n</code></pre> Compl\u00e9ter le code de la fonction <code>binaire</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; binaire(83)\n'1010011'\n&gt;&gt;&gt; binaire(127)\n'1111111'\n&gt;&gt;&gt; binaire(0)\n'0'\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-16","title":"\u25b6 Sujet 16","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-161","title":"Exercice 16.1","text":"<p>Exercice 16.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>ecriture_binaire_entier_positif</code> qui prend en param\u00e8tre un entier positif <code>n</code> et renvoie une une chaine de caract\u00e8re correspondant \u00e0 l\u2018\u00e9criture binaire de <code>n</code>.</p> <p>On rappelle que :</p> <ul> <li>l\u2019\u00e9criture binaire de 25 est 11001 car \\(25 = 1 \\times 24 + 1 \\times 23 + 0 \\times 22 + 0 \\times 21 + 1 \\times 20\\) ;</li> <li><code>n % 2</code> vaut 0 ou 1 selon que <code>n</code> est pair ou impair ;</li> <li><code>n // 2</code>  donne le quotient de la division euclidienne de <code>n</code> par 2.</li> </ul> <p>Il est interdit dans cet exercice d\u2019utiliser la fonction <code>bin</code> de Python.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; 5 % 2\n1\n&gt;&gt;&gt; 5 // 2\n2\n&gt;&gt;&gt; ecriture_binaire_entier_positif(0)\n'0'\n&gt;&gt;&gt; ecriture_binaire_entier_positif(2)\n'10'\n&gt;&gt;&gt; ecriture_binaire_entier_positif(105)\n'1101001'\n</code></pre> \ud83d\udc0d Script Python<pre><code>def ecriture_binaire_entier_positif(n):\n    if n == 0:\n        return '0' \n    bin_n = '' \n    while n != 0 : \n        bin_n = str(n % 2) + bin_n \n        n = n // 2\n    return bin_n\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `ecriture_binaire_entier_positif` qui prend en param\u00e8tre un\nentier positif `n` et renvoie une une chaine de caract\u00e8re correspondant \u00e0 l\u2018\u00e9criture binaire de `n`.\n\nOn rappelle que :\n\n- l\u2019\u00e9criture binaire de 25 est 11001 car $25 = 1 \\times 24 + 1 \\times 23 + 0 \\times 22 + 0 \\times 21 + 1 \\times 20$ ;\n- `n % 2` vaut 0 ou 1 selon que `n` est pair ou impair ;\n- `n // 2`  donne le quotient de la division euclidienne de `n` par 2.\n\nIl est interdit dans cet exercice d\u2019utiliser la fonction `bin` de Python.\n\nExemples :\n\n```python\n&gt;&gt;&gt; 5 % 2\n1\n&gt;&gt;&gt; 5 // 2\n2\n&gt;&gt;&gt; ecriture_binaire_entier_positif(0)\n'0'\n&gt;&gt;&gt; ecriture_binaire_entier_positif(2)\n'10'\n&gt;&gt;&gt; ecriture_binaire_entier_positif(105)\n'1101001'\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-162","title":"Exercice 16.2","text":"<p>Exercice 16.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>La fonction <code>tri_bulles</code> prend en param\u00e8tre une liste <code>tab</code> d\u2019entiers (type <code>list</code>) et le modifie pour le trier par ordre croissant.</p> <p>Le tri \u00e0 bulles est un tri en place qui commence par placer le plus grand \u00e9l\u00e9ment en derni\u00e8re position en parcourant le tableau de gauche \u00e0 droite et en \u00e9changeant au passage les \u00e9l\u00e9ments voisins mal ordonn\u00e9s (si la valeur de l\u2019\u00e9l\u00e9ment d\u2019indice <code>i</code> a une valeur strictement sup\u00e9rieure \u00e0 celle de l\u2019indice <code>i + 1</code>, ils sont \u00e9chang\u00e9s). Le tri place ensuite en avant-derni\u00e8re position le plus grand \u00e9l\u00e9ment du tableau priv\u00e9 de son dernier \u00e9l\u00e9ment en proc\u00e9dant encore \u00e0 des \u00e9changes d\u2019\u00e9l\u00e9ments voisins. Ce principe est r\u00e9p\u00e9t\u00e9 jusqu\u2019\u00e0 placer le minimum en premi\u00e8re position.</p> <p>Exemple : pour trier le tableau <code>[7, 9, 4, 3]</code> :</p> <ul> <li>premi\u00e8re \u00e9tape : 7 et 9 ne sont pas \u00e9chang\u00e9s, puis 9 et 4 sont \u00e9chang\u00e9s, puis 9 et 3 sont \u00e9chang\u00e9s, le tableau est alors <code>[7, 4, 3, 9]</code></li> <li>deuxi\u00e8me \u00e9tape : 7 et 4 sont \u00e9chang\u00e9s, puis 7 et 3 sont \u00e9chang\u00e9s, le tableau est alors <code>[4, 3, 7, 9]</code></li> <li>troisi\u00e8me \u00e9tape : 4 et 3 sont \u00e9chang\u00e9s, le tableau est alors <code>[3, 4, 7, 9]</code></li> </ul> <p>Compl\u00e9ter le code Python ci-dessous qui impl\u00e9mente la fonction tri_bulles.</p> \ud83d\udc0d Script Python<pre><code>def echange(tab, i, j):\n    '''Echange les \u00e9l\u00e9ments d'indice i et j dans le tableau tab.'''\n    temp = ... \n    tab[i] = ... \n    tab[j] = ... \n\ndef tri_bulles(tab):\n    '''Trie le tableau tab dans l'ordre croissant\n    par la m\u00e9thode du tri \u00e0 bulles.'''\n    n = len(tab)\n    for i in range(...): \n        for j in range(...): \n            if ... &gt; ...: \n                echange(tab, j, ...) \n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tab = []\n&gt;&gt;&gt; tri_bulles(tab)\n&gt;&gt;&gt; tab\n[]\n&gt;&gt;&gt; tab2 = [9, 3, 7, 2, 3, 1, 6]\n&gt;&gt;&gt; tri_bulles(tab2)\n&gt;&gt;&gt; tab2\n[1, 2, 3, 3, 6, 7, 9]\n&gt;&gt;&gt; tab3 = [9, 7, 4, 3]\n&gt;&gt;&gt; tri_bulles(tab3)\n&gt;&gt;&gt; tab3\n[3, 4, 7, 9]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def echange(tab, i, j):\n    '''Echange les \u00e9l\u00e9ments d'indice i et j dans le tableau tab.'''\n    temp = tab[i] \n    tab[i] = tab[j] \n    tab[j] = temp \n\ndef tri_bulles(tab):\n    '''Trie le tableau tab dans l'ordre croissant\n    par la m\u00e9thode du tri \u00e0 bulles.'''\n    n = len(tab)\n    for i in range(n-1, -1, -1): \n        for j in range(i): \n            if tab[j] &gt; tab[j+1]: \n                echange(tab, j, j+1) \n</code></pre> Markdown<pre><code>La fonction `tri_bulles` prend en param\u00e8tre une liste `tab` d\u2019entiers (type `list`) et le modifie pour le trier par ordre croissant.\n\n\nLe tri \u00e0 bulles est un tri en place qui commence par placer le plus grand \u00e9l\u00e9ment en\nderni\u00e8re position en parcourant le tableau de gauche \u00e0 droite et en \u00e9changeant au passage\nles \u00e9l\u00e9ments voisins mal ordonn\u00e9s (si la valeur de l\u2019\u00e9l\u00e9ment d\u2019indice `i` a une valeur\nstrictement sup\u00e9rieure \u00e0 celle de l\u2019indice `i + 1`, ils sont \u00e9chang\u00e9s). Le tri place ensuite\nen avant-derni\u00e8re position le plus grand \u00e9l\u00e9ment du tableau priv\u00e9 de son dernier \u00e9l\u00e9ment\nen proc\u00e9dant encore \u00e0 des \u00e9changes d\u2019\u00e9l\u00e9ments voisins. Ce principe est r\u00e9p\u00e9t\u00e9 jusqu\u2019\u00e0\nplacer le minimum en premi\u00e8re position.\n\n\nExemple : pour trier le tableau `[7, 9, 4, 3]` :\n\n- premi\u00e8re \u00e9tape : 7 et 9 ne sont pas \u00e9chang\u00e9s, puis 9 et 4 sont \u00e9chang\u00e9s, puis 9 et\n3 sont \u00e9chang\u00e9s, le tableau est alors `[7, 4, 3, 9]`\n- deuxi\u00e8me \u00e9tape : 7 et 4 sont \u00e9chang\u00e9s, puis 7 et 3 sont \u00e9chang\u00e9s, le tableau est\nalors `[4, 3, 7, 9]`\n- troisi\u00e8me \u00e9tape : 4 et 3 sont \u00e9chang\u00e9s, le tableau est alors `[3, 4, 7, 9]`\n\n\nCompl\u00e9ter le code Python ci-dessous qui impl\u00e9mente la fonction tri_bulles.\n\n```python linenums='1'\ndef echange(tab, i, j):\n    '''Echange les \u00e9l\u00e9ments d'indice i et j dans le tableau tab.'''\n    temp = ... \n    tab[i] = ... \n    tab[j] = ... \n\ndef tri_bulles(tab):\n    '''Trie le tableau tab dans l'ordre croissant\n    par la m\u00e9thode du tri \u00e0 bulles.'''\n    n = len(tab)\n    for i in range(...): \n        for j in range(...): \n            if ... &gt; ...: \n                echange(tab, j, ...) \n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tab = []\n&gt;&gt;&gt; tri_bulles(tab)\n&gt;&gt;&gt; tab\n[]\n&gt;&gt;&gt; tab2 = [9, 3, 7, 2, 3, 1, 6]\n&gt;&gt;&gt; tri_bulles(tab2)\n&gt;&gt;&gt; tab2\n[1, 2, 3, 3, 6, 7, 9]\n&gt;&gt;&gt; tab3 = [9, 7, 4, 3]\n&gt;&gt;&gt; tri_bulles(tab3)\n&gt;&gt;&gt; tab3\n[3, 4, 7, 9]\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-17","title":"\u25b6 Sujet 17","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-171","title":"Exercice 17.1","text":"<p>Exercice 17.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction Python appel\u00e9e <code>nb_repetitions</code> qui prend en param\u00e8tres un \u00e9l\u00e9ment <code>elt</code> et un tableau <code>tab</code> (type <code>list</code>) et renvoie le nombre de fois o\u00f9 l\u2019\u00e9l\u00e9ment appara\u00eet dans le tableau.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; nb_repetitions(5, [2, 5, 3, 5, 6, 9, 5])\n3\n&gt;&gt;&gt; nb_repetitions('A', ['B', 'A', 'B', 'A', 'R'])\n2\n&gt;&gt;&gt; nb_repetitions(12, [1, '!', 7, 21, 36, 44])\n0\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def nb_repetitions(elt, tab):\n    nb = 0\n    for element in tab:\n        if element == elt:\n            nb += 1\n    return nb\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction Python appel\u00e9e `nb_repetitions` qui prend en param\u00e8tres un\n\u00e9l\u00e9ment `elt` et un tableau `tab` (type `list`) et renvoie le nombre de fois o\u00f9 l\u2019\u00e9l\u00e9ment appara\u00eet dans le tableau.\n\nExemples :\n```python\n&gt;&gt;&gt; nb_repetitions(5, [2, 5, 3, 5, 6, 9, 5])\n3\n&gt;&gt;&gt; nb_repetitions('A', ['B', 'A', 'B', 'A', 'R'])\n2\n&gt;&gt;&gt; nb_repetitions(12, [1, '!', 7, 21, 36, 44])\n0\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-172","title":"Exercice 17.2","text":"<p>Exercice 17.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Pour rappel, la conversion d\u2019un nombre entier positif en binaire peut s\u2019effectuer \u00e0 l\u2019aide des divisions successives comme illustr\u00e9 ici :</p> <p></p> <p>Voici une fonction Python bas\u00e9e sur la m\u00e9thode des divisions successives permettant de convertir un nombre entier positif en binaire :</p> <p>Compl\u00e9ter la fonction <code>binaire</code></p> <p>\ud83d\udc0d Script Python<pre><code>def binaire(a):\n    '''convertit un nombre entier a en sa representation \n    binaire sous forme de chaine de caract\u00e8res.'''\n    if a == 0:\n        return '0'\n    bin_a = ... \n    while ...: \n        bin_a = ... + bin_a \n        a = ... \n    return bin_a\n</code></pre> .</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; binaire(0)\n'0'\n&gt;&gt;&gt; binaire(77)\n'1001101'\n</code></pre> \ud83d\udc0d Script Python<pre><code>def binaire(a):\n    '''convertit un nombre entier a en sa representation \n    binaire sous forme de chaine de caract\u00e8res.'''\n    if a == 0:\n        return '0' \n    bin_a = '' \n    while a != 0 : \n        bin_a = str(a % 2) + bin_a \n        a = a // 2\n    return bin_a\n</code></pre> <p>Markdown<pre><code>Pour rappel, la conversion d\u2019un nombre entier positif en binaire peut s\u2019effectuer \u00e0 l\u2019aide\ndes divisions successives comme illustr\u00e9 ici :\n\n![image](data2023/31_divisions.png){: .center}\n\nVoici une fonction Python bas\u00e9e sur la m\u00e9thode des divisions successives permettant de\nconvertir un nombre entier positif en binaire :\n\nCompl\u00e9ter la fonction ```binaire```\n\n```python linenums='1'\ndef binaire(a):\n    '''convertit un nombre entier a en sa representation \n    binaire sous forme de chaine de caract\u00e8res.'''\n    if a == 0:\n        return '0'\n    bin_a = ... \n    while ...: \n        bin_a = ... + bin_a \n        a = ... \n    return bin_a\n</code></pre> .</p> <p>Exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; binaire(0)\n'0'\n&gt;&gt;&gt; binaire(77)\n'1001101'\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-18","title":"\u25b6 Sujet 18","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-181","title":"Exercice 18.1","text":"<p>Exercice 18.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Programmer la fonction <code>multiplication</code>, prenant en param\u00e8tres deux nombres entiers relatifs <code>n1</code> et <code>n2</code>, et qui renvoie le produit de ces deux nombres.</p> <p>Les seules op\u00e9rations arithm\u00e9tiques autoris\u00e9es sont l\u2019addition et la soustraction. </p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; multiplication(3,5)\n15\n&gt;&gt;&gt; multiplication(-4,-8)\n32\n&gt;&gt;&gt; multiplication(-2,6)\n-12\n&gt;&gt;&gt; multiplication(-2,0)\n0\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def multiplication(n1, n2):\n    if n1 &lt; 0:\n        return -multiplication(-n1, n2)\n    if n2 &lt; 0:\n        return -multiplication(n1, -n2)\n    resultat = 0\n    for _ in range(n2):\n        resultat += n1\n    return resultat\n</code></pre> \ud83d\udccb Texte<pre><code>Programmer la fonction `multiplication`, prenant en param\u00e8tres deux nombres entiers relatifs\n`n1` et `n2`, et qui renvoie le produit de ces deux nombres.\n\nLes seules op\u00e9rations arithm\u00e9tiques autoris\u00e9es sont l\u2019addition et la soustraction.\n\nExemples :\n```python\n&gt;&gt;&gt; multiplication(3,5)\n15\n&gt;&gt;&gt; multiplication(-4,-8)\n32\n&gt;&gt;&gt; multiplication(-2,6)\n-12\n&gt;&gt;&gt; multiplication(-2,0)\n0\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-182","title":"Exercice 18.2","text":"<p>Exercice 18.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Soit <code>tab</code> un tableau non vide d'entiers tri\u00e9s dans l'ordre croissant et <code>n</code> un entier.</p> <p>La fonction <code>chercher</code> ci-dessous doit renvoyer un indice o\u00f9 la valeur <code>n</code> appara\u00eet dans <code>tab</code> si cette valeur y figure et <code>None</code> sinon. </p> <p>Les param\u00e8tres de la fonction sont :</p> <ul> <li><code>tab</code>, le tableau dans lequel s'effectue la recherche ;</li> <li><code>x</code>, l'entier \u00e0 chercher dans le tableau ;</li> <li><code>i</code>, l'indice de d\u00e9but de la partie du tableau o\u00f9 s'effectue la recherche ;</li> <li><code>j</code>, l'indice de fin de la partie du tableau o\u00f9 s'effectue la recherche.</li> </ul> <p>L\u2019algorithme demand\u00e9 est une recherche dichotomique r\u00e9cursive.</p> <p>Recopier et compl\u00e9ter le code de la fonction <code>chercher</code> suivante :</p> \ud83d\udc0d Script Python<pre><code>def chercher(tab, x, i, j):\n    '''Renvoie l'indice de x dans tab, si x est dans tab, \n    None sinon.\n    On suppose que tab est tri\u00e9 dans l'ordre croissant.'''\n    if i &gt; j:\n        return None\n    m = (i + j) // ... \n    if ... &lt; x: \n        return chercher(tab, x, ... , ...) \n    elif tab[m] &gt; x:\n        return chercher(tab, x, ... , ...) \n    else:\n        return ... \n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 7, 0, 10)\n\n&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 7, 0, 5)\n\n&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 9, 0, 5)\n4\n&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 6, 0, 5)\n2\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def chercher(tab, x, i, j):\n    '''Renvoie l'indice de x dans tab, si x est dans tab, \n    None sinon.\n    On suppose que tab est tri\u00e9 dans l'ordre croissant.'''\n    if i &gt; j:\n        return None\n    m = (i + j) // 2 \n    if tab[m] &lt; x: \n        return chercher(tab, x, m+1 , j) \n    elif tab[m] &gt; x:\n        return chercher(tab, x, i , m-1) \n    else:\n        return m \n</code></pre> Markdown<pre><code>Soit `tab` un tableau non vide d'entiers tri\u00e9s dans l'ordre croissant et `n` un entier.\n\nLa fonction `chercher` ci-dessous doit renvoyer un indice o\u00f9 la valeur `n`\nappara\u00eet dans `tab` si cette valeur y figure et `None` sinon. \n\nLes param\u00e8tres de la fonction sont :\n\n- `tab`, le tableau dans lequel s'effectue la recherche ;\n- `x`, l'entier \u00e0 chercher dans le tableau ;\n- `i`, l'indice de d\u00e9but de la partie du tableau o\u00f9 s'effectue la recherche ;\n- `j`, l'indice de fin de la partie du tableau o\u00f9 s'effectue la recherche.\n\nL\u2019algorithme demand\u00e9 est une recherche dichotomique r\u00e9cursive.\n\nRecopier et compl\u00e9ter le code de la fonction `chercher` suivante :\n\n```python linenums='1'\ndef chercher(tab, x, i, j):\n    '''Renvoie l'indice de x dans tab, si x est dans tab, \n    None sinon.\n    On suppose que tab est tri\u00e9 dans l'ordre croissant.'''\n    if i &gt; j:\n        return None\n    m = (i + j) // ... \n    if ... &lt; x: \n        return chercher(tab, x, ... , ...) \n    elif tab[m] &gt; x:\n        return chercher(tab, x, ... , ...) \n    else:\n        return ... \n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 7, 0, 10)\n\n&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 7, 0, 5)\n\n&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 9, 0, 5)\n4\n&gt;&gt;&gt; chercher([1, 5, 6, 6, 9, 12], 6, 0, 5)\n2\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-19","title":"\u25b6 Sujet 19","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-191","title":"Exercice 19.1","text":"<p>Exercice 19.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>On rappelle que :</p> <ul> <li>le nombre \\(a^n\\) est le nombre \\(a \\times a \\times a \\times \\dots \\times a\\), o\u00f9 le facteur \\(a\\) appara\u00eet \\(n\\) fois,</li> <li>en langage Python, l\u2019instruction <code>t[-1]</code> permet d\u2019acc\u00e9der au dernier \u00e9l\u00e9ment du tableau <code>t</code>.</li> </ul> <p>Dans cet exercice, l\u2019op\u00e9rateur <code>**</code>  et la fonction <code>pow</code> ne sont pas autoris\u00e9s.</p> <p>Programmer en langage Python une fonction <code>liste_puissances</code> qui prend en arguments un nombre entier <code>a</code>, un entier strictement positif <code>n</code> et qui renvoie la liste de ses puissances \\(\\rm{[a^1, a^2, ..., a^n]}\\).</p> <p>Programmer \u00e9galement une fonction <code>liste_puisssances_borne</code> qui prend en arguments un nombre entier <code>a</code> sup\u00e9rieur ou \u00e9gal \u00e0 2 et un entier <code>borne</code>, et qui renvoie la liste de ses puissances, \u00e0 l\u2019exclusion de \\(\\rm{a^0}\\), strictement inf\u00e9rieures \u00e0 <code>borne</code>.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; liste_puissances(3, 5)\n[3, 9, 27, 81, 243]\n&gt;&gt;&gt; liste_puissances(-2, 4)\n[-2, 4, -8, 16]\n&gt;&gt;&gt; liste_puissances_borne(2, 16)\n[2, 4, 8]\n&gt;&gt;&gt; liste_puissances_borne(2, 17)\n[2, 4, 8, 16]\n&gt;&gt;&gt; liste_puissances_borne(5, 5)\n[]\n</code></pre> \ud83d\udc0d Script Python<pre><code>def liste_puissances(a,n):\n    puissances = [a]\n    for i in range(n-1):\n        puissances.append(puissances[-1] * a)\n    return puissances\n\ndef liste_puissances_borne(a, borne):\n    lst = []\n    val = a\n    while val &lt; borne:\n        lst.append(val)\n        val = val * a\n    return lst\n</code></pre> \ud83d\udccb Texte<pre><code>On rappelle que :\n\n- le nombre $a^n$ est le nombre $a \\times a \\times a \\times \\dots \\times a$, o\u00f9 le facteur $a$ appara\u00eet $n$ fois,\n- en langage Python, l\u2019instruction `t[-1]` permet d\u2019acc\u00e9der au dernier \u00e9l\u00e9ment du\ntableau `t`.\n\nDans cet exercice, l\u2019op\u00e9rateur ```**```  et la fonction `pow` ne sont pas autoris\u00e9s.\n\nProgrammer en langage Python une fonction `liste_puissances` qui prend en arguments\nun nombre entier `a`, un entier strictement positif `n` et qui renvoie la liste de ses puissances\n$\\rm{[a^1, a^2, ..., a^n]}$.\n\nProgrammer \u00e9galement une fonction `liste_puisssances_borne` qui prend en\narguments un nombre entier `a` sup\u00e9rieur ou \u00e9gal \u00e0 2 et un entier `borne`, et qui renvoie la\nliste de ses puissances, \u00e0 l\u2019exclusion de $\\rm{a^0}$, strictement inf\u00e9rieures \u00e0 `borne`.\n\nExemples :\n\n```python\n&gt;&gt;&gt; liste_puissances(3, 5)\n[3, 9, 27, 81, 243]\n&gt;&gt;&gt; liste_puissances(-2, 4)\n[-2, 4, -8, 16]\n&gt;&gt;&gt; liste_puissances_borne(2, 16)\n[2, 4, 8]\n&gt;&gt;&gt; liste_puissances_borne(2, 17)\n[2, 4, 8, 16]\n&gt;&gt;&gt; liste_puissances_borne(5, 5)\n[]\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-192","title":"Exercice 19.2","text":"<p>Exercice 19.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On affecte \u00e0 chaque lettre de l'alphabet un code selon le tableau ci-dessous :</p> A B C D E F G H I J K L M 1 2 3 4 5 6 7 8 9 10 11 12 13 N O P Q R S T U V W X Y Z 14 15 16 17 18 19 20 21 22 23 24 25 26 <p>Cette table de correspondance est stock\u00e9e dans un dictionnaire <code>dico</code> o\u00f9 les cl\u00e9s sont les lettres de l\u2019alphabet et les valeurs les codes correspondants.</p> \ud83d\udc0d Script Python<pre><code>dico = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6,\n        \"G\": 7, \"H\": 8, \"I\": 9, \"J\": 10, \"K\": 11, \"L\": 12,\n        \"M\": 13, \"N\": 14, \"O\": 15, \"P\": 16, \"Q\": 17,\n        \"R\": 18, \"S\": 19, \"T\": 20, \"U\": 21, \"V\": 22,\n        \"W\": 23, \"X\": 24, \"Y\": 25, \"Z\": 26}\n</code></pre> <p>Pour un mot donn\u00e9, on d\u00e9termine d\u2019une part son code alphab\u00e9tique concat\u00e9n\u00e9, obtenu par la juxtaposition des codes de chacun de ses caract\u00e8res, et d\u2019autre part, son code additionn\u00e9, qui est la somme des codes de chacun de ses caract\u00e8res.</p> <p>Par ailleurs, on dit que ce mot est \u00ab parfait \u00bb si le code additionn\u00e9 divise le code concat\u00e9n\u00e9.</p> <p>Exemples :</p> <ul> <li> <p>Pour le mot <code>\"PAUL\"</code>, le code concat\u00e9n\u00e9 est la cha\u00eene <code>'1612112'</code>, soit l\u2019entier 1 612 112. Son code additionn\u00e9 est l\u2019entier 50 car 16 + 1 + 21 + 12 = 50. 50 ne divise pas l\u2019entier 1 612 112 ; par cons\u00e9quent, le mot <code>\"PAUL\"</code> n\u2019est pas parfait.</p> </li> <li> <p>Pour le mot <code>\"ALAIN\"</code>, le code concat\u00e9n\u00e9 est la cha\u00eene <code>'1121914'</code>, soit l\u2019entier 1 121 914. Le code additionn\u00e9 est l\u2019entier 37 car 1 + 12 + 1 + 9 + 14 = 37. 37 divise l\u2019entier 1 121 914 ; par cons\u00e9quent, le mot <code>\"ALAIN\"</code> est parfait.</p> </li> </ul> <p>Compl\u00e9ter la fonction <code>codes_parfait</code> situ\u00e9e \u00e0 la page suivante et qui prend en param\u00e8tre un mot en majuscule et renvoie un triplet constitu\u00e9 du code additionn\u00e9, du code concat\u00e9n\u00e9 et d\u2019un bool\u00e9en indiquant si le mot est parfait ou non.</p> <p>On rappelle que pour tester si un entier <code>a</code> divise un entier <code>b</code>, on utilise l\u2019op\u00e9rateur modulo <code>b % a</code> qui renvoie le reste de la division euclidienne de <code>b</code> par <code>a</code>. Si<code>b % a</code> vaut <code>0</code>, alors <code>a</code> divise <code>b</code>.</p> \ud83d\udc0d Script Python<pre><code>def codes_parfait(mot):\n    \"\"\"Renvoie un triplet \n    (code_additionne, code_concatene, mot_est_parfait) o\u00f9 :\n    - code_additionne est la somme des codes des lettres du mot ;\n    - code_concatene est le code des lettres du mot concat\u00e9n\u00e9es ;\n    - mot_est_parfait est un bool\u00e9en indiquant si le mot est parfait.\"\"\"\n    code_concatene = \"\"\n    code_additionne = ... \n    for c in mot:\n        code_concatene = code_concatene + ... \n        code_additionne = code_additionne + ... \n    code_concatene = int(code_concatene)\n    mot_est_parfait = ... \n    return code_additionne, code_concatene, mot_est_parfait\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; est_parfait(\"PAUL\")\n(50, 1612112, False)\n&gt;&gt;&gt; est_parfait(\"ALAIN\")\n(37, 1121914, True)\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>dico = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6,\n        \"G\": 7, \"H\": 8, \"I\": 9, \"J\": 10, \"K\": 11, \"L\": 12,\n        \"M\": 13, \"N\": 14, \"O\": 15, \"P\": 16, \"Q\": 17,\n        \"R\": 18, \"S\": 19, \"T\": 20, \"U\": 21, \"V\": 22,\n        \"W\": 23, \"X\": 24, \"Y\": 25, \"Z\": 26}\n\n\ndef est_parfait(mot):\n    # mot est une cha\u00eene de caract\u00e8res (en lettres majuscules)\n    code_concatene = \"\"\n    code_additionne = 0\n    for c in mot:\n        code_concatene = code_concatene + str(dico[c])\n        code_additionne = code_additionne + dico[c]\n    code_concatene = int(code_concatene)\n    if code_concatene % code_additionne == 0:\n        mot_est_parfait = True\n    else:\n        mot_est_parfait = False\n    return code_additionne, code_concatene, mot_est_parfait\n</code></pre> Markdown<pre><code>On affecte \u00e0 chaque lettre de l'alphabet un code selon le tableau ci-dessous :\n\n| A | B | C | D | E | F | G | H | I | J | K | L | M |\n|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|\n| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 |\n\n\n| N | O | P | Q | R | S | T | U | V | W | X | Y | Z | \n|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|\n| 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | \n\nCette table de correspondance est stock\u00e9e dans un dictionnaire `dico` o\u00f9 les cl\u00e9s sont les\nlettres de l\u2019alphabet et les valeurs les codes correspondants.\n\n```python\ndico = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6,\n        \"G\": 7, \"H\": 8, \"I\": 9, \"J\": 10, \"K\": 11, \"L\": 12,\n        \"M\": 13, \"N\": 14, \"O\": 15, \"P\": 16, \"Q\": 17,\n        \"R\": 18, \"S\": 19, \"T\": 20, \"U\": 21, \"V\": 22,\n        \"W\": 23, \"X\": 24, \"Y\": 25, \"Z\": 26}\n</code></pre> <p>Pour un mot donn\u00e9, on d\u00e9termine d\u2019une part son code alphab\u00e9tique concat\u00e9n\u00e9, obtenu par la juxtaposition des codes de chacun de ses caract\u00e8res, et d\u2019autre part, son code additionn\u00e9, qui est la somme des codes de chacun de ses caract\u00e8res.</p> <p>Par ailleurs, on dit que ce mot est \u00ab parfait \u00bb si le code additionn\u00e9 divise le code concat\u00e9n\u00e9.</p> <p>Exemples :</p> <ul> <li> <p>Pour le mot <code>\"PAUL\"</code>, le code concat\u00e9n\u00e9 est la cha\u00eene <code>'1612112'</code>, soit l\u2019entier 1 612 112. Son code additionn\u00e9 est l\u2019entier 50 car 16 + 1 + 21 + 12 = 50. 50 ne divise pas l\u2019entier 1 612 112 ; par cons\u00e9quent, le mot <code>\"PAUL\"</code> n\u2019est pas parfait.</p> </li> <li> <p>Pour le mot <code>\"ALAIN\"</code>, le code concat\u00e9n\u00e9 est la cha\u00eene <code>'1121914'</code>, soit l\u2019entier 1 121 914. Le code additionn\u00e9 est l\u2019entier 37 car 1 + 12 + 1 + 9 + 14 = 37. 37 divise l\u2019entier 1 121 914 ; par cons\u00e9quent, le mot <code>\"ALAIN\"</code> est parfait.</p> </li> </ul> <p>Compl\u00e9ter la fonction <code>codes_parfait</code> situ\u00e9e \u00e0 la page suivante et qui prend en param\u00e8tre un mot en majuscule et renvoie un triplet constitu\u00e9 du code additionn\u00e9, du code concat\u00e9n\u00e9 et d\u2019un bool\u00e9en indiquant si le mot est parfait ou non.</p> <p>On rappelle que pour tester si un entier <code>a</code> divise un entier <code>b</code>, on utilise l\u2019op\u00e9rateur modulo <code>b % a</code> qui renvoie le reste de la division euclidienne de <code>b</code> par <code>a</code>. Si<code>b % a</code> vaut <code>0</code>, alors <code>a</code> divise <code>b</code>.</p> \ud83d\udc0d Script Python<pre><code>def codes_parfait(mot):\n    \"\"\"Renvoie un triplet \n    (code_additionne, code_concatene, mot_est_parfait) o\u00f9 :\n    - code_additionne est la somme des codes des lettres du mot ;\n    - code_concatene est le code des lettres du mot concat\u00e9n\u00e9es ;\n    - mot_est_parfait est un bool\u00e9en indiquant si le mot est parfait.\"\"\"\n    code_concatene = \"\"\n    code_additionne = ... \n    for c in mot:\n        code_concatene = code_concatene + ... \n        code_additionne = code_additionne + ... \n    code_concatene = int(code_concatene)\n    mot_est_parfait = ... \n    return code_additionne, code_concatene, mot_est_parfait\n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; est_parfait(\"PAUL\")\n(50, 1612112, False)\n&gt;&gt;&gt; est_parfait(\"ALAIN\")\n(37, 1121914, True)\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-20","title":"\u25b6 Sujet 20","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-201","title":"Exercice 20.1","text":"<p>Exercice 20.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Dans cet exercice les tableaux sont repr\u00e9sent\u00e9s par des listes Python (type <code>list</code>).</p> <p>\u00c9crire en python deux fonctions :</p> <ul> <li><code>lancer</code> de param\u00e8tre <code>n</code>, un entier positif, qui renvoie un tableau de <code>n</code> entiers obtenus al\u00e9atoirement entre 1 et 6 (1 et 6 inclus) ;</li> <li><code>paire_6</code> de param\u00e8tre <code>tab</code>, un tableau de n entiers compris entre 1 et 6 et qui renvoie un bool\u00e9en \u00e9gal \u00e0 <code>True</code> si le nombre de 6 est sup\u00e9rieur ou \u00e9gal \u00e0 2, <code>False</code> sinon.</li> </ul> <p>On pourra utiliser la fonction <code>randint(a,b)</code> du module <code>random</code> pour laquelle la documentation officielle est la suivante :</p> <p><code>random.randint(a, b)</code> <code>Renvoie un entier al\u00e9atoire N tel que a &lt;=N &lt;= b.</code></p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; lancer1 = lancer(5)\n[5, 6, 6, 2, 2]\n&gt;&gt;&gt; paire_6(lancer1)\nTrue\n&gt;&gt;&gt; lancer2 = lancer(5)\n[6, 5, 1, 6, 6]\n&gt;&gt;&gt; paire_6(lancer2)\nTrue\n&gt;&gt;&gt; lancer3 = lancer(3)\n[2, 2, 6]\n&gt;&gt;&gt; paire_6(lancer3)\nFalse\n&gt;&gt;&gt; lancer4 = lancer(0)\n[]\n&gt;&gt;&gt; paire_6(lancer4)\nFalse\n</code></pre> \ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef lancer(n):\n    return [randint(1, 6) for _ in range(n)]\n\ndef paire_6(tab):\n    nb = 0\n    for elt in tab:\n        if elt == 6:\n            nb += 1\n    if nb &gt;= 2 :\n        return True\n    else:\n        return False\n</code></pre> \ud83d\udccb Texte<pre><code>Dans cet exercice les tableaux sont repr\u00e9sent\u00e9s par des listes Python (type `list`).\n\n\u00c9crire en python deux fonctions :\n\n- `lancer` de param\u00e8tre `n`, un entier positif, qui renvoie un tableau de `n` entiers obtenus\nal\u00e9atoirement entre 1 et 6 (1 et 6 inclus) ;\n- `paire_6` de param\u00e8tre `tab`, un tableau de n entiers compris entre 1 et 6 et qui\nrenvoie un bool\u00e9en \u00e9gal \u00e0 `True` si le nombre de 6 est sup\u00e9rieur ou \u00e9gal \u00e0 2, `False`\nsinon.\n\nOn pourra utiliser la fonction `randint(a,b)` du module `random` pour laquelle la\ndocumentation officielle est la suivante :\n\n`random.randint(a, b)`\n`      Renvoie un entier al\u00e9atoire N tel que a &lt;=N &lt;= b.`\n\nExemples :\n\n```python\n&gt;&gt;&gt; lancer1 = lancer(5)\n[5, 6, 6, 2, 2]\n&gt;&gt;&gt; paire_6(lancer1)\nTrue\n&gt;&gt;&gt; lancer2 = lancer(5)\n[6, 5, 1, 6, 6]\n&gt;&gt;&gt; paire_6(lancer2)\nTrue\n&gt;&gt;&gt; lancer3 = lancer(3)\n[2, 2, 6]\n&gt;&gt;&gt; paire_6(lancer3)\nFalse\n&gt;&gt;&gt; lancer4 = lancer(0)\n[]\n&gt;&gt;&gt; paire_6(lancer4)\nFalse\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-202","title":"Exercice 20.2","text":"<p>Exercice 20.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On consid\u00e8re une image en 256 niveaux de gris que l\u2019on repr\u00e9sente par une grille de nombres, c\u2019est-\u00e0-dire une liste compos\u00e9e de sous-listes toutes de longueurs identiques.</p> <p>La largeur de l\u2019image est donc la longueur d\u2019une sous-liste et la hauteur de l\u2019image est le nombre de sous-listes.</p> <p>Chaque sous-liste repr\u00e9sente une ligne de l\u2019image et chaque \u00e9l\u00e9ment des sous-listes est un entier compris entre 0 et 255, repr\u00e9sentant l\u2019intensit\u00e9 lumineuse du pixel.</p> <p>Le n\u00e9gatif d\u2019une image est l\u2019image constitu\u00e9e des pixels <code>x_n</code> tels que <code>x_n + x_i = 255</code> o\u00f9 <code>x_i</code> est le pixel correspondant de l\u2019image initiale.</p> <p>Compl\u00e9ter le programme suivant : \ud83d\udc0d Script Python<pre><code>def nombre_lignes(image):\n    '''renvoie le nombre de lignes de l'image'''\n    return ... \n\ndef nombre_colonnes(image):\n    '''renvoie la largeur de l'image'''\n    return ... \n\ndef negatif(image):\n    '''renvoie le negatif de l'image sous la forme\n       d'une liste de listes'''\n    # on cree une image de 0 aux memes dimensions \n    # que le parametre image\n    nouvelle_image = [[0 for k in range(nombre_colonnes(image))]\n         for i in range(nombre_lignes(image))]\n\n    for i in range(nombre_lignes(image)):\n        for j in range(...): \n            nouvelle_image[i][j] = ... \n    return nouvelle_image\n\ndef binaire(image, seuil):\n    '''renvoie une image binarisee de l'image sous la forme\n       d'une liste de listes contenant des 0 si la valeur\n       du pixel est strictement inferieure au seuil et 1 sinon'''\n    nouvelle_image = [[0] * nombre_colonnes(image)\n                      for i in range(nombre_lignes(image))]\n\n    for i in range(nombre_lignes(image)):\n        for j in range(...): \n            if image[i][j] &lt; ... : \n                nouvelle_image[i][j] = ... \n            else:\n                nouvelle_image[i][j] = ... \n    return nouvelle_image\n</code></pre></p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; img=[[20, 34, 254, 145, 6], [23, 124, 237, 225, 69],\n[197, 174, 207, 25, 87], [255, 0, 24, 197, 189]]\n&gt;&gt;&gt; nombre_lignes(img)\n4\n&gt;&gt;&gt; nombre_colonnes(img)\n5\n&gt;&gt;&gt; negatif(img)\n[[235, 221, 1, 110, 249], [232, 131, 18, 30, 186],\n[58, 81, 48, 230, 168], [0, 255, 231, 58, 66]]\n&gt;&gt;&gt; binaire(img,120)\n[[0, 0, 1, 1, 0],[0, 1, 1, 1, 0],[1, 1, 1, 0, 0],[1, 0, 0, 1, 1]]\n</code></pre> \ud83d\udc0d Script Python<pre><code>def nombre_lignes(image):\n    '''renvoie le nombre de lignes de l'image'''\n    return len(image) \n\ndef nombre_colonnes(image):\n    '''renvoie la largeur de l'image'''\n    return len(image[0]) \n\ndef negatif(image):\n    '''renvoie le negatif de l'image sous la forme\n       d'une liste de listes'''\n    # on cree une image de 0 aux memes dimensions \n    # que le parametre image\n    nouvelle_image = [[0 for k in range(nombre_colonnes(image))]\n         for i in range(nombre_lignes(image))]\n\n    for i in range(nombre_lignes(image)):\n        for j in range(nombre_colonnes(image)): \n            nouvelle_image[i][j] = 255 - image[i][j] \n    return nouvelle_image\n\ndef binaire(image, seuil):\n    '''renvoie une image binarisee de l'image sous la forme\n       d'une liste de listes contenant des 0 si la valeur\n       du pixel est strictement inferieure au seuil et 1 sinon'''\n    nouvelle_image = [[0] * nombre_colonnes(image)\n                      for i in range(nombre_lignes(image))]\n\n    for i in range(nombre_lignes(image)):\n        for j in range(nombre_colonnes(image)): \n            if image[i][j] &lt; seuil : \n                nouvelle_image[i][j] = 0 \n            else:\n                nouvelle_image[i][j] = 1 \n    return nouvelle_image\n</code></pre> Markdown<pre><code>On consid\u00e8re une image en 256 niveaux de gris que l\u2019on repr\u00e9sente par une grille de\nnombres, c\u2019est-\u00e0-dire une liste compos\u00e9e de sous-listes toutes de longueurs identiques.\n\n\nLa largeur de l\u2019image est donc la longueur d\u2019une sous-liste et la hauteur de l\u2019image est le\nnombre de sous-listes.\n\n\nChaque sous-liste repr\u00e9sente une ligne de l\u2019image et chaque \u00e9l\u00e9ment des sous-listes est\nun entier compris entre 0 et 255, repr\u00e9sentant l\u2019intensit\u00e9 lumineuse du pixel.\n\n\nLe n\u00e9gatif d\u2019une image est l\u2019image constitu\u00e9e des pixels `x_n` tels que\n`x_n + x_i = 255` o\u00f9 `x_i` est le pixel correspondant de l\u2019image initiale.\n\nCompl\u00e9ter le programme suivant :\n```python linenums='1'\ndef nombre_lignes(image):\n    '''renvoie le nombre de lignes de l'image'''\n    return ... \n\ndef nombre_colonnes(image):\n    '''renvoie la largeur de l'image'''\n    return ... \n\ndef negatif(image):\n    '''renvoie le negatif de l'image sous la forme\n       d'une liste de listes'''\n    # on cree une image de 0 aux memes dimensions \n    # que le parametre image\n    nouvelle_image = [[0 for k in range(nombre_colonnes(image))]\n         for i in range(nombre_lignes(image))]\n\n    for i in range(nombre_lignes(image)):\n        for j in range(...): \n            nouvelle_image[i][j] = ... \n    return nouvelle_image\n\ndef binaire(image, seuil):\n    '''renvoie une image binarisee de l'image sous la forme\n       d'une liste de listes contenant des 0 si la valeur\n       du pixel est strictement inferieure au seuil et 1 sinon'''\n    nouvelle_image = [[0] * nombre_colonnes(image)\n                      for i in range(nombre_lignes(image))]\n\n    for i in range(nombre_lignes(image)):\n        for j in range(...): \n            if image[i][j] &lt; ... : \n                nouvelle_image[i][j] = ... \n            else:\n                nouvelle_image[i][j] = ... \n    return nouvelle_image\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; img=[[20, 34, 254, 145, 6], [23, 124, 237, 225, 69],\n[197, 174, 207, 25, 87], [255, 0, 24, 197, 189]]\n&gt;&gt;&gt; nombre_lignes(img)\n4\n&gt;&gt;&gt; nombre_colonnes(img)\n5\n&gt;&gt;&gt; negatif(img)\n[[235, 221, 1, 110, 249], [232, 131, 18, 30, 186],\n[58, 81, 48, 230, 168], [0, 255, 231, 58, 66]]\n&gt;&gt;&gt; binaire(img,120)\n[[0, 0, 1, 1, 0],[0, 1, 1, 1, 0],[1, 1, 1, 0, 0],[1, 0, 0, 1, 1]]\n</code></pre> <p>```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-21","title":"\u25b6 Sujet 21","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-211","title":"Exercice 21.1","text":"<p>Exercice 21.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>recherche_motif</code> qui prend en param\u00e8tre une cha\u00eene de caract\u00e8res <code>motif</code> non vide et une cha\u00eene de caract\u00e8res <code>texte</code> et qui renvoie la liste des positions de <code>motif</code> dans <code>texte</code>. Si <code>motif</code> n\u2019appara\u00eet pas, la fonction renvoie une liste vide.</p> <p>Exemples:</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche_motif(\"ab\", \"\")\n[]\n&gt;&gt;&gt; recherche_motif(\"ab\", \"cdcdcdcd\")\n[]\n&gt;&gt;&gt; recherche_motif(\"ab\", \"abracadabra\")\n[0, 7]\n&gt;&gt;&gt; recherche_motif(\"ab\", \"abracadabraab\")\n[0, 7, 11]\n</code></pre> \ud83d\udc0d Script Python<pre><code>def recherche_motif(motif, texte):\n    sol = []\n    i = 0\n    while i &lt;= len(texte) - len(motif):\n        j = 0\n        while j &lt; len(motif) and motif[j] == texte[j+i]:\n            j += 1\n        if j == len(motif):\n            sol.append(i)\n        i += 1\n    return sol\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `recherche_motif` qui prend en param\u00e8tre une cha\u00eene de caract\u00e8res\n`motif` non vide et une cha\u00eene de caract\u00e8res `texte` et qui renvoie la liste des positions de\n`motif` dans `texte`. Si `motif` n\u2019appara\u00eet pas, la fonction renvoie une liste vide.\n\nExemples:\n\n```python\n&gt;&gt;&gt; recherche_motif(\"ab\", \"\")\n[]\n&gt;&gt;&gt; recherche_motif(\"ab\", \"cdcdcdcd\")\n[]\n&gt;&gt;&gt; recherche_motif(\"ab\", \"abracadabra\")\n[0, 7]\n&gt;&gt;&gt; recherche_motif(\"ab\", \"abracadabraab\")\n[0, 7, 11]\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-212","title":"Exercice 21.2","text":"<p>Exercice 21.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Dans cet exercice, on consid\u00e8re un graphe non orient\u00e9 repr\u00e9sent\u00e9 sous forme de listes d\u2019adjacence. On suppose que les sommets sont num\u00e9rot\u00e9s de 0 \u00e0 n-1.</p> <p>Ainsi, le graphe suivant:</p> <p></p> <p>sera repr\u00e9sent\u00e9 par la liste d\u2019adjacence suivante:</p> <p><code>adj = [[1, 2], [0, 3], [0], [1], [5], [4]]</code></p> <p>On souhaite d\u00e9terminer les sommets accessibles depuis un sommet donn\u00e9 dans le graphe. Pour cela, on va proc\u00e9der \u00e0 un parcours en profondeur du graphe.</p> <p>Compl\u00e9ter la fonction suivante.</p> \ud83d\udc0d Script Python<pre><code>def parcours(adj, x, acc):\n    '''R\u00e9alise un parcours en profondeur r\u00e9cursif\n    du graphe donn\u00e9 par les listes d'adjacence adj \n    depuis le sommet x en accumulant les sommets\n    rencontr\u00e9s dans acc'''\n    if x ...: \n        acc.append(x)\n        for y in ...: \n            parcours(adj, ...) \n\ndef accessibles(adj, x):\n    '''Renvoie la liste des sommets accessibles dans le\n    graphe donn\u00e9 par les listes d'adjacence adj depuis\n    le sommet x.'''\n    acc = []\n    parcours(adj, ...) \n    return acc\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; accessibles([[1, 2], [0], [0, 3], [1], [5], [4]], 0)\n[0, 1, 2, 3]\n&gt;&gt;&gt; accessibles([[1, 2], [0], [0, 3], [1], [5], [4]], 4)\n[4, 5]\n</code></pre> \ud83d\udc0d Script Python<pre><code>adj = [[1, 2], [0, 3], [0], [1], [5], [4]]\n\ndef parcours(adj, x, acc):\n    '''R\u00e9alise un parcours en profondeur r\u00e9cursif\n    du graphe donn\u00e9 par les listes d'adjacence adj\n    depuis le sommet x en accumulant les sommets\n    rencontr\u00e9s dans acc'''\n    if x not in acc:\n        acc.append(x)\n        for y in adj[x]:\n            parcours(adj, y, acc)\n\ndef accessibles(adj, x):\n    '''Renvoie la liste des sommets accessibles dans le\n    graphe donn\u00e9 par les listes d'adjacence adj depuis\n    le sommet x.'''\n    acc = []\n    parcours(adj, x, acc)\n    return acc\n</code></pre> Markdown<pre><code>Dans cet exercice, on consid\u00e8re un graphe non orient\u00e9 repr\u00e9sent\u00e9 sous forme de listes\nd\u2019adjacence. On suppose que les sommets sont num\u00e9rot\u00e9s de 0 \u00e0 n-1.\n\nAinsi, le graphe suivant:\n\n![image](data2024/graph1.png){: .center}\n\n\nsera repr\u00e9sent\u00e9 par la liste d\u2019adjacence suivante:\n\n`adj = [[1, 2], [0, 3], [0], [1], [5], [4]]`\n\nOn souhaite d\u00e9terminer les sommets accessibles depuis un sommet donn\u00e9 dans le graphe.\nPour cela, on va proc\u00e9der \u00e0 un parcours en profondeur du graphe.\n\nCompl\u00e9ter la fonction suivante.\n\n```python linenums='1'\ndef parcours(adj, x, acc):\n    '''R\u00e9alise un parcours en profondeur r\u00e9cursif\n    du graphe donn\u00e9 par les listes d'adjacence adj \n    depuis le sommet x en accumulant les sommets\n    rencontr\u00e9s dans acc'''\n    if x ...: \n        acc.append(x)\n        for y in ...: \n            parcours(adj, ...) \n\ndef accessibles(adj, x):\n    '''Renvoie la liste des sommets accessibles dans le\n    graphe donn\u00e9 par les listes d'adjacence adj depuis\n    le sommet x.'''\n    acc = []\n    parcours(adj, ...) \n    return acc\n</code></pre> <p>Exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; accessibles([[1, 2], [0], [0, 3], [1], [5], [4]], 0)\n[0, 1, 2, 3]\n&gt;&gt;&gt; accessibles([[1, 2], [0], [0, 3], [1], [5], [4]], 4)\n[4, 5]\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-22","title":"\u25b6 Sujet 22","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-221","title":"Exercice 22.1","text":"<p>Exercice 22.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>recherche_indices_classement</code> qui prend en param\u00e8tres un entier <code>elt</code> et un tableau d\u2019entiers <code>tab</code>, et qui renvoie trois listes :</p> <ul> <li>la premi\u00e8re liste contient les indices des valeurs du tableau <code>tab</code> strictement inf\u00e9rieures \u00e0 <code>elt</code> ;</li> <li>la deuxi\u00e8me liste contient les indices des valeurs du tableau <code>tab</code> \u00e9gales \u00e0 <code>elt</code> ;</li> <li>la troisi\u00e8me liste contient les indices des valeurs du tableau <code>tab</code> strictement sup\u00e9rieures \u00e0 <code>elt</code>.</li> </ul> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche_indices_classement(3, [1, 3, 4, 2, 4, 6, 3, 0])\n([0, 3, 7], [1, 6], [2, 4, 5])\n&gt;&gt;&gt; recherche_indices_classement(3, [1, 4, 2, 4, 6, 0])\n([0, 2, 5], [], [1, 3, 4])\n&gt;&gt;&gt;recherche_indices_classement(3, [1, 1, 1, 1])\n([0, 1, 2, 3], [], [])\n&gt;&gt;&gt; recherche_indices_classement(3, [])\n([], [], [])\n</code></pre> \ud83d\udc0d Script Python<pre><code>def recherche_indices_classement(elt, tab):\n    ind_inf = []\n    ind_egal = []\n    ind_sup = [] \n    for i in range(len(tab)):\n        if tab[i] &lt; elt:\n            ind_inf.append(i)\n        elif tab[i] &gt; elt:\n            ind_sup.append(i)\n        else:\n            ind_egal.append(i)\n    return (ind_inf, ind_egal, ind_sup)\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `recherche_indices_classement` qui prend en param\u00e8tres un\nentier `elt` et un tableau d\u2019entiers `tab`, et qui renvoie trois listes :\n\n- la premi\u00e8re liste contient les indices des valeurs du tableau `tab` strictement\ninf\u00e9rieures \u00e0 `elt` ;\n- la deuxi\u00e8me liste contient les indices des valeurs du tableau `tab` \u00e9gales \u00e0 `elt` ;\n- la troisi\u00e8me liste contient les indices des valeurs du tableau `tab` strictement\nsup\u00e9rieures \u00e0 `elt`.\n\nExemples :\n\n```python\n&gt;&gt;&gt; recherche_indices_classement(3, [1, 3, 4, 2, 4, 6, 3, 0])\n([0, 3, 7], [1, 6], [2, 4, 5])\n&gt;&gt;&gt; recherche_indices_classement(3, [1, 4, 2, 4, 6, 0])\n([0, 2, 5], [], [1, 3, 4])\n&gt;&gt;&gt;recherche_indices_classement(3, [1, 1, 1, 1])\n([0, 1, 2, 3], [], [])\n&gt;&gt;&gt; recherche_indices_classement(3, [])\n([], [], [])\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-222","title":"Exercice 22.2","text":"<p>Exercice 22.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Une professeure de NSI d\u00e9cide de g\u00e9rer les r\u00e9sultats de sa classe sous la forme d\u2019un dictionnaire :</p> <ul> <li>les clefs sont les noms des \u00e9l\u00e8ves ;</li> <li>les valeurs sont des dictionnaires dont les clefs sont les types d\u2019\u00e9preuves sous forme de cha\u00eene de caract\u00e8res et les valeurs sont les notes obtenues associ\u00e9es \u00e0 leurs coefficients dans une liste.</li> </ul> <p>Avec :</p> \ud83d\udc0d Script Python<pre><code>resultats = {'Dupont': {\n                        'DS1': [15.5, 4],\n                        'DM1': [14.5, 1],\n                        'DS2': [13, 4],\n                        'PROJET1': [16, 3],\n                        'DS3': [14, 4]\n                    },\n            'Durand': {\n                        'DS1': [6 , 4],\n                        'DS2': [8, 4],\n                        'PROJET1': [9, 3],\n                        'IE1': [7, 2],\n                        'DS3': [8, 4]\n                    }\n            }\n</code></pre> <p>L\u2019\u00e9l\u00e8ve dont le nom est Durand a ainsi obtenu au DS2 la note de 8 avec un coefficient 4.</p> <p>Le professeur cr\u00e9e une fonction <code>moyenne</code> qui prend en param\u00e8tre le nom d\u2019un de ses \u00e9l\u00e8ves et renvoie sa moyenne arrondie au dixi\u00e8me. Si l\u2019\u00e9l\u00e8ve n\u2019a pas de notes, on consid\u00e8re que sa moyenne est nulle. Si le nom donn\u00e9 n\u2019est pas dans les r\u00e9sultats, la fonction renvoie <code>None</code>.</p> <p>Compl\u00e9ter le code de la professeure ci-dessous : \ud83d\udc0d Script Python<pre><code>def moyenne(nom, resultats):\n    '''Renvoie la moyenne de l'\u00e9l\u00e8ve nom, selon le dictionnaire \n    resultats. Si nom n'est pas dans le dictionnaire, \n    la fonction renvoie None.'''\n    if nom in ...: \n        notes = resultats[nom]\n        if ...: # pas de notes \n            return 0\n        total_points = ... \n        total_coefficients = ... \n        for ...  in notes.values(): \n            note, coefficient = valeurs\n            total_points = total_points + ... * coefficient \n            ... = ... + coefficient \n        return round( ... / total_coefficients, 1 ) \n    else:\n        return None\n</code></pre></p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; moyenne(\"Dupont\", resultats)\n14.5\n&gt;&gt;&gt; moyenne(\"Durand\", resultats)\n8.5\n</code></pre> \ud83d\udc0d Script Python<pre><code>def moyenne(nom, resultats):\n    '''Renvoie la moyenne de l'\u00e9l\u00e8ve nom, selon le dictionnaire \n    resultats. Si nom n'est pas dans le dictionnaire, \n    la fonction renvoie None.'''\n    if nom in resultats: \n        notes = resultats[nom]\n        if notes == {}: # pas de notes \n            return 0\n        total_points = 0 \n        total_coefficients = 0 \n        for valeurs in notes.values(): \n            note, coefficient = valeurs\n            total_points = total_points + note * coefficient \n            total_coefficients = total_coefficients + coefficient \n        return round( total_points / total_coefficients, 1 ) \n    else:\n        return None\n</code></pre> Markdown<pre><code>Une professeure de NSI d\u00e9cide de g\u00e9rer les r\u00e9sultats de sa classe sous la forme d\u2019un\ndictionnaire :\n\n- les clefs sont les noms des \u00e9l\u00e8ves ;\n- les valeurs sont des dictionnaires dont les clefs sont les types d\u2019\u00e9preuves sous\nforme de cha\u00eene de caract\u00e8res et les valeurs sont les notes obtenues associ\u00e9es \u00e0\nleurs coefficients dans une liste.\n\nAvec :\n\n```python\nresultats = {'Dupont': {\n                        'DS1': [15.5, 4],\n                        'DM1': [14.5, 1],\n                        'DS2': [13, 4],\n                        'PROJET1': [16, 3],\n                        'DS3': [14, 4]\n                    },\n            'Durand': {\n                        'DS1': [6 , 4],\n                        'DS2': [8, 4],\n                        'PROJET1': [9, 3],\n                        'IE1': [7, 2],\n                        'DS3': [8, 4]\n                    }\n            }\n</code></pre> <p>L\u2019\u00e9l\u00e8ve dont le nom est Durand a ainsi obtenu au DS2 la note de 8 avec un coefficient 4.</p> <p>Le professeur cr\u00e9e une fonction <code>moyenne</code> qui prend en param\u00e8tre le nom d\u2019un de ses \u00e9l\u00e8ves et renvoie sa moyenne arrondie au dixi\u00e8me. Si l\u2019\u00e9l\u00e8ve n\u2019a pas de notes, on consid\u00e8re que sa moyenne est nulle. Si le nom donn\u00e9 n\u2019est pas dans les r\u00e9sultats, la fonction renvoie <code>None</code>.</p> <p>Compl\u00e9ter le code de la professeure ci-dessous : \ud83d\udc0d Script Python<pre><code>def moyenne(nom, resultats):\n    '''Renvoie la moyenne de l'\u00e9l\u00e8ve nom, selon le dictionnaire \n    resultats. Si nom n'est pas dans le dictionnaire, \n    la fonction renvoie None.'''\n    if nom in ...: \n        notes = resultats[nom]\n        if ...: # pas de notes \n            return 0\n        total_points = ... \n        total_coefficients = ... \n        for ...  in notes.values(): \n            note, coefficient = valeurs\n            total_points = total_points + ... * coefficient \n            ... = ... + coefficient \n        return round( ... / total_coefficients, 1 ) \n    else:\n        return None\n</code></pre></p> <p>Exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; moyenne(\"Dupont\", resultats)\n14.5\n&gt;&gt;&gt; moyenne(\"Durand\", resultats)\n8.5\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-23","title":"\u25b6 Sujet 23","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-231","title":"Exercice 23.1","text":"<p>Exercice 23.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Dans cet exercice, on consid\u00e8re des arbres binaires de recherche qui sont :</p> <ul> <li>soit l\u2019arbre vide identifi\u00e9 par <code>None</code> ;</li> <li>soit un n\u0153ud, contenant une cl\u00e9 et deux sous-arbres gauche et droit et repr\u00e9sent\u00e9 par un triplet <code>(g, v, d)</code> o\u00f9 <code>g</code> et <code>d</code> sont les sous-arbres gauche et droit et <code>v</code> la cl\u00e9.</li> </ul> <p></p> <p>Ainsi, l\u2019arbre binaire de recherche <code>abr1</code> ci- contre est cr\u00e9\u00e9 par le code python ci- dessous</p> \ud83d\udc0d Script Python<pre><code>n0 = (None, 0, None)\nn3 = (None, 3, None)\nn2 = (None, 2, n3)\nabr1 = (n0, 1, n2)\n</code></pre> <p>\u00c9crire une fonction r\u00e9cursive <code>insertion_abr(a, cle)</code> qui prend en param\u00e8tres une cl\u00e9 <code>cle</code> et un arbre binaire de recherche <code>a</code>, et qui renvoie un arbre binaire de recherche dans lequel <code>cle</code> a \u00e9t\u00e9 ins\u00e9r\u00e9e. Dans le cas o\u00f9 <code>cle</code> est d\u00e9j\u00e0 pr\u00e9sente dans <code>a</code>, la fonction renvoie l\u2019arbre a inchang\u00e9.</p> <p>R\u00e9sultats \u00e0 obtenir :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; insertion_abr(abr1, 4)\n((None,0,None),1,(None,2,(None,3,(None,4,None))))\n&gt;&gt;&gt; insertion_abr(abr1, -5)\n(((None,-5,None),0,None),1,(None,2,(None,3,None)))\n&gt;&gt;&gt; insertion_abr(abr1, 2)\n((None,0,None),1,(None,2,(None,3,None)))\n</code></pre> \ud83d\udc0d Script Python<pre><code>def insertion_abr(a, cle): \n    if a is None:\n        return (None, cle, None)\n    elif cle &gt; a[1]:\n        return (a[0], a[1], insertion_abr(a[2], cle))\n    elif cle &lt; a[1]:\n        return (insertion_abr(a[0], cle), a[1], a[2])\n    return a\n</code></pre> \ud83d\udccb Texte<pre><code>Dans cet exercice, on consid\u00e8re des arbres binaires de recherche qui sont :\n\n- soit l\u2019arbre vide identifi\u00e9 par `None` ;\n- soit un n\u0153ud, contenant une cl\u00e9 et deux sous-arbres gauche et droit et repr\u00e9sent\u00e9\npar un triplet `(g, v, d)` o\u00f9 `g` et `d` sont les sous-arbres gauche et droit et `v` la cl\u00e9.\n\n![image](data2023/12_arbre.png){: .center width=30%}\n\nAinsi, l\u2019arbre binaire de recherche `abr1` ci-\ncontre est cr\u00e9\u00e9 par le code python ci-\ndessous\n\n```python\nn0 = (None, 0, None)\nn3 = (None, 3, None)\nn2 = (None, 2, n3)\nabr1 = (n0, 1, n2)\n```\n\n\u00c9crire une fonction r\u00e9cursive `insertion_abr(a, cle)` qui prend en param\u00e8tres une\ncl\u00e9 `cle` et un arbre binaire de recherche `a`, et qui renvoie un arbre binaire de recherche\ndans lequel `cle` a \u00e9t\u00e9 ins\u00e9r\u00e9e.\nDans le cas o\u00f9 `cle` est d\u00e9j\u00e0 pr\u00e9sente dans `a`, la fonction renvoie l\u2019arbre a inchang\u00e9.\n\nR\u00e9sultats \u00e0 obtenir :\n\n```python\n&gt;&gt;&gt; insertion_abr(abr1, 4)\n((None,0,None),1,(None,2,(None,3,(None,4,None))))\n&gt;&gt;&gt; insertion_abr(abr1, -5)\n(((None,-5,None),0,None),1,(None,2,(None,3,None)))\n&gt;&gt;&gt; insertion_abr(abr1, 2)\n((None,0,None),1,(None,2,(None,3,None)))\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-232","title":"Exercice 23.2","text":"<p>Exercice 23.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On dispose d\u2019un ensemble d\u2019objets dont on conna\u00eet, pour chacun, la masse. On souhaite ranger l\u2019ensemble de ces objets dans des boites identiques de telle mani\u00e8re que la somme des masses des objets contenus dans une bo\u00eete ne d\u00e9passe pas la capacit\u00e9 <code>c</code> de la bo\u00eete. On souhaite utiliser le moins de bo\u00eetes possibles pour ranger cet ensemble d\u2019objets.</p> <p>Pour r\u00e9soudre ce probl\u00e8me, on utilisera un algorithme glouton consistant \u00e0 placer chacun des objets dans la premi\u00e8re bo\u00eete o\u00f9 cela est possible.</p> <p>Par exemple, pour ranger dans des bo\u00eetes de capacit\u00e9 <code>c = 5</code> un ensemble de trois objets dont les masses sont repr\u00e9sent\u00e9es en Python par la liste <code>[1, 5, 2]</code>, on proc\u00e8de de la fa\u00e7on suivante :</p> <ul> <li>Le premier objet, de masse 1, va dans une premi\u00e8re boite.</li> <li>Le deuxi\u00e8me objet, de masse 5, ne peut pas aller dans la m\u00eame boite que le premier objet car cela d\u00e9passerait la capacit\u00e9 de la boite. On place donc cet objet dans une deuxi\u00e8me bo\u00eete.</li> <li>Le troisi\u00e8me objet, de masse 2, va dans la premi\u00e8re bo\u00eete.</li> </ul> <p>On a donc utilis\u00e9 deux bo\u00eetes de capacit\u00e9 <code>c = 5</code> pour ranger les 3 objets.</p> <p>Compl\u00e9ter la fonction Python <code>empaqueter(liste_masses, c)</code> suivante pour qu\u2019elle renvoie le nombre de bo\u00eetes de capacit\u00e9 c n\u00e9cessaires pour empaqueter un ensemble d\u2019objets dont les masses sont contenues dans la liste <code>liste_masses</code>.</p> \ud83d\udc0d Script Python<pre><code>def empaqueter(liste_masses, c):\n    \"\"\"Renvoie le nombre minimal de bo\u00eetes n\u00e9cessaires pour\n    empaqueter les objets de la liste liste_masses, sachant\n    que chaque bo\u00eete peut contenir au maximum c kilogrammes\"\"\"\n    n = len(liste_masses)\n    nb_boites = 0\n    boites = [ 0 for _ in range(n) ]\n    for masse in ...: \n        i = 0\n        while i &lt; nb_boites and boites[i] + ... &gt; c: \n            i = i + 1\n        if i == nb_boites:\n            ...\n        boites[i] = ... \n    return ... \n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; empaqueter([1, 2, 3, 4, 5], 10)\n2\n&gt;&gt;&gt; empaqueter([1, 2, 3, 4, 5], 5)\n4\n&gt;&gt;&gt; empaqueter([7, 6, 3, 4, 8, 5, 9, 2], 11)\n5\n</code></pre> \ud83d\udc0d Script Python<pre><code>def empaqueter(liste_masses, c):\n    \"\"\"Renvoie le nombre minimal de bo\u00eetes n\u00e9cessaires pour\n    empaqueter les objets de la liste liste_masses, sachant\n    que chaque bo\u00eete peut contenir au maximum c kilogrammes\"\"\"\n    n = len(liste_masses)\n    nb_boites = 0\n    boites = [ 0 for _ in range(n) ]\n    for masse in liste_masses: \n        i = 0\n        while i &lt; nb_boites and boites[i] + masse &gt; c: \n            i = i + 1\n        if i == nb_boites:\n            nb_boites = nb_boites + 1\n        boites[i] = boites[i] + masse \n    return nb_boites\n</code></pre> Markdown<pre><code>On dispose d\u2019un ensemble d\u2019objets dont on conna\u00eet, pour chacun, la masse. On\nsouhaite ranger l\u2019ensemble de ces objets dans des boites identiques de telle\nmani\u00e8re que la somme des masses des objets contenus dans une bo\u00eete ne d\u00e9passe\npas la capacit\u00e9 `c` de la bo\u00eete. On souhaite utiliser le moins de bo\u00eetes possibles pour\nranger cet ensemble d\u2019objets.\n\n\nPour r\u00e9soudre ce probl\u00e8me, on utilisera un algorithme glouton consistant \u00e0 placer\nchacun des objets dans la premi\u00e8re bo\u00eete o\u00f9 cela est possible.\n\nPar exemple, pour ranger dans des bo\u00eetes de capacit\u00e9 `c = 5` un ensemble de trois\nobjets dont les masses sont repr\u00e9sent\u00e9es en Python par la liste `[1, 5, 2]`, on\nproc\u00e8de de la fa\u00e7on suivante :\n\n- Le premier objet, de masse 1, va dans une premi\u00e8re boite.\n- Le deuxi\u00e8me objet, de masse 5, ne peut pas aller dans la m\u00eame boite que le\npremier objet car cela d\u00e9passerait la capacit\u00e9 de la boite. On place donc cet\nobjet dans une deuxi\u00e8me bo\u00eete.\n- Le troisi\u00e8me objet, de masse 2, va dans la premi\u00e8re bo\u00eete.\n\nOn a donc utilis\u00e9 deux bo\u00eetes de capacit\u00e9 `c = 5` pour ranger les 3 objets.\n\nCompl\u00e9ter la fonction Python `empaqueter(liste_masses, c)` suivante pour\nqu\u2019elle renvoie le nombre de bo\u00eetes de capacit\u00e9 c n\u00e9cessaires pour empaqueter un\nensemble d\u2019objets dont les masses sont contenues dans la liste `liste_masses`.\n\n```python linenums='1'\ndef empaqueter(liste_masses, c):\n    \"\"\"Renvoie le nombre minimal de bo\u00eetes n\u00e9cessaires pour\n    empaqueter les objets de la liste liste_masses, sachant\n    que chaque bo\u00eete peut contenir au maximum c kilogrammes\"\"\"\n    n = len(liste_masses)\n    nb_boites = 0\n    boites = [ 0 for _ in range(n) ]\n    for masse in ...: \n        i = 0\n        while i &lt; nb_boites and boites[i] + ... &gt; c: \n            i = i + 1\n        if i == nb_boites:\n            ...\n        boites[i] = ... \n    return ... \n</code></pre> <p>Exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; empaqueter([1, 2, 3, 4, 5], 10)\n2\n&gt;&gt;&gt; empaqueter([1, 2, 3, 4, 5], 5)\n4\n&gt;&gt;&gt; empaqueter([7, 6, 3, 4, 8, 5, 9, 2], 11)\n5\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-24","title":"\u25b6 Sujet 24","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-241","title":"Exercice 24.1","text":"<p>Exercice 24.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Un arbre binaire est soit vide, repr\u00e9sent\u00e9 en Python par la valeur <code>None</code>, soit un n\u0153ud repr\u00e9sent\u00e9 par un triplet <code>(g, x, d)</code> o\u00f9 <code>x</code> est l\u2019\u00e9tiquette du n\u0153ud et <code>g</code> et <code>d</code> sont les sous-arbres gauche et droit.</p> <p>On souhaite \u00e9crire une fonction <code>parcours_largeur</code> qui prend en param\u00e8tre un arbre binaire et qui renvoie la liste des \u00e9tiquettes des n\u0153uds de l\u2019arbre parcourus en largeur.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; arbre = ( ( (None, 1, None), 2, (None, 3, None) ), 4, ( (None, 5, None), 6, (None, 7, None) ) )\n&gt;&gt;&gt; parcours_largeur(arbre)\n[4, 2, 6, 1, 3, 5, 7]\n</code></pre> \ud83d\udc0d Script Python<pre><code>def parcours_largeur(arbre):\n    parcours = []\n    file = [arbre]\n    while file:\n        a = file.pop(0)\n        parcours.append(a[1])\n        if a[0] != None:\n            file.append(a[0])\n        if a[2] != None:\n            file.append(a[2])\n    return parcours\n</code></pre> \ud83d\udccb Texte<pre><code>Un arbre binaire est soit vide, repr\u00e9sent\u00e9 en Python par la valeur `None`, soit un n\u0153ud\nrepr\u00e9sent\u00e9 par un triplet `(g, x, d)` o\u00f9 `x` est l\u2019\u00e9tiquette du n\u0153ud et `g` et `d` sont les sous-arbres gauche et droit.\n\nOn souhaite \u00e9crire une fonction `parcours_largeur` qui prend en param\u00e8tre un arbre\nbinaire et qui renvoie la liste des \u00e9tiquettes des n\u0153uds de l\u2019arbre parcourus en largeur.\n\nExemples :\n\n```python\n&gt;&gt;&gt; arbre = ( ( (None, 1, None), 2, (None, 3, None) ), 4, ( (None, 5, None), 6, (None, 7, None) ) )\n&gt;&gt;&gt; parcours_largeur(arbre)\n[4, 2, 6, 1, 3, 5, 7]\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-242","title":"Exercice 24.2","text":"<p>Exercice 24.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On consid\u00e8re un tableau de nombre entiers, positifs ou n\u00e9gatifs, et on souhaite d\u00e9terminer la plus grande somme possible de ses \u00e9l\u00e9ments cons\u00e9cutifs.</p> <p>Par exemple, dans le tableau <code>[1, -2, 3, 10, -4, 7, 2, -5]</code>, la plus grande somme est 18 obtenue en additionnant les \u00e9l\u00e9ments 3, 10, -4, 7, 2.</p> <p>Pour cela, on va r\u00e9soudre le probl\u00e8me par programmation dynamique. Si on note <code>tab</code> le tableau consid\u00e9r\u00e9 et <code>i</code> un indice dans ce tableau, on se ram\u00e8ne \u00e0 un probl\u00e8me plus simple : d\u00e9terminer la plus grande somme possible de ses \u00e9l\u00e9ments cons\u00e9cutifs se terminant \u00e0 l\u2019indice <code>i</code>.</p> <p>Si on connait la plus grande somme possible de ses \u00e9l\u00e9ments cons\u00e9cutifs se terminant \u00e0 l\u2019indice <code>i-1</code>, on peut d\u00e9terminer la plus grande somme possible de ses \u00e9l\u00e9ments cons\u00e9cutifs se terminant \u00e0 l\u2019indice <code>i</code> :</p> <ul> <li>soit on obtient une plus grande somme en ajoutant <code>tab[i]</code> \u00e0 cette somme pr\u00e9c\u00e9dente ;</li> <li>soit on commence une nouvelle somme \u00e0 partir de <code>tab[i]</code>.</li> </ul> <p>Compl\u00e9ter la fonction <code>somme_max</code> ci-dessous qui r\u00e9alise cet algorithme.</p> \ud83d\udc0d Script Python<pre><code>def somme_max(tab):\n    n = len(tab)\n    sommes_max = [0]*n\n    sommes_max[0] = tab[0]\n    # on calcule la plus grande somme se terminant en i\n    for i in range(1,n):\n        if ... + ... &gt; ...: \n            sommes_max[i] = ... \n        else:\n            sommes_max[i] = ... \n    # on en d\u00e9duit la plus grande somme de celles-ci\n    maximum = 0\n    for i in range(1, n):\n        if ... &gt; ...: \n            maximum = i\n\n    return sommes_max[...] \n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; somme_max([1, 2, 3, 4, 5])\n15\n&gt;&gt; somme_max([1, 2, -3, 4, 5])\n9\n&gt;&gt;&gt; somme_max([1, 2, -2, 4, 5])\n10\n&gt;&gt;&gt; somme_max([1, -2, 3, 10, -4, 7, 2, -5])\n18\n</code></pre> \ud83d\udc0d Script Python<pre><code>def somme_max(tab):\n    n = len(tab)\n    sommes_max = [0]*n\n    sommes_max[0] = tab[0]\n    # on calcule la plus grande somme se terminant en i\n    for i in range(1,n):\n        if sommes_max[i-1] + tab[i] &gt; sommes_max[i]:\n            sommes_max[i] = sommes_max[i-1] + tab[i]\n        else:\n            sommes_max[i] = 0\n    # on en d\u00e9duit la plus grande somme de celles-ci\n    maximum = 0\n    for i in range(1, n):\n        if sommes_max[i]  &gt; sommes_max[maximum]:\n            maximum = i\n    return sommes_max[maximum]\n</code></pre> Markdown<pre><code>On consid\u00e8re un tableau de nombre entiers, positifs ou n\u00e9gatifs, et on souhaite d\u00e9terminer\nla plus grande somme possible de ses \u00e9l\u00e9ments cons\u00e9cutifs.\n\n\nPar exemple, dans le tableau `[1, -2, 3, 10, -4, 7, 2, -5]`, la plus grande\nsomme est 18 obtenue en additionnant les \u00e9l\u00e9ments 3, 10, -4, 7, 2.\n\n\nPour cela, on va r\u00e9soudre le probl\u00e8me par programmation dynamique. Si on note `tab` le\ntableau consid\u00e9r\u00e9 et `i` un indice dans ce tableau, on se ram\u00e8ne \u00e0 un probl\u00e8me plus simple : d\u00e9terminer la plus grande somme possible de ses \u00e9l\u00e9ments cons\u00e9cutifs se terminant \u00e0\nl\u2019indice `i`.\n\n\nSi on connait la plus grande somme possible de ses \u00e9l\u00e9ments cons\u00e9cutifs se terminant \u00e0\nl\u2019indice `i-1`, on peut d\u00e9terminer la plus grande somme possible de ses \u00e9l\u00e9ments cons\u00e9cutifs\nse terminant \u00e0 l\u2019indice `i` :\n\n- soit on obtient une plus grande somme en ajoutant `tab[i]` \u00e0 cette somme pr\u00e9c\u00e9dente ;\n- soit on commence une nouvelle somme \u00e0 partir de `tab[i]`.\n\n\nCompl\u00e9ter la fonction `somme_max` ci-dessous qui r\u00e9alise cet algorithme.\n\n```python linenums='1'\ndef somme_max(tab):\n    n = len(tab)\n    sommes_max = [0]*n\n    sommes_max[0] = tab[0]\n    # on calcule la plus grande somme se terminant en i\n    for i in range(1,n):\n        if ... + ... &gt; ...: \n            sommes_max[i] = ... \n        else:\n            sommes_max[i] = ... \n    # on en d\u00e9duit la plus grande somme de celles-ci\n    maximum = 0\n    for i in range(1, n):\n        if ... &gt; ...: \n            maximum = i\n\n    return sommes_max[...] \n</code></pre> <p>Exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; somme_max([1, 2, 3, 4, 5])\n15\n&gt;&gt; somme_max([1, 2, -3, 4, 5])\n9\n&gt;&gt;&gt; somme_max([1, 2, -2, 4, 5])\n10\n&gt;&gt;&gt; somme_max([1, -2, 3, 10, -4, 7, 2, -5])\n18\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-25","title":"\u25b6 Sujet 25","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-251","title":"Exercice 25.1","text":"<p>Exercice 25.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>recherche_min</code> qui prend en param\u00e8tre un tableau de nombres <code>tab</code>, et qui renvoie l'indice de la premi\u00e8re occurrence du minimum de ce tableau. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche_min([5])\n0\n&gt;&gt;&gt; recherche_min([2, 4, 1])\n2\n&gt;&gt;&gt; recherche_min([5, 3, 2, 2, 4])\n2\n&gt;&gt;&gt; recherche_min([-1, -2, -3, -3])\n2\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche_min(tab):\n    indice_min = 0\n    for i in range(len(tab)):\n        if tab[i] &lt; tab[indice_min]:\n            indice_min = i\n    return indice_min\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `recherche_min` qui prend en param\u00e8tre un tableau de nombres `tab`, et qui renvoie l'indice de la premi\u00e8re occurrence du minimum de ce tableau. Les\ntableaux seront repr\u00e9sent\u00e9s sous forme de liste Python.\n\nExemples :\n```python\n&gt;&gt;&gt; recherche_min([5])\n0\n&gt;&gt;&gt; recherche_min([2, 4, 1])\n2\n&gt;&gt;&gt; recherche_min([5, 3, 2, 2, 4])\n2\n&gt;&gt;&gt; recherche_min([-1, -2, -3, -3])\n2\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-252","title":"Exercice 25.2","text":"<p>Exercice 25.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On consid\u00e8re la fonction <code>separe</code> ci-dessous qui prend en argument un tableau <code>tab</code> dont les \u00e9l\u00e9ments sont des <code>0</code> et des <code>1</code> et qui s\u00e9pare les <code>0</code> des <code>1</code> en pla\u00e7ant les <code>0</code> en d\u00e9but de tableau et les <code>1</code> \u00e0 la suite.</p> \ud83d\udc0d Script Python<pre><code>def separe(tab):\n    '''Separe les 0 et les 1 dans le tableau tab'''\n    gauche = 0\n    droite = ... \n    while gauche &lt; droite:\n        if tab[gauche] == 0 :\n            gauche = ... \n        else :\n            tab[gauche] = ... \n            tab[droite] = ... \n            droite = ... \n    return tab\n</code></pre> <p>Compl\u00e9ter la fonction <code>separe</code> ci-dessus.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; separe([1, 0, 1, 0, 1, 0, 1, 0])\n[0, 0, 0, 0, 1, 1, 1, 1]\n&gt;&gt;&gt; separe([1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0])\n[0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n</code></pre> <p>Description d\u2019\u00e9tapes effectu\u00e9es par la fonction separe sur le tableau ci-dessous, les caract\u00e8res <code>^</code> indiquent les cases point\u00e9es par les indices gauche et droite :</p> \ud83d\udc0d Script Python<pre><code>tab = [1, 0, 1, 0, 1, 0, 1, 0]\n       ^                    ^\n</code></pre> <ul> <li> <p>Etape 1 : on regarde la premi\u00e8re case, qui contient un 1 : ce 1 va aller dans la seconde partie du tableau final et on l\u2019\u00e9change avec la derni\u00e8re case. Il est \u00e0 pr\u00e9sent bien positionn\u00e9 : on ne prend plus la derni\u00e8re case en compte. \ud83d\udc0d Script Python<pre><code>tab = [0, 0, 1, 0, 1, 0, 1, 1]\n       ^                 ^\n</code></pre></p> </li> <li> <p>Etape 2 : on regarde \u00e0 nouveau la premi\u00e8re case, qui contient maintenant un 0 : ce 0 va aller dans la premi\u00e8re partie du tableau final et est bien positionn\u00e9 : on ne prend plus la premi\u00e8re case en compte. \ud83d\udc0d Script Python<pre><code>tab = [0, 0, 1, 0, 1, 0, 1, 1]\n          ^              ^\n</code></pre></p> </li> <li> <p>Etape 3 : on regarde la seconde case, qui contient un 0 : ce 0 va aller dans la premi\u00e8re partie du tableau final et est bien positionn\u00e9 : on ne prend plus la seconde case en compte. \ud83d\udc0d Script Python<pre><code>tab = [0, 0, 1, 0, 1, 0, 1, 1]\n             ^        ^\n</code></pre></p> </li> <li> <p>Etape 4 : on regarde la troisi\u00e8me case, qui contient un 1 : ce 1 va aller dans la seconde partie du tableau final et on l\u2019\u00e9change avec l\u2019avant-derni\u00e8re case. Il est \u00e0 pr\u00e9sent bien positionn\u00e9 : on ne prend plus l\u2019avant-derni\u00e8re case en compte.  </p> </li> </ul> <p>Et ainsi de suite...</p> <p><code>tab = [0, 0, 0, 0, 1, 1, 1, 1]</code></p> \ud83d\udc0d Script Python<pre><code>def separe(tab):\n    '''Separe les 0 et les 1 dans le tableau tab'''\n    gauche = 0\n    droite = len(tab) - 1 \n    while gauche &lt; droite:\n        if tab[gauche] == 0 :\n            gauche = gauche + 1 \n        else :\n            tab[gauche] = tab[droite] \n            tab[droite] = 1 \n            droite = droite - 1 \n    return tab\n</code></pre> Markdown<pre><code>On consid\u00e8re la fonction `separe` ci-dessous qui prend en argument un tableau `tab` dont\nles \u00e9l\u00e9ments sont des `0` et des `1` et qui s\u00e9pare les `0` des `1` en pla\u00e7ant les `0` en d\u00e9but de\ntableau et les `1` \u00e0 la suite.\n\n```python linenums='1'\ndef separe(tab):\n    '''Separe les 0 et les 1 dans le tableau tab'''\n    gauche = 0\n    droite = ... \n    while gauche &lt; droite:\n        if tab[gauche] == 0 :\n            gauche = ... \n        else :\n            tab[gauche] = ... \n            tab[droite] = ... \n            droite = ... \n    return tab\n</code></pre> <p>Compl\u00e9ter la fonction <code>separe</code> ci-dessus.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; separe([1, 0, 1, 0, 1, 0, 1, 0])\n[0, 0, 0, 0, 1, 1, 1, 1]\n&gt;&gt;&gt; separe([1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0])\n[0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n</code></pre> <p>Description d\u2019\u00e9tapes effectu\u00e9es par la fonction separe sur le tableau ci-dessous, les caract\u00e8res <code>^</code> indiquent les cases point\u00e9es par les indices gauche et droite :</p> \ud83d\udc0d Script Python<pre><code>tab = [1, 0, 1, 0, 1, 0, 1, 0]\n       ^                    ^\n</code></pre> <ul> <li> <p>Etape 1 : on regarde la premi\u00e8re case, qui contient un 1 : ce 1 va aller dans la seconde partie du tableau final et on l\u2019\u00e9change avec la derni\u00e8re case. Il est \u00e0 pr\u00e9sent bien positionn\u00e9 : on ne prend plus la derni\u00e8re case en compte. \ud83d\udc0d Script Python<pre><code>tab = [0, 0, 1, 0, 1, 0, 1, 1]\n       ^                 ^\n</code></pre></p> </li> <li> <p>Etape 2 : on regarde \u00e0 nouveau la premi\u00e8re case, qui contient maintenant un 0 : ce 0 va aller dans la premi\u00e8re partie du tableau final et est bien positionn\u00e9 : on ne prend plus la premi\u00e8re case en compte. \ud83d\udc0d Script Python<pre><code>tab = [0, 0, 1, 0, 1, 0, 1, 1]\n          ^              ^\n</code></pre></p> </li> <li> <p>Etape 3 : on regarde la seconde case, qui contient un 0 : ce 0 va aller dans la premi\u00e8re partie du tableau final et est bien positionn\u00e9 : on ne prend plus la seconde case en compte. \ud83d\udc0d Script Python<pre><code>tab = [0, 0, 1, 0, 1, 0, 1, 1]\n             ^        ^\n</code></pre></p> </li> <li> <p>Etape 4 : on regarde la troisi\u00e8me case, qui contient un 1 : ce 1 va aller dans la seconde partie du tableau final et on l\u2019\u00e9change avec l\u2019avant-derni\u00e8re case. Il est \u00e0 pr\u00e9sent bien positionn\u00e9 : on ne prend plus l\u2019avant-derni\u00e8re case en compte.  </p> </li> </ul> <p>Et ainsi de suite...</p> <p><code>tab = [0, 0, 0, 0, 1, 1, 1, 1]</code> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-26","title":"\u25b6 Sujet 26","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-261","title":"Exercice 26.1","text":"<p>Exercice 26.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>ajoute_dictionnaires</code> qui prend en param\u00e8tres deux dictionnaires <code>d1</code> et <code>d2</code> dont les cl\u00e9s sont des nombres et renvoie le dictionnaire <code>d</code> d\u00e9fini de la fa\u00e7on suivante :</p> <ul> <li>Les cl\u00e9s de <code>d</code> sont celles de <code>d1</code> et celles de <code>d2</code> r\u00e9unies.</li> <li>Si une cl\u00e9 est pr\u00e9sente dans les deux dictionnaires <code>d1</code> et <code>d2</code>, sa valeur associ\u00e9e dans le dictionnaire <code>d</code> est la somme de ses valeurs dans les dictionnaires <code>d1</code> et <code>d2</code>.</li> <li>Si une cl\u00e9 n\u2019est pr\u00e9sente que dans un des deux dictionnaires, sa valeur associ\u00e9e dans le dictionnaire <code>d</code> est la m\u00eame que sa valeur dans le dictionnaire o\u00f9 elle est pr\u00e9sente.</li> </ul> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; ajoute_dictionnaires({1: 5, 2: 7}, {2: 9, 3: 11})\n{1: 5, 2: 16, 3: 11}\n&gt;&gt;&gt; ajoute_dictionnaires({}, {2: 9, 3: 11})\n{2: 9, 3: 11}\n&gt;&gt;&gt; ajoute_dictionnaires({1: 5, 2: 7}, {})\n{1: 5, 2: 7}\n</code></pre> \ud83d\udc0d Script Python<pre><code>def ajoute_dictionnaires(d1, d2):\n    d = {}\n    for cle in d1:\n        d[cle] = d1[cle]\n    for cle in d2:\n        if cle in d:\n            d[cle] += d2[cle]\n        else:\n            d[cle] = d2[cle]\n    return d\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `ajoute_dictionnaires` qui prend en param\u00e8tres deux\ndictionnaires `d1` et `d2` dont les cl\u00e9s sont des nombres et renvoie le dictionnaire `d` d\u00e9fini de\nla fa\u00e7on suivante :\n\n- Les cl\u00e9s de `d` sont celles de `d1` et celles de `d2` r\u00e9unies.\n- Si une cl\u00e9 est pr\u00e9sente dans les deux dictionnaires `d1` et `d2`, sa valeur associ\u00e9e\ndans le dictionnaire `d` est la somme de ses valeurs dans les dictionnaires `d1` et `d2`.\n- Si une cl\u00e9 n\u2019est pr\u00e9sente que dans un des deux dictionnaires, sa valeur associ\u00e9e\ndans le dictionnaire `d` est la m\u00eame que sa valeur dans le dictionnaire o\u00f9 elle est\npr\u00e9sente.\n\nExemples :\n\n```python\n&gt;&gt;&gt; ajoute_dictionnaires({1: 5, 2: 7}, {2: 9, 3: 11})\n{1: 5, 2: 16, 3: 11}\n&gt;&gt;&gt; ajoute_dictionnaires({}, {2: 9, 3: 11})\n{2: 9, 3: 11}\n&gt;&gt;&gt; ajoute_dictionnaires({1: 5, 2: 7}, {})\n{1: 5, 2: 7}\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-262","title":"Exercice 26.2","text":"<p>Exercice 26.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On consid\u00e8re une piste carr\u00e9e qui contient 4 cases par c\u00f4t\u00e9. Les cases sont num\u00e9rot\u00e9es de 0 inclus \u00e0 12 exclu comme ci-dessous :</p> <p></p> <p>L\u2019objectif de l\u2019exercice est d\u2019impl\u00e9menter le jeu suivant :</p> <p>Au d\u00e9part, le joueur place son pion sur la case 0. A chaque coup, il lance un d\u00e9 \u00e9quilibr\u00e9 \u00e0 six faces et avance son pion d\u2019autant de cases que le nombre indiqu\u00e9 par le d\u00e9 (entre 1 et 6 inclus) dans le sens des aiguilles d\u2019une montre.</p> <p>Par exemple, s\u2019il obtient 2 au premier lancer, il pose son pion sur la case 2 puis s\u2019il obtient 6 au deuxi\u00e8me lancer, il le pose sur la case 8, puis s\u2019il obtient \u00e0 nouveau 6, il pose le pion sur la case 2.</p> <p>Le jeu se termine lorsque le joueur a pos\u00e9 son pion sur toutes les cases de la piste.</p> <p>Compl\u00e9ter la fonction <code>nombre_coups</code> ci-dessous de sorte qu\u2019elle renvoie le nombre de lancers al\u00e9atoires n\u00e9cessaires pour terminer le jeu.</p> <p>Proposer ensuite quelques tests pour en v\u00e9rifier le fonctionnement.</p> \ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef nombre_coups():\n    '''Simule un jeu de plateau avec 12 cases et renvoie le nombre\n    minimal de coups pour visiter toutes les cases.'''\n    nombre_cases = 12\n    # indique si une case a \u00e9t\u00e9 vue\n    cases_vues = [ False ] * nombre_cases\n    nombre_cases_vues = 1\n    cases_vues[0] = True\n    case_en_cours = 0\n    n = ... \n    while ... &lt; ...: \n        x = randint(1, 6)\n        case_en_cours = (case_en_cours + ...) % ... \n        if ...: \n            cases_vues[case_en_cours] = True\n            nombre_cases_vues = ... \n        n = ... \n    return n\n</code></pre> \ud83d\udc0d Script Python<pre><code>from random import randint\n\ndef nombre_coups():\n    '''Simule un jeu de plateau avec 12 cases et renvoie le nombre\n    minimal de coups pour visiter toutes les cases.'''\n    nombre_cases = 12\n    # indique si une case a \u00e9t\u00e9 vue\n    cases_vues = [ False ] * nombre_cases\n    nombre_cases_vues = 1\n    cases_vues[0] = True\n    case_en_cours = 0\n    n = 0 \n    while nombre_cases_vues &lt; nombre_cases: \n        x = randint(1, 6)\n        case_en_cours = (case_en_cours + x) % nombre_cases \n        if case_en_cours not in cases_vues: \n            cases_vues[case_en_cours] = True\n            nombre_cases_vues = nombre_cases_vues + 1 \n        n = n + 1 \n    return n\n</code></pre> <p>Markdown<pre><code>On consid\u00e8re une piste carr\u00e9e qui contient 4 cases par c\u00f4t\u00e9. Les cases sont num\u00e9rot\u00e9es\nde 0 inclus \u00e0 12 exclu comme ci-dessous :\n\n![image](data2023/20_carre.png){: .center width=20%}\n\nL\u2019objectif de l\u2019exercice est d\u2019impl\u00e9menter le jeu suivant :\n\nAu d\u00e9part, le joueur place son pion sur la case 0. A chaque coup, il lance un d\u00e9 \u00e9quilibr\u00e9\n\u00e0 six faces et avance son pion d\u2019autant de cases que le nombre indiqu\u00e9 par le d\u00e9 (entre\n1 et 6 inclus) dans le sens des aiguilles d\u2019une montre.\n\nPar exemple, s\u2019il obtient 2 au premier lancer, il pose son pion sur la case 2 puis s\u2019il\nobtient 6 au deuxi\u00e8me lancer, il le pose sur la case 8, puis s\u2019il obtient \u00e0 nouveau 6, il\npose le pion sur la case 2.\n\nLe jeu se termine lorsque le joueur a pos\u00e9 son pion sur **toutes les cases** de la piste.\n\nCompl\u00e9ter la fonction `nombre_coups` ci-dessous de sorte qu\u2019elle renvoie le nombre de\nlancers al\u00e9atoires n\u00e9cessaires pour terminer le jeu.\n\nProposer ensuite quelques tests pour en v\u00e9rifier le fonctionnement.\n\n```python linenums='1'\nfrom random import randint\n\ndef nombre_coups():\n    '''Simule un jeu de plateau avec 12 cases et renvoie le nombre\n    minimal de coups pour visiter toutes les cases.'''\n    nombre_cases = 12\n    # indique si une case a \u00e9t\u00e9 vue\n    cases_vues = [ False ] * nombre_cases\n    nombre_cases_vues = 1\n    cases_vues[0] = True\n    case_en_cours = 0\n    n = ... \n    while ... &lt; ...: \n        x = randint(1, 6)\n        case_en_cours = (case_en_cours + ...) % ... \n        if ...: \n            cases_vues[case_en_cours] = True\n            nombre_cases_vues = ... \n        n = ... \n    return n\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-27","title":"\u25b6 Sujet 27","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-271","title":"Exercice 27.1","text":"<p>Exercice 27.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>couples_consecutifs</code> qui prend en param\u00e8tre un tableau de nombres entiers <code>tab</code> non vide (type <code>list</code>), et qui renvoie la liste Python (\u00e9ventuellement vide) des couples d'entiers cons\u00e9cutifs successifs qu'il peut y avoir dans <code>tab</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; couples_consecutifs([1, 4, 3, 5])\n[]\n&gt;&gt;&gt; couples_consecutifs([1, 4, 5, 3])\n[(4, 5)]\n&gt;&gt;&gt; couples_consecutifs([1, 1, 2, 4])\n[(1, 2)]\n&gt;&gt;&gt; couples_consecutifs([7, 1, 2, 5, 3, 4])\n[(1, 2), (3, 4)]\n&gt;&gt;&gt; couples_consecutifs([5, 1, 2, 3, 8, -5, -4, 7])\n[(1, 2), (2, 3), (-5, -4)]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def couples_consecutifs(tab):\n    solution = []\n    for i in range(len(tab)-1):\n        if tab[i] + 1 == tab[i+1]:\n            solution.append((tab[i], tab[i+1]))\n    return solution\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `couples_consecutifs` qui prend en param\u00e8tre un tableau de\nnombres entiers `tab` non vide (type `list`), et qui renvoie la liste Python (\u00e9ventuellement vide) des couples d'entiers cons\u00e9cutifs successifs qu'il peut y avoir dans `tab`.\n\nExemples :\n```python\n&gt;&gt;&gt; couples_consecutifs([1, 4, 3, 5])\n[]\n&gt;&gt;&gt; couples_consecutifs([1, 4, 5, 3])\n[(4, 5)]\n&gt;&gt;&gt; couples_consecutifs([1, 1, 2, 4])\n[(1, 2)]\n&gt;&gt;&gt; couples_consecutifs([7, 1, 2, 5, 3, 4])\n[(1, 2), (3, 4)]\n&gt;&gt;&gt; couples_consecutifs([5, 1, 2, 3, 8, -5, -4, 7])\n[(1, 2), (2, 3), (-5, -4)]\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-272","title":"Exercice 27.2","text":"<p>Exercice 27.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Soit une image binaire repr\u00e9sent\u00e9e dans un tableau \u00e0 2 dimensions. Les \u00e9l\u00e9ments <code>M[i][j]</code>, appel\u00e9s pixels, sont \u00e9gaux soit \u00e0 <code>0</code> soit \u00e0 <code>1</code>.</p> <p>Une composante d\u2019une image est un sous-ensemble de l\u2019image constitu\u00e9 uniquement de <code>1</code> et de <code>0</code> qui sont c\u00f4te \u00e0 c\u00f4te, soit horizontalement soit verticalement.</p> <p>Par exemple, les composantes de  sont </p> <p>On souhaite, \u00e0 partir d\u2019un pixel \u00e9gal \u00e0 <code>1</code> dans une image <code>M</code>, donner la valeur <code>val</code> \u00e0 tous les pixels de la composante \u00e0 laquelle appartient ce pixel.</p> <p>La fonction <code>colore_comp1</code> prend pour param\u00e8tre une image <code>M</code> (repr\u00e9sent\u00e9e par une liste de listes), deux entiers <code>i</code> et <code>j</code> et une valeur enti\u00e8re <code>val</code>. Elle met \u00e0 la valeur <code>val</code> tous les pixels de la composante du pixel <code>M[i][j]</code> s\u2019il vaut <code>1</code> et ne fait rien sinon.</p> <p>Par exemple, <code>colore_comp1(M, 2, 1, 3)</code> donne </p> <p>Compl\u00e9ter le code r\u00e9cursif de la fonction <code>colore_comp1</code> donn\u00e9 ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def colore_comp1(M, i, j, val):\n    if M[i][j] != 1:\n        return\n\n    M[i][j] = val\n\n    if i-1 &gt;= 0: # propage \u00e0 gauche\n        colore_comp1(M, i-1, j, val)\n    if ... &lt; len(M): # propage \u00e0 droite \n        colore_comp1(M, ..., j, val) \n    if ...: # propage en haut \n        colore_comp1(M, ..., ..., val) \n    if ...: # propage en bas \n        ...\n</code></pre> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; M = [[0, 0, 1, 0], [0, 1, 0, 1], [1, 1, 1, 0], [0, 1, 1, 0]]\n&gt;&gt;&gt; colore_comp1(M, 2, 1, 3)\n&gt;&gt;&gt; M\n[[0, 0, 1, 0], [0, 3, 0, 1], [3, 3, 3, 0], [0, 3, 3, 0]]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def colore_comp1(M, i, j, val):\n    if M[i][j] != 1:\n        return\n\n    M[i][j] = val\n\n    if i-1 &gt;= 0: # propage \u00e0 gauche\n        colore_comp1(M, i-1, j, val)\n    if i+1 &lt; len(M): # propage \u00e0 droite \n        colore_comp1(M, i+1, j, val) \n    if j-1 &gt;= 0: # propage en haut \n        colore_comp1(M, i, j-1, val) \n    if j+1 &lt; len(M[i]): # propage en bas \n        colore_comp1(M, i, j+1, val) \n</code></pre> Markdown<pre><code>Soit une image binaire repr\u00e9sent\u00e9e dans un tableau \u00e0 2 dimensions. Les \u00e9l\u00e9ments\n`M[i][j]`, appel\u00e9s pixels, sont \u00e9gaux soit \u00e0 `0` soit \u00e0 `1`.\n\nUne composante d\u2019une image est un sous-ensemble de l\u2019image constitu\u00e9 uniquement de\n`1` et de `0` qui sont c\u00f4te \u00e0 c\u00f4te, soit horizontalement soit verticalement.\n\nPar exemple, les composantes de\n![image](data2023/36_carre1.png){: .center}\nsont\n![image](data2023/36_carre2.png){: .center width=30%}\n\nOn souhaite, \u00e0 partir d\u2019un pixel \u00e9gal \u00e0 `1` dans une image `M`, donner la valeur `val` \u00e0 tous\nles pixels de la composante \u00e0 laquelle appartient ce pixel.\n\nLa fonction `colore_comp1` prend pour param\u00e8tre une image `M` (repr\u00e9sent\u00e9e par une liste de\nlistes), deux entiers `i` et `j` et une valeur enti\u00e8re `val`. Elle met \u00e0 la valeur `val` tous les pixels de la composante du pixel\n`M[i][j]` s\u2019il vaut `1` et ne fait rien sinon.\n\nPar exemple, `colore_comp1(M, 2, 1, 3)` donne\n![image](data2023/36_carre3.png){: .center width=30%}\n\nCompl\u00e9ter le code r\u00e9cursif de la fonction `colore_comp1` donn\u00e9 ci-dessous :\n\n```python linenums='1'\ndef colore_comp1(M, i, j, val):\n    if M[i][j] != 1:\n        return\n\n    M[i][j] = val\n\n    if i-1 &gt;= 0: # propage \u00e0 gauche\n        colore_comp1(M, i-1, j, val)\n    if ... &lt; len(M): # propage \u00e0 droite \n        colore_comp1(M, ..., j, val) \n    if ...: # propage en haut \n        colore_comp1(M, ..., ..., val) \n    if ...: # propage en bas \n        ...\n</code></pre> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; M = [[0, 0, 1, 0], [0, 1, 0, 1], [1, 1, 1, 0], [0, 1, 1, 0]]\n&gt;&gt;&gt; colore_comp1(M, 2, 1, 3)\n&gt;&gt;&gt; M\n[[0, 0, 1, 0], [0, 3, 0, 1], [3, 3, 3, 0], [0, 3, 3, 0]]\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-28","title":"\u25b6 Sujet 28","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-281","title":"Exercice 28.1","text":"<p>Exercice 28.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>On s\u2019int\u00e9resse \u00e0 la suite d\u2019entiers d\u00e9finie par :</p> <ul> <li>les deux premi\u00e8res valeurs sont \u00e9gales \u00e0 1 ;</li> <li>ensuite, chaque valeur est obtenue en faisant la somme des deux valeurs qui le pr\u00e9c\u00e8- dent.</li> </ul> <p>La troisi\u00e8me valeur est donc \\(1+1 = 2\\), la quatri\u00e8me est \\(1+2 = 3\\), la cinqui\u00e8me est \\(2+3 = 5\\), la sixi\u00e8me est \\(3 + 5 = 8\\), et ainsi de suite.</p> <p>Cette suite d\u2019entiers est connue sous le nom de suite de Fibonacci.</p> <p>\u00c9crire en Python une fonction <code>fibonacci</code> qui prend en param\u00e8tre un entier <code>n</code> suppos\u00e9 strictement positif et qui renvoie le terme d\u2019indice <code>n</code> de cette suite.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; fibonacci(1)\n1\n&gt;&gt;&gt; fibonacci(2)\n1\n&gt;&gt;&gt; fibonacci(25)\n75025\n</code></pre> <p>Version r\u00e9cursive :</p> \ud83d\udc0d Script Python<pre><code>def fibonacci(n):\n    if n == 1 :\n        return 1   \n    elif n == 1 :\n        return 1\n    else :\n        return fibonacci(n-1) + fibonacci(n-2)\n</code></pre> <p>Version programmation dynamique bottom-up:</p> \ud83d\udc0d Script Python<pre><code>def fibonacci(n):\n    d = {}\n    d[1] = 1\n    d[2] = 1\n    for k in range(3, n+1):\n        d[k] = d[k-1] + d[k-2]\n    return d[n]\n</code></pre> <p>Version programmation dynamique top-down avec m\u00e9mo\u00efsation:</p> \ud83d\udc0d Script Python<pre><code>dict_fibo = {1:1, 2:1}\ndef fibonacci(n):\n    if n in dict_fibo:\n        return dict_fibo[n]\n    dict_fibo[n] = fibo(n-1) + fibo(n-2)\n    return dict_fibo[n]\n</code></pre> <p>On peut constater que la version r\u00e9cursive \u00e9choue \u00e0 calculer <code>fibonacci(45)</code>, alors que les deux autres versions le font quasi-imm\u00e9diatement. </p> \ud83d\udccb Texte<pre><code>On s\u2019int\u00e9resse \u00e0 la suite d\u2019entiers d\u00e9finie par :\n\n- les deux premi\u00e8res valeurs sont \u00e9gales \u00e0 1 ;\n- ensuite, chaque valeur est obtenue en faisant la somme des deux valeurs qui le pr\u00e9c\u00e8-\ndent.\n\nLa troisi\u00e8me valeur est donc $1+1 = 2$, la quatri\u00e8me est $1+2 = 3$, la cinqui\u00e8me est $2+3 = 5$,\nla sixi\u00e8me est $3 + 5 = 8$, et ainsi de suite.\n\nCette suite d\u2019entiers est connue sous le nom de suite de Fibonacci.\n\n\u00c9crire en Python une fonction `fibonacci` qui prend en param\u00e8tre un entier `n` suppos\u00e9\nstrictement positif et qui renvoie le terme d\u2019indice `n` de cette suite.\n\nExemples :\n\n```python\n&gt;&gt;&gt; fibonacci(1)\n1\n&gt;&gt;&gt; fibonacci(2)\n1\n&gt;&gt;&gt; fibonacci(25)\n75025\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-282","title":"Exercice 28.2","text":"<p>Exercice 28.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On consid\u00e8re la fonction <code>eleves_du_mois</code> prenant en param\u00e8tres <code>eleves</code> et <code>notes</code> deux tableaux de m\u00eame longueur, le premier contenant le nom des \u00e9l\u00e8ves et le second, des entiers positifs d\u00e9signant leur note \u00e0 un contr\u00f4le de sorte que <code>eleves[i]</code> a obtenu la note <code>notes[i]</code>.  </p> <p>Cette fonction renvoie le couple constitu\u00e9 de la note maximale attribu\u00e9e et des noms des \u00e9l\u00e8ves ayant obtenu cette note regroup\u00e9s dans un tableau.  </p> <p>Ainsi, l\u2019instruction <code>eleves_du_mois(['a', 'b', 'c', 'd'], [15, 18, 12, 18])</code> renvoie le couple <code>(18, ['b', 'd'])</code>.</p> \ud83d\udc0d Script Python<pre><code>def eleves_du_mois(eleves, notes):\n    note_maxi = 0\n    meilleurs_eleves =  ...\n\n    for i in range(...) :\n        if notes[i] == ... :\n            meilleurs_eleves.append(...)\n        elif notes[i] &gt; note_maxi:\n            note_maxi = ...\n            meilleurs_eleves = [...]\n\n    return (note_maxi,meilleurs_eleves)\n</code></pre> <p>Compl\u00e9ter ce code.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; eleves_nsi = ['a','b','c','d','e','f','g','h','i','j']\n&gt;&gt;&gt; notes_nsi = [30, 40, 80, 60, 58, 80, 75, 80, 60, 24]\n&gt;&gt;&gt; eleves_du_mois(eleves_nsi, notes_nsi)\n(80, ['c', 'f', 'h'])\n&gt;&gt;&gt; eleves_du_mois([],[])\n(0, [])\n</code></pre> \ud83d\udc0d Script Python<pre><code>def eleves_du_mois(eleves, notes):\n    note_maxi = 0\n    meilleurs_eleves =  []\n\n    for i in range(len(eleves)) :\n        if notes[i] == note_maxi :\n            meilleurs_eleves.append(eleves[i])\n        elif notes[i] &gt; note_maxi:\n            note_maxi = notes[i]\n            meilleurs_eleves = [eleves[i]]\n\n    return (note_maxi, meilleurs_eleves)\n</code></pre> Markdown<pre><code>On consid\u00e8re la fonction `eleves_du_mois` prenant en param\u00e8tres `eleves` et `notes` deux\ntableaux de m\u00eame longueur, le premier contenant le nom des \u00e9l\u00e8ves et le second, des\nentiers positifs d\u00e9signant leur note \u00e0 un contr\u00f4le de sorte que `eleves[i]` a obtenu la\nnote `notes[i]`.  \n\nCette fonction renvoie le couple constitu\u00e9 de la note maximale attribu\u00e9e et des noms\ndes \u00e9l\u00e8ves ayant obtenu cette note regroup\u00e9s dans un tableau.  \n\nAinsi, l\u2019instruction `eleves_du_mois(['a', 'b', 'c', 'd'], [15, 18, 12, 18])` renvoie\nle couple `(18, ['b', 'd'])`.\n\n```python linenums='1'\ndef eleves_du_mois(eleves, notes):\n    note_maxi = 0\n    meilleurs_eleves =  ...\n\n    for i in range(...) :\n        if notes[i] == ... :\n            meilleurs_eleves.append(...)\n        elif notes[i] &gt; note_maxi:\n            note_maxi = ...\n            meilleurs_eleves = [...]\n\n    return (note_maxi,meilleurs_eleves)\n</code></pre> <p>Compl\u00e9ter ce code.</p> <p>Exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; eleves_nsi = ['a','b','c','d','e','f','g','h','i','j']\n&gt;&gt;&gt; notes_nsi = [30, 40, 80, 60, 58, 80, 75, 80, 60, 24]\n&gt;&gt;&gt; eleves_du_mois(eleves_nsi, notes_nsi)\n(80, ['c', 'f', 'h'])\n&gt;&gt;&gt; eleves_du_mois([],[])\n(0, [])\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-29","title":"\u25b6 Sujet 29","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-291","title":"Exercice 29.1","text":"<p>Exercice 29.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>moyenne(notes)</code> qui renvoie la moyenne pond\u00e9r\u00e9e des r\u00e9sultats contenus dans le tableau <code>notes</code>, non vide, donn\u00e9 en param\u00e8tre. Ce tableau contient des couples <code>(note, coefficient)</code> dans lesquels :</p> <ul> <li><code>note</code> est un nombre de type flottant (<code>float</code>) compris entre 0 et 20 ;</li> <li><code>coefficient</code> est un nombre entier strictement positif.</li> </ul> <p>Ainsi l\u2019expression <code>moyenne([(15.0,2),(9.0,1),(12.0,3)])</code> devra renvoyer <code>12.5</code>.</p> <p>\\(\\dfrac{2 \\times 15 + 1 \\times 9 + 3 \\times 12 }{2+1+3}=12,5\\)</p> \ud83d\udc0d Script Python<pre><code>def moyenne(liste_notes):\n    somme_notes = 0\n    somme_coeffs = 0\n    for devoir in liste_notes:\n        note = devoir[0]\n        coeff = devoir[1]\n        somme_notes += note * coeff\n        somme_coeffs += coeff\n    return somme_notes / somme_coeffs\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `moyenne(notes)` qui renvoie la moyenne pond\u00e9r\u00e9e des\nr\u00e9sultats contenus dans le tableau `notes`, non vide, donn\u00e9 en param\u00e8tre. Ce\ntableau contient des couples `(note, coefficient)` dans lesquels :\n\n- `note` est un nombre de type flottant (`float`) compris entre 0 et 20 ;\n- `coefficient` est un nombre entier strictement positif.\n\nAinsi l\u2019expression `moyenne([(15.0,2),(9.0,1),(12.0,3)])` devra renvoyer `12.5`.\n\n$\\dfrac{2 \\times 15 + 1 \\times 9 + 3 \\times 12 }{2+1+3}=12,5$\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-292","title":"Exercice 29.2","text":"<p>Exercice 29.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On cherche \u00e0 d\u00e9terminer les valeurs du triangle de Pascal (Figure 1).</p> <p>Dans le triangle de Pascal, chaque ligne commence et se termine par le nombre 1. Comme l\u2019illustre la Figure 2, on additionne deux valeurs successives d\u2019une ligne pour obtenir la valeur qui se situe sous la deuxi\u00e8me valeur.</p> <p></p> <p>Compl\u00e9ter les fonctions <code>ligne_suivante</code> et <code>pascal</code> ci-dessous. La fonction <code>ligne_suivante</code> prend en param\u00e8tre une liste d\u2019entiers <code>ligne</code> correspondant \u00e0 une ligne du triangle de Pascal et renvoie la liste correspondant \u00e0 la ligne suivante du triangle de Pascal. La fonction <code>pascal</code> prend en param\u00e8tre un entier n et l\u2019utilise pour construire le triangle de Pascal ayant <code>n+1</code> lignes sous la forme d\u2019une liste de listes.</p> \ud83d\udc0d Script Python<pre><code>def ligne_suivante(ligne):\n    '''Renvoie la ligne suivant ligne du triangle de Pascal'''\n    ligne_suiv = [...] \n    for i in range(...): \n        ligne_suiv.append(...) \n    ligne_suiv.append(...) \n    return ligne_suiv\n\ndef pascal(n):\n    '''Renvoie le triangle de Pascal de hauteur n'''\n    triangle = [ [1] ]\n    for k in range(...): \n        ligne_k = ... \n        triangle.append(ligne_k)\n    return triangle\n</code></pre> <p>Exemples: \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; ligne_suivante([1, 3, 3, 1])\n[1, 4, 6, 4, 1]\n&gt;&gt;&gt; pascal(2)\n[[1], [1, 1], [1, 2, 1]]\n&gt;&gt;&gt; pascal(3)\n[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def ligne_suivante(ligne):\n    '''Renvoie la ligne suivant ligne du triangle de Pascal'''\n    ligne_suiv = [ligne[0]] \n    for i in range(1, len(ligne)): \n        ligne_suiv.append(ligne[i-1] + ligne[i]) \n    ligne_suiv.append(ligne[-1]) \n    return ligne_suiv\n\ndef pascal(n):\n    '''Renvoie le triangle de Pascal de hauteur n'''\n    triangle = [ [1] ]\n    for k in range(n): \n        ligne_k = ligne_suivante(triangle[-1]) \n        triangle.append(ligne_k)\n    return triangle\n</code></pre> Markdown<pre><code>On cherche \u00e0 d\u00e9terminer les valeurs du triangle de Pascal (Figure 1).\n\nDans le triangle de Pascal, chaque ligne commence et se termine par le nombre 1.\nComme l\u2019illustre la Figure 2, on additionne deux valeurs successives d\u2019une ligne pour\nobtenir la valeur qui se situe sous la deuxi\u00e8me valeur.\n\n![image](data2023/17_triangle.png){: .center width=60%}\n\nCompl\u00e9ter les fonctions `ligne_suivante` et `pascal` ci-dessous. La fonction\n`ligne_suivante` prend en param\u00e8tre une liste d\u2019entiers `ligne` correspondant \u00e0 une\nligne du triangle de Pascal et renvoie la liste correspondant \u00e0 la ligne suivante du triangle\nde Pascal. La fonction `pascal` prend en param\u00e8tre un entier n et l\u2019utilise pour construire\nle triangle de Pascal ayant `n+1` lignes sous la forme d\u2019une liste de listes.\n\n```python linenums='1'\ndef ligne_suivante(ligne):\n    '''Renvoie la ligne suivant ligne du triangle de Pascal'''\n    ligne_suiv = [...] \n    for i in range(...): \n        ligne_suiv.append(...) \n    ligne_suiv.append(...) \n    return ligne_suiv\n\ndef pascal(n):\n    '''Renvoie le triangle de Pascal de hauteur n'''\n    triangle = [ [1] ]\n    for k in range(...): \n        ligne_k = ... \n        triangle.append(ligne_k)\n    return triangle\n</code></pre> <p>Exemples: \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; ligne_suivante([1, 3, 3, 1])\n[1, 4, 6, 4, 1]\n&gt;&gt;&gt; pascal(2)\n[[1], [1, 1], [1, 2, 1]]\n&gt;&gt;&gt; pascal(3)\n[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-30","title":"\u25b6 Sujet 30","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-301","title":"Exercice 30.1","text":"<p>Exercice 30.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Programmer la fonction <code>fusion</code> prenant en param\u00e8tres deux tableaux non vides <code>tab1</code> et <code>tab2</code> (type <code>list</code>) d'entiers, chacun dans l\u2019ordre croissant, et renvoyant un tableau tri\u00e9 dans l\u2019ordre croissant et contenant l\u2019ensemble des valeurs de <code>tab1</code> et <code>tab2</code>.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; fusion([3, 5], [2, 5])\n[2, 3, 5, 5]\n&gt;&gt;&gt; fusion([-2, 4], [-3, 5, 10])\n[-3, -2, 4, 5, 10]\n&gt;&gt;&gt; fusion([4], [2, 6])\n[2, 4, 6]\n&gt;&gt;&gt; fusion([], [])\n[]\n&gt;&gt;&gt; fusion([1, 2, 3], [])\n[1, 2, 3]\n</code></pre> \ud83d\udc0d Script Python<pre><code>def fusion(tab1, tab2):\n    tab_fusion = []\n    i1 = 0\n    i2 = 0\n    while i1 &lt; len(tab1) and i2 &lt; len(tab2):\n        if tab1[i1] &lt; tab2[i2]:\n            tab_fusion.append(tab1[i1])\n            i1 += 1\n        else:\n            tab_fusion.append(tab2[i2])\n            i2 += 1\n\n    if i1 == len(tab1):\n        while i2 &lt; len(tab2):\n            tab_fusion.append(tab2[i2])\n            i2 += 1\n    else:\n        while i1 &lt; len(tab1):\n            tab_fusion.append(tab1[i1])\n            i1 += 1        \n\n    return tab_fusion\n</code></pre> \ud83d\udccb Texte<pre><code>Programmer la fonction `fusion` prenant en param\u00e8tres deux tableaux non vides `tab1` et `tab2`\n(type `list`) d'entiers, chacun dans l\u2019ordre croissant, et renvoyant un tableau tri\u00e9 dans l\u2019ordre croissant et contenant l\u2019ensemble des valeurs de `tab1` et `tab2`.\n\nExemples :\n\n```python\n&gt;&gt;&gt; fusion([3, 5], [2, 5])\n[2, 3, 5, 5]\n&gt;&gt;&gt; fusion([-2, 4], [-3, 5, 10])\n[-3, -2, 4, 5, 10]\n&gt;&gt;&gt; fusion([4], [2, 6])\n[2, 4, 6]\n&gt;&gt;&gt; fusion([], [])\n[]\n&gt;&gt;&gt; fusion([1, 2, 3], [])\n[1, 2, 3]\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-302","title":"Exercice 30.2","text":"<p>Exercice 30.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Le but de cet exercice est d\u2019\u00e9crire une fonction r\u00e9cursive <code>traduire_romain</code> qui prend en param\u00e8tre une cha\u00eene de caract\u00e8res, non vide, repr\u00e9sentant un nombre \u00e9crit en chiffres romains et qui renvoie son \u00e9criture d\u00e9cimale.</p> <p>Les chiffres romains consid\u00e9r\u00e9s sont : I, V, X, L, C, D et M. Ils repr\u00e9sentent respectivement les nombres 1, 5, 10, 50, 100, 500, et 1000 en base dix.</p> <p>On dispose d\u2019un dictionnaire <code>romains</code> dont les cl\u00e9s sont les caract\u00e8res apparaissant dans l\u2019\u00e9criture en chiffres romains et les valeurs sont les nombres entiers associ\u00e9s en \u00e9criture d\u00e9cimale :</p> <p><code>romains = {\"I\":1, \"V\":5, \"X\":10, \"L\":50, \"C\":100, \"D\":500, \"M\":1000}</code></p> <p>Le code de la fonction <code>traduire_romain</code> fournie repose sur le principe suivant :</p> <ul> <li> <p>la valeur d\u2019un caract\u00e8re est ajout\u00e9e \u00e0 la valeur du reste de la cha\u00eene si ce caract\u00e8re a une valeur sup\u00e9rieure (ou \u00e9gale) \u00e0 celle du caract\u00e8re qui le suit ;</p> </li> <li> <p>la valeur d\u2019un caract\u00e8re est retranch\u00e9e \u00e0 la valeur du reste de la cha\u00eene si ce caract\u00e8re a une valeur strictement inf\u00e9rieure \u00e0 celle du caract\u00e8re qui le suit.</p> </li> </ul> <p>Ainsi, XIV correspond au nombre 10 + 5 - 1 puisque :</p> <ul> <li> <p>la valeur de X (10) est sup\u00e9rieure \u00e0 celle de I (1), on ajoute donc 10 \u00e0 la valeur du reste de la cha\u00eene, c\u2019est-\u00e0-dire IV ;</p> </li> <li> <p>la valeur de I (1) est strictement inf\u00e9rieure \u00e0 celle de V (5), on soustrait donc 1 \u00e0 la valeur du reste de la cha\u00eene, c\u2019est-\u00e0-dire V.</p> </li> </ul> <p>On rappelle que pour priver une cha\u00eene de caract\u00e8res de son premier caract\u00e8re, on utilisera l\u2019instruction :</p> <p><code>nom_de_variable[1:]</code></p> <p>Par exemple, si la variable <code>mot</code> contient la cha\u00eene <code>\"CDI\"</code>, <code>mot[1:]</code> renvoie <code>\"DI\"</code>.</p> \ud83d\udc0d Script Python<pre><code>romains = {\"I\":1, \"V\":5, \"X\":10, \"L\":50, \"C\":100, \"D\":500, \"M\":1000}\n\ndef traduire_romain(nombre):\n    \"\"\" Renvoie l\u2019\u00e9criture d\u00e9cimale du nombre donn\u00e9 en chiffres\n    romains \"\"\"\n    if len(nombre) == 1:\n        return ...\n    elif romains[nombre[0]] &gt;= ...\n        return romains[nombre[0]] + ...\n    else:\n        return ...\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; traduire_romain(\"XIV\")\n14\n&gt;&gt;&gt; traduire_romain(\"CXLII\")\n142\n&gt;&gt;&gt; traduire_romain(\"MMXXIV\")\n2024\n</code></pre> \ud83d\udc0d Script Python<pre><code>romains = {\"I\":1, \"V\":5, \"X\":10, \"L\":50, \"C\":100, \"D\":500, \"M\":1000}\n\ndef traduire_romain(nombre):\n    \"\"\" Renvoie l\u2019\u00e9criture d\u00e9cimale du nombre donn\u00e9 en chiffres\n    romains \"\"\"\n    if len(nombre) == 1:\n        return romains[nombre]\n    elif romains[nombre[0]] &gt;= romains[nombre[1]]:\n        return romains[nombre[0]] + traduire_romain(nombre[1:])\n    else:\n        return traduire_romain(nombre[1:]) - romains[nombre[0]]\n</code></pre> Markdown<pre><code>Le but de cet exercice est d\u2019\u00e9crire une fonction r\u00e9cursive `traduire_romain` qui prend\nen param\u00e8tre une cha\u00eene de caract\u00e8res, non vide, repr\u00e9sentant un nombre \u00e9crit en\nchiffres romains et qui renvoie son \u00e9criture d\u00e9cimale.\n\n\nLes chiffres romains consid\u00e9r\u00e9s sont : I, V, X, L, C, D et M. Ils repr\u00e9sentent\nrespectivement les nombres 1, 5, 10, 50, 100, 500, et 1000 en base dix.\n\n\nOn dispose d\u2019un dictionnaire `romains` dont les cl\u00e9s sont les caract\u00e8res apparaissant\ndans l\u2019\u00e9criture en chiffres romains et les valeurs sont les nombres entiers associ\u00e9s en\n\u00e9criture d\u00e9cimale :\n\n\n`romains = {\"I\":1, \"V\":5, \"X\":10, \"L\":50, \"C\":100, \"D\":500, \"M\":1000}`\n\n\nLe code de la fonction `traduire_romain` fournie repose sur le\nprincipe suivant :\n\n- la valeur d\u2019un caract\u00e8re est ajout\u00e9e \u00e0 la valeur du reste de la cha\u00eene si ce\ncaract\u00e8re a une valeur sup\u00e9rieure (ou \u00e9gale) \u00e0 celle du caract\u00e8re qui le suit ;\n\n- la valeur d\u2019un caract\u00e8re est retranch\u00e9e \u00e0 la valeur du reste de la cha\u00eene si ce\ncaract\u00e8re a une valeur strictement inf\u00e9rieure \u00e0 celle du caract\u00e8re qui le suit.\n\nAinsi, XIV correspond au nombre 10 + 5 - 1 puisque :\n\n- la valeur de X (10) est sup\u00e9rieure \u00e0 celle de I (1), on ajoute donc 10 \u00e0 la valeur du\nreste de la cha\u00eene, c\u2019est-\u00e0-dire IV ;\n\n- la valeur de I (1) est strictement inf\u00e9rieure \u00e0 celle de V (5), on soustrait donc 1 \u00e0\nla valeur du reste de la cha\u00eene, c\u2019est-\u00e0-dire V.\n\nOn rappelle que pour priver une cha\u00eene de caract\u00e8res de son premier caract\u00e8re, on\nutilisera l\u2019instruction :\n\n`nom_de_variable[1:]`\n\nPar exemple, si la variable `mot` contient la cha\u00eene `\"CDI\"`, `mot[1:]` renvoie `\"DI\"`.\n\n```python linenums='1'\nromains = {\"I\":1, \"V\":5, \"X\":10, \"L\":50, \"C\":100, \"D\":500, \"M\":1000}\n\ndef traduire_romain(nombre):\n    \"\"\" Renvoie l\u2019\u00e9criture d\u00e9cimale du nombre donn\u00e9 en chiffres\n    romains \"\"\"\n    if len(nombre) == 1:\n        return ...\n    elif romains[nombre[0]] &gt;= ...\n        return romains[nombre[0]] + ...\n    else:\n        return ...\n</code></pre> <p>Exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; traduire_romain(\"XIV\")\n14\n&gt;&gt;&gt; traduire_romain(\"CXLII\")\n142\n&gt;&gt;&gt; traduire_romain(\"MMXXIV\")\n2024\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-31","title":"\u25b6 Sujet 31","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-311","title":"Exercice 31.1","text":"<p>Exercice 31.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Programmer la fonction <code>multiplication</code>, prenant en param\u00e8tres deux nombres entiers relatifs <code>n1</code> et <code>n2</code>, et qui renvoie le produit de ces deux nombres.</p> <p>Les seules op\u00e9rations autoris\u00e9es sont l\u2019addition et la soustraction. </p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; multiplication(3, 5)\n15\n&gt;&gt;&gt; multiplication(-4, -8)\n32\n&gt;&gt;&gt; multiplication(-2, 6)\n-12\n&gt;&gt;&gt; multiplication(-2, 0)\n0\n</code></pre> \ud83d\udc0d Script Python<pre><code>def multiplication(n1, n2):\n    # on se ram\u00e8ne d'abord au cas o\u00f9 n1 et n2 sont tous les deux positifs :\n    if n1 &lt; 0:\n        return -multiplication(-n1, n2)\n    if n2 &lt; 0:\n        return -multiplication(n1, -n2)\n\n    resultat = 0\n    for _ in range(n2):\n        resultat += n1\n    return resultat\n</code></pre> \ud83d\udccb Texte<pre><code>Programmer la fonction `multiplication`, prenant en param\u00e8tres deux nombres entiers relatifs\n`n1` et `n2`, et qui renvoie le produit de ces deux nombres.\n\nLes seules op\u00e9rations autoris\u00e9es sont l\u2019addition et la soustraction.\n\n```python\n&gt;&gt;&gt; multiplication(3, 5)\n15\n&gt;&gt;&gt; multiplication(-4, -8)\n32\n&gt;&gt;&gt; multiplication(-2, 6)\n-12\n&gt;&gt;&gt; multiplication(-2, 0)\n0\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-312","title":"Exercice 31.2","text":"<p>Exercice 31.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On s\u2019int\u00e9resse dans cet exercice \u00e0 la recherche dichotomique dans un tableau tri\u00e9 d\u2019en- tiers. Compl\u00e9ter la fonction suivante en respectant la sp\u00e9cification.</p> \ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n    \"\"\"\n    tab : tableau d'entiers tri\u00e9 dans l'ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = ... \n        if x == tab[m]:\n            return ... \n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = ... \n    return ... \n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],28)\nTrue\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],27)\nFalse\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n    \"\"\"\n    tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = (debut + fin) // 2\n        if x == tab[m]:\n            return True\n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = m - 1\n    return False\n</code></pre> Markdown<pre><code>On s\u2019int\u00e9resse dans cet exercice \u00e0 la recherche dichotomique dans un tableau tri\u00e9 d\u2019en-\ntiers.\nCompl\u00e9ter la fonction suivante en respectant la sp\u00e9cification.\n\n```python linenums='1'\ndef dichotomie(tab, x):\n    \"\"\"\n    tab : tableau d'entiers tri\u00e9 dans l'ordre croissant\n    x : nombre entier\n    La fonction renvoie True si tab contient x et False sinon\n    \"\"\"\n    debut = 0\n    fin = len(tab) - 1\n    while debut &lt;= fin:\n        m = ... \n        if x == tab[m]:\n            return ... \n        if x &gt; tab[m]:\n            debut = m + 1\n        else:\n            fin = ... \n    return ... \n</code></pre> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],28)\nTrue\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],27)\nFalse\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-32","title":"\u25b6 Sujet 32","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-321","title":"Exercice 32.1","text":"<p>Exercice 32.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>L'op\u00e9rateur \u00ab ou exclusif \u00bb entre deux bits renvoie 0 si les deux bits sont \u00e9gaux et 1 s'ils sont diff\u00e9rents. Il est symbolis\u00e9 par le caract\u00e8re \u2295. Ainsi :</p> <ul> <li>0 \u2295 0 = 0</li> <li>0 \u2295 1 = 1</li> <li>1 \u2295 0 = 1</li> <li>1 \u2295 1 = 0  </li> </ul> <p>\u00c9crire une fonction <code>ou_exclusif</code> qui prend en param\u00e8tres deux tableaux de 0 ou de 1 de m\u00eame longueur et qui renvoie un tableau o\u00f9 l\u2019\u00e9l\u00e9ment situ\u00e9 \u00e0 position <code>i</code> est le r\u00e9sultat, par l\u2019op\u00e9rateur \u00ab ou exclusif \u00bb, des \u00e9l\u00e9ments \u00e0 la position <code>i</code> des tableaux pass\u00e9s en param\u00e8tres.</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; ou_exclusif([1, 0, 1, 0, 1, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0])\n[1, 1, 0, 1, 1, 0, 0, 1]\n&gt;&gt;&gt; ou_exclusif([1, 1, 0, 1], [0, 0, 1, 1])\n[1, 1, 1, 0]\n</code></pre> \ud83d\udc0d Script Python<pre><code>def ou_exclusif(tab1, tab2):\n    resultat = []\n    taille = len(tab1)\n    for i in range(taille):\n        resultat.append(tab1[i] ^ tab2[i])\n    return resultat\n</code></pre> <p>Si on ne connait pas la fonction native ^ qui fait le \u00abou exclusif\u00bb de deux entiers en Python, on peut la recoder :</p> \ud83d\udc0d Script Python<pre><code>def ou_exc(a, b):\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 1:\n        return 1\n    if a == 1 and b == 0:\n        return 1\n    if a == 1 and b == 1:\n        return 0\n</code></pre> <p>Le code devient alors :</p> \ud83d\udc0d Script Python<pre><code>def ou_exclusif(tab1, tab2):\n    resultat = []\n    taille = len(tab1)\n    for i in range(taille):\n        resultat.append(ou_exc(tab1[i],tab2[i]))\n    return resultat\n</code></pre> \ud83d\udccb Texte<pre><code>L'op\u00e9rateur \u00ab ou exclusif \u00bb entre deux bits renvoie 0 si les deux bits sont \u00e9gaux et 1 s'ils sont\ndiff\u00e9rents. Il est symbolis\u00e9 par le caract\u00e8re \u2295.\nAinsi :\n\n- 0 \u2295 0 = 0\n- 0 \u2295 1 = 1\n- 1 \u2295 0 = 1\n- 1 \u2295 1 = 0\n\n\u00c9crire une fonction `ou_exclusif` qui prend en param\u00e8tres deux tableaux de 0 ou de 1 de\nm\u00eame longueur et qui renvoie un tableau o\u00f9 l\u2019\u00e9l\u00e9ment situ\u00e9 \u00e0 position `i` est le r\u00e9sultat, par\nl\u2019op\u00e9rateur \u00ab ou exclusif \u00bb, des \u00e9l\u00e9ments \u00e0 la position `i` des tableaux pass\u00e9s en param\u00e8tres.\n\n```python\n&gt;&gt;&gt; ou_exclusif([1, 0, 1, 0, 1, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0])\n[1, 1, 0, 1, 1, 0, 0, 1]\n&gt;&gt;&gt; ou_exclusif([1, 1, 0, 1], [0, 0, 1, 1])\n[1, 1, 1, 0]\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-322","title":"Exercice 32.2","text":"<p>Exercice 32.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Dans cet exercice, on appelle carr\u00e9 d\u2019ordre \\(n\\) un tableau de \\(n\\) lignes et \\(n\\) colonnes dont chaque case contient un entier naturel.</p> <p>Exemples : </p> <p>Un carr\u00e9 est dit semimagique lorsque les sommes des \u00e9l\u00e9ments situ\u00e9s sur chaque ligne, chaque colonne sont \u00e9gales.</p> <ul> <li> <p>Ainsi c2 et c3 sont semimagiques car la somme de chaque ligne, chaque colonne et chaque diagonale est \u00e9gale \u00e0 8 pour c2 et 12 pour c3.</p> </li> <li> <p>Le carre c3bis n'est pas semimagique car la somme de la premi\u00e8re ligne est \u00e9gale \u00e0 15 alors que celle de la deuxi\u00e8me ligne est \u00e9gale \u00e0 10.</p> </li> </ul> <p>La classe <code>Carre</code> ci-apr\u00e8s contient des m\u00e9thodes qui permettent de manipuler des carr\u00e9s.</p> <ul> <li> <p>La m\u00e9thode constructeur cr\u00e9e un carr\u00e9 sous forme d\u2019un tableau \u00e0 deux dimensions \u00e0 partir d\u2019une liste d\u2019entiers, et d\u2019un ordre.</p> </li> <li> <p>La m\u00e9thode <code>affiche</code> permet d\u2019afficher le carr\u00e9 cr\u00e9\u00e9.</p> </li> </ul> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; lst_c3 = [3, 4, 5, 4, 4, 4, 5, 4, 3]\n&gt;&gt;&gt; c3 = Carre(lst_c3, 3)\n&gt;&gt;&gt; c3.affiche()\n[3, 4, 5]\n[4, 4, 4]\n[5, 4, 3]\n</code></pre> <p>Compl\u00e9ter la m\u00e9thode <code>est_semimagique</code> qui renvoie <code>True</code> si le carr\u00e9 est semimagique, <code>False</code> sinon. </p> \ud83d\udc0d Script Python<pre><code>class Carre:\n    def __init__(self, liste, n):\n        self.ordre = n\n        self.tableau = [[liste[i + j * n] for i in range(n)] for j in range(n)]\n\n    def affiche(self):\n        '''Affiche un carr\u00e9'''\n        for i in range(self.ordre):\n            print(self.tableau[i])\n\n    def somme_ligne(self, i):\n        '''Calcule la somme des valeurs de la ligne i'''\n        somme = 0\n        for j in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def somme_col(self, j):\n        '''Calcule la somme des valeurs de la colonne j'''\n        somme = 0\n        for i in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def est_semimagique(self):\n        s = self.somme_ligne(0)\n\n        #test de la somme de chaque ligne\n        for i in range(...):\n            if ... != s:\n                return ...\n\n        #test de la somme de chaque colonne\n        for j in range(...):\n            if ... != s:\n                return ...\n\n        return ...\n</code></pre> <p>Tester la m\u00e9thode <code>est_semimagique</code> sur les carr\u00e9s c2, c3 et c3bis.</p> \ud83d\udc0d Script Python<pre><code>class Carre:\n    def __init__(self, liste, n):\n        self.ordre = n\n        self.tableau = [[liste[i + j * n] for i in range(n)] for j in range(n)]\n\n    def affiche(self):\n        '''Affiche un carr\u00e9'''\n        for i in range(self.ordre):\n            print(self.tableau[i])\n\n    def somme_ligne(self, i):\n        '''Calcule la somme des valeurs de la ligne i'''\n        somme = 0\n        for j in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def somme_col(self, j):\n        '''Calcule la somme des valeurs de la colonne j'''\n        somme = 0\n        for i in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def est_semimagique(self):\n        s = self.somme_ligne(0)\n\n        #test de la somme de chaque ligne\n        for i in range(self.ordre):\n            if self.somme_ligne(i) != s:\n                return False\n\n        #test de la somme de chaque colonne\n        for j in range(self.ordre):\n            if self.somme_col(j) != s:\n                return False\n\n        return True\n</code></pre> <p>Tests avec :</p> \ud83d\udc0d Script Python<pre><code>lst_c2 = [1, 7, 7, 1]\nlst_c3 = [3, 4, 5, 4, 4, 4, 5, 4, 3]\nlst_c3bis = [2, 9, 4, 7, 0, 3, 6, 1, 8]\n</code></pre> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; c2 = Carre(lst_c2, 2)\n&gt;&gt;&gt; c2.est_semimagique()\nTrue\n\n&gt;&gt;&gt; c3 = Carre(lst_c3, 3)\n&gt;&gt;&gt; c3.est_semimagique()\nTrue\n\n&gt;&gt;&gt; c3bis = Carre(lst_c3bis, 2)\n&gt;&gt;&gt; c3bis.est_semimagique()\nFalse\n</code></pre> Markdown<pre><code>Dans cet exercice, on appelle carr\u00e9 d\u2019ordre $n$ un tableau de $n$ lignes et $n$ colonnes dont chaque case contient un entier naturel.\n\nExemples :\n![image](data2023/35_carre.png){: .center}\n\nUn carr\u00e9 est dit semimagique lorsque les sommes des \u00e9l\u00e9ments situ\u00e9s sur chaque ligne, chaque\ncolonne sont \u00e9gales.\n\n- Ainsi c2 et c3 sont semimagiques car la somme de chaque\nligne, chaque colonne et chaque diagonale est \u00e9gale \u00e0 8 pour c2 et 12 pour c3.\n\n- Le carre c3bis n'est pas semimagique car la somme de la premi\u00e8re ligne est \u00e9gale \u00e0 15 alors que celle de la deuxi\u00e8me ligne\nest \u00e9gale \u00e0 10.\n\nLa classe `Carre` ci-apr\u00e8s contient des m\u00e9thodes qui permettent de manipuler des carr\u00e9s.\n\n- La m\u00e9thode constructeur cr\u00e9e un carr\u00e9 sous forme d\u2019un tableau \u00e0 deux dimensions\n\u00e0 partir d\u2019une liste d\u2019entiers, et d\u2019un ordre.\n\n- La m\u00e9thode `affiche` permet d\u2019afficher le carr\u00e9 cr\u00e9\u00e9.\n\nExemple :\n\n```python\n&gt;&gt;&gt; lst_c3 = [3, 4, 5, 4, 4, 4, 5, 4, 3]\n&gt;&gt;&gt; c3 = Carre(lst_c3, 3)\n&gt;&gt;&gt; c3.affiche()\n[3, 4, 5]\n[4, 4, 4]\n[5, 4, 3]\n</code></pre> <p>Compl\u00e9ter la m\u00e9thode <code>est_semimagique</code> qui renvoie <code>True</code> si le carr\u00e9 est semimagique, <code>False</code> sinon. </p> \ud83d\udc0d Script Python<pre><code>class Carre:\n    def __init__(self, liste, n):\n        self.ordre = n\n        self.tableau = [[liste[i + j * n] for i in range(n)] for j in range(n)]\n\n    def affiche(self):\n        '''Affiche un carr\u00e9'''\n        for i in range(self.ordre):\n            print(self.tableau[i])\n\n    def somme_ligne(self, i):\n        '''Calcule la somme des valeurs de la ligne i'''\n        somme = 0\n        for j in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def somme_col(self, j):\n        '''Calcule la somme des valeurs de la colonne j'''\n        somme = 0\n        for i in range(self.ordre):\n            somme = somme + self.tableau[i][j]\n        return somme\n\n    def est_semimagique(self):\n        s = self.somme_ligne(0)\n\n        #test de la somme de chaque ligne\n        for i in range(...):\n            if ... != s:\n                return ...\n\n        #test de la somme de chaque colonne\n        for j in range(...):\n            if ... != s:\n                return ...\n\n        return ...\n</code></pre> <p>Tester la m\u00e9thode <code>est_semimagique</code> sur les carr\u00e9s c2, c3 et c3bis. ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-33","title":"\u25b6 Sujet 33","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-331","title":"Exercice 33.1","text":"<p>Exercice 33.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Programmer une fonction <code>renverse</code>, prenant en param\u00e8tre une cha\u00eene de caract\u00e8res non vide <code>mot</code> et renvoie cette cha\u00eene de caract\u00e8res en ordre inverse.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; renverse(\"\")\n\"\"\n&gt;&gt;&gt; renverse(\"abc\")\n\"cba\"\n&gt;&gt;&gt; renverse(\"informatique\")\n\"euqitamrofni\"\n</code></pre> \ud83d\udc0d Script Python<pre><code>def renverse(mot):\n    sol = ''\n    for lettre in mot:\n        sol = lettre + sol\n    return sol\n</code></pre> \ud83d\udccb Texte<pre><code>Programmer une fonction `renverse`, prenant en param\u00e8tre une cha\u00eene de caract\u00e8res non vide\n`mot` et renvoie cette cha\u00eene de caract\u00e8res en ordre inverse.\n\nExemple :\n\n```python\n&gt;&gt;&gt; renverse(\"\")\n\"\"\n&gt;&gt;&gt; renverse(\"abc\")\n\"cba\"\n&gt;&gt;&gt; renverse(\"informatique\")\n\"euqitamrofni\"\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-332","title":"Exercice 33.2","text":"<p>Exercice 33.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Un nombre premier est un nombre entier naturel qui admet exactement deux diviseurs distincts entiers et positifs : 1 et lui-m\u00eame. </p> <p>Le crible d\u2019\u00c9ratosth\u00e8ne permet de d\u00e9terminer les nombres premiers plus petit qu\u2019un certain nombre <code>n</code> fix\u00e9. </p> <p>On consid\u00e8re pour cela un tableau <code>tab</code> de <code>n</code>bool\u00e9ens, initialement tous \u00e9gaux \u00e0 <code>True</code>, sauf <code>tab[0]</code> et <code>tab[1]</code> qui valent <code>False</code>, 0 et 1 n\u2019\u00e9tant pas des nombres premiers.  </p> <p>On parcourt alors ce tableau de gauche \u00e0 droite.  </p> <p>Pour chaque indice <code>i</code> :</p> <ul> <li> <p>si <code>tab[i]</code> vaut <code>True</code> : le nombre <code>i</code> est premier et on donne la valeur <code>False</code> \u00e0 toutes les cases du tableau dont l\u2019indice est un multiple de <code>i</code>, \u00e0 partir de <code>2*i</code> (c\u2019est-\u00e0-dire <code>2*i</code>, <code>3*i</code> ...).</p> </li> <li> <p>si <code>tab[i]</code> vaut <code>False</code> : le nombre <code>i</code> n\u2019est pas premier et on n\u2019effectue aucun changement sur le tableau. </p> </li> </ul> <p>On dispose de la fonction <code>crible</code>, incompl\u00e8te et donn\u00e9e ci-dessous, prenant en param\u00e8tre un entier <code>n</code> strictement positif et renvoyant un tableau contenant tous les nombres premiers plus petits que <code>n</code>.</p> \ud83d\udc0d Script Python<pre><code>def crible(n):\n    \"\"\"Renvoie un tableau contenant tous les nombres premiers\n    plus petits que n.\"\"\"\n    premiers = []\n    tab = [True] * n\n    tab[0], tab[1] = False, False\n    for i in range(n):\n        if tab[i]:\n            premiers.... \n            multiple = ... \n            while multiple &lt; n:\n                tab[multiple] = ... \n                multiple = ... \n    return premiers\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; crible(40)\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n&gt;&gt; crible(5)\n[2, 3]\n</code></pre> \ud83d\udc0d Script Python<pre><code>ddef crible(n):\n    \"\"\"Renvoie un tableau contenant tous les nombres premiers\n    plus petits que n.\"\"\"\n    premiers = []\n    tab = [True] * n\n    tab[0], tab[1] = False, False\n    for i in range(n):\n        if tab[i]:\n            premiers.append(i)\n            multiple = i \n            while multiple &lt; n:\n                tab[multiple] = False \n                multiple = multiple + i \n    return premiers\n</code></pre> Markdown<pre><code>Un nombre premier est un nombre entier naturel qui admet exactement deux diviseurs distincts\nentiers et positifs : 1 et lui-m\u00eame. \n\nLe crible d\u2019\u00c9ratosth\u00e8ne permet de d\u00e9terminer les nombres premiers plus petit qu\u2019un certain\nnombre `n` fix\u00e9. \n\nOn consid\u00e8re pour cela un tableau `tab` de `n`bool\u00e9ens, initialement tous \u00e9gaux \u00e0 `True`, sauf\n`tab[0]` et `tab[1]` qui valent `False`, 0 et 1 n\u2019\u00e9tant pas des nombres premiers.  \n\nOn parcourt alors ce tableau de gauche \u00e0 droite.  \n\nPour chaque indice `i` :\n\n- si `tab[i]` vaut `True` : le nombre `i` est premier et on donne la valeur `False` \u00e0 toutes les\ncases du tableau dont l\u2019indice est un multiple de `i`, \u00e0 partir de `2*i` (c\u2019est-\u00e0-dire `2*i`, `3*i` ...).\n\n- si `tab[i]` vaut `False` : le nombre `i` n\u2019est pas premier et on n\u2019effectue aucun\nchangement sur le tableau. \n\nOn dispose de la fonction `crible`, incompl\u00e8te et donn\u00e9e ci-dessous, prenant en param\u00e8tre un\nentier `n` strictement positif et renvoyant un tableau contenant tous les nombres premiers plus\npetits que `n`.\n\n```python linenums='1'\ndef crible(n):\n    \"\"\"Renvoie un tableau contenant tous les nombres premiers\n    plus petits que n.\"\"\"\n    premiers = []\n    tab = [True] * n\n    tab[0], tab[1] = False, False\n    for i in range(n):\n        if tab[i]:\n            premiers.... \n            multiple = ... \n            while multiple &lt; n:\n                tab[multiple] = ... \n                multiple = ... \n    return premiers\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; crible(40)\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n&gt;&gt; crible(5)\n[2, 3]\n</code></pre> <p>```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-34","title":"\u25b6 Sujet 34","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-341","title":"Exercice 34.1","text":"<p>Exercice 34.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Le nombre d\u2019occurrences d\u2019un caract\u00e8re dans une cha\u00eene de caract\u00e8re est le nombre d\u2019apparitions de ce caract\u00e8re dans la cha\u00eene.</p> <p>Exemples :</p> <ul> <li>le nombre d\u2019occurrences du caract\u00e8re <code>\u2018o\u2019</code> dans <code>\u2018bonjour\u2019</code> est 2 ;</li> <li>le nombre d\u2019occurrences du caract\u00e8re <code>\u2018b\u2019</code> dans <code>\u2018B\u00e9b\u00e9\u2019</code> est 1 ;</li> <li>le nombre d\u2019occurrences du caract\u00e8re <code>\u2018B\u2019</code> dans <code>\u2018B\u00e9b\u00e9\u2019</code> est 1 ;</li> <li>le nombre d\u2019occurrences du caract\u00e8re <code>\u2018 \u2018</code> dans <code>\u2018Hello world !\u2019</code> est 2.</li> </ul> <p>On cherche les occurrences des caract\u00e8res dans une phrase. On souhaite stocker ces occurrences dans un dictionnaire dont les clefs seraient les caract\u00e8res de la phrase et les valeurs l\u2019occurrence de ces caract\u00e8res.</p> <p>Par exemple : avec la phrase <code>'Hello world !'</code> le dictionnaire est le suivant :</p> <p><code>{'H': 1,'e': 1,'l': 3,'o': 2,' ': 2,'w': 1,'r': 1,'d': 1,'!': 1}</code></p> <p>L\u2019ordre des clefs n\u2019a pas d\u2019importance.</p> <p>\u00c9crire une fonction <code>nbr_occurrences</code> prenant comme param\u00e8tre une cha\u00eene de caract\u00e8res <code>chaine</code> et renvoyant le dictionnaire des nombres d\u2019occurrences des caract\u00e8res de cette cha\u00eene.</p> \ud83d\udc0d Script Python<pre><code>def nbr_occurrences(chaine):\n    nb_occ = {}\n    for caractere in chaine:\n        if caractere in nb_occ:\n            nb_occ[caractere] += 1\n        else:\n            nb_occ[caractere] = 1\n    return nb_occ\n</code></pre> \ud83d\udccb Texte<pre><code>Le nombre d\u2019occurrences d\u2019un caract\u00e8re dans une cha\u00eene de caract\u00e8re est le nombre\nd\u2019apparitions de ce caract\u00e8re dans la cha\u00eene.\n\nExemples :\n\n- le nombre d\u2019occurrences du caract\u00e8re `\u2018o\u2019` dans `\u2018bonjour\u2019` est 2 ;\n- le nombre d\u2019occurrences du caract\u00e8re `\u2018b\u2019` dans `\u2018B\u00e9b\u00e9\u2019` est 1 ;\n- le nombre d\u2019occurrences du caract\u00e8re `\u2018B\u2019` dans `\u2018B\u00e9b\u00e9\u2019` est 1 ;\n- le nombre d\u2019occurrences du caract\u00e8re `\u2018 \u2018` dans `\u2018Hello world !\u2019` est 2.\n\nOn cherche les occurrences des caract\u00e8res dans une phrase. On souhaite stocker ces\noccurrences dans un dictionnaire dont les clefs seraient les caract\u00e8res de la phrase et\nles valeurs l\u2019occurrence de ces caract\u00e8res.\n\nPar exemple : avec la phrase `'Hello world !'` le dictionnaire est le suivant :\n\n`{'H': 1,'e': 1,'l': 3,'o': 2,' ': 2,'w': 1,'r': 1,'d': 1,'!': 1}`\n\n*L\u2019ordre des clefs n\u2019a pas d\u2019importance.*\n\n\u00c9crire une fonction `nbr_occurrences` prenant comme param\u00e8tre une cha\u00eene de\ncaract\u00e8res `chaine` et renvoyant le dictionnaire des nombres d\u2019occurrences des\ncaract\u00e8res de cette cha\u00eene.\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-342","title":"Exercice 34.2","text":"<p>Exercice 34.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>La fonction <code>fusion</code> prend deux tableaux <code>tab1</code>, <code>tab2</code> (type <code>list</code>) d\u2019entiers tri\u00e9s par ordre croissant et les fusionne en un tableau tri\u00e9 <code>tab12</code> qu\u2019elle renvoie.</p> <p>Compl\u00e9ter le code de la fonction <code>fusion</code> ci-dessous.</p> \ud83d\udc0d Script Python<pre><code>def fusion(tab1,tab2):\n    '''Fusionne deux tableaux tri\u00e9s et renvoie le nouveau tableau tri\u00e9.'''\n    n1 = len(tab1)\n    n2 = len(tab2)\n    tab12 = [0] * (n1 + n2)\n    i1 = 0\n    i2 = 0\n    i = 0\n    while i1 &lt; n1 and ...: \n        if tab1[i1] &lt; tab2[i2]:\n            tab12[i] = ... \n            i1 = ... \n        else:\n            tab12[i] = tab2[i2]\n            i2 = ... \n        i += 1\n    while i1 &lt; n1:\n        tab12[i] = ... \n        i1 = i1 + 1\n        i = ... \n    while i2 &lt; n2:\n        tab12[i] = ... \n        i2 = i2 + 1\n        i = ... \n    return tab12\n</code></pre> <p>Compl\u00e9ter le code.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; fusion([1, 6, 10],[0, 7, 8, 9])\n[0, 1, 6, 7, 8, 9, 10]\n</code></pre> \ud83d\udc0d Script Python<pre><code>def fusion(tab1, tab2):\n    n1 = len(tab1)\n    n2 = len(tab2)\n    tab12 = [0] * (n1 + n2)\n    i1 = 0\n    i2 = 0\n    i = 0\n    while i1 &lt; n1 and i2 &lt; n2 :\n        if tab1[i1] &lt; tab2[i2]:\n            tab12[i] = tab1[i1]\n            i1 = i1 + 1\n        else:\n            tab12[i] = tab2[i2]\n            i2 = i2 + 1\n        i += 1\n    while i1 &lt; n1:\n        tab12[i] = tab1[i1]\n        i1 = i1 + 1\n        i = i + 1\n    while i2 &lt; n2:\n        tab12[i] = tab2[i2]\n        i2 = i2 + 1\n        i = i + 1\n    return tab12\n</code></pre> Markdown<pre><code>La fonction `fusion` prend deux tableaux `tab1`, `tab2` (type `list`) d\u2019entiers tri\u00e9s par ordre\ncroissant et les fusionne en un tableau tri\u00e9 `tab12` qu\u2019elle renvoie.\n\nCompl\u00e9ter le code de la fonction `fusion` ci-dessous.\n\n```python linenums='1'\ndef fusion(tab1,tab2):\n    '''Fusionne deux tableaux tri\u00e9s et renvoie le nouveau tableau tri\u00e9.'''\n    n1 = len(tab1)\n    n2 = len(tab2)\n    tab12 = [0] * (n1 + n2)\n    i1 = 0\n    i2 = 0\n    i = 0\n    while i1 &lt; n1 and ...: \n        if tab1[i1] &lt; tab2[i2]:\n            tab12[i] = ... \n            i1 = ... \n        else:\n            tab12[i] = tab2[i2]\n            i2 = ... \n        i += 1\n    while i1 &lt; n1:\n        tab12[i] = ... \n        i1 = i1 + 1\n        i = ... \n    while i2 &lt; n2:\n        tab12[i] = ... \n        i2 = i2 + 1\n        i = ... \n    return tab12\n</code></pre> <p>Compl\u00e9ter le code.</p> <p>Exemple :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; fusion([1, 6, 10],[0, 7, 8, 9])\n[0, 1, 6, 7, 8, 9, 10]\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-35","title":"\u25b6 Sujet 35","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-351","title":"Exercice 35.1","text":"<p>Exercice 35.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>On a relev\u00e9 les valeurs moyennes annuelles des temp\u00e9ratures \u00e0 Paris pour la p\u00e9riode allant de 2013 \u00e0 2019. Les r\u00e9sultats ont \u00e9t\u00e9 r\u00e9cup\u00e9r\u00e9s sous la forme de deux tableaux (de type <code>list</code>) : l\u2019un pour les temp\u00e9ratures, l\u2019autre pour les ann\u00e9es :</p> \ud83d\udc0d Script Python<pre><code>t_moy = [14.9, 13.3, 13.1, 12.5, 13.0, 13.6, 13.7]\nannees = [2013, 2014, 2015, 2016, 2017, 2018, 2019]\n</code></pre> <p>\u00c9crire la fonction <code>annee_temperature_minimale</code> qui prend en param\u00e8tres ces deux tableaux et qui renvoie la plus petite valeur relev\u00e9e au cours de la p\u00e9riode et l\u2019ann\u00e9e correspondante.</p> <p>On suppose que la temp\u00e9rature minimale est atteinte une seule fois.</p> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; annee_temperature_minimale(t_moy, annees)\n(12.5, 2016)\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>t_moy = [14.9, 13.3, 13.1, 12.5, 13.0, 13.6, 13.7]\nannees = [2013, 2014, 2015, 2016, 2017, 2018, 2019]\n\ndef annee_temperature_minimale(releve, date):\n    temp_mini = releve[0]\n    date_mini = date[0]\n    for i in range(len(releve)):\n        if releve[i] &lt; temp_mini:\n            temp_mini = releve[i]\n            date_mini = date[i]\n    return temp_mini, date_mini\n</code></pre> \ud83d\udccb Texte<pre><code>On a relev\u00e9 les valeurs moyennes annuelles des temp\u00e9ratures \u00e0 Paris pour la p\u00e9riode\nallant de 2013 \u00e0 2019. Les r\u00e9sultats ont \u00e9t\u00e9 r\u00e9cup\u00e9r\u00e9s sous la forme de deux tableaux (de type\n`list`) : l\u2019un pour les temp\u00e9ratures, l\u2019autre pour les ann\u00e9es :\n\n```python\nt_moy = [14.9, 13.3, 13.1, 12.5, 13.0, 13.6, 13.7]\nannees = [2013, 2014, 2015, 2016, 2017, 2018, 2019]\n```\n\n\u00c9crire la fonction `annee_temperature_minimale` qui prend en param\u00e8tres ces deux\ntableaux et qui renvoie la plus petite valeur relev\u00e9e au cours de la p\u00e9riode et l\u2019ann\u00e9e correspondante.\n\nOn suppose que la temp\u00e9rature minimale est atteinte une seule fois.\n\nExemple :\n```python\n&gt;&gt;&gt; annee_temperature_minimale(t_moy, annees)\n(12.5, 2016)\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-352","title":"Exercice 35.2","text":"<p>Exercice 35.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Un mot palindrome peut se lire de la m\u00eame fa\u00e7on de gauche \u00e0 droite ou de droite \u00e0 gauche : kayak, radar, et non sont des mots palindromes.</p> <p>De m\u00eame certains nombres ont des \u00e9critures d\u00e9cimales qui sont des palindromes : 33, 121, 345543.</p> <p>L\u2019objectif de cet exercice est d\u2019obtenir un programme Python permettant de tester si un nombre est un nombre palindrome.</p> <p>Pour remplir cette t\u00e2che, on vous demande de compl\u00e9ter le code des trois fonctions ci- dessous qui s\u2019appuient les unes sur les autres :</p> <ul> <li><code>inverse_chaine</code> : qui renvoie une cha\u00eene de caract\u00e8res invers\u00e9e ;</li> <li><code>est_palindrome</code> : qui teste si une cha\u00eene de caract\u00e8res est un palindrome ;</li> <li><code>est_nbre_palindrome</code> : qui teste si un nombre est un palindrome.</li> </ul> <p>Compl\u00e9ter le code des trois fonctions ci-dessous. \ud83d\udc0d Script Python<pre><code>def inverse_chaine(chaine):\n    '''Retourne la chaine invers\u00e9e'''\n    resultat = ... \n    for caractere in chaine:\n        resultat = ... \n    return resultat\n\ndef est_palindrome(chaine):\n    '''Renvoie un bool\u00e9en indiquant si la chaine ch\n    est un palindrome'''\n    inverse = inverse_chaine(chaine)\n    return ... \n\ndef est_nbre_palindrome(nbre):\n    '''Renvoie un bool\u00e9en indiquant si le nombre nbre \n    est un palindrome'''\n    chaine = ... \n    return est_palindrome(chaine)\n</code></pre></p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; inverse_chaine('bac')\n'cab'\n&gt;&gt;&gt; est_palindrome('NSI')\nFalse\n&gt;&gt;&gt; est_palindrome('ISN-NSI')\nTrue\n&gt;&gt;&gt; est_nbre_palindrome(214312)\nFalse\n&gt;&gt;&gt; est_nbre_palindrome(213312)\nTrue\n</code></pre> \ud83d\udc0d Script Python<pre><code>def inverse_chaine(chaine):\n    '''Retourne la chaine invers\u00e9e'''\n    resultat = '' \n    for caractere in chaine:\n        resultat = caractere + resultat \n    return resultat\n\ndef est_palindrome(chaine):\n    '''Renvoie un bool\u00e9en indiquant si la chaine ch\n    est un palindrome'''\n    inverse = inverse_chaine(chaine)\n    return chaine == inverse \n\ndef est_nbre_palindrome(nbre):\n    '''Renvoie un bool\u00e9en indiquant si le nombre nbre \n    est un palindrome'''\n    chaine = str(nbre) \n    return est_palindrome(chaine)\n</code></pre> Markdown<pre><code>Un mot palindrome peut se lire de la m\u00eame fa\u00e7on de gauche \u00e0 droite ou de droite \u00e0 gauche :\n*kayak*, *radar*, et *non* sont des mots palindromes.\n\nDe m\u00eame certains nombres ont des \u00e9critures d\u00e9cimales qui sont des palindromes : 33, 121,\n345543.\n\n\nL\u2019objectif de cet exercice est d\u2019obtenir un programme Python permettant de tester si un\nnombre est un nombre palindrome.\n\nPour remplir cette t\u00e2che, on vous demande de compl\u00e9ter le code des trois fonctions ci-\ndessous qui s\u2019appuient les unes sur les autres :\n\n- `inverse_chaine` : qui renvoie une cha\u00eene de caract\u00e8res invers\u00e9e ;\n- `est_palindrome` : qui teste si une cha\u00eene de caract\u00e8res est un palindrome ;\n- `est_nbre_palindrome` : qui teste si un nombre est un palindrome.\n\n\nCompl\u00e9ter le code des trois fonctions ci-dessous.\n```python linenums='1'\ndef inverse_chaine(chaine):\n    '''Retourne la chaine invers\u00e9e'''\n    resultat = ... \n    for caractere in chaine:\n        resultat = ... \n    return resultat\n\ndef est_palindrome(chaine):\n    '''Renvoie un bool\u00e9en indiquant si la chaine ch\n    est un palindrome'''\n    inverse = inverse_chaine(chaine)\n    return ... \n\ndef est_nbre_palindrome(nbre):\n    '''Renvoie un bool\u00e9en indiquant si le nombre nbre \n    est un palindrome'''\n    chaine = ... \n    return est_palindrome(chaine)\n</code></pre> <p>Exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; inverse_chaine('bac')\n'cab'\n&gt;&gt;&gt; est_palindrome('NSI')\nFalse\n&gt;&gt;&gt; est_palindrome('ISN-NSI')\nTrue\n&gt;&gt;&gt; est_nbre_palindrome(214312)\nFalse\n&gt;&gt;&gt; est_nbre_palindrome(213312)\nTrue\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-36","title":"\u25b6 Sujet 36","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-361","title":"Exercice 36.1","text":"<p>Exercice 36.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>occurrences(caractere, chaine)</code> qui prend en param\u00e8tres <code>caractere</code>, une cha\u00eene de caract\u00e8re de longueur 1, et <code>chaine</code>, une cha\u00eene de carac- t\u00e8res. Cette fonction renvoie le nombre d\u2019occurrences de <code>caractere</code> dans <code>chaine</code>, c\u2019est-\u00e0-dire le nombre de fois o\u00f9 <code>caractere</code> appara\u00eet dans <code>chaine</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche('e', \"sciences\")\n2\n&gt;&gt;&gt; recherche('i',\"mississippi\")\n4\n&gt;&gt;&gt; recherche('a',\"mississippi\")\n0\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def occurrences(caractere, chaine):\n    somme = 0\n    for lettre in chaine:\n        if lettre == caractere:\n            somme += 1\n    return somme\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `occurrences(caractere, chaine)` qui prend en param\u00e8tres\n`caractere`, une cha\u00eene de caract\u00e8re de longueur 1, et `chaine`, une cha\u00eene de carac-\nt\u00e8res.\nCette fonction renvoie le nombre d\u2019occurrences de `caractere` dans `chaine`, c\u2019est-\u00e0-dire\nle nombre de fois o\u00f9 `caractere` appara\u00eet dans `chaine`.\n\nExemples :\n```python\n&gt;&gt;&gt; recherche('e', \"sciences\")\n2\n&gt;&gt;&gt; recherche('i',\"mississippi\")\n4\n&gt;&gt;&gt; recherche('a',\"mississippi\")\n0\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-362","title":"Exercice 36.2","text":"<p>Exercice 36.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On s\u2019int\u00e9resse \u00e0 un algorithme r\u00e9cursif qui permet de rendre la monnaie \u00e0 partir d\u2019une liste donn\u00e9e de valeurs de pi\u00e8ces et de billets.</p> <p>Le syst\u00e8me mon\u00e9taire est donn\u00e9 sous forme d\u2019une liste <code>valeurs = [100, 50, 20, 10, 5, 2, 1]</code>. On suppose que les pi\u00e8ces et billets sont disponibles sans limitation.</p> <p>On cherche \u00e0 donner la liste des valeurs \u00e0 rendre pour une somme donn\u00e9e en argument. L\u2019algorithme utilis\u00e9 est de type glouton.</p> <p>Compl\u00e9ter le code Python ci-dessous de la fonction <code>rendu_glouton</code> qui impl\u00e9mente cet algorithme et renvoie la liste des pi\u00e8ces \u00e0 rendre.</p> \ud83d\udc0d Script Python<pre><code>valeurs = [100, 50, 20, 10, 5, 2, 1]\n\ndef rendu_glouton(a_rendre, rang):\n    if a_rendre == 0:\n        return ...\n    v = valeurs[rang]\n    if v &lt;= ... :\n        return ... + rendu_glouton(a_rendre - v, rang)\n    else :\n        return rendu_glouton(a_rendre, ...)\n</code></pre> <p>On devra obtenir :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt;rendu_glouton(67, 0)\n[50, 10, 5, 2]\n&gt;&gt;&gt;rendu_glouton(291, 0)\n[100, 100, 50, 20, 20, 1]\n&gt;&gt;&gt; rendu_glouton(291,1) # si on ne dispose pas de billets de 100\n[50, 50, 50, 50, 50, 20, 20, 1]\n</code></pre> \ud83d\udc0d Script Python<pre><code>valeurs = [100,50,20,10,5,2,1]\n\ndef rendu_glouton(a_rendre, rang):\n    if a_rendre == 0:\n        return []\n    v = valeurs[rang]\n    if v &lt;= a_rendre :\n        return [v] + rendu_glouton(a_rendre - v, rang)\n    else :\n        return rendu_glouton(a_rendre, rang + 1)\n</code></pre> Markdown<pre><code>On s\u2019int\u00e9resse \u00e0 un algorithme r\u00e9cursif qui permet de rendre la monnaie \u00e0 partir d\u2019une\nliste donn\u00e9e de valeurs de pi\u00e8ces et de billets.\n\nLe syst\u00e8me mon\u00e9taire est donn\u00e9 sous forme d\u2019une liste `valeurs = [100, 50, 20,\n10, 5, 2, 1]`. On suppose que les pi\u00e8ces et billets sont disponibles sans limitation.\n\n\nOn cherche \u00e0 donner la liste des valeurs \u00e0 rendre pour une somme donn\u00e9e en\nargument. L\u2019algorithme utilis\u00e9 est de type glouton.\n\nCompl\u00e9ter le code Python ci-dessous de la fonction `rendu_glouton` qui impl\u00e9mente cet\nalgorithme et renvoie la liste des pi\u00e8ces \u00e0 rendre.\n\n```python linenums='1'\nvaleurs = [100, 50, 20, 10, 5, 2, 1]\n\ndef rendu_glouton(a_rendre, rang):\n    if a_rendre == 0:\n        return ...\n    v = valeurs[rang]\n    if v &lt;= ... :\n        return ... + rendu_glouton(a_rendre - v, rang)\n    else :\n        return rendu_glouton(a_rendre, ...)\n</code></pre> <p>On devra obtenir :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt;rendu_glouton(67, 0)\n[50, 10, 5, 2]\n&gt;&gt;&gt;rendu_glouton(291, 0)\n[100, 100, 50, 20, 20, 1]\n&gt;&gt;&gt; rendu_glouton(291,1) # si on ne dispose pas de billets de 100\n[50, 50, 50, 50, 50, 20, 20, 1]\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-37","title":"\u25b6 Sujet 37","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-371","title":"Exercice 37.1","text":"<p>Exercice 37.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Programmer la fonction <code>moyenne</code>   prenant en param\u00e8tre un tableau d'entiers <code>tab</code> (de type <code>list</code>) qui renvoie la moyenne de ses \u00e9l\u00e9ments si le tableau est non vide. Proposer une fa\u00e7on de traiter le cas o\u00f9 le tableau pass\u00e9 en param\u00e8tre est vide.</p> <p>Dans cet exercice, on s\u2019interdira d\u2019utiliser la fonction Python <code>sum</code>.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; moyenne([5,3,8])\n5.333333333333333\n&gt;&gt;&gt; moyenne([1,2,3,4,5,6,7,8,9,10])\n5.5\n&gt;&gt;&gt; moyenne([])\n# Comportement diff\u00e9rent suivant le traitement propos\u00e9.\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    if tab == []:\n        print('Le tableau donn\u00e9 est vide')\n        return None\n    else:\n        somme = 0\n        for elt in tab:\n            somme += elt\n        return somme / len(tab)\n</code></pre> \ud83d\udccb Texte<pre><code>Programmer la fonction ```moyenne```   prenant en param\u00e8tre un tableau d'entiers ```tab``` (de type `list`) qui renvoie la moyenne de ses \u00e9l\u00e9ments si le tableau est non vide. Proposer une\nfa\u00e7on de traiter le cas o\u00f9 le tableau pass\u00e9 en param\u00e8tre est vide.\n\nDans cet exercice, on s\u2019interdira d\u2019utiliser la fonction Python `sum`.\n\nExemples :\n```python\n&gt;&gt;&gt; moyenne([5,3,8])\n5.333333333333333\n&gt;&gt;&gt; moyenne([1,2,3,4,5,6,7,8,9,10])\n5.5\n&gt;&gt;&gt; moyenne([])\n# Comportement diff\u00e9rent suivant le traitement propos\u00e9.\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-372","title":"Exercice 37.2","text":"<p>Exercice 37.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On consid\u00e8re un tableau d'entiers <code>tab</code> (de type <code>list</code>) dont les \u00e9l\u00e9ments sont des <code>0</code> ou des <code>1</code>). On se propose de trier ce tableau selon l'algorithme suivant : \u00e0 chaque \u00e9tape du tri, le tableau est constitu\u00e9 de trois zones cons\u00e9cutives, la premi\u00e8re ne contenant que des <code>0</code>, la seconde n'\u00e9tant pas tri\u00e9e et la derni\u00e8re ne contenant que des <code>1</code>. Au d\u00e9part, les zones ne contenant que des <code>0</code> et des <code>1</code> sont vides.</p> <p> Zone de 0Zone non tri\u00e9eZone de 1 </p> <p>Tant que la zone non tri\u00e9e n'est pas r\u00e9duite \u00e0 un seul \u00e9l\u00e9ment, on regarde son premier \u00e9l\u00e9ment :</p> <ul> <li>si cet \u00e9l\u00e9ment vaut 0, on consid\u00e8re qu'il appartient d\u00e9sormais \u00e0 la zone ne contenant que des 0 ;</li> <li>si cet \u00e9l\u00e9ment vaut 1, il est \u00e9chang\u00e9 avec le dernier \u00e9l\u00e9ment de la zone non tri\u00e9e et on consid\u00e8re alors qu\u2019il appartient \u00e0 la zone ne contenant que des 1.</li> </ul> <p>Dans tous les cas, la longueur de la zone non tri\u00e9e diminue de 1.</p> <p>Compl\u00e9ter la fonction <code>tri</code> suivante :</p> \ud83d\udc0d Script Python<pre><code>def tri(tab):\n    '''tab est un tableau d'entiers contenant des 0 et des 1.\n    La fonction trie ce tableau en pla\u00e7ant tous les 0 \u00e0 gauche'''\n    i = ... # premier indice de la zone non tri\u00e9e \n    j = ... # dernier indice de la zone non tri\u00e9e \n    while i &lt; j:\n        if tab[i] == 0:\n            i = ... \n        else:\n            valeur = ... \n            tab[j] = ... \n            ...\n            j = ... \n</code></pre> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tab = [0,1,0,1,0,1,0,1,0]\n&gt;&gt;&gt; tri(tab)\n&gt;&gt;&gt; tab\n[0, 0, 0, 0, 0, 1, 1, 1, 1]    \n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def tri(tab):\n    '''tab est un tableau d'entiers contenant des 0 et des 1.\n    La fonction trie ce tableau en pla\u00e7ant tous les 0 \u00e0 gauche'''\n    i = 0 # premier indice de la zone non tri\u00e9e \n    j = len(tab) - 1 # dernier indice de la zone non tri\u00e9e \n    while i &lt; j:\n        if tab[i] == 0:\n            i = i + 1 \n        else:\n            valeur = tab[j] \n            tab[j] = tab[i] \n            tab[i] = valeur\n            j = j -1  \n</code></pre> Markdown<pre><code>On consid\u00e8re un tableau d'entiers `tab` (de type `list`) dont les \u00e9l\u00e9ments sont des `0` ou des `1`). On se propose de trier ce tableau selon l'algorithme suivant : \u00e0 chaque \u00e9tape du tri, le tableau est constitu\u00e9 de trois zones cons\u00e9cutives, la premi\u00e8re ne contenant que des `0`,\nla seconde n'\u00e9tant pas tri\u00e9e et la derni\u00e8re ne contenant que des `1`.\nAu d\u00e9part, les zones ne contenant que des `0` et des `1` sont vides.\n\n\n&lt;table&gt;\n&lt;tr&gt;\n&lt;td&gt;Zone de 0&lt;/td&gt;&lt;td&gt;Zone non tri\u00e9e&lt;/td&gt;&lt;td&gt;Zone de 1&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\n\nTant que la zone non tri\u00e9e n'est pas r\u00e9duite \u00e0 un seul \u00e9l\u00e9ment, on regarde son premier\n\u00e9l\u00e9ment :\n\n- si cet \u00e9l\u00e9ment vaut 0, on consid\u00e8re qu'il appartient d\u00e9sormais \u00e0 la zone ne contenant\nque des 0 ;\n- si cet \u00e9l\u00e9ment vaut 1, il est \u00e9chang\u00e9 avec le dernier \u00e9l\u00e9ment de la zone non tri\u00e9e et on\nconsid\u00e8re alors qu\u2019il appartient \u00e0 la zone ne contenant que des 1.\n\nDans tous les cas, la longueur de la zone non tri\u00e9e diminue de 1.\n\nCompl\u00e9ter la fonction `tri` suivante :\n\n```python linenums='1'\ndef tri(tab):\n    '''tab est un tableau d'entiers contenant des 0 et des 1.\n    La fonction trie ce tableau en pla\u00e7ant tous les 0 \u00e0 gauche'''\n    i = ... # premier indice de la zone non tri\u00e9e \n    j = ... # dernier indice de la zone non tri\u00e9e \n    while i &lt; j:\n        if tab[i] == 0:\n            i = ... \n        else:\n            valeur = ... \n            tab[j] = ... \n            ...\n            j = ... \n</code></pre> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; tab = [0,1,0,1,0,1,0,1,0]\n&gt;&gt;&gt; tri(tab)\n&gt;&gt;&gt; tab\n[0, 0, 0, 0, 0, 1, 1, 1, 1]    \n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-38","title":"\u25b6 Sujet 38","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-381","title":"Exercice 38.1","text":"<p>Exercice 38.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>indices_maxi</code> qui prend en param\u00e8tre un tableau non vide de nombre entiers <code>tab</code>, repr\u00e9sent\u00e9 par une liste Python et qui renvoie un tuple (<code>maxi</code>, <code>indices</code>) o\u00f9 :</p> <ul> <li><code>maxi</code> est le plus grand \u00e9l\u00e9ment du tableau <code>tab</code> ;</li> <li><code>indices</code> est une liste Python contenant les indices du tableau <code>tab</code> o\u00f9 appara\u00eet ce plus grand \u00e9l\u00e9ment.</li> </ul> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; indices_maxi([1, 5, 6, 9, 1, 2, 3, 7, 9, 8])\n(9, [3, 8])\n&gt;&gt;&gt; indices_maxi([7])\n(7, [0])\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def indices_maxi(tab):\n    val_max = tab[0]\n    ind_max = []\n    for i in range(len(tab)):\n        if tab[i] &gt; val_max:\n            val_max = tab[i]\n    for i in range(len(tab)):\n        if tab[i] == val_max:\n            ind_max.append(i)\n    return (val_max, ind_max)\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `indices_maxi` qui prend en param\u00e8tre un tableau non vide de nombre\nentiers `tab`, repr\u00e9sent\u00e9 par une liste Python et qui renvoie un tuple (`maxi`, `indices`)\no\u00f9 :\n\n- `maxi` est le plus grand \u00e9l\u00e9ment du tableau `tab` ;\n- `indices` est une liste Python contenant les indices du tableau `tab` o\u00f9 appara\u00eet ce\nplus grand \u00e9l\u00e9ment.\n\nExemple :\n```python\n&gt;&gt;&gt; indices_maxi([1, 5, 6, 9, 1, 2, 3, 7, 9, 8])\n(9, [3, 8])\n&gt;&gt;&gt; indices_maxi([7])\n(7, [0])\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-382","title":"Exercice 38.2","text":"<p>Exercice 38.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Cet exercice utilise des piles qui seront repr\u00e9sent\u00e9es par des listes Python.</p> <p>Si <code>pile</code> est une pile, alors <code>pile == []</code> indique si la pile est vide, <code>pile.pop()</code> retire et renvoie le sommet de la pile et <code>pile.append(v)</code> ajoute la valeur <code>v</code> au sommet de la pile.</p> <p>Si on consid\u00e8re qu\u2019une fonction manipule une pile, elle ne peut pas utiliser d\u2019autres op\u00e9ra- tions que celles d\u00e9crites ci-dessus.</p> <p>On cherche \u00e0 \u00e9crire une fonction <code>positifs</code> qui prend une pile de nombres entiers en param\u00e8tre et qui renvoie une nouvelle pile contenant les entiers positifs de la pile initiale, dans le m\u00eame ordre, quitte \u00e0 modifier la pile initiale.</p> <p>Pour cela, on va \u00e9galement \u00e9crire une fonction <code>renverse</code> qui prend une pile en param\u00e8tre et qui renvoie une nouvelle pile contenant les m\u00eames \u00e9l\u00e9ments que la pile initiale, mais dans l\u2019ordre inverse. Cette fonction sera \u00e9galement amen\u00e9e \u00e0 modifier la pile pass\u00e9e en param\u00e8tre.</p> <p>Compl\u00e9ter le code Python des fonctions <code>renverse</code> et <code>positifs</code> ci-apr\u00e8s</p> \ud83d\udc0d Script Python<pre><code>def renverse(pile):\n    '''renvoie une pile contenant les m\u00eames \u00e9l\u00e9ments que pile,\n    mais dans l'ordre inverse.\n    Cette fonction d\u00e9truit pile.'''\n    pile_inverse = ... \n    while pile != []:\n        ... .append(...) \n    return ... \n\n\ndef positifs(pile):\n    '''renvoie une pile contenant les \u00e9l\u00e9ments positifs de pile,\n    dans le m\u00eame ordre. Cette fonction d\u00e9truit pile.'''\n    pile_positifs = ... \n    while pile != []:\n        ... = pile.pop() \n        if ... &gt;= 0: \n            ...\n    return ... \n</code></pre> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; renverse([1, 2, 3, 4, 5])\n[5, 4, 3, 2, 1]\n&gt;&gt;&gt; positifs([-1, 0, 5, -3, 4, -6, 10, 9, -8])\n[0, 5, 4, 10, 9]\n&gt;&gt;&gt; positifs([-2])\n[]\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def renverse(pile):\n    '''renvoie une pile contenant les m\u00eames \u00e9l\u00e9ments que pile,\n    mais dans l'ordre inverse.\n    Cette fonction d\u00e9truit pile.'''\n    pile_inverse = [] \n    while pile != []:\n        pile_inverse.append(pile.pop()) \n    return pile_inverse \n\n\ndef positifs(pile):\n    '''renvoie une pile contenant les \u00e9l\u00e9ments positifs de pile,\n    dans le m\u00eame ordre. Cette fonction d\u00e9truit pile.'''\n    pile_positifs = [] \n    while pile != []:\n        elt = pile.pop() \n        if elt &gt;= 0: \n            pile_positifs.append(elt)\n    return renverse(pile_positifs) \n</code></pre> Markdown<pre><code>Cet exercice utilise des piles qui seront repr\u00e9sent\u00e9es par des listes Python.\n\nSi `pile` est une pile, alors `pile == []` indique si la pile est vide, `pile.pop()` retire\net renvoie le sommet de la pile et `pile.append(v)` ajoute la valeur `v` au sommet de la\npile.\n\nSi on consid\u00e8re qu\u2019une fonction manipule une pile, elle ne peut pas utiliser d\u2019autres op\u00e9ra-\ntions que celles d\u00e9crites ci-dessus.\n\nOn cherche \u00e0 \u00e9crire une fonction `positifs` qui prend une pile de nombres entiers en\nparam\u00e8tre et qui renvoie une nouvelle pile contenant les entiers positifs de la pile initiale,\ndans le m\u00eame ordre, quitte \u00e0 modifier la pile initiale.\n\nPour cela, on va \u00e9galement \u00e9crire une fonction `renverse` qui prend une pile en param\u00e8tre\net qui renvoie une nouvelle pile contenant les m\u00eames \u00e9l\u00e9ments que la pile initiale, mais\ndans l\u2019ordre inverse. Cette fonction sera \u00e9galement amen\u00e9e \u00e0 modifier la pile pass\u00e9e en\nparam\u00e8tre.\n\n\nCompl\u00e9ter le code Python des fonctions `renverse` et `positifs` ci-apr\u00e8s\n\n```python linenums='1'\ndef renverse(pile):\n    '''renvoie une pile contenant les m\u00eames \u00e9l\u00e9ments que pile,\n    mais dans l'ordre inverse.\n    Cette fonction d\u00e9truit pile.'''\n    pile_inverse = ... \n    while pile != []:\n        ... .append(...) \n    return ... \n\n\ndef positifs(pile):\n    '''renvoie une pile contenant les \u00e9l\u00e9ments positifs de pile,\n    dans le m\u00eame ordre. Cette fonction d\u00e9truit pile.'''\n    pile_positifs = ... \n    while pile != []:\n        ... = pile.pop() \n        if ... &gt;= 0: \n            ...\n    return ... \n</code></pre> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; renverse([1, 2, 3, 4, 5])\n[5, 4, 3, 2, 1]\n&gt;&gt;&gt; positifs([-1, 0, 5, -3, 4, -6, 10, 9, -8])\n[0, 5, 4, 10, 9]\n&gt;&gt;&gt; positifs([-2])\n[]\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-39","title":"\u25b6 Sujet 39","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-391","title":"Exercice 39.1","text":"<p>Exercice 39.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres <code>elt</code> un nombre entier et <code>tab</code> un tableau de nombres entiers (type <code>list</code> ), et qui renvoie l\u2019indice de la derni\u00e8re occurrence de <code>elt</code> dans <code>tab</code> si <code>elt</code> est dans <code>tab</code> et <code>None</code> sinon.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche(1, [2, 3, 4]) # renvoie None\n&gt;&gt;&gt; recherche(1, [10, 12, 1, 56])\n2\n&gt;&gt;&gt; recherche(1, [1, 0, 42, 7])\n0\n&gt;&gt;&gt; recherche(1, [1, 50, 1])\n2\n&gt;&gt;&gt; recherche(1, [8, 1, 10, 1, 7, 1, 8])\n5\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(elt, tab):\n    for i in range(len(tab)-1, -1, -1):\n        if tab[i] == elt:\n            return i\n    return None\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `recherche` qui prend en param\u00e8tres `elt` un nombre entier et `tab`\nun tableau de nombres entiers (type ```list``` ), et qui renvoie l\u2019indice de la derni\u00e8re occurrence de `elt` dans `tab` si `elt` est dans `tab` et `None` sinon.\n\nExemples :\n```python\n&gt;&gt;&gt; recherche(1, [2, 3, 4]) # renvoie None\n&gt;&gt;&gt; recherche(1, [10, 12, 1, 56])\n2\n&gt;&gt;&gt; recherche(1, [1, 0, 42, 7])\n0\n&gt;&gt;&gt; recherche(1, [1, 50, 1])\n2\n&gt;&gt;&gt; recherche(1, [8, 1, 10, 1, 7, 1, 8])\n5\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-392","title":"Exercice 39.2","text":"<p>Exercice 39.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On d\u00e9finit une classe g\u00e9rant une adresse IPv4.</p> <p>On rappelle qu\u2019une adresse IPv4 est une adresse de longueur 4 octets, not\u00e9e en d\u00e9cimale \u00e0 point, en s\u00e9parant chacun des octets par un point. On consid\u00e8re un r\u00e9seau priv\u00e9 avec une plage d\u2019adresses IP de <code>192.168.0.0</code> \u00e0 <code>192.168.0.255</code>.</p> <p>On consid\u00e8re que les adresses IP saisies sont valides.</p> <p>Les adresses IP <code>192.168.0.0</code> et <code>192.168.0.255</code> sont des adresses r\u00e9serv\u00e9es.</p> <p>Le code ci-dessous impl\u00e9mente la classe <code>AdresseIP</code>.</p> <p>\ud83d\udc0d Script Python<pre><code>class AdresseIP:\n    def __init__(self, adresse):\n        self.adresse = ... \n\n    def liste_octets(self):\n        \"\"\"renvoie une liste de nombres entiers,\n        la liste des octets de l'adresse IP\"\"\"\n        # Note : split d\u00e9coupe la chaine de caract\u00e8res \n        # en fonction du s\u00e9parateur\n        return [int(i) for i in self.adresse.split(\".\")]\n\n    def est_reservee(self):\n        \"\"\"renvoie True si l'adresse IP est une adresse\n        r\u00e9serv\u00e9e, False sinon\"\"\"\n        reservees = [ ... ] \n        return ... \n\n    def adresse_suivante(self):\n        \"\"\"renvoie un objet de AdresseIP avec l'adresse\n        IP qui suit l'adresse self si elle existe et None sinon\"\"\"\n        octets = ... \n        if ... == 254: \n            return None\n        octet_nouveau = ... + ... \n        return AdresseIP('192.168.0.' + ...) \n</code></pre> Compl\u00e9ter le code ci-dessus et instancier trois objets : <code>adresse1</code>, <code>adresse2</code>, <code>adresse3</code> avec respectivement les arguments suivants :</p> <p><code>'192.168.0.1'</code>, <code>'192.168.0.2'</code>, <code>'192.168.0.0'</code></p> <p>V\u00e9rifier que :  \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; adresse1.liste_octets()\n[192, 168, 0, 1]\n&gt;&gt;&gt; adresse1.est_reservee()\nFalse\n&gt;&gt;&gt; adresse3.est_reservee()\nTrue\n&gt;&gt;&gt; adresse2.adresse_suivante().adresse # acces valide \u00e0 adresse\n# ici car on sait que l'adresse suivante existe\n'192.168.0.3'\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>class AdresseIP:\n    def __init__(self, adresse):\n        self.adresse = adresse \n\n    def liste_octets(self):\n        \"\"\"renvoie une liste de nombres entiers,\n        la liste des octets de l'adresse IP\"\"\"\n        # Note : split d\u00e9coupe la chaine de caract\u00e8res \n        # en fonction du s\u00e9parateur\n        return [int(i) for i in self.adresse.split(\".\")]\n\n    def est_reservee(self):\n        \"\"\"renvoie True si l'adresse IP est une adresse\n        r\u00e9serv\u00e9e, False sinon\"\"\"\n        reservees = [ '192.168.0.0', '192.168.0.255' ] \n        return self in reservees \n\n    def adresse_suivante(self):\n        \"\"\"renvoie un objet de AdresseIP avec l'adresse\n        IP qui suit l'adresse self si elle existe et None sinon\"\"\"\n        octets = self.liste_octets() \n        if octets[3] == 254: \n            return None\n        octet_nouveau = octets[3] + 1 \n        return AdresseIP('192.168.0.' + str(octet_nouveau))\n\n\n\nadresse1 = AdresseIP('192.168.0.1')\nadresse2 = AdresseIP('192.168.0.2')\nadresse3 = AdresseIP('192.168.0.0')\n</code></pre> <p>Markdown<pre><code>On d\u00e9finit une classe g\u00e9rant une adresse IPv4.\n\nOn rappelle qu\u2019une adresse IPv4 est une adresse de longueur 4 octets, not\u00e9e en d\u00e9cimale\n\u00e0 point, en s\u00e9parant chacun des octets par un point. On consid\u00e8re un r\u00e9seau priv\u00e9 avec\nune plage d\u2019adresses IP de `192.168.0.0` \u00e0 `192.168.0.255`.\n\nOn consid\u00e8re que les adresses IP saisies sont valides.\n\nLes adresses IP `192.168.0.0` et `192.168.0.255` sont des adresses r\u00e9serv\u00e9es.\n\nLe code ci-dessous impl\u00e9mente la classe `AdresseIP`.\n\n```python linenums='1'\nclass AdresseIP:\n    def __init__(self, adresse):\n        self.adresse = ... \n\n    def liste_octets(self):\n        \"\"\"renvoie une liste de nombres entiers,\n        la liste des octets de l'adresse IP\"\"\"\n        # Note : split d\u00e9coupe la chaine de caract\u00e8res \n        # en fonction du s\u00e9parateur\n        return [int(i) for i in self.adresse.split(\".\")]\n\n    def est_reservee(self):\n        \"\"\"renvoie True si l'adresse IP est une adresse\n        r\u00e9serv\u00e9e, False sinon\"\"\"\n        reservees = [ ... ] \n        return ... \n\n    def adresse_suivante(self):\n        \"\"\"renvoie un objet de AdresseIP avec l'adresse\n        IP qui suit l'adresse self si elle existe et None sinon\"\"\"\n        octets = ... \n        if ... == 254: \n            return None\n        octet_nouveau = ... + ... \n        return AdresseIP('192.168.0.' + ...) \n</code></pre> Compl\u00e9ter le code ci-dessus et instancier trois objets : <code>adresse1</code>, <code>adresse2</code>, <code>adresse3</code> avec respectivement les arguments suivants :</p> <p><code>'192.168.0.1'</code>, <code>'192.168.0.2'</code>, <code>'192.168.0.0'</code></p> <p>V\u00e9rifier que :  \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; adresse1.liste_octets()\n[192, 168, 0, 1]\n&gt;&gt;&gt; adresse1.est_reservee()\nFalse\n&gt;&gt;&gt; adresse3.est_reservee()\nTrue\n&gt;&gt;&gt; adresse2.adresse_suivante().adresse # acces valide \u00e0 adresse\n# ici car on sait que l'adresse suivante existe\n'192.168.0.3'\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-40","title":"\u25b6 Sujet 40","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-401","title":"Exercice 40.1","text":"<p>Exercice 40.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>On consid\u00e8re des tables, c\u2019est-\u00e0-dire des tableaux de dictionnaires ayant tous les m\u00eames cl\u00e9s, qui contiennent des enregistrements relatifs \u00e0 des animaux h\u00e9berg\u00e9s dans un refuge. Les attributs des enregistrements sont <code>'nom'</code>, <code>'espece'</code>, <code>'age'</code>, <code>'enclos'</code>.</p> <p>Voici un exemple d'une telle table :</p> \ud83d\udc0d Script Python<pre><code>animaux = [ {'nom':'Medor', 'espece':'chien', 'age':5, 'enclos':2},\n            {'nom':'Titine', 'espece':'chat', 'age':2, 'enclos':5},\n            {'nom':'Tom', 'espece':'chat', 'age':7, 'enclos':4},\n            {'nom':'Belle', 'espece':'chien', 'age':6, 'enclos':3},\n            {'nom':'Mirza', 'espece':'chat', 'age':6, 'enclos':5}]\n</code></pre> <p>Programmer une fonction <code>selection_enclos</code> qui :</p> <ul> <li>prend en param\u00e8tres :<ul> <li>une table <code>animaux</code> contenant des enregistrements relatifs \u00e0 des animaux (comme dans l'exemple ci-dessus),</li> <li>un num\u00e9ro d'enclos <code>num_enclos</code> ;</li> </ul> </li> <li>renvoie une table contenant les enregistrements de <code>animaux</code> dont l'attribut <code>'enclos'</code> est <code>num_enclos</code>.</li> </ul> <p>Exemples avec la table <code>animaux</code> ci-dessus :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; selection_enclos(animaux, 5)\n[{'nom':'Titine', 'espece':'chat', 'age':2, 'enclos':5},\n {'nom':'Mirza', 'espece':'chat', 'age':6, 'enclos':5}]\n\n&gt;&gt;&gt; selection_enclos(animaux, 2)\n[{'nom':'Medor', 'espece':'chien', 'age':5, 'enclos':2}]\n\n&gt;&gt;&gt; selection_enclos(animaux, 7)\n[]\n</code></pre> \ud83d\udc0d Script Python<pre><code>def selection_enclos(animaux, num_enclos):\n    table = []\n    for animal in animaux:\n        if animal['enclos'] == num_enclos:\n            table.append(animal)\n    return table\n</code></pre> \ud83d\udccb Texte<pre><code>On consid\u00e8re des tables, c\u2019est-\u00e0-dire des tableaux de dictionnaires ayant tous les m\u00eames\ncl\u00e9s, qui contiennent des enregistrements relatifs \u00e0 des animaux h\u00e9berg\u00e9s dans un refuge.\nLes attributs des enregistrements sont `'nom'`, `'espece'`, `'age'`, `'enclos'`.\n\n Voici un exemple d'une telle table :\n\n```python\nanimaux = [ {'nom':'Medor', 'espece':'chien', 'age':5, 'enclos':2},\n            {'nom':'Titine', 'espece':'chat', 'age':2, 'enclos':5},\n            {'nom':'Tom', 'espece':'chat', 'age':7, 'enclos':4},\n            {'nom':'Belle', 'espece':'chien', 'age':6, 'enclos':3},\n            {'nom':'Mirza', 'espece':'chat', 'age':6, 'enclos':5}]\n```\n\nProgrammer une fonction `selection_enclos` qui :\n\n- prend en param\u00e8tres :\n    - une table `animaux` contenant des enregistrements relatifs \u00e0 des\nanimaux (comme dans l'exemple ci-dessus),\n    - un num\u00e9ro d'enclos `num_enclos` ;\n- renvoie une table contenant les enregistrements de `animaux` dont l'attribut\n`'enclos'` est `num_enclos`.\n\nExemples avec la table `animaux` ci-dessus :\n\n```python\n&gt;&gt;&gt; selection_enclos(animaux, 5)\n[{'nom':'Titine', 'espece':'chat', 'age':2, 'enclos':5},\n {'nom':'Mirza', 'espece':'chat', 'age':6, 'enclos':5}]\n\n&gt;&gt;&gt; selection_enclos(animaux, 2)\n[{'nom':'Medor', 'espece':'chien', 'age':5, 'enclos':2}]\n\n&gt;&gt;&gt; selection_enclos(animaux, 7)\n[]\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-402","title":"Exercice 40.2","text":"<p>Exercice 40.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On consid\u00e8re des tableaux de nombres dont tous les \u00e9l\u00e9ments sont pr\u00e9sents exactement trois fois \u00e0 la suite, sauf un \u00e9l\u00e9ment qui est pr\u00e9sent une unique fois et que l'on appelle \u00ab l'intrus \u00bb. Voici quelques exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>tab_a = [3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8, 8, 5, 5, 5]\n#l'intrus est 7\n\ntab_b = [8, 5, 5, 5, 9, 9, 9, 18, 18, 18, 3, 3, 3]\n#l'intrus est 8\n\ntab_c = [5, 5, 5, 1, 1, 1, 0, 0, 0, 6, 6, 6, 3, 8, 8, 8]\n#l'intrus est 3\n</code></pre> On remarque qu'avec de tels tableaux :</p> <ul> <li>pour les indices multiples de 3 situ\u00e9s strictement avant l'intrus, l'\u00e9l\u00e9ment correspondant et son voisin de droite sont \u00e9gaux,</li> <li>pour les indices multiples de 3 situ\u00e9s apr\u00e8s l'intrus, l'\u00e9l\u00e9ment correspondant et son voisin de droite - s'il existe - sont diff\u00e9rents.</li> </ul> <p>Ce que l'on peut observer ci-dessous en observant les valeurs des paires de voisins marqu\u00e9es par des caract\u00e8res ^ :</p> \ud83d\udc0d Script Python<pre><code>[3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8, 8, 5, 5, 5]\n ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^\n 0        3        6        9        12       15       18       21\n</code></pre> <p>Dans des listes comme ceux ci-dessus, un algorithme r\u00e9cursif pour trouver l'intrus consiste alors \u00e0 choisir un indice <code>i</code> multiple de 3 situ\u00e9 approximativement au milieu des indices parmi lesquels se trouve l'intrus. </p> <p>Puis, en fonction des valeurs de l'\u00e9l\u00e9ment d'indice <code>i</code> et de son voisin de droite, \u00e0 appliquer r\u00e9cursivement l'algorithme \u00e0 la moiti\u00e9 droite ou \u00e0 la moiti\u00e9 gauche des indices parmi lesquels se trouve l'intrus. </p> <p>Par exemple, si on s\u2019int\u00e9resse \u00e0 l\u2019indice 12, on voit les valeurs 2 et 4 qui sont diff\u00e9rentes : l\u2019intrus est donc \u00e0 gauche de l\u2019indice 12 (indice 12 compris)</p> <p>En revanche, si on s\u2019int\u00e9resse \u00e0 l\u2019indice 3, on voit les valeurs 9 et 9 qui sont identiques : l\u2019intrus est donc \u00e0 droite des indices 3-4-5, donc \u00e0 partir de l\u2019indice 6.</p> <p>Compl\u00e9ter la fonction r\u00e9cursive <code>trouver_intrus</code> propos\u00e9e page suivante qui met en \u0153uvre cet algorithme.</p> \ud83d\udc0d Script Python<pre><code>def trouver_intrus(tab, g, d):\n    '''\n    Renvoie la valeur de l'intrus situ\u00e9 entre les indices g et d \n    dans la liste tab o\u00f9 :\n    tab v\u00e9rifie les conditions de l'exercice,\n    g et d sont des multiples de 3.\n    '''\n    if g == d:\n        return ...\n\n    else:\n        nombre_de_triplets = (d - g) // ...\n        indice = g + 3 * (nombre_de_triplets // 2)\n        if ... :\n            return ...\n        else:\n            return ...\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; trouver_intrus([3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8,\n8, 5, 5, 5], 0, 21)\n7\n\n&gt;&gt;&gt; trouver_intrus([8, 5, 5, 5, 9, 9, 9, 18, 18, 18, 3, 3, 3], 0, 12)\n8\n\n&gt;&gt;&gt; trouver_intrus([5, 5, 5, 1, 1, 1, 0, 0, 0, 6, 6, 6, 3, 8, 8, 8], 0, 15)\n3\n</code></pre> \ud83d\udc0d Script Python<pre><code>def trouver_intrus(tab, g, d):\n    '''\n    Renvoie la valeur de l'intrus situ\u00e9 entre les indices g et d \n    dans la liste tab o\u00f9 :\n    tab v\u00e9rifie les conditions de l'exercice,\n    g et d sont des multiples de 3.\n    '''\n    if g == d:\n        return tab[g]\n\n    else:\n        nombre_de_triplets = (d - g) // 3\n        indice = g + 3 * (nombre_de_triplets // 2)\n        if tab[indice] != tab[indice + 1] :\n            return trouver_intrus(tab, g, indice)\n        else:\n            return trouver_intrus(tab, indice + 3, d)\n</code></pre> <p>Markdown<pre><code>On consid\u00e8re des tableaux de nombres dont tous les \u00e9l\u00e9ments sont pr\u00e9sents exactement\ntrois fois \u00e0 la suite, sauf un \u00e9l\u00e9ment qui est pr\u00e9sent une unique fois et que l'on appelle \u00ab\nl'intrus \u00bb. Voici quelques exemples :\n\n```python\ntab_a = [3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8, 8, 5, 5, 5]\n#l'intrus est 7\n\ntab_b = [8, 5, 5, 5, 9, 9, 9, 18, 18, 18, 3, 3, 3]\n#l'intrus est 8\n\ntab_c = [5, 5, 5, 1, 1, 1, 0, 0, 0, 6, 6, 6, 3, 8, 8, 8]\n#l'intrus est 3\n</code></pre> On remarque qu'avec de tels tableaux :</p> <ul> <li>pour les indices multiples de 3 situ\u00e9s strictement avant l'intrus, l'\u00e9l\u00e9ment correspondant et son voisin de droite sont \u00e9gaux,</li> <li>pour les indices multiples de 3 situ\u00e9s apr\u00e8s l'intrus, l'\u00e9l\u00e9ment correspondant et son voisin de droite - s'il existe - sont diff\u00e9rents.</li> </ul> <p>Ce que l'on peut observer ci-dessous en observant les valeurs des paires de voisins marqu\u00e9es par des caract\u00e8res ^ :</p> \ud83d\udc0d Script Python<pre><code>[3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8, 8, 5, 5, 5]\n ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^  ^     ^\n 0        3        6        9        12       15       18       21\n</code></pre> <p>Dans des listes comme ceux ci-dessus, un algorithme r\u00e9cursif pour trouver l'intrus consiste alors \u00e0 choisir un indice <code>i</code> multiple de 3 situ\u00e9 approximativement au milieu des indices parmi lesquels se trouve l'intrus. </p> <p>Puis, en fonction des valeurs de l'\u00e9l\u00e9ment d'indice <code>i</code> et de son voisin de droite, \u00e0 appliquer r\u00e9cursivement l'algorithme \u00e0 la moiti\u00e9 droite ou \u00e0 la moiti\u00e9 gauche des indices parmi lesquels se trouve l'intrus. </p> <p>Par exemple, si on s\u2019int\u00e9resse \u00e0 l\u2019indice 12, on voit les valeurs 2 et 4 qui sont diff\u00e9rentes : l\u2019intrus est donc \u00e0 gauche de l\u2019indice 12 (indice 12 compris)</p> <p>En revanche, si on s\u2019int\u00e9resse \u00e0 l\u2019indice 3, on voit les valeurs 9 et 9 qui sont identiques : l\u2019intrus est donc \u00e0 droite des indices 3-4-5, donc \u00e0 partir de l\u2019indice 6.</p> <p>Compl\u00e9ter la fonction r\u00e9cursive <code>trouver_intrus</code> propos\u00e9e page suivante qui met en \u0153uvre cet algorithme.</p> \ud83d\udc0d Script Python<pre><code>def trouver_intrus(tab, g, d):\n    '''\n    Renvoie la valeur de l'intrus situ\u00e9 entre les indices g et d \n    dans la liste tab o\u00f9 :\n    tab v\u00e9rifie les conditions de l'exercice,\n    g et d sont des multiples de 3.\n    '''\n    if g == d:\n        return ...\n\n    else:\n        nombre_de_triplets = (d - g) // ...\n        indice = g + 3 * (nombre_de_triplets // 2)\n        if ... :\n            return ...\n        else:\n            return ...\n</code></pre> <p>Exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; trouver_intrus([3, 3, 3, 9, 9, 9, 1, 1, 1, 7, 2, 2, 2, 4, 4, 4, 8, 8,\n8, 5, 5, 5], 0, 21)\n7\n\n&gt;&gt;&gt; trouver_intrus([8, 5, 5, 5, 9, 9, 9, 18, 18, 18, 3, 3, 3], 0, 12)\n8\n\n&gt;&gt;&gt; trouver_intrus([5, 5, 5, 1, 1, 1, 0, 0, 0, 6, 6, 6, 3, 8, 8, 8], 0, 15)\n3\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-41","title":"\u25b6 Sujet 41","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-411","title":"Exercice 41.1","text":"<p>Exercice 41.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Un arbre binaire est soit vide, repr\u00e9sent\u00e9 en Python par la valeur <code>None</code>, soit un n\u0153ud, contenant une \u00e9tiquette et deux sous-arbres gauche et droit et repr\u00e9sent\u00e9 par une instance de la classe <code>Noeud</code> donn\u00e9e ci-dessous.</p> \ud83d\udc0d Script Python<pre><code>class Noeud:\n    def __init__(self, etiquette, gauche, droit):\n        self.v = etiquette\n        self.gauche = gauche\n        self.droit = droit\n</code></pre> <p></p> <p>L\u2019arbre ci-dessus sera donc impl\u00e9ment\u00e9 de la mani\u00e8re suivante : \ud83d\udc0d Script Python<pre><code>a = Noeud(1, Noeud(4, None, None), Noeud(0, None, Noeud(7, None, None)))\n</code></pre></p> <p>\u00c9crire une fonction r\u00e9cursive <code>taille</code> prenant en param\u00e8tre un arbre <code>a</code> et qui renvoie la taille de l\u2019arbre que cette instance impl\u00e9mente.</p> <p>\u00c9crire de m\u00eame une fonction r\u00e9cursive <code>hauteur</code> prenant en param\u00e8tre un arbre <code>a</code> et qui renvoie la hauteur de l\u2019arbre que cette instance impl\u00e9mente.</p> <p>On consid\u00e8re que la hauteur d\u2019un arbre vide est -1 et la taille d\u2019un arbre vide est 0.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; hauteur(a)\n2\n&gt;&gt;&gt; taille(a)\n4\n&gt;&gt;&gt; hauteur(None)\n-1\n&gt;&gt;&gt; taille(None)\n0\n&gt;&gt;&gt; hauteur(Noeud(1, None, None))\n0\n&gt;&gt;&gt; taille(Noeud(1, None, None))\n1\n</code></pre> \ud83d\udc0d Script Python<pre><code>class Noeud:\n    def __init__(self, etiquette, gauche, droit):\n        self.v = etiquette\n        self.gauche = gauche\n        self.droit = droit\n\na = Noeud(1, Noeud(4, None, None), Noeud(0, None, Noeud(7, None, None)))\n\ndef taille(a):\n    if a is None:\n        return 0\n    return 1 + taille(a.gauche) + taille(a.droit)\n\ndef hauteur(a):\n    if a is None:\n        return -1\n    return 1 + max(hauteur(a.gauche), hauteur(a.droit))\n</code></pre> \ud83d\udccb Texte<pre><code>Un arbre binaire est soit vide, repr\u00e9sent\u00e9 en Python par la valeur `None`, soit un n\u0153ud,\ncontenant une \u00e9tiquette et deux sous-arbres gauche et droit et repr\u00e9sent\u00e9 par une instance\nde la classe `Noeud` donn\u00e9e ci-dessous.\n\n```python\nclass Noeud:\n    def __init__(self, etiquette, gauche, droit):\n        self.v = etiquette\n        self.gauche = gauche\n        self.droit = droit\n```\n\n![image](data2023/29_arbre1.png){: .center}\n\nL\u2019arbre ci-dessus sera donc impl\u00e9ment\u00e9 de la mani\u00e8re suivante :\n```python\na = Noeud(1, Noeud(4, None, None), Noeud(0, None, Noeud(7, None, None)))\n```\n\n\u00c9crire une fonction r\u00e9cursive `taille` prenant en param\u00e8tre un arbre `a` et qui renvoie la\ntaille de l\u2019arbre que cette instance impl\u00e9mente.\n\n\u00c9crire de m\u00eame une fonction r\u00e9cursive `hauteur` prenant en param\u00e8tre un arbre `a` et qui\nrenvoie la hauteur de l\u2019arbre que cette instance impl\u00e9mente.\n\nOn consid\u00e8re que la hauteur d\u2019un arbre vide est -1 et la taille d\u2019un arbre vide est 0.\n\nExemples :\n\n```python\n&gt;&gt;&gt; hauteur(a)\n2\n&gt;&gt;&gt; taille(a)\n4\n&gt;&gt;&gt; hauteur(None)\n-1\n&gt;&gt;&gt; taille(None)\n0\n&gt;&gt;&gt; hauteur(Noeud(1, None, None))\n0\n&gt;&gt;&gt; taille(Noeud(1, None, None))\n1\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-412","title":"Exercice 41.2","text":"<p>Exercice 41.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On rappelle que les tableaux sont repr\u00e9sent\u00e9s par des listes en Python du type <code>list</code>.</p> <p>Le but de cet exercice est d\u2019\u00e9crire une fonction ajoute qui prend en param\u00e8tres trois arguments <code>indice</code>, <code>element</code> et <code>tab</code> et renvoie un tableau <code>tab_ins</code> dans lequel les \u00e9l\u00e9ments sont ceux du tableau <code>tab</code> avec, en plus, l\u2019\u00e9l\u00e9ment <code>element</code> \u00e0 l\u2019indice <code>indice</code>.</p> <p>On consid\u00e8re que les variables <code>indice</code> et <code>element</code> sont des entiers positifs et que les \u00e9l\u00e9ments de <code>tab</code> sont \u00e9galement des entiers.</p> <p>En r\u00e9alisant cette insertion, Les \u00e9l\u00e9ments du tableau <code>tab</code> dont les indices sont sup\u00e9rieurs ou \u00e9gaux \u00e0 <code>indice</code> apparaissent d\u00e9cal\u00e9s vers la droite dans le tableau <code>tab_ins</code>.</p> <p>Si <code>indice</code> est \u00e9gal au nombre d\u2019\u00e9l\u00e9ments du tableau <code>tab</code>, l\u2019\u00e9l\u00e9ment <code>element</code> est ajout\u00e9 dans <code>tab_ins</code> apr\u00e8s tous les \u00e9l\u00e9ments du tableau <code>tab</code>.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; ajoute(1, 4, [7, 8, 9])\n[7, 4, 8, 9]\n&gt;&gt;&gt; ajoute(3, 4, [7, 8, 9])\n[7, 8, 9, 4]\n&gt;&gt;&gt; ajoute(4, 4, [7, 8, 9])\n[7, 8, 9, 4]\n</code></pre> <p>Compl\u00e9ter et tester le code ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def ajoute(indice, element, tab):\n    '''Renvoie un nouveau tableau obtenu en ins\u00e9rant\n    element \u00e0 l'indice indice dans le tableau tab.'''\n    nbre_elts = len(tab)\n    tab_ins = [0] * (nbre_elts + 1)\n    for i in range(indice):\n        tab_ins[i] = ... \n    tab_ins[...] = ... \n    for i in range(indice + 1, nbre_elts + 1):\n        tab_ins[i] = ... \n    return tab_ins\n</code></pre> \ud83d\udc0d Script Python<pre><code>def ajoute(indice, element, tab):\n    '''Renvoie un nouveau tableau obtenu en ins\u00e9rant\n    element \u00e0 l'indice indice dans le tableau tab.'''\n    nbre_elts = len(tab)\n    tab_ins = [0] * (nbre_elts + 1)\n    for i in range(indice):\n        tab_ins[i] = tab[i] \n    tab_ins[indice] = element \n    for i in range(indice + 1, nbre_elts + 1):\n        tab_ins[i] = tab[i-1] \n    return tab_ins\n</code></pre> Markdown<pre><code>On rappelle que les tableaux sont repr\u00e9sent\u00e9s par des listes en Python du type `list`.\n\nLe but de cet exercice est d\u2019\u00e9crire une fonction ajoute qui prend en param\u00e8tres trois\narguments `indice`, `element` et `tab` et renvoie un tableau `tab_ins` dans lequel les\n\u00e9l\u00e9ments sont ceux du tableau `tab` avec, en plus, l\u2019\u00e9l\u00e9ment `element` \u00e0 l\u2019indice `indice`.\n\nOn consid\u00e8re que les variables `indice` et `element` sont des entiers positifs et que les\n\u00e9l\u00e9ments de `tab` sont \u00e9galement des entiers.\n\nEn r\u00e9alisant cette insertion, Les \u00e9l\u00e9ments du tableau `tab` dont les indices sont sup\u00e9rieurs\nou \u00e9gaux \u00e0 `indice` apparaissent d\u00e9cal\u00e9s vers la droite dans le tableau `tab_ins`.\n\nSi `indice` est \u00e9gal au nombre d\u2019\u00e9l\u00e9ments du tableau `tab`, l\u2019\u00e9l\u00e9ment `element` est ajout\u00e9\ndans `tab_ins` apr\u00e8s tous les \u00e9l\u00e9ments du tableau `tab`.\n\nExemples :\n\n```python\n&gt;&gt;&gt; ajoute(1, 4, [7, 8, 9])\n[7, 4, 8, 9]\n&gt;&gt;&gt; ajoute(3, 4, [7, 8, 9])\n[7, 8, 9, 4]\n&gt;&gt;&gt; ajoute(4, 4, [7, 8, 9])\n[7, 8, 9, 4]\n</code></pre> <p>Compl\u00e9ter et tester le code ci-dessous :</p> <p>\ud83d\udc0d Script Python<pre><code>def ajoute(indice, element, tab):\n    '''Renvoie un nouveau tableau obtenu en ins\u00e9rant\n    element \u00e0 l'indice indice dans le tableau tab.'''\n    nbre_elts = len(tab)\n    tab_ins = [0] * (nbre_elts + 1)\n    for i in range(indice):\n        tab_ins[i] = ... \n    tab_ins[...] = ... \n    for i in range(indice + 1, nbre_elts + 1):\n        tab_ins[i] = ... \n    return tab_ins\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-42","title":"\u25b6 Sujet 42","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-421","title":"Exercice 42.1","text":"<p>Exercice 42.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>moyenne</code> qui prend en param\u00e8tre un tableau d\u2019entiers non vide et qui renvoie un nombre flottant donnant la moyenne de ces entiers.</p> <p>Attention : il est interdit d\u2019utiliser la fonction <code>sum</code> ou la fonction <code>mean</code> (module <code>statistics</code>) de Python.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; moyenne([1])\n1.0\n&gt;&gt;&gt; moyenne([1, 2, 3, 4, 5, 6, 7])\n4.0\n&gt;&gt;. moyenne([1, 2])\n1.5\n</code></pre> \ud83d\udc0d Script Python<pre><code>def moyenne(tab):\n    somme = 0\n    for elt in tab:\n        somme += elt\n    return somme / len(tab)\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `moyenne` qui prend en param\u00e8tre un tableau d\u2019entiers non vide et qui\nrenvoie un nombre flottant donnant la moyenne de ces entiers.\n\n**Attention** : il est interdit d\u2019utiliser la fonction `sum` ou la fonction `mean` (module `statistics`) de Python.\n\nExemples :\n\n```python\n&gt;&gt;&gt; moyenne([1])\n1.0\n&gt;&gt;&gt; moyenne([1, 2, 3, 4, 5, 6, 7])\n4.0\n&gt;&gt;. moyenne([1, 2])\n1.5\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-422","title":"Exercice 42.2","text":"<p>Exercice 42.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Le but de l'exercice est de compl\u00e9ter une fonction qui d\u00e9termine si une valeur est pr\u00e9sente dans un tableau de valeurs tri\u00e9es dans l'ordre croissant.</p> <p>Compl\u00e9ter l'algorithme de dichotomie donn\u00e9 ci-apr\u00e8s.</p> \ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n    \"\"\"applique une recherche dichotomique pour d\u00e9terminer\n    si x est dans le tableau tri\u00e9 tab.\n    La fonction renvoie True si tab contient x et False sinon\"\"\"\n\n    debut = 0\n    fin = ... \n    while debut &lt;= fin:\n        m = ... \n        if x == tab[m]:\n            return ... \n        if x &gt; tab[m]:\n            debut = ... \n        else:\n            fin = ... \n    return False\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33], 28)\nTrue\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33], 27)\nFalse\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33], 1)\nFalse\n&gt;&gt;&gt; dichotomie([], 28)\nFalse\n</code></pre> \ud83d\udc0d Script Python<pre><code>def dichotomie(tab, x):\n    \"\"\"applique une recherche dichotomique pour d\u00e9terminer\n    si x est dans le tableau tri\u00e9 tab.\n    La fonction renvoie True si tab contient x et False sinon\"\"\"\n\n    debut = 0\n    fin = len(tab) - 1 \n    while debut &lt;= fin:\n        m = (debut + fin) // 2 \n        if x == tab[m]:\n            return m \n        if x &gt; tab[m]:\n            debut = m + 1 \n        else:\n            fin = m - 1 \n    return False\n</code></pre> Markdown<pre><code>Le but de l'exercice est de compl\u00e9ter une fonction qui d\u00e9termine si une valeur est pr\u00e9sente\ndans un tableau de valeurs tri\u00e9es dans l'ordre croissant.\n\nCompl\u00e9ter l'algorithme de dichotomie donn\u00e9 ci-apr\u00e8s.\n\n```python linenums='1'\ndef dichotomie(tab, x):\n    \"\"\"applique une recherche dichotomique pour d\u00e9terminer\n    si x est dans le tableau tri\u00e9 tab.\n    La fonction renvoie True si tab contient x et False sinon\"\"\"\n\n    debut = 0\n    fin = ... \n    while debut &lt;= fin:\n        m = ... \n        if x == tab[m]:\n            return ... \n        if x &gt; tab[m]:\n            debut = ... \n        else:\n            fin = ... \n    return False\n</code></pre> <p>Exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33], 28)\nTrue\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33], 27)\nFalse\n&gt;&gt;&gt; dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33], 1)\nFalse\n&gt;&gt;&gt; dichotomie([], 28)\nFalse\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-43","title":"\u25b6 Sujet 43","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-431","title":"Exercice 43.1","text":"<p>Exercice 43.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>a_doublon</code> qui prend en param\u00e8tre un tableau tri\u00e9 de nombres dans l\u2019ordre croissant et renvoie <code>True</code> si ce tableau contient au moins deux nombres identiques, <code>False</code> sinon.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; a_doublon([])\nFalse\n&gt;&gt;&gt; a_doublon([1])\nFalse\n&gt;&gt;&gt; a_doublon([1, 2, 4, 6, 6])\nTrue\n&gt;&gt;&gt; a_doublon([2, 5, 7, 7, 7, 9])\nTrue\n&gt;&gt;&gt; a_doublon([0, 2, 3])\nFalse\n</code></pre> \ud83d\udc0d Script Python<pre><code>def a_doublon(tab):\n    for i in range(len(tab)-1):\n        if tab[i] == tab[i+1]:\n            return True\n    return False\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `a_doublon` qui prend en param\u00e8tre un tableau **tri\u00e9** de nombres dans\nl\u2019ordre croissant et renvoie `True` si ce tableau contient au moins deux nombres identiques,\n`False` sinon.\n\nExemple :\n\n```python\n&gt;&gt;&gt; a_doublon([])\nFalse\n&gt;&gt;&gt; a_doublon([1])\nFalse\n&gt;&gt;&gt; a_doublon([1, 2, 4, 6, 6])\nTrue\n&gt;&gt;&gt; a_doublon([2, 5, 7, 7, 7, 9])\nTrue\n&gt;&gt;&gt; a_doublon([0, 2, 3])\nFalse\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-432","title":"Exercice 43.2","text":"<p>Exercice 43.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On souhaite g\u00e9n\u00e9rer des grilles du jeu de d\u00e9mineur \u00e0 partir de la position des bombes \u00e0 placer. On se limite \u00e0 la g\u00e9n\u00e9ration de grilles carr\u00e9es de taille \\(n \\times n\\) o\u00f9 \\(n\\) est le nombre de bombes du jeu.  </p> <p>Dans le jeu du d\u00e9mineur, chaque case de la grille contient soit une bombe, soit une valeur qui correspond aux nombres de bombes situ\u00e9es dans le voisinage direct de la case (au- dessus, en dessous, \u00e0 droite, \u00e0 gauche ou en diagonale : chaque case a donc 8 voisins si elle n'est pas situ\u00e9e au bord de la grille).</p> <p>Voici un exemple de grille \\(5 \\times 5\\) de d\u00e9mineur dans laquelle la bombe est repr\u00e9sent\u00e9e par une \u00e9toile :</p> <p></p> <p>On utilise une liste de listes pour repr\u00e9senter la grille et on choisit de coder une bombe par la valeur -1.</p> <p>L'exemple ci-contre sera donc cod\u00e9 par la liste :</p> \ud83d\udc0d Script Python<pre><code>[[1, 1, 1, 0, 0],\n[1, -1, 1, 1, 1],\n[2, 2, 3, 2, -1],\n[1, -1, 2, -1, 3],\n[1, 1, 2, 2, -1]]\n</code></pre> <p>Compl\u00e9ter le code suivant afin de g\u00e9n\u00e9rer des grilles de d\u00e9mineur, on pourra v\u00e9rifier que l'appel</p> <p><code>genere_grille([(1, 1), (2, 4), (3, 1), (3, 3), (4, 4)])</code></p> <p>renvoie bien la liste donn\u00e9e en exemple.</p> \ud83d\udc0d Script Python<pre><code>def voisinage(n, ligne, colonne):\n    \"\"\" Renvoie la liste des coordonn\u00e9es des voisins de la case\n    (ligne, colonne) en g\u00e9rant les cases sur les bords. \"\"\"\n    voisins = []\n    for l in range(max(0,ligne-1), min(n, ligne+2)):\n        for c in range(max(0, colonne-1), min(n, colonne+2)):\n            if (l, c) != (ligne, colonne):\n                voisins.append((l,c))\n    return voisins\n\n\ndef incremente_voisins(grille, ligne, colonne):\n    \"\"\" Incr\u00e9mente de 1 toutes les cases voisines d'une bombe.\"\"\"\n    voisins = ...\n    for l, c in voisins:\n        if grille[l][c] != ...: # si ce n'est pas une bombe\n            ...  # on ajoute 1 \u00e0 sa valeur\n\n\n\ndef genere_grille(bombes):\n    \"\"\" Renvoie une grille de d\u00e9mineur de taille nxn o\u00f9 n est\n    le nombre de bombes, en pla\u00e7ant les bombes \u00e0 l'aide de\n    la liste bombes de coordonn\u00e9es (tuples) pass\u00e9e en\n    param\u00e8tre. \"\"\"\n    n = len(bombes)\n    # Initialisation d'une grille nxn remplie de 0\n    grille = [[0 for colonne in range(n)] for ligne in range(n)]\n    # Place les bombes et calcule les valeurs des autres cases\n    for ligne, colonne in bombes:\n        grille[ligne][colonne] = ... # place la bombe\n        ... # incr\u00e9mente ses voisins\n\n    return grille\n</code></pre> \ud83d\udc0d Script Python<pre><code>def voisinage(n, ligne, colonne):\n    \"\"\" Renvoie la liste des coordonn\u00e9es des voisins de la case\n    (ligne, colonne) en g\u00e9rant les cases sur les bords. \"\"\"\n    voisins = []\n    for l in range(max(0,ligne-1), min(n, ligne+2)):\n        for c in range(max(0, colonne-1), min(n, colonne+2)):\n            if (l, c) != (ligne, colonne):\n                voisins.append((l,c))\n    return voisins\n\n\ndef incremente_voisins(grille, ligne, colonne):\n    \"\"\" Incr\u00e9mente de 1 toutes les cases voisines d'une bombe.\"\"\"\n    voisins = voisinage(len(grille), ligne, colonne)\n    for l, c in voisins:\n        if grille[l][c] != -1: # si ce n'est pas une bombe\n            grille[l][c] += 1  # on ajoute 1 \u00e0 sa valeur\n\n\n\ndef genere_grille(bombes):\n    \"\"\" Renvoie une grille de d\u00e9mineur de taille nxn o\u00f9 n est\n    le nombre de bombes, en pla\u00e7ant les bombes \u00e0 l'aide de\n    la liste bombes de coordonn\u00e9es (tuples) pass\u00e9e en\n    param\u00e8tre. \"\"\"\n    n = len(bombes)\n    # Initialisation d'une grille nxn remplie de 0\n    grille = [[0 for colonne in range(n)] for ligne in range(n)]\n    # Place les bombes et calcule les valeurs des autres cases\n    for ligne, colonne in bombes:\n        grille[ligne][colonne] = -1 # place la bombe\n        incremente_voisins(grille, ligne, colonne) # incr\u00e9mente ses voisins\n\n    return grille\n</code></pre> Markdown<pre><code>On souhaite g\u00e9n\u00e9rer des grilles du jeu de d\u00e9mineur \u00e0 partir de la position des bombes \u00e0\nplacer.  \nOn se limite \u00e0 la g\u00e9n\u00e9ration de grilles carr\u00e9es de taille $n \\times n$ o\u00f9 $n$ est le nombre de bombes du jeu.  \n\nDans le jeu du d\u00e9mineur, chaque case de la grille contient soit une bombe, soit une valeur\nqui correspond aux nombres de bombes situ\u00e9es dans le voisinage direct de la case (au-\ndessus, en dessous, \u00e0 droite, \u00e0 gauche ou en diagonale : chaque case a donc 8 voisins si\nelle n'est pas situ\u00e9e au bord de la grille).\n\nVoici un exemple de grille $5 \\times 5$ de d\u00e9mineur dans laquelle la bombe est repr\u00e9sent\u00e9e par une \u00e9toile :\n\n![image](data2023/04grille.png){: .center}\n\n\nOn utilise une liste de listes pour repr\u00e9senter la grille et on choisit de coder une bombe par la valeur -1.\n\nL'exemple ci-contre sera donc cod\u00e9 par la liste :\n\n```python\n[[1, 1, 1, 0, 0],\n[1, -1, 1, 1, 1],\n[2, 2, 3, 2, -1],\n[1, -1, 2, -1, 3],\n[1, 1, 2, 2, -1]]\n</code></pre> <p>Compl\u00e9ter le code suivant afin de g\u00e9n\u00e9rer des grilles de d\u00e9mineur, on pourra v\u00e9rifier que l'appel</p> <p><code>genere_grille([(1, 1), (2, 4), (3, 1), (3, 3), (4, 4)])</code></p> <p>renvoie bien la liste donn\u00e9e en exemple.</p> \ud83d\udc0d Script Python<pre><code>def voisinage(n, ligne, colonne):\n    \"\"\" Renvoie la liste des coordonn\u00e9es des voisins de la case\n    (ligne, colonne) en g\u00e9rant les cases sur les bords. \"\"\"\n    voisins = []\n    for l in range(max(0,ligne-1), min(n, ligne+2)):\n        for c in range(max(0, colonne-1), min(n, colonne+2)):\n            if (l, c) != (ligne, colonne):\n                voisins.append((l,c))\n    return voisins\n\n\ndef incremente_voisins(grille, ligne, colonne):\n    \"\"\" Incr\u00e9mente de 1 toutes les cases voisines d'une bombe.\"\"\"\n    voisins = ...\n    for l, c in voisins:\n        if grille[l][c] != ...: # si ce n'est pas une bombe\n            ...  # on ajoute 1 \u00e0 sa valeur\n\n\n\ndef genere_grille(bombes):\n    \"\"\" Renvoie une grille de d\u00e9mineur de taille nxn o\u00f9 n est\n    le nombre de bombes, en pla\u00e7ant les bombes \u00e0 l'aide de\n    la liste bombes de coordonn\u00e9es (tuples) pass\u00e9e en\n    param\u00e8tre. \"\"\"\n    n = len(bombes)\n    # Initialisation d'une grille nxn remplie de 0\n    grille = [[0 for colonne in range(n)] for ligne in range(n)]\n    # Place les bombes et calcule les valeurs des autres cases\n    for ligne, colonne in bombes:\n        grille[ligne][colonne] = ... # place la bombe\n        ... # incr\u00e9mente ses voisins\n\n    return grille\n</code></pre> <p>```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-44","title":"\u25b6 Sujet 44","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-441","title":"Exercice 44.1","text":"<p>Exercice 44.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>enumere</code> qui prend en param\u00e8tre un tableau <code>tab</code> (type <code>list</code>) et renvoie un dictionnaire <code>d</code> dont les cl\u00e9s sont les \u00e9l\u00e9ments de <code>tab</code> avec pour valeur associ\u00e9e la liste des indices de l\u2019\u00e9l\u00e9ment dans le tableau <code>tab</code>.</p> <p>Exemple :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; enumere([])\n{}\n&gt;&gt;&gt; enumere([1, 2, 3])\n{1: [0], 2: [1], 3: [2]}\n&gt;&gt;&gt; enumere([1, 1, 2, 3, 2, 1])\n{1: [0, 1, 5], 2: [2, 4], 3: [3]}\n</code></pre> \ud83d\udc0d Script Python<pre><code>def enumere(tab):\n    d = {}\n    for i in range(len(tab)):\n        if tab[i] in d:\n            d[tab[i]].append(i)\n        else:\n            d[tab[i]] = [i]\n    return d\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `enumere` qui prend en param\u00e8tre un tableau `tab` (type `list`) et renvoie\nun dictionnaire `d` dont les cl\u00e9s sont les \u00e9l\u00e9ments de `tab` avec pour valeur associ\u00e9e la liste\ndes indices de l\u2019\u00e9l\u00e9ment dans le tableau `tab`.\n\nExemple :\n\n```python\n&gt;&gt;&gt; enumere([])\n{}\n&gt;&gt;&gt; enumere([1, 2, 3])\n{1: [0], 2: [1], 3: [2]}\n&gt;&gt;&gt; enumere([1, 1, 2, 3, 2, 1])\n{1: [0, 1, 5], 2: [2, 4], 3: [3]}\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-442","title":"Exercice 44.2","text":"<p>Exercice 44.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Un arbre binaire est soit vide, repr\u00e9sent\u00e9 en Python par la valeur <code>None</code>, soit un n\u0153ud, contenant une \u00e9tiquette et deux sous-arbres gauche et droit et repr\u00e9sent\u00e9 par une instance de la classe <code>Noeud</code> donn\u00e9e ci-dessous.</p> \ud83d\udc0d Script Python<pre><code>class Noeud:\n    \"\"\"Classe repr\u00e9sentant un noeud d'un arbre binaire\"\"\"\n    def __init__(self, etiquette, gauche, droit):\n        \"\"\"Cr\u00e9e un noeud de valeur etiquette avec \n        gauche et droit comme fils.\"\"\"\n        self.etiquette = etiquette\n        self.gauche = gauche\n        self.droit = droit\n\ndef parcours(arbre, liste):\n    \"\"\"parcours r\u00e9cursivement l'arbre en ajoutant les \u00e9tiquettes\n    de ses noeuds \u00e0 la liste pass\u00e9e en argument en ordre infixe.\"\"\"\n    if arbre != None:\n        parcours(arbre.gauche, liste)\n        liste.append(arbre.etiquette)\n        parcours(arbre.droit, liste)\n    return liste\n</code></pre> <p>La fonction r\u00e9cursive <code>parcours</code> renvoie la liste des \u00e9tiquettes des n\u0153uds de l\u2019arbre impl\u00e9- ment\u00e9 par l\u2019instance <code>arbre</code> dans l\u2019ordre du parcours en profondeur infixe \u00e0 partir d\u2019une liste vide pass\u00e9e en argument.</p> <p>Compl\u00e9ter le code de la fonction <code>insere</code>, pr\u00e9sent\u00e9 page suivante, qui prend en argument un arbre binaire de recherche <code>arbre</code> repr\u00e9sent\u00e9 ainsi et une \u00e9tiquette <code>cle</code>, non pr\u00e9sente dans l\u2019arbre, et qui :</p> <ul> <li>renvoie une nouvelle feuille d\u2019\u00e9tiquette <code>cle</code> s\u2019il est vide ;</li> <li>renvoie l\u2019arbre apr\u00e8s l\u2019avoir modifi\u00e9 en ins\u00e9rant <code>cle</code> sinon ;</li> <li>garantit que l\u2019arbre ainsi compl\u00e9t\u00e9 soit encore un arbre binaire de recherche.</li> </ul> <p>Tester ensuite ce code en utilisant la fonction <code>parcours</code> et en ins\u00e9rant successivement des n\u0153uds d\u2019\u00e9tiquette 1, 4, 6 et 8 dans l\u2019arbre binaire de recherche repr\u00e9sent\u00e9 ci- dessous :</p> <p></p> \ud83d\udc0d Script Python<pre><code>def insere(arbre, cle):\n    \"\"\"insere la cle dans l'arbre binaire de recherche\n    repr\u00e9sent\u00e9 par arbre.\n    Retourne l'arbre modifi\u00e9.\"\"\"\n    if arbre == None:\n        return Noeud(cle, None, None) # creation d'une feuille\n    else:\n        if ...: \n            arbre.gauche = insere(arbre.gauche, cle)\n        else:\n            arbre.droit = ... \n        return arbre\n</code></pre> \ud83d\udc0d Script Python<pre><code>def insere(arbre, cle):\n    \"\"\"insere la cle dans l'arbre binaire de recherche\n    repr\u00e9sent\u00e9 par arbre.\n    Retourne l'arbre modifi\u00e9.\"\"\"\n    if arbre == None:\n        return Noeud(cle, None, None) # creation d'une feuille\n    else:\n        if cle &lt; arbre.etiquette: \n            arbre.gauche = insere(arbre.gauche, cle)\n        else:\n            arbre.droit = insere(arbre.droit, cle) \n        return arbre\n</code></pre> <p>Tests :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; a = Noeud(5, None, None)\n&gt;&gt;&gt; a = insere(a, 2)\n&gt;&gt;&gt; a = insere(a, 3)\n&gt;&gt;&gt; a = insere(a, 7)\n&gt;&gt;&gt; parcours(a, [])\n[2, 3, 5, 7]\n&gt;&gt;&gt; a = insere(a, 1)\n&gt;&gt;&gt; a = insere(a, 4)\n&gt;&gt;&gt; a = insere(a, 6)\n&gt;&gt;&gt; a = insere(a, 8)\n&gt;&gt;&gt; parcours(a, [])\n[1, 2, 3, 4, 5, 6, 7, 8]\n</code></pre> Markdown<pre><code>Un arbre binaire est soit vide, repr\u00e9sent\u00e9 en Python par la valeur `None`, soit un n\u0153ud,\ncontenant une \u00e9tiquette et deux sous-arbres gauche et droit et repr\u00e9sent\u00e9 par une instance\nde la classe `Noeud` donn\u00e9e ci-dessous.\n\n```python linenums='1'\nclass Noeud:\n    \"\"\"Classe repr\u00e9sentant un noeud d'un arbre binaire\"\"\"\n    def __init__(self, etiquette, gauche, droit):\n        \"\"\"Cr\u00e9e un noeud de valeur etiquette avec \n        gauche et droit comme fils.\"\"\"\n        self.etiquette = etiquette\n        self.gauche = gauche\n        self.droit = droit\n\ndef parcours(arbre, liste):\n    \"\"\"parcours r\u00e9cursivement l'arbre en ajoutant les \u00e9tiquettes\n    de ses noeuds \u00e0 la liste pass\u00e9e en argument en ordre infixe.\"\"\"\n    if arbre != None:\n        parcours(arbre.gauche, liste)\n        liste.append(arbre.etiquette)\n        parcours(arbre.droit, liste)\n    return liste\n</code></pre> <p>La fonction r\u00e9cursive <code>parcours</code> renvoie la liste des \u00e9tiquettes des n\u0153uds de l\u2019arbre impl\u00e9- ment\u00e9 par l\u2019instance <code>arbre</code> dans l\u2019ordre du parcours en profondeur infixe \u00e0 partir d\u2019une liste vide pass\u00e9e en argument.</p> <p>Compl\u00e9ter le code de la fonction <code>insere</code>, pr\u00e9sent\u00e9 page suivante, qui prend en argument un arbre binaire de recherche <code>arbre</code> repr\u00e9sent\u00e9 ainsi et une \u00e9tiquette <code>cle</code>, non pr\u00e9sente dans l\u2019arbre, et qui :</p> <ul> <li>renvoie une nouvelle feuille d\u2019\u00e9tiquette <code>cle</code> s\u2019il est vide ;</li> <li>renvoie l\u2019arbre apr\u00e8s l\u2019avoir modifi\u00e9 en ins\u00e9rant <code>cle</code> sinon ;</li> <li>garantit que l\u2019arbre ainsi compl\u00e9t\u00e9 soit encore un arbre binaire de recherche.</li> </ul> <p>Tester ensuite ce code en utilisant la fonction <code>parcours</code> et en ins\u00e9rant successivement des n\u0153uds d\u2019\u00e9tiquette 1, 4, 6 et 8 dans l\u2019arbre binaire de recherche repr\u00e9sent\u00e9 ci- dessous :</p> <p></p> <p>\ud83d\udc0d Script Python<pre><code>def insere(arbre, cle):\n    \"\"\"insere la cle dans l'arbre binaire de recherche\n    repr\u00e9sent\u00e9 par arbre.\n    Retourne l'arbre modifi\u00e9.\"\"\"\n    if arbre == None:\n        return Noeud(cle, None, None) # creation d'une feuille\n    else:\n        if ...: \n            arbre.gauche = insere(arbre.gauche, cle)\n        else:\n            arbre.droit = ... \n        return arbre\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-45","title":"\u25b6 Sujet 45","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-451","title":"Exercice 45.1","text":"<p>Exercice 45.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>compte_occurrences</code> prenant en param\u00e8tres une valeur <code>x</code> et un tableau <code>tab</code> (de type <code>list</code>) et renvoyant le nombre d\u2019occurrences de <code>x</code> dans <code>tab</code>.</p> <p>L\u2019objectif de cet exercice \u00e9tant de parcourir un tableau, il est interdit d\u2019utiliser la m\u00e9thode <code>count</code> des listes Python.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; compte_occurrences(5, [])\n0\n&gt;&gt;&gt; compte_occurrences(5, [-2, 3, 1, 5, 3, 7, 4])\n1\n&gt;&gt;&gt; compte_occurrences('a', ['a','b','c','a','d','e','a'])\n3\n</code></pre> \ud83d\udc0d Script Python<pre><code>def compte_occurrence(x, tab):\n    nb = 0\n    for element in tab:\n        if element == x:\n            nb += 1\n    return nb\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `compte_occurrences` prenant en param\u00e8tres une valeur `x` et un\ntableau `tab` (de type `list`) et renvoyant le nombre d\u2019occurrences de `x` dans `tab`.\n\nL\u2019objectif de cet exercice \u00e9tant de parcourir un tableau, il est interdit d\u2019utiliser la m\u00e9thode\n`count` des listes Python.\n\nExemples :\n\n```python\n&gt;&gt;&gt; compte_occurrences(5, [])\n0\n&gt;&gt;&gt; compte_occurrences(5, [-2, 3, 1, 5, 3, 7, 4])\n1\n&gt;&gt;&gt; compte_occurrences('a', ['a','b','c','a','d','e','a'])\n3\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-452","title":"Exercice 45.2","text":"<p>Exercice 45.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On consid\u00e8re dans cet exercice un algorithme glouton pour le rendu de monnaie. Pour rendre une somme en monnaie, on utilise \u00e0 chaque fois la plus grosse pi\u00e8ce possible et ainsi de suite jusqu\u2019\u00e0 ce que la somme restante \u00e0 rendre soit nulle.</p> <p>Les pi\u00e8ces de monnaie utilis\u00e9es sont :</p> <p><code>pieces = [1, 2, 5, 10, 20, 50, 100, 200]</code></p> <p>On souhaite \u00e9crire une fonction <code>rendu_monnaie</code> qui prend en param\u00e8tres</p> <ul> <li>un entier <code>somme_due</code> repr\u00e9sentant la somme \u00e0 payer ;</li> <li>un entier <code>somme_versee</code> repr\u00e9sentant la somme vers\u00e9e qui est sup\u00e9rieure ou \u00e9gale \u00e0 <code>somme_due</code> ;</li> <li>et qui renvoie un tableau de type <code>list</code> contenant les pi\u00e8ces qui composent le rendu de la monnaie restante, c\u2019est-\u00e0-dire de <code>somme_versee - somme_due</code>.</li> </ul> <p>Ainsi, l\u2019instruction <code>rendu_monnaie(452, 500)</code> renvoie le tableau <code>[20, 20, 5, 2, 1]</code>.</p> <p>En effet, la somme \u00e0 rendre est de <code>48</code> euros soit <code>20 + 20 + 5 + 2 + 1</code>.</p> <p>Le code de la fonction <code>rendu_monnaie</code> est donn\u00e9 ci-dessous :</p> \ud83d\udc0d Script Python<pre><code>def rendu_monnaie(somme_due, somme_versee):\n    '''Renvoie la liste des pi\u00e8ces \u00e0 rendre pour rendre la monnaie\n    lorsqu'on doit rendre somme_versee - somme_due'''\n    rendu = ... \n    a_rendre = ... \n    i = len(pieces) - 1\n    while a_rendre &gt; ...: \n        while pieces[i] &gt; a_rendre:\n            i = i - 1\n        rendu.append(...) \n        a_rendre = ... \n    return rendu\n</code></pre> <p>Compl\u00e9ter ce code et le tester :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; rendu_monnaie(700, 700)\n[]\n&gt;&gt;&gt; rendu_monnaie(102, 500)\n[200, 100, 50, 20, 20, 5, 2, 1]\n</code></pre> \ud83d\udc0d Script Python<pre><code>pieces = [1, 2, 5, 10, 20, 50, 100, 200]\n\ndef rendu_monnaie(somme_due, somme_versee):\n    '''Renvoie la liste des pi\u00e8ces \u00e0 rendre pour rendre la monnaie\n    lorsqu'on doit rendre somme_versee - somme_due'''\n    rendu = [] \n    a_rendre = somme_versee - somme_due \n    i = len(pieces) - 1\n    while a_rendre &gt; 0: \n        while pieces[i] &gt; a_rendre:\n            i = i - 1\n        rendu.append(pieces[i]) \n        a_rendre = a_rendre - pieces[i] \n    return rendu\n</code></pre> Markdown<pre><code>On consid\u00e8re dans cet exercice un algorithme glouton pour le rendu de monnaie. Pour\nrendre une somme en monnaie, on utilise \u00e0 chaque fois la plus grosse pi\u00e8ce possible et ainsi\nde suite jusqu\u2019\u00e0 ce que la somme restante \u00e0 rendre soit nulle.\n\nLes pi\u00e8ces de monnaie utilis\u00e9es sont :\n\n`pieces = [1, 2, 5, 10, 20, 50, 100, 200]`\n\nOn souhaite \u00e9crire une fonction `rendu_monnaie` qui prend en param\u00e8tres\n\n- un entier `somme_due` repr\u00e9sentant la somme \u00e0 payer ;\n- un entier `somme_versee` repr\u00e9sentant la somme vers\u00e9e qui est sup\u00e9rieure ou \u00e9gale\n\u00e0 `somme_due` ;\n- et qui renvoie un tableau de type `list` contenant les pi\u00e8ces qui composent le rendu\nde la monnaie restante, c\u2019est-\u00e0-dire de `somme_versee - somme_due`.\n\n\n\nAinsi, l\u2019instruction `rendu_monnaie(452, 500)` renvoie le tableau `[20, 20, 5, 2, 1]`.\n\nEn effet, la somme \u00e0 rendre est de `48` euros soit `20 + 20 + 5 + 2 + 1`.\n\nLe code de la fonction `rendu_monnaie` est donn\u00e9 ci-dessous :\n\n```python linenums='1'\ndef rendu_monnaie(somme_due, somme_versee):\n    '''Renvoie la liste des pi\u00e8ces \u00e0 rendre pour rendre la monnaie\n    lorsqu'on doit rendre somme_versee - somme_due'''\n    rendu = ... \n    a_rendre = ... \n    i = len(pieces) - 1\n    while a_rendre &gt; ...: \n        while pieces[i] &gt; a_rendre:\n            i = i - 1\n        rendu.append(...) \n        a_rendre = ... \n    return rendu\n</code></pre> <p>Compl\u00e9ter ce code et le tester :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; rendu_monnaie(700, 700)\n[]\n&gt;&gt;&gt; rendu_monnaie(102, 500)\n[200, 100, 50, 20, 20, 5, 2, 1]\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-46","title":"\u25b6 Sujet 46","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-461","title":"Exercice 46.1","text":"<p>Exercice 46.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>\u00c9crire une fonction <code>recherche</code> qui prend en param\u00e8tres un tableau <code>tab</code> de nombres entiers tri\u00e9s par ordre croissant et un nombre entier <code>n</code>, et qui effectue une recherche dichotomique du nombre entier <code>n</code> dans le tableau non vide <code>tab</code>.</p> <p>Cette fonction doit renvoyer un indice correspondant au nombre cherch\u00e9 s\u2019il est dans le tableau, <code>None</code> sinon.</p> <p>Exemples : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; recherche([2, 3, 4, 5, 6], 5)\n3\n&gt;&gt;&gt; recherche([2, 3, 4, 6, 7], 5) # renvoie None\n</code></pre></p> \ud83d\udc0d Script Python<pre><code>def recherche(tab, n):\n    ind_debut = 0\n    ind_fin = len(tab) - 1\n    while ind_debut &lt;= ind_fin:\n        ind_milieu = (ind_debut + ind_fin) // 2\n        if tab[ind_milieu] == n:\n            return ind_milieu\n        elif tab[ind_milieu] &lt; n:\n            ind_debut = ind_milieu + 1\n        else:\n            ind_fin = ind_milieu - 1\n    return None\n</code></pre> \ud83d\udccb Texte<pre><code>\u00c9crire une fonction `recherche` qui prend en param\u00e8tres un tableau `tab` de nombres\nentiers tri\u00e9s par ordre croissant et un nombre entier `n`, et qui effectue une recherche\ndichotomique du nombre entier `n` dans le tableau non vide `tab`.\n\nCette fonction doit renvoyer un indice correspondant au nombre cherch\u00e9 s\u2019il est dans le\ntableau, `None` sinon.\n\nExemples :\n```python\n&gt;&gt;&gt; recherche([2, 3, 4, 5, 6], 5)\n3\n&gt;&gt;&gt; recherche([2, 3, 4, 6, 7], 5) # renvoie None\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-462","title":"Exercice 46.2","text":"<p>Exercice 46.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Le codage de C\u00e9sar transforme un message en changeant chaque lettre en la d\u00e9calant dans l\u2019alphabet. Par exemple, avec un d\u00e9calage de 3, le A se transforme en D, le B en E, ..., le X en A, le Y en B et le Z en C. Les autres caract\u00e8res (\u2018!\u2019,\u2019 ?\u2019 ...) ne sont pas cod\u00e9s.</p> <p>La fonction <code>position_alphabet</code> ci-dessous prend en param\u00e8tre un caract\u00e8re <code>lettre</code> et renvoie la position de <code>lettre</code> dans la cha\u00eene de caract\u00e8res <code>alphabet</code> s\u2019il s\u2019y trouve.</p> <p>La fonction <code>cesar</code> prend en param\u00e8tres une cha\u00eene de caract\u00e8res <code>message</code> et un nombre entier <code>decalage</code> et renvoie le nouveau message cod\u00e9 avec le codage de C\u00e9sar utilisant le d\u00e9calage <code>decalage</code>.</p> \ud83d\udc0d Script Python<pre><code>alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef position_alphabet(lettre):\n    '''Renvoie la position de la lettre dans l'alphabet'''\n    return ord(lettre) - ord('A')\n\ndef cesar(message, decalage):\n    '''Renvoie le message cod\u00e9 par la m\u00e9thode de C\u00e9sar\n    pour le decalage donn\u00e9'''\n    resultat = ''\n    for ... in message: \n        if 'A' &lt;= c and c &lt;= 'Z':\n            indice = (...) % 26 \n            resultat = resultat + alphabet[indice]\n        else:\n            resultat = ... \n    return resultat\n</code></pre> <p>Compl\u00e9ter la fonction <code>cesar</code>.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; cesar('BONJOUR A TOUS. VIVE LA MATIERE NSI !', 4)\n'FSRNSYV E XSYW. ZMZI PE QEXMIVI RWM !'\n&gt;&gt;&gt; cesar('GTSOTZW F YTZX. ANAJ QF RFYNJWJ SXN !', -5)\n'BONJOUR A TOUS. VIVE LA MATIERE NSI !'\n</code></pre> \ud83d\udc0d Script Python<pre><code>alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef position_alphabet(lettre):\n    '''Renvoie la position de la lettre dans l'alphabet'''\n    return ord(lettre) - ord('A')\n\ndef cesar(message, decalage):\n    '''Renvoie le message cod\u00e9 par la m\u00e9thode de C\u00e9sar\n    pour le decalage donn\u00e9'''\n    resultat = ''\n    for c in message: \n        if 'A' &lt;= c and c &lt;= 'Z':\n            indice = (position_alphabet(c) + decalage) % 26 \n            resultat = resultat + alphabet[indice]\n        else:\n            resultat = resultat + c \n    return resultat\n</code></pre> Markdown<pre><code>Le codage de C\u00e9sar transforme un message en changeant chaque lettre en la d\u00e9calant\ndans l\u2019alphabet.\nPar exemple, avec un d\u00e9calage de 3, le A se transforme en D, le B en E, ..., le X en A,\nle Y en B et le Z en C. Les autres caract\u00e8res (\u2018!\u2019,\u2019 ?\u2019 ...) ne sont pas cod\u00e9s.\n\nLa fonction `position_alphabet` ci-dessous prend en param\u00e8tre un caract\u00e8re `lettre`\net renvoie la position de `lettre` dans la cha\u00eene de caract\u00e8res `alphabet` s\u2019il s\u2019y trouve.\n\nLa fonction `cesar` prend en param\u00e8tres une cha\u00eene de caract\u00e8res `message` et un nombre\nentier `decalage` et renvoie le nouveau message cod\u00e9 avec le codage de C\u00e9sar utilisant\nle d\u00e9calage `decalage`.\n\n```python linenums='1'\nalphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef position_alphabet(lettre):\n    '''Renvoie la position de la lettre dans l'alphabet'''\n    return ord(lettre) - ord('A')\n\ndef cesar(message, decalage):\n    '''Renvoie le message cod\u00e9 par la m\u00e9thode de C\u00e9sar\n    pour le decalage donn\u00e9'''\n    resultat = ''\n    for ... in message: \n        if 'A' &lt;= c and c &lt;= 'Z':\n            indice = (...) % 26 \n            resultat = resultat + alphabet[indice]\n        else:\n            resultat = ... \n    return resultat\n</code></pre> <p>Compl\u00e9ter la fonction <code>cesar</code>.</p> <p>Exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; cesar('BONJOUR A TOUS. VIVE LA MATIERE NSI !', 4)\n'FSRNSYV E XSYW. ZMZI PE QEXMIVI RWM !'\n&gt;&gt;&gt; cesar('GTSOTZW F YTZX. ANAJ QF RFYNJWJ SXN !', -5)\n'BONJOUR A TOUS. VIVE LA MATIERE NSI !'\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-47","title":"\u25b6 Sujet 47","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-471","title":"Exercice 47.1","text":"<p>Exercice 47.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>Sur le r\u00e9seau social TipTop, on s\u2019int\u00e9resse au nombre de \u00ab like \u00bb des abonn\u00e9s. Les donn\u00e9es sont stock\u00e9es dans des dictionnaires o\u00f9 les cl\u00e9s sont les pseudos et les valeurs correspondantes sont les nombres de \u00ab like \u00bb comme ci-dessous :</p> <p><code>{'Bob': 102, 'Ada': 201, 'Alice': 103, 'Tim': 50}</code></p> <p>\u00c9crire une fonction <code>max_dico</code> qui :</p> <ul> <li>Prend en param\u00e8tre un dictionnaire <code>dico</code> non vide dont les cl\u00e9s sont des cha\u00eenes de caract\u00e8res et les valeurs associ\u00e9es sont des entiers ;</li> <li>Renvoie un tuple dont :<ul> <li>La premi\u00e8re valeur est la cl\u00e9 du dictionnaire associ\u00e9e \u00e0 la valeur maximale ;</li> <li>La seconde valeur est la premi\u00e8re valeur maximale pr\u00e9sente dans le dictionnaire.</li> </ul> </li> </ul> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; max_dico({'Bob': 102, 'Ada': 201, 'Alice': 103, 'Tim': 50})\n('Ada', 201)\n&gt;&gt;&gt; max_dico({'Alan': 222, 'Ada': 201, 'Eve': 220, 'Tim': 50})\n('Alan', 222)\n</code></pre> \ud83d\udc0d Script Python<pre><code>def max_dico(dico):\n    cle_max = ''\n    val_max = 0\n    for cle in dico:\n        if dico[cle] &gt; val_max:\n            val_max = dico[cle]\n            cle_max = cle\n    return (cle_max, val_max)\n</code></pre> \ud83d\udccb Texte<pre><code>Sur le r\u00e9seau social TipTop, on s\u2019int\u00e9resse au nombre de \u00ab like \u00bb des abonn\u00e9s.\nLes donn\u00e9es sont stock\u00e9es dans des dictionnaires o\u00f9 les cl\u00e9s sont les pseudos et les valeurs\ncorrespondantes sont les nombres de \u00ab like \u00bb comme ci-dessous :\n\n`{'Bob': 102, 'Ada': 201, 'Alice': 103, 'Tim': 50}`\n\n\u00c9crire une fonction `max_dico` qui :\n\n- Prend en param\u00e8tre un dictionnaire `dico` non vide dont les cl\u00e9s sont des cha\u00eenes de\ncaract\u00e8res et les valeurs associ\u00e9es sont des entiers ;\n- Renvoie un tuple dont :\n    - La premi\u00e8re valeur est la cl\u00e9 du dictionnaire associ\u00e9e \u00e0 la valeur maximale ;\n    - La seconde valeur est la premi\u00e8re valeur maximale pr\u00e9sente dans le\ndictionnaire.\n\nExemples :\n\n```python\n&gt;&gt;&gt; max_dico({'Bob': 102, 'Ada': 201, 'Alice': 103, 'Tim': 50})\n('Ada', 201)\n&gt;&gt;&gt; max_dico({'Alan': 222, 'Ada': 201, 'Eve': 220, 'Tim': 50})\n('Alan', 222)\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-472","title":"Exercice 47.2","text":"<p>Exercice 47.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>Nous avons l\u2019habitude de noter les expressions arithm\u00e9tiques avec des parenth\u00e8ses comme par exemple : (2 + 3) \u00d7 5. </p> <p>Il existe une autre notation utilis\u00e9e par certaines calculatrices, appel\u00e9e notation postfixe, qui n\u2019utilise pas de parenth\u00e8ses. L\u2019expression arithm\u00e9tique pr\u00e9c\u00e9dente est alors obtenue en saisissant successivement 2, puis 3, puis l\u2019op\u00e9rateur +, puis 5, et enfin l\u2019op\u00e9rateur \u00d7. On mod\u00e9lise cette saisie par le tableau <code>[2, 3, '+', 5, '*']</code>. </p> <p>Autre exemple, la notation postfixe de 3 \u00d7 2 + 5 est mod\u00e9lis\u00e9e par le tableau : </p> <p><code>[3, 2, '*', 5, '+']</code>. </p> <p>D\u2019une mani\u00e8re plus g\u00e9n\u00e9rale, la valeur associ\u00e9e \u00e0 une expression arithm\u00e9tique en notation postfixe est d\u00e9termin\u00e9e \u00e0 l\u2019aide d\u2019une pile en parcourant l\u2019expression arithm\u00e9tique de gauche \u00e0 droite de la fa\u00e7on suivante :</p> <ul> <li>Si l\u2019\u00e9l\u00e9ment parcouru est un nombre, on le place au sommet de la pile ;</li> <li>Si l\u2019\u00e9l\u00e9ment parcouru est un op\u00e9rateur, on r\u00e9cup\u00e8re les deux \u00e9l\u00e9ments situ\u00e9s au sommet de la pile et on leur applique l\u2019op\u00e9rateur. On place alors le r\u00e9sultat au sommet de la pile.</li> <li>\u00c0 la fin du parcours, il reste alors un seul \u00e9l\u00e9ment dans la pile qui est le r\u00e9sultat de l\u2019expression arithm\u00e9tique.</li> </ul> <p>Dans le cadre de cet exercice, on se limitera aux op\u00e9rations \u00d7 et +.</p> <p>Pour cet exercice, on dispose d\u2019une classe <code>Pile</code> qui impl\u00e9mente les m\u00e9thodes de base sur la structure de pile.</p> <p>Compl\u00e9ter le script de la fonction <code>eval_expression</code> qui re\u00e7oit en param\u00e8tre une liste python repr\u00e9sentant la notation postfixe d\u2019une expression arithm\u00e9tique et qui renvoie sa valeur associ\u00e9e.</p> \ud83d\udc0d Script Python<pre><code>class Pile:\n    \"\"\"Classe d\u00e9finissant une structure de pile.\"\"\"\n    def __init__(self):\n        self.contenu = []\n\n    def est_vide(self):\n        \"\"\"Renvoie le bool\u00e9en True si la pile est vide, False sinon.\"\"\"\n        return self.contenu == []\n\n    def empiler(self, v):\n        \"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\"\n        self.contenu.append(v)\n\n    def depiler(self):\n        \"\"\"\n        Retire et renvoie l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile,\n        si la pile n\u2019est pas vide. Produit une erreur sinon.\n        \"\"\"\n        assert not self.est_vide()\n        return self.contenu.pop()\n\n\ndef eval_expression(tab):\n    p = Pile()\n    for ... in tab:\n        if element != '+' ... element != '*':\n            p.empiler(...)\n        else:\n            if element == ...:\n                resultat = ... + ...\n            else:\n                resultat = ...\n            p.empiler(...)\n    return ...\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; eval_expression([2, 3, '+', 5, '*'])\n25\n&gt;&gt;&gt; eval_expression([1, 2, '+', 3, '*'])\n9\n&gt;&gt;&gt; eval_expression([1, 2, 3, '+', '*'])\n5\n</code></pre> \ud83d\udc0d Script Python<pre><code>class Pile:\n    \"\"\"Classe d\u00e9finissant une structure de pile.\"\"\"\n    def __init__(self):\n        self.contenu = []\n\n    def est_vide(self):\n        \"\"\"Renvoie le bool\u00e9en True si la pile est vide, False sinon.\"\"\"\n        return self.contenu == []\n\n    def empiler(self, v):\n        \"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\"\n        self.contenu.append(v)\n\n    def depiler(self):\n        \"\"\"\n        Retire et renvoie l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile,\n        si la pile n\u2019est pas vide.\n        \"\"\"\n        if not self.est_vide():\n            return self.contenu.pop()\n\n\ndef eval_expression(tab):\n    p = Pile()\n    for element in tab:\n        if element != '+' and element != '*':\n            p.empiler(element)\n        else:\n            if element == '+':\n                resultat = p.depiler() + p.depiler()\n            else:\n                resultat = p.depiler() * p.depiler()\n            p.empiler(resultat)\n    return p.depiler()\n</code></pre> Markdown<pre><code>Nous avons l\u2019habitude de noter les expressions arithm\u00e9tiques avec des parenth\u00e8ses comme\npar exemple : (2 + 3) \u00d7 5. \n\nIl existe une autre notation utilis\u00e9e par certaines calculatrices, appel\u00e9e notation postfixe, qui n\u2019utilise pas de parenth\u00e8ses. L\u2019expression arithm\u00e9tique pr\u00e9c\u00e9dente est alors obtenue en\nsaisissant successivement 2, puis 3, puis l\u2019op\u00e9rateur +, puis 5, et enfin l\u2019op\u00e9rateur \u00d7. On\nmod\u00e9lise cette saisie par le tableau `[2, 3, '+', 5, '*']`. \n\nAutre exemple, la notation postfixe de 3 \u00d7 2 + 5 est mod\u00e9lis\u00e9e par le tableau : \n\n`[3, 2, '*', 5, '+']`. \n\n\nD\u2019une mani\u00e8re plus g\u00e9n\u00e9rale, la valeur associ\u00e9e \u00e0 une expression arithm\u00e9tique en notation\npostfixe est d\u00e9termin\u00e9e \u00e0 l\u2019aide d\u2019une pile en parcourant l\u2019expression arithm\u00e9tique de gauche\n\u00e0 droite de la fa\u00e7on suivante :\n\n- Si l\u2019\u00e9l\u00e9ment parcouru est un nombre, on le place au sommet de la pile ;\n- Si l\u2019\u00e9l\u00e9ment parcouru est un op\u00e9rateur, on r\u00e9cup\u00e8re les deux \u00e9l\u00e9ments situ\u00e9s au\nsommet de la pile et on leur applique l\u2019op\u00e9rateur. On place alors le r\u00e9sultat au sommet\nde la pile.\n- \u00c0 la fin du parcours, il reste alors un seul \u00e9l\u00e9ment dans la pile qui est le r\u00e9sultat de\nl\u2019expression arithm\u00e9tique.\n\n\nDans le cadre de cet exercice, on se limitera aux op\u00e9rations \u00d7 et +.\n\n\nPour cet exercice, on dispose d\u2019une classe `Pile` qui impl\u00e9mente les m\u00e9thodes de base sur la\nstructure de pile.\n\nCompl\u00e9ter le script de la fonction `eval_expression` qui re\u00e7oit en param\u00e8tre une liste python\nrepr\u00e9sentant la notation postfixe d\u2019une expression arithm\u00e9tique et qui renvoie sa valeur\nassoci\u00e9e.\n\n```python linenums='1'\nclass Pile:\n    \"\"\"Classe d\u00e9finissant une structure de pile.\"\"\"\n    def __init__(self):\n        self.contenu = []\n\n    def est_vide(self):\n        \"\"\"Renvoie le bool\u00e9en True si la pile est vide, False sinon.\"\"\"\n        return self.contenu == []\n\n    def empiler(self, v):\n        \"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\"\n        self.contenu.append(v)\n\n    def depiler(self):\n        \"\"\"\n        Retire et renvoie l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile,\n        si la pile n\u2019est pas vide. Produit une erreur sinon.\n        \"\"\"\n        assert not self.est_vide()\n        return self.contenu.pop()\n\n\ndef eval_expression(tab):\n    p = Pile()\n    for ... in tab:\n        if element != '+' ... element != '*':\n            p.empiler(...)\n        else:\n            if element == ...:\n                resultat = ... + ...\n            else:\n                resultat = ...\n            p.empiler(...)\n    return ...\n</code></pre> <p>Exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; eval_expression([2, 3, '+', 5, '*'])\n25\n&gt;&gt;&gt; eval_expression([1, 2, '+', 3, '*'])\n9\n&gt;&gt;&gt; eval_expression([1, 2, 3, '+', '*'])\n5\n</code></pre> ```             </p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#sujet-48","title":"\u25b6 Sujet 48","text":"<p>Version originale du sujet en pdf.</p>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-481","title":"Exercice 48.1","text":"<p>Exercice 48.1</p> \u00c9nonc\u00e9CorrectionSource Markdown <p>On consid\u00e8re dans cet exercice un graphe orient\u00e9 repr\u00e9sent\u00e9 sous forme de listes d\u2019adjacence.</p> <p>On suppose que les sommets sont num\u00e9rot\u00e9s de <code>0</code> \u00e0 <code>n-1</code>.</p> <p>Par exemple, le graphe suivant :</p> <p></p> <p>est repr\u00e9sent\u00e9 par la liste d\u2019adjacence suivante :</p> \ud83d\udc0d Script Python<pre><code>adj = [[1, 2], [2], [0], [0]]\n</code></pre> <p>\u00c9crire une fonction <code>voisins_entrants(adj, x)</code> qui prend en param\u00e8tre le graphe donn\u00e9 sous forme de liste d\u2019adjacence et qui renvoie une liste contenant les voisins entrants du sommet <code>x</code>, c\u2019est-\u00e0-dire les sommets <code>y</code> tels qu\u2019il existe une ar\u00eate de <code>y</code> vers <code>x</code>.</p> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; voisins_entrants([[1, 2], [2], [0], [0]], 0)\n[2, 3]\n&gt;&gt;&gt; voisins_entrants([[1, 2], [2], [0], [0]], 1)\n[0]\n</code></pre> \ud83d\udc0d Script Python<pre><code>def voisins_entrants(adj, x):\n    vois = []\n    for i in range(len(adj)):\n        if x in adj[i]:\n            vois.append(i)\n    return vois\n</code></pre> \ud83d\udccb Texte<pre><code>On consid\u00e8re dans cet exercice un graphe orient\u00e9 repr\u00e9sent\u00e9 sous forme de listes d\u2019adjacence.\n\nOn suppose que les sommets sont num\u00e9rot\u00e9s de `0` \u00e0 `n-1`.\n\nPar exemple, le graphe suivant :\n\n![image](data2024/graph2.png){: .center}\n\nest repr\u00e9sent\u00e9 par la liste d\u2019adjacence suivante :\n\n```python\nadj = [[1, 2], [2], [0], [0]]\n```\n\n\u00c9crire une fonction `voisins_entrants(adj, x)` qui prend en param\u00e8tre le graphe\ndonn\u00e9 sous forme de liste d\u2019adjacence et qui renvoie une liste contenant les voisins entrants\ndu sommet `x`, c\u2019est-\u00e0-dire les sommets `y` tels qu\u2019il existe une ar\u00eate de `y` vers `x`.\n\nExemples :\n\n```python\n&gt;&gt;&gt; voisins_entrants([[1, 2], [2], [0], [0]], 0)\n[2, 3]\n&gt;&gt;&gt; voisins_entrants([[1, 2], [2], [0], [0]], 1)\n[0]\n```\n</code></pre>"},{"location":"T6_6_Epreuve_pratique/BNS_2024/#exercice-482","title":"Exercice 48.2","text":"<p>Exercice 48.2</p> \u00c9nonc\u00e9CorrectionSources Markdown <p>On consid\u00e8re dans cet exercice la suite de nombre suivante : 1, 11, 21, 1211, 111221, ...</p> <p>Cette suite est construite ainsi : pour passer d\u2019une valeur \u00e0 la suivante, on la lit et on l\u2019\u00e9crit sous la forme d\u2019un nombre. Ainsi, pour 1211 :</p> <ul> <li>on lit un 1, un 2, deux 1 ;</li> <li>on \u00e9crit donc en nombre 1 1, 1 2, 2 1 ;</li> <li>puis on concat\u00e8ne 111221.</li> </ul> <p>Compl\u00e9ter la fonction n`ombre_suivant qui prend en entr\u00e9e un nombre sous forme de chaine de caract\u00e8re et qui renvoie le nombre suivant par ce proc\u00e9d\u00e9, encore sous forme de cha\u00eene de caract\u00e8re.</p> \ud83d\udc0d Script Python<pre><code>def nombre_suivant(s):\n    '''Renvoie le nombre suivant de celui represent\u00e9 par s\n    en appliquant le proc\u00e9d\u00e9 de lecture.'''\n    resultat = ''\n    chiffre = s[0]\n    compte = 1\n    for i in range(...): \n        if s[i] == chiffre:\n            compte = ... \n        else:\n            resultat += ... + ... \n            chiffre = ... \n            ...\n    lecture_... = ... + ... \n    resultat += lecture_chiffre\n    return resultat\n</code></pre> <p>Exemples :</p> \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; nombre_suivant('1211')\n'111221'\n&gt;&gt;&gt; nombre_suivant('311')\n'1321'\n</code></pre> \ud83d\udc0d Script Python<pre><code>def nombre_suivant(s):\n    '''Renvoie le nombre suivant de celui represent\u00e9 par s\n    en appliquant le proc\u00e9d\u00e9 de lecture.'''\n    resultat = ''\n    chiffre = s[0]\n    compte = 1\n    for i in range(1,len(s)): \n        if s[i] == chiffre:\n            compte = compte + 1 \n        else:\n            resultat += str(compte) + chiffre \n            chiffre = s[i] \n            compte = 1\n    lecture_chiffre = str(compte) + chiffre \n    resultat += lecture_chiffre\n    return resultat\n</code></pre> Markdown<pre><code>On consid\u00e8re dans cet exercice la suite de nombre suivante : 1, 11, 21, 1211, 111221, ...\n\nCette suite est construite ainsi : pour passer d\u2019une valeur \u00e0 la suivante, on la lit et on l\u2019\u00e9crit sous la forme d\u2019un nombre. Ainsi, pour 1211 :\n\n- on lit *un 1, un 2, deux 1* ;\n- on \u00e9crit donc en nombre *1 1, 1 2, 2 1* ;\n- puis on concat\u00e8ne *111221*.\n\nCompl\u00e9ter la fonction n`ombre_suivant qui prend en entr\u00e9e un nombre sous forme de\nchaine de caract\u00e8re et qui renvoie le nombre suivant par ce proc\u00e9d\u00e9, encore sous forme de\ncha\u00eene de caract\u00e8re.\n\n```python linenums='1'\ndef nombre_suivant(s):\n    '''Renvoie le nombre suivant de celui represent\u00e9 par s\n    en appliquant le proc\u00e9d\u00e9 de lecture.'''\n    resultat = ''\n    chiffre = s[0]\n    compte = 1\n    for i in range(...): \n        if s[i] == chiffre:\n            compte = ... \n        else:\n            resultat += ... + ... \n            chiffre = ... \n            ...\n    lecture_... = ... + ... \n    resultat += lecture_chiffre\n    return resultat\n</code></pre> <p>Exemples :</p> <p>\ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; nombre_suivant('1211')\n'111221'\n&gt;&gt;&gt; nombre_suivant('311')\n'1321'\n</code></pre> ```             </p>"},{"location":"T6_Annales/epreuve_bac/","title":"\u00c9preuves du baccalaur\u00e9at","text":""},{"location":"T6_Annales/epreuve_bac/#modalites","title":"Modalit\u00e9s","text":"<p>L'\u00e9preuve se partage en :</p> <ul> <li>une \u00c9preuve Pratique (sur 20 points, sur machine, dur\u00e9e 1h)</li> <li>une \u00c9preuve \u00c9crite (sur 20 points, \u00e0 l'\u00e9crit, dur\u00e9e 3h30)</li> <li>La note de l'\u00e9preuve de NSI est obtenu avec 1/4 de la note \u00c9preuve Pratique  et 3/4 de la note \u00c9preuve \u00c9crite</li> </ul>"},{"location":"T6_Annales/epreuve_bac/#epreuve-pratique","title":"\u00c9preuve Pratique","text":"<p>Textes r\u00e8glementaires</p> <ul> <li>https://www.education.gouv.fr/bo/20/Special2/MENE2001797N.htm?cid_bo=149244 -https://www.education.gouv.fr/bo/2023/Hebdo36/MENE2317750N</li> </ul> <ul> <li>Dur\u00e9e : 1 heures</li> <li>L'\u00e9preuve pratique donne lieu \u00e0 une note sur 20 points, qui p\u00e8sera pour 25% de la note finale</li> </ul> <p>La partie pratique consiste en la r\u00e9solution de deux exercices sur ordinateur, chacun \u00e9tant not\u00e9 sur 10 points.</p> <p>Le candidat est \u00e9valu\u00e9 sur la base d\u2019un dialogue avec un professeur-examinateur. Un examinateur \u00e9value au maximum quatre \u00e9l\u00e8ves. L\u2019examinateur ne peut pas \u00e9valuer un \u00e9l\u00e8ve qu\u2019il a eu en classe durant l\u2019ann\u00e9e en cours.</p> <p>Premier exercice</p> <p>Le premier exercice consiste \u00e0 programmer un algorithme figurant explicitement au programme, ne pr\u00e9sentant pas de difficult\u00e9 particuli\u00e8re, dont on fournit une sp\u00e9cification. Il s\u2019agit donc de restituer un algorithme rencontr\u00e9 et travaill\u00e9 \u00e0 plusieurs reprises en cours de formation. Le sujet peut proposer un jeu de test avec les r\u00e9ponses attendues pour permettre au candidat de v\u00e9rifier son travail.</p> <p>Deuxi\u00e8me exercice</p> <p>Pour le second exercice, un programme est fourni au candidat. Cet exercice ne demande pas l\u2019\u00e9criture compl\u00e8te d\u2019un programme, mais permet de valider des comp\u00e9tences de programmation suivant des modalit\u00e9s vari\u00e9es : le candidat doit, par exemple, compl\u00e9ter un programme \u00ab \u00e0 trous \u00bb afin de r\u00e9pondre \u00e0 une sp\u00e9cification donn\u00e9e, ou encore compl\u00e9ter un programme pour le documenter, ou encore compl\u00e9ter un programme en ajoutant des assertions, etc.</p>"},{"location":"T6_Annales/epreuve_bac/#banque-dexercices","title":"Banque d'exercices","text":"<p>Textes r\u00e8glementaires</p> <ul> <li>https://eduscol.education.fr/2661/banque-des-epreuves-pratiques-de-specialite-nsi</li> </ul>"},{"location":"T6_Annales/epreuve_bac/#epreuve-ecrite","title":"\u00c9preuve \u00c9crite","text":"<p>\u00c0 compter de la session 2024, l'\u00e9preuve consiste en trois exercices qui doivent tous \u00eatre trait\u00e9s. L'\u00e9preuve est not\u00e9e sur 20 points comptant pour 75% de la note finale.</p> <p>Textes r\u00e8glementaires</p> <ul> <li>Programme d'examen des \u00e9preuves terminales des enseignements de sp\u00e9cialit\u00e9 de la voie g\u00e9n\u00e9rale - \u00e0 compter de la session 2023 -https://www.education.gouv.fr/bo/2023/Hebdo36/MENE2317750N</li> </ul> <p>La liste de tous les sujets d'\u00e9preuves \u00e9crites d\u00e9j\u00e0 pos\u00e9s peut \u00eatre consult\u00e9e ici</p>"},{"location":"T6_Annales/grandoral/","title":"Grand Oral","text":"<ul> <li>Texte r\u00e9glementaire :  Lien vers Eduscol</li> <li>Complement 2024 : Lien r\u00e9glementaire</li> </ul> <p>2024</p> <p>La dur\u00e9e du Grand oral est maintenue \u00e0 20 minutes. La troisi\u00e8me partie de l\u2019\u00e9preuve, d\u2019une dur\u00e9e de 5 minutes, consistant en un \u00e9change sur le projet d\u2019orientation du candidat, est supprim\u00e9e. Les deux parties restantes de l\u2019\u00e9preuve seront d\u00e9sormais d\u2019une dur\u00e9e \u00e9gale de 10 minutes. Il sera donn\u00e9 au candidat la possibilit\u00e9 d\u2019utiliser un tableau durant le second temps de l\u2019\u00e9preuve.</p> <p></p> <p></p>"},{"location":"T6_Annales/grandoral/#quelques-pistes-de-travail","title":"Quelques pistes de travail","text":"<ol> <li>L\u2019informatique quantique : une nouvelle r\u00e9volution technologique</li> <li>P = NP</li> <li>Informatique dans le cloud </li> <li>Peut-on casser tous les codes ?</li> <li>Histoires de bug</li> <li>Le green-IT</li> <li>La sonde pers\u00e9v\u00e9rance et le binaire</li> <li>Comment l\u2019alg\u00e8bre bool\u00e9enne a-t-elle permis le d\u00e9veloppement de l\u2019informatique ?</li> <li>Plusieurs questions autour de la cryptographie : un sujet ax\u00e9 sur le HTTPS, un sur l\u2019authentification, un sur quelques grands principes de la crypto.</li> <li>R\u00e9cursivit\u00e9 et r\u00e9currence : similarit\u00e9s et diff\u00e9rences.</li> <li>Bug de rover martien et syst\u00e8me d\u2019exploitation multit\u00e2che</li> <li>Encoder toutes les \u00e9critures du monde avec des 1 et des 0</li> <li>Comment Math\u00e9matiques et Informatiques imitent-elles la nature ? (sujet Math-NSI sur les fractales)</li> <li>Comment s\u2019adapter \u00e0 la cyberguerre ?</li> <li>Comment casser le chiffrement de Vigen\u00e8re (Maths / NSI, l\u2019\u00e9l\u00e8ve en question y parle de chiffrement \u00e0 cl\u00e9 puis pour la partie maths, introduit la notion d\u2019indice de co\u00efncidence d\u2019un texte et l\u2019utilise pour expliquer comment trouver la longueur de la cl\u00e9 dans un chiffrement de Vigen\u00e8re)</li> <li>Comment les cryptomonnaies sont-elles s\u00e9curis\u00e9es ?</li> <li>Comment l\u2019art de couper en deux permet-il de r\u00e9soudre des probl\u00e8mes en math\u00e9matiques et informatique (Maths/NSI, sujet autour de la dichotomie, parle de la recherche dichotomique, des algorithmes de dichotomie pour r\u00e9soudre des \u00e9quations en maths, voire des arbres binaires de recherche \u2026)</li> <li>Les tours de Hano\u00ef , entre r\u00e9currence et r\u00e9cursivit\u00e9 (Maths/NSI)</li> <li>Comment les caract\u00e8res de nos claviers sont-ils encod\u00e9s ?</li> <li>Deep Blue, un algorithme imbattable ? (parle d\u2019IA et de bases de donn\u00e9es)</li> <li>Que se cache-t-il derri\u00e8re une page web ?</li> <li>La suite de Fibonacci, quels algorithmes pour calculer ses termes ? (Maths/NSI)</li> <li>Comment les donn\u00e9es peuvent elle aider les entreprises \u00e0 se d\u00e9velopper ?</li> <li>Comment les syst\u00e8mes d\u2019exploitation permettent de rendre ais\u00e9e l\u2019utilisation de notre ordinateur ?</li> <li>Comment l\u2019informatique permet-elle de s\u00e9curiser les transactions des cryptomonaies ?</li> <li>Qu\u2019est-ce qui fait qu\u2019une voiture est autonome ?</li> <li>Comment les robots militaires sont-ils contr\u00f4l\u00e9s ?</li> <li>Quels sont les impacts de l\u2019obsolescence programm\u00e9e dans la soci\u00e9t\u00e9 ?</li> <li>Comment le machine learning a-t-il r\u00e9volutionn\u00e9 le domaine du m\u00e9dical</li> <li>En quoi les IA et les robots ont-ils permit une hausse de production dans les entreprises ?</li> <li>Comment l\u2019informatique permet d\u2019am\u00e9liorer l\u2019aide humanitaire ?</li> <li>En quoi les programmes \u00e9crits en langage en python permettent-ils d\u2019effectuer des calculs scientifiques complexes ?</li> <li>En quoi les bases de donn\u00e9es permettent la recherche d\u2019information ?</li> <li>En quoi la cryptographie peut-elle optimiser la s\u00e9curisation des informations confidentielles ?</li> <li>Par quelles mesures la technologie Blockchain va t-elle remplacer les transactions classiques</li> <li>En quoi la miniaturisation a permis l\u2019\u00e9volution des ordinateurs ?</li> <li>Quels sont les impacts de l\u2019avanc\u00e9e des syst\u00e8mes informatiques sur les emplois ?</li> <li>En quoi les bases de donn\u00e9es ont permis une \u00e9volution de l\u2019organisation du travail ?</li> <li>En quoi les nouvelles technologies ont impact\u00e9s l\u2019engagement politique ?</li> <li>De quelle mani\u00e8re sont crypt\u00e9es les donn\u00e9es informatiques ?</li> <li>Quel est le role de l\u2019informatique dans la s\u00e9curit\u00e9 int\u00e9rieure ?</li> <li>En quoi les bases de donn\u00e9es sont-elles importantes dans la prise de d\u00e9cision ?</li> <li>Comment am\u00e9liorer ses performances sportive gr\u00e2ce \u00e0 l\u2019informatique ?</li> <li>La 5G: quels sont ses avantages et ses inconv\u00e9nients ?</li> <li>Comment fonctionne un logiciel de mod\u00e9lisation tridimentionnelle ?</li> <li>Quel impact les IA ont elles eu dans le monde des \u00e9checs ?</li> <li>Quels sont les impacts et la dangerosit\u00e9 des bugs dans notre soci\u00e9t\u00e9 ?</li> <li>Comment un ordinateur peut-il apprendre de ses erreurs et pourquoi ?</li> <li>En quoi la notion de r\u00e9currence intervient-elle dans l\u2019\u00e9laboration et le fonctionnement d\u2019un programme r\u00e9cursif</li> <li>Quelle est l\u2019importance des graphes de nos jours ?</li> <li>En quoi le raisonnement par r\u00e9currence est-il utile en math\u00e9matiques et informatiques ?</li> <li>A quoi servent les bases de donn\u00e9es ?</li> <li>Comment les bases de donn\u00e9es ont-elles r\u00e9volutionn\u00e9 notre quotidien ?</li> <li>Pourquoi chiffrer les communications ?</li> <li>Comment le cryptage nous permet-il d\u2019utiliser les outils informatiques de mani\u00e8re s\u00fbre ?</li> <li>Quelles sont les diff\u00e9rentes \u00e9tapes pour parvenir \u00e0 un site web complet ?</li> <li>Quels sont les impacts et la dangerosit\u00e9 des bugs dans notre soci\u00e9t\u00e9</li> <li>Comment les transactions des cryptomonnaies sont-elles s\u00e9curis\u00e9es ?</li> <li>Comment calculer le co\u00fbt d\u2019ex\u00e9cution en temps d\u2019un algorithme ?</li> <li>Quels sont les les enjeux du cyber espace et quel est le r\u00f4le de la cryptologie dans cette nouvelle plateforme ?</li> <li>Pourquoi utilise ton les nombres premiers dans l\u2019algorithme RSA ?</li> <li>Une IA est elle intelligente ?</li> <li>Comment une IA de type LLM construit elle une r\u00e9ponse ? (+math)</li> <li>Peut on se fier au r\u00e9sultat d'une IA ?</li> <li>Piloter une IA : de nouvelles comp\u00e9tences ?</li> <li>Peut on identifier/caract\u00e9riser la production d'une IA ?</li> <li>Les IA : quels enjeux ? (science, geopolitique, \u00e9conomique)</li> </ol>"},{"location":"T6_Annales/liste_sujets/","title":"Annales des \u00c9preuves \u00c9crites","text":"<p>Corrig\u00e9s</p> <p>Vous pouvez retrouver les corrig\u00e9s des \u00e9preuves pratiques et \u00e9crites sur le site de Fabrice Nativel ici</p>"},{"location":"T6_Annales/liste_sujets/#2024","title":"2024","text":"<ul> <li>Sujet 0 - version A</li> <li>Sujet 0 - version B</li> <li>El\u00e9ments de correction sujets 2024 - ici</li> </ul>"},{"location":"T6_Annales/liste_sujets/#2023","title":"2023","text":"<ul> <li>Sujet 0 - version A</li> <li>Sujet 0 - version B</li> <li>Centres \u00c9trangers J2</li> <li>Centres \u00c9trangers J1</li> <li>Polyn\u00e9sie</li> </ul>"},{"location":"T6_Annales/liste_sujets/#2022","title":"2022","text":"<ul> <li>Nouvelle-Cal\u00e9donie J1</li> <li>Nouvelle-Cal\u00e9donie J2</li> <li>Am\u00e9rique du Nord J1</li> <li>Am\u00e9rique du Nord J2</li> <li>Am\u00e9rique du Sud J1</li> <li>Am\u00e9rique du Sud J2</li> <li>Asie J1</li> <li>Asie J2</li> <li>Centres \u00c9trangers J2</li> <li>Centres \u00c9trangers J1</li> <li>La R\u00e9union J2</li> <li>La R\u00e9union J1</li> <li>M\u00e9tropole J2</li> <li>M\u00e9tropole J1</li> <li>M\u00e9tropole Septembre</li> <li>Polyn\u00e9sie </li> </ul>"},{"location":"T6_Annales/liste_sujets/#2021","title":"2021","text":"<ul> <li>Am\u00e9rique du Nord</li> <li>Centres \u00c9trangers 1</li> <li>Centres \u00c9trangers 2</li> <li>M\u00e9tropole 1</li> <li>M\u00e9tropole 2</li> <li>M\u00e9tropole Candidats Libres 1</li> <li>M\u00e9tropole Candidats Libres 2</li> <li>Polyn\u00e9sie</li> <li>Septembre</li> </ul>"},{"location":"T6_Annales/liste_sujets/#2020","title":"2020","text":"<ul> <li>sujet 0</li> </ul>"},{"location":"T6_Annales/revisionArbre/","title":"R\u00e9vision sur les arbres (Structure de donn\u00e9es arborescentes)","text":"<p>Cr\u00e9dits</p> <ul> <li>Sujet 2022, Asie, J2, Ex. 2 Mise en page et correction par S\u00e9bastien Hoarau</li> <li>Sujet 2022, Nouvelle-Cal\u00e9donie, J1, Ex. 4 Mise en page et correction par S\u00e9bastien Hoarau</li> </ul>"},{"location":"T6_Annales/revisionArbre/#nom-dauteur-dans-un-abr","title":"Nom d'auteur dans un ABR","text":"<p>D'apr\u00e8s 2022, Asie, J2, Ex. 2</p> <p>Un arbre binaire de recherche est un arbre binaire pour lequel chaque n\u0153ud poss\u00e8de une \u00e9tiquette dont la valeur est sup\u00e9rieure ou \u00e9gale \u00e0 toutes les \u00e9tiquettes des n\u0153uds de son fils gauche et strictement inf\u00e9rieure \u00e0 celles des n\u0153uds de son fils droit. On rappelle que :</p> <ul> <li>sa taille est son nombre de n\u0153uds ;</li> <li>sa hauteur est le nombre de niveaux qu'il contient.</li> </ul> <p>Un \u00e9diteur r\u00e9\u00e9dite des ouvrages. Il doit g\u00e9rer un nombre important d'auteurs de la litt\u00e9rature. Pour stocker le nom des auteurs, il utilise un programme informatique qui les enregistre dans un arbre binaire de recherche.</p> <ul> <li>L'arbre vide sera not\u00e9 <code>Null</code> pour les algorithmes de cet exercice.</li> <li>Si <code>A</code> est un n\u0153ud non vide, <code>valeur(A)</code> renvoie le nom de l'auteur ; <code>fils_gauche(A)</code> renvoie le fils gauche du n\u0153ud <code>A</code> et <code>fils_droit(A)</code> renvoie le fils droit du n\u0153ud <code>A</code>.</li> </ul> <p>L'ordre alphab\u00e9tique est utilis\u00e9 pour classer le nom des auteurs. Par exemple, on a : <code>APOLLINAIRE</code> &lt; <code>BAUDELAIRE</code></p> <p>Ainsi, pour tout n\u0153ud <code>A</code>, si <code>fils_gauche(A)</code> et <code>fils_droit(A)</code> ne sont pas <code>Null</code>, on a : <code>valeur(fils_gauche(A)) &lt; valeur(A) &lt; valeur(fils_droit(A))</code>.</p> Exemple d'arbre binaire de recherche <p>L'arbre binaire <code>A1</code> suivant est un arbre binaire de recherche : </p>     %%{init: {'themeVariables': {'fontFamily': 'monospace'}}}%%     flowchart TB         n0(ELUARD) --&gt; n1(ARAGON)         n1 --&gt; n3(APOLLINAIRE)         n1 --&gt; n4[Null]         n0 --&gt; n2(VOLTAIRE)  <p>1.</p> <p>1.a) Recopier et compl\u00e9ter l'arbre binaire de recherche pr\u00e9c\u00e9dent en ins\u00e9rant successivement dans cet ordre les noms suivants : DUMAS ; HUGO ; ZWEIG ; ZOLA</p> R\u00e9ponse     %%{init: {'themeVariables': {'fontFamily': 'monospace'}}}%%     flowchart TB         n0(ELUARD) --&gt; n1(ARAGON)         n1 --&gt; n3(APOLLINAIRE)         n1 --&gt; n4(DUMAS)         n0 --&gt; n2(VOLTAIRE)         n2 --&gt; n5(HUGO)         n2 --&gt; n6(ZWEIG)         n6 --&gt; n7(ZOLA)         n6 --&gt; n8[Null]  <p>1.b) Quelle est la taille de l'arbre obtenu ? Quelle est la hauteur de cet arbre ?</p> R\u00e9ponse <ul> <li>Taille : 8</li> <li>Hauteur : 4</li> </ul> <p>1.c) Plus g\u00e9n\u00e9ralement, si l'arbre est de hauteur \\(h\\), quel est le nombre maximal d'auteurs enregistr\u00e9s dans cet arbre en fonction de \\(h\\) ?</p> R\u00e9ponse <p>Si l'arbre est de hauteur \\(h\\) alors il y a \\(2^h - 1\\) auteurs au maximum.</p> <p>Preuve</p> <p>On montre d'abord que le nombre d'auteurs max au niveau \\(n\\) est \\(2^{n-1}\\). Imm\u00e9diat par r\u00e9currence : au niveau 1, il n'y a qu'un auteur. La propri\u00e9t\u00e9 est donc vraie. Si au niveau \\(n\\) on a \\(2^{n-1}\\) auteurs, alors, au niveau \\(n+1\\) on peut ajouter 2 auteurs pour chacun d'eux soit au total \\(2\\times 2^{n-1}\\).</p> <p>Un arbre complet de hauteur \\(h\\) a tous ses niveaux pleins et donc au total :</p> \\[1 + 2 + ... + 2^{h-1}\\] <p>Et cette somme vaut \\(2^h - 1\\)</p> <p>On d\u00e9finit ici l'\u00e9quilibre d'un arbre binaire : il s'agit d'un nombre entier positif ou n\u00e9gatif. Il vaut 0 si l'arbre est vide. Sinon il vaut la diff\u00e9rence des hauteurs des sous-arbres gauche et droit de l'arbre.</p> Exemple <p>Par exemple, si on consid\u00e8re l'arbre suivant que l'on nommera <code>A2</code> :</p> <p>    %%{init: {'themeVariables': {'fontFamily': 'monospace'}}}%%     flowchart TB         n0(KAFKA) --&gt; n1(DURAS)         n0 --&gt; n2(SAGAN)         n2 --&gt; n3[Null]         n2 --&gt; n4(SIMENON)  Son \u00e9quilibre vaut \\(-1\\) car la hauteur de son sous-arbre gauche vaut \\(1\\), la hauteur de son sous-arbre droit vaut \\(2\\) et \\(1 - 2 = -1\\).</p> <p>Un arbre est dit \u00e9quilibr\u00e9 si son \u00e9quilibre vaut \\(-1\\), \\(0\\) ou \\(1\\). L'arbre pr\u00e9c\u00e9dent est donc \u00e9quilibr\u00e9.</p> <p>2. Recopier et compl\u00e9ter l'arbre de ce dernier exemple avec les noms FLAUBERT, BALZAC, PROUST, SAND, WOOLF, COLETTE, CHRISTIE et AUDIARD quitte \u00e0 modifier l'ordre d'insertion de mani\u00e8re que cet arbre reste \u00e9quilibr\u00e9.</p> R\u00e9ponse     %%{init: {'themeVariables': {'fontFamily': 'monospace'}}}%%     flowchart TB     n147(KAFKA) --&gt; n148(DURAS)     n147(KAFKA) --&gt; n149(SAGAN)     n148(DURAS) --&gt; n150(BALZAC)     n148(DURAS) --&gt; n151(FLAUBERT)     n150(BALZAC) --&gt; n158(AUDIARD)     n150(BALZAC) --&gt; n159(COLETTE)      n159(COLETTE) --&gt; n166(CHRISTIE)      n149(SAGAN) --&gt; n152(PROUST)     n149(SAGAN) --&gt; n153(SIMENON)      n153(SIMENON) --&gt; n154(SAND)     n153(SIMENON) --&gt; n155(WOOLF)  <p>3. L'\u00e9diteur souhaite utiliser une fonction r\u00e9cursive <code>recherche_auteur</code> qui prend en param\u00e8tres <code>abr</code> un arbre binaire de recherche et <code>nom</code> un nom d'auteur. La fonction renvoie <code>True</code> si <code>nom</code> est une \u00e9tiquette de l'arbre <code>abr</code> et <code>False</code> dans le cas contraire.</p> <p>On donne le d\u00e9but de cette fonction ci-dessous, recopier la et compl\u00e9ter la derni\u00e8re ligne :</p> \ud83d\udc0d Script Python<pre><code>def recherche_auteur(abr, nom):\n    if est_vide(abr):\n        return False\n    elif valeur(abr) == nom:\n        return True\n    else:\n        return ...\n</code></pre> <p>Une fois la fonction compl\u00e9t\u00e9e, que renvoie l'appel <code>recherche_auteur(A2, 'SIMENON')</code> ? Justifier la r\u00e9ponse.</p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def recherche_auteur(abr, nom):\n    if est_vide(abr):\n        return False\n    elif valeur(abr) == nom:\n        return True\n    else:\n        return recherche_auteur(fils_gauche(abr), nom) or\\\n               recherche_auteur(fils_droit(abr), nom)\n</code></pre> <p>L'appel renvoie <code>True</code>. En effet, au premier appel, l'arbre n'est pas vide et la valeur de l'arbre ('KAFKA') n'est pas \u00e9gale \u00e0 la valeur recherch\u00e9e. Il y a donc le premier appel r\u00e9cursif sur le sous-arbre gauche et la valeur 'SIMENON'. Cet appel va finir par renvoyer <code>False</code> (puisque 'SIMENON' n'est pas dans ce sous-arbre). Puisqu'on est sur l'\u00e9valuation d'un OU, le deuxi\u00e8me appel r\u00e9cursif est lanc\u00e9, et finira par renvoyer <code>True</code>.</p> <p>4. L'\u00e9diteur souhaite utiliser une fonction r\u00e9cursive <code>hauteur(abr)</code> qui prend en param\u00e8tre un arbre binaire <code>abr</code> et renvoie la hauteur de cet arbre.</p> <p>\u00c9crire la fonction <code>hauteur</code> qui prend en entr\u00e9e <code>abr</code> un arbre binaire de recherche et renvoie sa hauteur. On pourra avoir recours aux appels de fonctions pr\u00e9d\u00e9finies <code>min(val1, val2)</code> et <code>max(val1, val2)</code> qui renvoient respectivement la plus petite et la plus grande valeur entre <code>val1</code> et <code>val2</code>. </p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def hauteur(abr):\n    if est_vide(abr):\n        return 0\n    else:\n        return 1 + max(hauteur(fils_gauche(abr)), hauteur(fils_droit(abr)))\n</code></pre>"},{"location":"T6_Annales/revisionArbre/#club-dinformatique","title":"Club d'Informatique","text":"<p>D'apr\u00e8s 2022, Nouvelle-Cal\u00e9donie, J1, Ex. 4</p> <p>Un club de passionn\u00e9s d'informatique fonctionne de la fa\u00e7on suivante : pour \u00eatre membre du club, \u00e0 l'exception du fondateur ou de la fondatrice, il faut \u00eatre parrain\u00e9. De plus, chaque membre peut parrainer au maximum deux personnes.</p> <p>Dans ce club, on distingue trois profils de membres :</p> <ul> <li>membre or : le membre a parrain\u00e9 deux personnes ;</li> <li>membre argent : le membre a parrain\u00e9 une seule personne ;</li> <li>membre bronze : le membre n'a parrain\u00e9 personne.</li> </ul> <p>On peut mod\u00e9liser ce fonctionnement de parrainage \u00e0 l'aide d'un arbre binaire dont les \u00e9tiquettes sont les pseudonymes des membres du club. Lorsque deux personnes ont \u00e9t\u00e9 parrain\u00e9es, celle qui a \u00e9t\u00e9 parrain\u00e9e en premier apparait comme racine du sous-arbre \u00e0 gauche tandis que l'autre est racine du sous-arbre \u00e0 droite.</p> <p>On donne ci-dessous l'arbre \\(P\\) repr\u00e9sentant les membres du club issus des parrainages de AnneB, fondatrice du club. Par exemple, Sophia a parrain\u00e9 Malik2 avant AstridM.</p> <p></p> <p>On munit la structure de donn\u00e9es <code>ArbreBinaire</code> des op\u00e9rations suivantes :</p> <p>Interface de la structure <code>ArbreBinaire</code></p> \ud83d\udc0d Script Python<pre><code>def est_vide(arbre: ArbreBinaire) -&gt; bool:\n    \"\"\"renvoie True si arbre est vide, False sinon\"\"\"\n\ndef racine(arbre: ArbreBinaire) -&gt; str:\n    \"\"\"renvoie l'\u00e9tiquette du n\u0153ud racine de arbre\"\"\"\n\ndef gauche(arbre: ArbreBinaire) -&gt; ArbreBinaire:\n    \"\"\"renvoie le sous-arbre \u00e0 gauche de arbre\"\"\"\n\ndef droite(arbre: ArbreBinaire) -&gt; ArbreBinaire:\n    \"\"\"renvoie le sous-arbre \u00e0 droite de arbre\"\"\"\n</code></pre> <p>1) On appelle feuille, un n\u0153ud qui ne poss\u00e8de pas de successeurs ou dit autrement dont l'arbre dont il est la racine poss\u00e8de deux sous-arbres vides. On d\u00e9finit la hauteur d'un arbre binaire non vide comme la longueur (en nombre de n\u0153uds) du plus long chemin allant de la racine \u00e0 une feuille. Un arbre vide a une hauteur \u00e9gale \u00e0 \\(0\\). </p> <p>1.a) Indiquer la hauteur de l'arbre \\(P\\)</p> R\u00e9ponse <p>L'arbre binaire \\(P\\) a une hauteur de \\(4\\) (par exemple en consid\u00e9rant le chemin qui va de la racine <code>'AnneB'</code> jusqu'\u00e0 la feuille <code>'Marc'</code>, on d\u00e9nombre bien \\(4\\) n\u0153uds, aucun autre chemin en d\u00e9nombre plus).</p> <p>1.b) Recopier et compl\u00e9ter la d\u00e9finition de la fonction r\u00e9cursive <code>hauteur</code> qui prend un <code>arbre</code> binaire en param\u00e8tre et renvoie la hauteur de cet <code>arbre</code>. On pourra utiliser la fonction <code>max</code> renvoyant la valeur maximale entre deux valeurs.</p> hauteur<pre><code>def hauteur(arbre):\n    if ...... :\n        return 0\n    else:\n        hauteur_a_gauche = hauteur(gauche(arbre))\n        hauteur_a_droite = ......\n        return 1 + ......\n</code></pre> R\u00e9ponse hauteur<pre><code>def hauteur(arbre):\n    if est_vide(arbre) :\n        return 0\n    else:\n        hauteur_a_gauche = hauteur(gauche(arbre))\n        hauteur_a_droite = hauteur(droite(arbre))\n        return 1 + max(hauteur_a_gauche, hauteur_a_droite)\n</code></pre> <p>1.c) Indiquer le type de la valeur renvoy\u00e9e par la fonction <code>hauteur</code></p> R\u00e9ponse <p>Il s'agit d'un entier (type <code>int</code>)</p> <p>2) La fonction <code>membres</code> ci-dessous prend un <code>arbre</code> binaire et une <code>liste_membres</code> en param\u00e8tres et ajoute, dans un certain ordre, les \u00e9tiquettes de l'<code>arbre</code> \u00e0 la <code>liste_membres</code>.</p> membres<pre><code>def membres(arbre, liste_membres):\n    if not est_vide(arbre):\n        liste_membres.append(racine(arbre))\n        membres(gauche(arbre), liste_membres)\n        membres(droite(arbre), liste_membres)\n</code></pre> <p>2.a) En supposant la liste <code>membres_p</code> initialement vide, \u00e9crire la valeur de cette liste apr\u00e8s l'appel <code>membres(arbre_p, membres_p)</code> o\u00f9 <code>arbre_p</code> r\u00e9f\u00e9rence l'arbre \\(P\\).</p> R\u00e9ponse \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; membres_p\n['AnneB', 'Pedro', 'FredB', 'Sophia', 'Malik2', 'Marc', 'AstridM', 'KevinH', 'Nico']\n</code></pre> <p>2.b) Indiquer le nom du type de parcours d'arbre binaire r\u00e9alis\u00e9 par la fonction <code>membres</code>.</p> R\u00e9ponse <p>Il s'agit d'un parcours pr\u00e9fixe (on traite la racine avant de traiter les sous-arbres \u00e0 gauche et \u00e0 droite).</p> <p>3) Dans cette question, on s'int\u00e9resse aux profils des membres (or, argent ou bronze).</p> <p>3.a) Indiquer les \u00e9tiquettes des feuilles de l'arbre \\(P\\).</p> R\u00e9ponse <p>Les feuilles sont : <code>'FredB'</code>, <code>'Marc'</code>, <code>'KevinH'</code> et <code>'Nico'</code></p> <p>3.b) \u00c0 partir des propositions suivantes, indiquer le profil des membres dont les pseudonymes sont les \u00e9tiquettes des feuilles.</p> <ul> <li>R\u00e9ponse A : membre or</li> <li>R\u00e9ponse B : membre argent</li> <li>R\u00e9ponse C : membre bronze</li> <li>R\u00e9ponse D : on ne peut pas savoir</li> </ul> R\u00e9ponse <p>Puisqu'il s'agit des feuilles, cela signifie que ces n\u0153uds n'ont pas de successeurs et donc que les membres associ\u00e9s n'ont parrain\u00e9 personne. La bonne r\u00e9ponse est donc la C : membre bronze.</p> <p>3.c) \u00c9crire la fonction <code>profil</code> qui prend un <code>arbre</code> binaire non vide en param\u00e8tre et renvoie le profil du membre dont le pseudonyme est l'\u00e9tiquette de la racine de l'<code>arbre</code> sous la forme d'une chaine de caract\u00e8res : <code>'or'</code>, <code>'argent'</code> ou <code>'bronze'</code>. Par exemple, l'appel <code>profil(arbre_p)</code> doit renvoyer <code>'or'</code>qui correspond au profil du membre <code>'AnneB'</code>, racine de \\(P\\).</p> R\u00e9ponse profil<pre><code>def profile(arbre):\n    if est_vide(gauche(arbre)):\n        # l'\u00e9nonc\u00e9 indique que le sous arbre \u00e0 droite sera vide\n        return 'bronze'\n    elif est_vide(droite(arbre)):\n        # ici le sous arbre \u00e0 gauche est non vide\n        return 'argent'\n    else:\n        return 'or'\n</code></pre> <p>Autre solution, consistant \u00e0 compter le nombre de sous-arbres non vides qui correspond au nombre de personnes parrain\u00e9es. On en d\u00e9duit le profil :</p> profil version 2<pre><code>def profile(arbre):\n    les_profiles = ('bronze', 'argent', 'or')\n    nb_parraines = 0\n    if not est_vide(gauche(arbre)):\n        nb_parraines += 1\n    if not est_vide(droite(arbre)):\n        nb_parraines += 1\n    return les_profils[nb_parraines]\n</code></pre> <p>4) Afin d'obtenir un tableau dont chaque \u00e9l\u00e9ment est un tuple contenant le pseudonyme d'un membre et son profil, on propose la fonction <code>membres_profils</code> d\u00e9finie ci-dessous :</p> membres_profils<pre><code>def membres_profils(arbre, liste_membres_profils):\n    if not est_vide(arbre):\n        liste_membres_profils.append((racine(arbre), profil(A))\n        membres_profils(gauche(arbre), liste_membres_profils)\n        membres_profils(droite(arbre), liste_membres_profils)\n</code></pre> <p>On appelle cette fonction sur un arbre <code>arbre_2</code> et on obtient ceci :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; liste_2 = []\n&gt;&gt;&gt; membres_profils(arbre_2, liste_2)\n&gt;&gt;&gt; liste_2\n[('LeaC', 'or'), ('Ali', 'bronze'), ('Tom45', 'argent'), ('Vero', 'bronze')]\n</code></pre> <p>Dessiner un arbre possible pouvant correspondre \u00e0 l'<code>arbre_2</code>.</p> R\u00e9ponse <p>Comme pour la question 2b, on a \u00e0 faire \u00e0 un parcours pr\u00e9fixe donc <code>'LeaC'</code> est la racine de l'<code>arbre_2</code>. Ensuite \u00e0 gauche on a <code>'Ali'</code> qui est une feuille (membre bronze). \u00c0 droite on tombe sur <code>'Tom45'</code> qui a parrain\u00e9 un seul membre : <code>'Vero'</code>.</p> <p></p> <p>5) Chaque ann\u00e9e, les membres versent une cotisation en fonction de leur profil.</p> <ul> <li>membre or : cotisation de 20 \u20ac</li> <li>membre argent : cotisation de 30 \u20ac</li> <li>membre bronze : cotisation de 40 \u20ac</li> </ul> <p>\u00c9crire une fonction <code>cotisation</code> qui prend un <code>arbre</code> binaire et renvoie le total des cotisations re\u00e7ues par le club dont <code>arbre</code> mod\u00e9lise les relations de parrainage. On pourra utiliser la fonction <code>membres_profils</code> de la question pr\u00e9c\u00e9dente.</p> R\u00e9ponse <p>On commence par d\u00e9finir un dictionnaire des tarifs de cotisations :</p> \ud83d\udc0d Script Python<pre><code>tarifs = {'or': 20, 'argent': 30, 'bronze': 40}\n</code></pre> cotisations<pre><code>def cotisations(arbre):\n    total = 0\n    liste_membres_profils = []\n    membres_profils(arbre, liste_membres_profils)\n    for _, profil in liste_membres_profils:\n        total += tarifs[profil]\n    return total\n</code></pre> <p>On peut aussi faire sans la fonction <code>membres_profils</code> :</p> cotisations version 2<pre><code>def cotisations(arbre):\n    if est_vide(arbre):\n        return 0\n    else:\n        a_gauche = cotisations(gauche(arbre))\n        a_droite = cotisations(droite(arbre))\n        return tarifs[profil(a)] + a_gauche + a_droite\n</code></pre>"},{"location":"T6_Annales/revisionBD/","title":"R\u00e9vision sur les Bases de donn\u00e9es","text":"<p>Cr\u00e9dits</p> <ul> <li>Cr\u00e9dit de la mise en pages des exercices  : @Gilles Lassus</li> <li>Exercice 2 bas\u00e9 sur le travail de G.Viateau (Bayonne)</li> <li>Exercice 0 bas\u00e9 sur le travail de J. Le Coupanec (Acad\u00e9mie de Rennes)</li> <li>Exercice 1 d'apr\u00e8s Pr\u00e9pabac NSI, Terminale, G.CONNAN, V.PETROV, G.ROZSAVOLGYI, L.SIGNAC, \u00e9ditions HATIER.</li> </ul>"},{"location":"T6_Annales/revisionBD/#exercice-en-console","title":"Exercice en console","text":"<p>exercice 0</p> <p>Championnat de France de Football 2015-2016</p> <p>D'apr\u00e8s le travail de J. Le Coupanec (Acad\u00e9mie de Rennes)</p> <p>La base de donn\u00e9es soccer.db contient les tables <code>Team</code>,<code>Match</code>, <code>Event</code>, <code>Player</code>.  </p> <p></p> <ol> <li>R\u00e9pondez \u00e0 ces 12 questions g\u00e9n\u00e9rales.</li> <li>R\u00e9pondez \u00e0 ces 11 questions sur l'\u00e9quipe de Lorient.</li> </ol>"},{"location":"T6_Annales/revisionBD/#exercices-sql-debranches","title":"Exercices SQL d\u00e9branch\u00e9s","text":""},{"location":"T6_Annales/revisionBD/#prepabac-nsi","title":"Pr\u00e9pabac NSI","text":"<p>exercice 1</p> <p>(d'apr\u00e8s Pr\u00e9pabac NSI, Terminale, G.CONNAN, V.PETROV, G.ROZSAVOLGYI, L.SIGNAC, \u00e9ditions HATIER.)</p> <p>On veut cr\u00e9er une base de donn\u00e9es <code>baseHopital.db</code>  qui contiendra les trois tables suivantes :</p> Patients id <code>Int</code> nom <code>Text</code> prenom <code>Text</code> genre <code>Text</code> annee_naissance <code>Int</code> Ordonnances code <code>Int</code> id_patient <code>Int</code> matricule_medecin <code>Int</code> date_ord <code>Text</code> medicaments <code>Text</code> Medecins matricule <code>Int</code> nom_prenom <code>Text</code> specialite <code>Text</code> telephone <code>Text</code> <p>On suppose que les dates sont donn\u00e9es sous la forme <code>jj-mm-aaaa</code>.</p> <p>On donne le diagramme relationnel de cette base : </p> <p>Q0. \u00c9crire le sch\u00e9ma relationnel de la table Ordonnances. On soulignera les cl\u00e9s primaires et marquera d'un # les cl\u00e9s \u00e9trang\u00e8res.</p> Correction <p>Ordonnaces ((code, Int), (id_patient#, Int), (matricule_medecin#, Int), (date_ord, Text), (medicaments, Text))</p> <p>Q1. (HP) Donner les commandes SQL permettant de cr\u00e9er ces tables.</p> Correction \ud83d\uddc2\ufe0f SQL<pre><code>CREATE TABLE Patients(\nid INTEGER PRIMARY KEY,\nnom TEXT,\nprenom TEXT,\ngenre TEXT,\nannee_naissance INTEGER\n);\n\nCREATE TABLE Ordonnances(\ncode INTEGER PRIMARY KEY,\nid_patient INTEGER,\nmatricule_medecin INTEGER,\ndate_ord TEXT,\nmedicaments TEXT,\nFOREIGN KEY(id_patient) REFERENCES Patients(Id),\nFOREIGN KEY(matricule_medecin) REFERENCES Medecins(matricule)\n);\n\nCREATE TABLE Medecins(\nmatricule INTEGER  PRIMARY KEY,\nnom_prenom TEXT,\nspecialite TEXT,\ntelephone TEXT\n);\n</code></pre> <p>Q2. Mme Anne Wizeunid, n\u00e9e en 2000 et demeurant 3 rue des Pignons Verts 12345 Avonelit doit \u00eatre enregistr\u00e9e comme patiente num\u00e9ro 1. Donner la commande SQLite correspondante.</p> Correction \ud83d\uddc2\ufe0f SQL<pre><code>INSERT INTO Patients VALUES (1, \"Wizeunit\", \"Anne\", \"F\", 2000);\n</code></pre> <p>Q3. Le patient num\u00e9ro 100 a chang\u00e9 de pr\u00e9nom et s'appelle maintenant \"Alice\". Donner la commande SQLite modifiant en cons\u00e9quence ses donn\u00e9es.</p> Correction \ud83d\uddc2\ufe0f SQL<pre><code>UPDATE Patients SET prenom = 'Alice' WHERE id = 100 ;\n</code></pre> <p>Q4. Par souci d'\u00e9conomie, la direction d\u00e9cide de se passer des m\u00e9decins sp\u00e9cialis\u00e9s en \u00e9pid\u00e9miologie. Donner la commande permettant de supprimer leurs fiches.</p> Correction \ud83d\uddc2\ufe0f SQL<pre><code>DELETE FROM Medecins WHERE specialite = \"\u00e9pid\u00e9miologie\";\n</code></pre> <p>Q5.  Donner la liste des patient(e)s ayant \u00e9t\u00e9 examin\u00e9(e)s par un(e) psychiatre en avril 2020.</p> Correction \ud83d\uddc2\ufe0f SQL<pre><code>SELECT p.nom, p.prenom FROM Patients AS p\nJOIN Ordonnances AS o ON p.id = o.id_patient\nJOIN Medecins AS m ON o.matricule_medecin = m.matricule\nWHERE m.specialite = \"psychiatrie\" AND o.date_ord LIKE \"%04-2020%\"\n</code></pre>"},{"location":"T6_Annales/revisionBD/#stock-dun-supermarche","title":"Stock d'un supermarch\u00e9","text":"<p>exercice 2</p> <p>bas\u00e9 sur le travail de G.Viateau (Bayonne)</p> <p>On consid\u00e8re ci-dessous le sch\u00e9ma de la base de donn\u00e9es du stock d'un supermarch\u00e9 :</p> <p></p> <p>Q1. Quelle requ\u00eate SQL donne le prix d'achat du produit dont le <code>nom_court</code> est \u00abLiq_Vaiss_1L\u00bb ?</p> Correction \ud83d\uddc2\ufe0f SQL<pre><code>SELECT prix_achat FROM Produits WHERE nom_court = 'Liq_Vaiss_1L' \n</code></pre> <p>Q2. Quelle requ\u00eate donne l'adresse, le code postal et la ville du fournisseur dont le nom est \u00abAvenir_confiseur\u00bb ?</p> Correction \ud83d\uddc2\ufe0f SQL<pre><code>SELECT adresse, cp, ville FROM Fournisseurs WHERE nom = 'Avenir_confiseur';\n</code></pre> <p>Q3. Quelle requ\u00eate donne les produits \u00e9tant en rupture de stock ?</p> Correction \ud83d\uddc2\ufe0f SQL<pre><code>SELECT Produits.nom FROM Produits\nJOIN Stocks ON Produits.id = Stocks.produit\nWHERE Stocks.quantite = 0;\n</code></pre> <p>Q4. Quelle requ\u00eate donne la liste de toutes les ampoules vendues en magasin ? On pourra faire l'hypoth\u00e8se que le nom du produit contient le mot \u00abampoule\u00bb</p> Correction \ud83d\uddc2\ufe0f SQL<pre><code>SELECT nom FROM Produits WHERE nom LIKE \"%ampoule%\";\n</code></pre> <p>Q5. Quelle requ\u00eate permet d'avoir le prix moyen de ces ampoules ?</p> Correction \ud83d\uddc2\ufe0f SQL<pre><code>SELECT AVG(prix_vente) FROM Produits WHERE nom LIKE \"%ampoule%\";\n</code></pre> <p>Q6. Quelle requ\u00eate permet d'identifier le produit le plus cher du magasin ?</p> Correction <p>\ud83d\uddc2\ufe0f SQL<pre><code>SELECT nom_court FROM Produits ORDER BY prix_vente DESC LIMIT 1;\n</code></pre> ou</p> \ud83d\uddc2\ufe0f SQL<pre><code>SELECT nom FROM Produits WHERE prix_vente = (SELECT MAX(prix_vente) FROM Produits);\n</code></pre> <p>Q7. Quelle requ\u00eate renvoie les noms des produits dont la date de p\u00e9remption est d\u00e9pass\u00e9e ? (on pourra utiliser la fonction SQL <code>NOW()</code> qui renvoie la date actuelle )</p> Correction \ud83d\uddc2\ufe0f SQL<pre><code>SELECT p.nom FROM Produits AS p\nJOIN Stocks AS s ON s.produits = p.id\nWHERE s.date_peremption &lt; NOW();\n</code></pre>"},{"location":"T6_Annales/revisionBD/#sujet-2022-amerique-du-sud-j1-ex1","title":"Sujet 2022 Am\u00e9rique du Sud J1 Ex.1","text":"<p>exercice 3</p> <p>Exercice 1 du sujet Am\u00e9rique du Sud J1 2022</p> Correction Correction Q1.a. <p>La relation Sport a pour cl\u00e9 primaire le couple NomSport et nomStation, et pour cl\u00e9 \u00e9trang\u00e8re l'attribut nomStation, cl\u00e9 primaire de la relation Station.</p> Correction Q1.b. <ul> <li> <p>Contrainte d'int\u00e9grit\u00e9 de domaine :  l'attribut Prix doit \u00eatre un nombre entier.</p> </li> <li> <p>Contrainte d'int\u00e9grit\u00e9 de relation :  le couple (nomSport, nomStation) ne peut pas se retrouver deux fois dans la table (car il forme une cl\u00e9 primaire)</p> </li> <li> <p>Contrainte d'int\u00e9grit\u00e9 de r\u00e9f\u00e9rence :  l'attribut nomStation ne peut pas \u00eatre un nom n'apparaissant pas dans la relation Station.</p> </li> </ul> Correction Q2.a. <p>La commande INSERT ne sert que pour ins\u00e9rer de nouveaux enregistrements, or le couple (\"planche \u00e0 voile\" , \"La tramontane catalane\") existe d\u00e9j\u00e0 dans la relation (et c'est une cl\u00e9 primaire donc on ne peut pas la retrouver deux fois). Il faut donc utiliser : \ud83d\uddc2\ufe0f SQL<pre><code>UPDATE Sports SET prix = 1350 \nWHERE nomSport = \"planche \u00e0 voile\" AND nomStation = \"La tramontane catalane\"        \n</code></pre></p> Correction Q2.b. \ud83d\uddc2\ufe0f SQL<pre><code>INSERT INTO Station VALUES (\"Soleil Rouge\", \"Bastia\", \"Corse\")  \nINSERT INTO Sport VALUES (\"plong\u00e9e\", \"Soleil Rouge\", 900)        \n</code></pre> Correction Q3.a. \ud83d\uddc2\ufe0f SQL<pre><code>SELECT mail FROM Client        \n</code></pre> Correction Q3.b. \ud83d\uddc2\ufe0f SQL<pre><code>SELECT nomStation FROM Sport\nWHERE nomSport = \"plongee\"      \n</code></pre> Correction Q4.a. \ud83d\uddc2\ufe0f SQL<pre><code>SELECT Station.ville, Station.nomStation FROM Station\nJOIN Sport ON Sport.nomStation = Station.nomStation\nWHERE Sport.nomSport = \"plongee\"        \n</code></pre> Correction Q4.b. \ud83d\uddc2\ufe0f SQL<pre><code>SELECT COUNT(*) FROM Sejour\nJOIN Station ON Station.nomStation = Sejour.nomStation\nWHERE Sejour.annee = 2020 AND Station.region = \"Corse\"\n</code></pre>"},{"location":"T6_Annales/revisionBD/#sujet-2022-centres-etrangers-j1-ex4","title":"Sujet 2022 Centres Etrangers J1 Ex4","text":"<p>exercice 4</p> <p>Exercice 4 du sujet Centres \u00c9trangers J1 2022</p> Correction Correction Q1.a. <p>L'attribut <code>id_mesure</code> semble une cl\u00e9 primaire acceptable car elle semble sp\u00e9cifique \u00e0 chaque enregistrement.</p> Correction Q1.b. <p>L'attribut <code>id_centres</code> semble \u00eatre une cl\u00e9 primaire de la relation <code>Centres</code>. On le retrouve aussi (sous le m\u00eame nom) dans la relation <code>Mesures</code>. C'est donc un attribut qui permettra de faire une jointure entre les deux relations.</p> Correction Q2.a. <p>Cette requ\u00eate va afficher tous les renseignements disponibles sur les centres dont l'altitude est strictement sup\u00e9rieure \u00e0 500m.        </p> Correction Q2.b. \ud83d\uddc2\ufe0f SQL<pre><code>SELECT nom_ville FROM Centres \nWHERE altitude &gt;= 700 AND altitude &lt;= 1200;\n</code></pre> Correction Q2.c. \ud83d\uddc2\ufe0f SQL<pre><code>SELECT longitude, nom_ville FROM Centres\nWHERE longitude &gt; 5\nORDER BY nom_ville;\n</code></pre> Correction Q3.a. <p>Cette requ\u00eate va afficher tous les renseignements sur les mesures dat\u00e9es du 30 octobre 2021.</p> Correction Q3.b. \ud83d\uddc2\ufe0f SQL<pre><code>INSERT INTO Mesures VALUES (3650, 138, 2021-11-08, 11, 1013, 0);\n</code></pre> Correction Q4.a. <p>Cette requ\u00eate va renvoyer tous les renseignements sur les centres dont la latitude est la latitude minimum de tous les centres.</p> Correction Q4.b. \ud83d\uddc2\ufe0f SQL<pre><code>SELECT DISTINCT Centres.nom_ville FROM Centres\nJOIN Mesures ON Mesures.id_centre = Centres.id_centre\nWHERE Mesures.temperature &lt; 10\nAND Mesures.date &lt;= 2021-10-31\nAND Mesures.date &gt;= 2021-10-01;\n</code></pre>"},{"location":"T6_Annales/revisionBD/#sujet-2022-metropole-j2-ex4","title":"Sujet 2022 M\u00e9tropole J2 Ex4","text":"<p>exercice 5</p> <p>Exercice 4 du sujet M\u00e9tropole J2 2022</p> Correction Correction Q1.a. \ud83d\udccb Texte<pre><code>Hey Jude\nI Want To Hold Your Hand\n</code></pre> Correction Q1.b. \ud83d\uddc2\ufe0f SQL<pre><code>SELECT nom FROM interpretes\nWHERE pays = 'Angleterre';\n</code></pre> Correction Q1.c. \ud83d\udccb Texte<pre><code>I Want To Hold Your Hand, 1963\nLike a Rolling Stone, 1965\nRespect, 1967\nHey Jude, 1968\nImagine, 1970\nSmells Like Teen Spirit, 1991\n</code></pre> Correction Q1.d. \ud83d\uddc2\ufe0f SQL<pre><code>SELECT COUNT(*) FROM morceaux;\n</code></pre> Correction Q1.e. \ud83d\uddc2\ufe0f SQL<pre><code>SELECT titre FROM morceaux\nORDER BY titre;\n</code></pre> Correction Q2.a. <p>La cl\u00e9 \u00e9trang\u00e8re de la table <code>morceaux</code> est l'attribut <code>id_interprete</code> qui fait r\u00e9f\u00e9rence \u00e0 la cl\u00e9 primaire <code>id_interprete</code> de la table <code>interpretes</code>.   </p> Correction Q2.b. <p><code>morceaux</code> : ((id_morceau, Int), (titre, Text), (annee, Int), (id_interprete#, Int)) <code>interpretes</code> : ((id_interprete, Int), (nom, Text), (pays, Text))   </p> Correction Q2.c. <p>La requ\u00eate va renvoyer une erreur car la cl\u00e9 primaire 1 est d\u00e9j\u00e0 pr\u00e9sente dans la table : il s'agit d'une violation de la contrainte de relation.</p> Correction Q3.a. \ud83d\uddc2\ufe0f SQL<pre><code>UPDATE morceaux\nSET annee = 1971\nWHERE titre = 'Imagine'\n</code></pre> Correction Q3.b. \ud83d\uddc2\ufe0f SQL<pre><code>INSERT INTO interpretes\nVALUES (6, \"The Who\", \"Angleterre\")\n</code></pre> Correction Q3.c. \ud83d\uddc2\ufe0f SQL<pre><code>INSERT INTO morceaux\nVALUES (7, \"My Generation\", 1965, 6)\n</code></pre> Correction Q4. \ud83d\uddc2\ufe0f SQL<pre><code>SELECT morceaux.titre\nFROM morceaux\nJOIN interpretes ON interpretes.id_interprete = morceaux.id_interprete\nWHERE interpretes.pays = \"\u00c9tats-Unis\"\n</code></pre>"},{"location":"T6_Annales/revisionBD/#sujet-2022-la-reunion-j2-ex2","title":"Sujet 2022 La R\u00e9union J2 Ex2","text":"<p>exercice 6</p> <p>Exercice 2 du sujet La R\u00e9union J2 2022</p> Correction Correction Q1. <p>Le couple <code>(NumClient, NumChambre)</code> ne pouvait pas \u00eatre une cl\u00e9 primaire car un m\u00eame client peut revenir dans l'h\u00f4tel et avoir la m\u00eame chambre qu'\u00e0 un pr\u00e9c\u00e9dent s\u00e9jour. Le couple <code>(NumClient, NumChambre)</code> ne serait donc pas unique et ne peut donc pas servir de cl\u00e9 primaire pour la relation <code>Reservations</code>.</p> Correction Q2.a. \ud83d\uddc2\ufe0f SQL<pre><code>SELECT Nom, Prenom FROM Clients            \n</code></pre> Correction Q2.b. \ud83d\uddc2\ufe0f SQL<pre><code>SELECT Telephone FROM Clients\nWHERE Prenom = \"Grace\" AND Nom = \"Hopper\"\n</code></pre> Correction Q3. \ud83d\uddc2\ufe0f SQL<pre><code>SELECT NumChambre FROM Reservations\nWHERE date(DateArr) &lt;= date('2024-12-28')\nAND date(DateDep) &gt; date('2024-12-28')\n</code></pre> Correction Q4.a. \ud83d\uddc2\ufe0f SQL<pre><code>UPDATE Chambres\nSET prix = 75\nWHERE NumChambre = 404\n</code></pre> Correction Q4.b \ud83d\uddc2\ufe0f SQL<pre><code>SELECT Reservations.NumChambre FROM Reservations\nJOIN Clients ON Clients.NumClient = Reservations.NumClient\nWHERE Clients.Nom = 'Codd' AND Clients.Prenom = 'Edgar'\n</code></pre>"},{"location":"T6_Annales/revisionRecurisivite/","title":"R\u00e9vision sur la R\u00e9cursivit\u00e9","text":"<p>Cr\u00e9dits</p> <ul> <li>2023, Sujet 0.b Ex2 Mise en page et correction par Franck Chambon</li> </ul>"},{"location":"T6_Annales/revisionRecurisivite/#fonctions-recursives","title":"Fonctions r\u00e9cursives","text":"<p>D'apr\u00e8s 2023, Sujet 0.b, Ex. 2</p> <p>Cet exercice est consacr\u00e9 \u00e0 l'analyse et \u00e0 l'\u00e9criture de programmes r\u00e9cursifs.</p> <p>1.a) Expliquer en quelques mots ce qu'est une fonction r\u00e9cursive.</p> R\u00e9ponse <p>Une fonction r\u00e9cursive est une fonction qui poss\u00e8de un appel \u00e0 elle-m\u00eame dans son code source.</p> <p>1.b) On consid\u00e8re la fonction Python suivante :</p> \ud83d\udc0d Script Python<pre><code>def compte_rebours(n):\n    \"\"\" n est un entier positif ou nul \"\"\"\n    if n &gt;= 0:\n        print(n)\n        compte_rebours(n - 1)\n</code></pre> <p>L'appel <code>compte_rebours(3)</code> affiche successivement les nombres <code>3</code>, <code>2</code>, <code>1</code> et <code>0</code>. Expliquer pourquoi le programme s'arr\u00eate apr\u00e8s l'affichage du nombre <code>0</code>.</p> R\u00e9ponse <p>Une fois l'affichage de <code>0</code> effectu\u00e9, il y a un appel r\u00e9cursif <code>compte_rebours(0 - 1)</code>.</p> <p>Lors de cet appel r\u00e9cursif, <code>n</code> vaut <code>-1</code>, on ne rentre pas donc dans la structure conditionnelle.</p> <p>La pile d'appel r\u00e9cursif se vide sans qu'il ait d'autres instructions effectu\u00e9es.</p> <p>Ainsi le programme s'arr\u00eate apr\u00e8s avoir affich\u00e9 <code>0</code> et vid\u00e9 la pile d'appels r\u00e9cursifs.</p> <p>2. En math\u00e9matiques, la factorielle d'un entier naturel \\(n\\) est le produit des nombres entiers strictement positifs inf\u00e9rieurs ou \u00e9gaux \u00e0 \\(n\\). Par convention, la factorielle de \\(0\\) est \\(1\\). Par exemple :</p> <ul> <li>la factorielle de \\(1\\) est \\(1\\)</li> <li>la factorielle de \\(2\\) est \\(2 \u00d7 1 = 2\\)</li> <li>la factorielle de \\(3\\) est \\(3 \u00d7 2 \u00d7 1 = 6\\)</li> <li>la factorielle de \\(4\\) est \\(4 \u00d7 3 \u00d7 2 \u00d7 1 = 24\\)</li> </ul> <p>Recopier et compl\u00e9ter sur votre copie le programme donn\u00e9 ci-dessous afin que la fonction r\u00e9cursive <code>fact</code> renvoie la factorielle de l'entier pass\u00e9 en param\u00e8tre de cette fonction. </p> <p>Exemple : <code>fact(4)</code> renvoie <code>24</code>.</p> \ud83d\udc0d Script Python<pre><code>def fact(n):\n    \"\"\" Renvoie le produit des entiers strictement positifs\n         et inf\u00e9rieurs ou \u00e9gaux \u00e0 n.\n    \"\"\"\n    if n == 0:\n        return ...  # \u00c0 compl\u00e9ter\n    else:\n        return ...  # \u00c0 compl\u00e9ter\n</code></pre> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def fact(n):\n    \"\"\" Renvoie le produit des entiers strictement positifs\n        et inf\u00e9rieurs ou \u00e9gaux \u00e0 n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * fact(n - 1)\n</code></pre> <p>3. La fonction <code>somme_entiers_rec</code> ci-dessous permet de calculer la somme des entiers, de <code>0</code> \u00e0 l'entier naturel <code>n</code> pass\u00e9 en param\u00e8tre.</p> <p>Par exemple :</p> <ul> <li>Pour <code>n = 0</code>, la fonction renvoie la valeur <code>0</code>.</li> <li>Pour <code>n = 1</code>, la fonction renvoie la valeur <code>0 + 1 = 1</code>.</li> <li>...</li> <li>Pour <code>n = 4</code>, la fonction renvoie la valeur <code>0 + 1 + 2 + 3 + 4 = 10</code>.</li> </ul> \ud83d\udc0d Script Python<pre><code>def somme_entiers_rec(n):\n    \"\"\" Renvoie, de mani\u00e8re r\u00e9cursive,\n     la somme des entiers de 0 \u00e0 l'entier naturel n.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        print(n)  # pour v\u00e9rification\n        return n + somme_entiers(n - 1)\n</code></pre> <p>L'instruction <code>print(n)</code> de la ligne 7 dans le code pr\u00e9c\u00e9dent a \u00e9t\u00e9 ins\u00e9r\u00e9e afin de mettre en \u00e9vidence le m\u00e9canisme en \u0153uvre au niveau des appels r\u00e9cursifs.</p> <p>3.a) \u00c9crire ce qui sera affich\u00e9 dans la console apr\u00e8s l'ex\u00e9cution de la ligne suivante : </p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; res = somme_entiers_rec(3)\n</code></pre> R\u00e9ponse \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; res = somme_entiers_rec(3)\n3\n2\n1\n&gt;&gt;&gt;\n</code></pre> <ul> <li>L'appel <code>somme_entiers_rec(3)</code> affiche <code>3</code> puis appelle <code>somme_entiers_rec(2)</code></li> <li>L'appel <code>somme_entiers_rec(2)</code> affiche <code>2</code> puis appelle <code>somme_entiers_rec(1)</code></li> <li>L'appel <code>somme_entiers_rec(1)</code> affiche <code>3</code> puis appelle <code>somme_entiers_rec(0)</code></li> <li>L'appel <code>somme_entiers_rec(0)</code> n'affiche rien.</li> </ul> <p>3.b) Quelle valeur sera alors affect\u00e9e \u00e0 la variable <code>res</code> ?</p> R\u00e9ponse \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; res = somme_entiers_rec(3)\n3\n2\n1\n&gt;&gt;&gt; res\n6\n</code></pre> <p>La valeur <code>6</code> est affect\u00e9e \u00e0 la variable <code>res</code>, la somme \\(3+2+1+0\\).</p> <p>4. \u00c9crire en Python une fonction <code>somme_entiers</code> non r\u00e9cursive : cette fonction devra prendre en argument un entier naturel <code>n</code> et renvoyer la somme des entiers de <code>0</code> \u00e0 <code>n</code> compris. Elle devra donc renvoyer le m\u00eame r\u00e9sultat que la fonction <code>somme_entiers_rec</code> d\u00e9finie \u00e0 la question 3.</p> <p>Exemple : <code>somme_entiers(4)</code> renvoie <code>10</code>.</p> R\u00e9ponse <p>Il y a plusieurs solutions, par exemple :</p> \ud83d\udc0d Script Python<pre><code>def somme_entiers(n):\n    # style it\u00e9ratif\n    somme = 0\n    for x in range(n + 1):\n        somme += x\n    return somme\n</code></pre> \ud83d\udc0d Script Python<pre><code>def somme_entiers(n):\n    # style fonctionnel\n    return sum(range(n + 1))\n</code></pre>"},{"location":"T6_Annales/revisionTAD/","title":"R\u00e9vision Liste/Pile/File","text":"<p>Cr\u00e9dits</p> <ul> <li>Cr\u00e9dit de la mise en pages des exercices  : Gilles Lassus</li> <li>Sujet 2022, Centres \u00e9trangers, J1, Ex. 2 Mise en page par Franck Chambon</li> <li>Sujet 2022, M\u00e9tropole, J1, Ex. 1 Mise en page et correction par Franck Chambon</li> <li>Sujet 2022, Polyn\u00e9sie, J1, Ex. 4 Mise en page et correction par Franck Chambon</li> <li>Sujet 2022, M\u00e9tropole, J2, Ex. 2 Mise en page et correction par Nicolas Rev\u00e9ret</li> </ul>"},{"location":"T6_Annales/revisionTAD/#passage-automatique-en-caisse","title":"Passage automatique en caisse","text":"<p>D'apr\u00e8s 2022, Centres \u00e9trangers, J1, Ex. 2</p> <p>Un supermarch\u00e9 met en place un syst\u00e8me de passage automatique en caisse. Un client scanne les articles \u00e0 l'aide d'un scanner de code-barres au fur et \u00e0 mesure qu'il les ajoute dans son panier.</p> <p>Les articles s'enregistrent alors dans une structure de donn\u00e9es. La structure de donn\u00e9es utilis\u00e9e est une file d\u00e9finie par la classe <code>Panier</code>, avec les primitives habituelles sur la structure de file.</p> <p>Pour faciliter la lecture, le code de la classe <code>Panier</code> n'est pas \u00e9crit.</p> \ud83d\udc0d Script Python<pre><code>class Panier():\n    def __init__(self):\n        \"Initialise la file comme une file vide.\"\n\n    def est_vide(self):\n        \"Renvoie True si la file est vide, False sinon.\"\n\n    def enfile(self, e):\n        \"Ajoute l'\u00e9l\u00e9ment e en derni\u00e8re position de la file, ne renvoie rien.\"\n\n    def defile(self):\n        \"Retire le premier \u00e9l\u00e9ment de la file et le renvoie.\"\n</code></pre> <p>Le panier d'un client sera repr\u00e9sent\u00e9 par une file contenant les articles scann\u00e9s.</p> <p>Les articles sont repr\u00e9sent\u00e9s par des tuples <code>(code_barre, designation, prix, horaire_scan)</code> o\u00f9</p> <ul> <li><code>code_barre</code> est un nombre entier identifiant l'article ;</li> <li><code>designation</code> est une chaine de caract\u00e8res qui pourra \u00eatre affich\u00e9e sur le ticket de caisse ;</li> <li><code>prix</code> est un nombre d\u00e9cimal donnant le prix d'une unit\u00e9 de cet article ;</li> <li><code>horaire_scan</code> est un nombre entier de secondes permettant de connaitre l'heure o\u00f9 l'article a \u00e9t\u00e9 scann\u00e9.</li> </ul> <p>1. On souhaite ajouter un article dont le tuple est le suivant <code>(31002, \"caf\u00e9 noir\", 1.50, 50525)</code>.</p> <p>\u00c9crire le code utilisant une des quatre m\u00e9thodes ci-dessus permettant d'ajouter l'article \u00e0 l'objet de classe <code>Panier</code> appel\u00e9 <code>panier_1</code>.</p> R\u00e9ponse <p><code>panier_1.enfile((31002, \"caf\u00e9 noir\", 1.50, 50525))</code></p> <p>2. On souhaite d\u00e9finir une m\u00e9thode <code>remplir</code> de param\u00e8tre <code>panier_temp</code> dans la classe <code>Panier</code> permettant de transf\u00e9rer vers la file tout le contenu d'un autre panier <code>panier_temp</code> qui est aussi un objet de type <code>Panier</code>. Recopier et compl\u00e9ter le code de la m\u00e9thode <code>remplir</code>.</p> \ud83d\udc0d Script Python<pre><code>def remplir(self, panier_temp):\n    while not panier_temp. ... :\n        article = panier_temp. ...\n        self. ... (article)\n</code></pre> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def remplir(self, panier_temp):\n    while not panier_temp.est_vide():\n        article = panier_temp.defile()\n        self.enfile(article)\n</code></pre> <p>3. Pour que le client puisse connaitre \u00e0 tout moment le montant de son panier, on souhaite ajouter une m\u00e9thode <code>prix_total</code> (sans param\u00e8tres) \u00e0 la classe <code>Panier</code> qui renvoie la somme des prix de tous les articles pr\u00e9sents dans le panier.</p> <p>\u00c9crire le code de la m\u00e9thode <code>prix_total</code>.</p> <p> Attention, apr\u00e8s l'appel de cette m\u00e9thode, le panier devra toujours contenir ses articles.</p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def prix_total(self):\n    cumul = 0\n    panier_temp = Panier()\n\n    while not self.est_vide():\n        article = self.defile()\n        code_barre, designation, prix, horaire_scan = article\n        # ou alors prix = article[2]\n        cumul += prix\n        panier_temp.enfile(article)\n\n    while not panier_temp.est_vide():\n        article = panier_temp.defile()\n        self.enfile(article)\n\n    return cumul\n</code></pre> <p>4. Le magasin souhaite connaitre pour chaque client la dur\u00e9e du passage en caisse. Cette dur\u00e9e sera obtenue en faisant la diff\u00e9rence entre le champ <code>horaire_scan</code> du dernier article scann\u00e9 et le champ <code>horaire_scan</code> du premier article scann\u00e9 dans le panier du client. Un panier vide renverra une dur\u00e9e \u00e9gale \u00e0 <code>None</code>. On pourra accepter que le panier soit vide apr\u00e8s l'appel de cette m\u00e9thode.</p> <p>\u00c9crire une m\u00e9thode <code>duree_passage_en_caisse</code> de la classe <code>Panier</code> qui renvoie cette dur\u00e9e.</p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def duree_passage_en_caisse(self):\n    if self.est_vide():\n        return None\n    else:\n        article = self.defile()\n        code_barre, designation, prix, horaire_scan = article\n        h_mini = h_maxi = horaire_scan\n\n        while not self.est_vide():\n            article = self.defile()\n            code_barre, designation, prix, horaire_scan = article\n            if horaire_scan &gt; h_maxi:\n                h_maxi = horaire_scan\n            if horaire_scan &lt; h_mini:\n                h_mini = horaire_scan\n\n    return h_maxi - h_mini\n</code></pre> <p>Si on est certain que la file est dans l'ordre croissant des horaires de scan, on peut proposer le code plus simple</p> \ud83d\udc0d Script Python<pre><code>def duree_passage_en_caisse(self) :\n    if self.est_vide() :\n        return None\n    else :\n        article = self.defile()\n        debut = article[3]\n        while not self.est_vide() :\n            article = self.defile()\n        duree = article[3] - debut\n        return duree\n</code></pre>"},{"location":"T6_Annales/revisionTAD/#verification-syntaxique-de-parentheses-ou-de-balises","title":"V\u00e9rification syntaxique de parenth\u00e8ses ou de balises","text":"<p>D'apr\u00e8s 2022, M\u00e9tropole, J1, Ex. 1</p>"},{"location":"T6_Annales/revisionTAD/#partie-a-expression-correctement-parenthesee","title":"Partie A : Expression correctement parenth\u00e9s\u00e9e","text":"<p>On veut d\u00e9terminer si une expression arithm\u00e9tique est correctement parenth\u00e9s\u00e9e. \u00c0 chaque parenth\u00e8se fermante \")\" correspond une parenth\u00e8se pr\u00e9c\u00e9demment ouverte \"(\".</p> <p>Exemples</p> <ul> <li>L'expression arithm\u00e9tique <code>\"(2 + 3) \u00d7 (18/(4 + 2))\"</code> est correctement parenth\u00e9s\u00e9e.</li> <li>L'expression arithm\u00e9tique <code>\"(2 + 3) \u00d7 (18/(4 + 2\"</code> est non correctement parenth\u00e9s\u00e9e.</li> </ul> <p>Pour simplifier les expressions arithm\u00e9tiques, on enregistre, dans une structure de donn\u00e9es, uniquement les parenth\u00e8ses dans leur ordre d'apparition. On appelle expression simplifi\u00e9e cette structure.</p> Expression arithm\u00e9tique Structure de donn\u00e9es <code>\"(2 + 3) \u00d7 (18/(4 + 2))\"</code> <code>()(())</code> <p>1. Indiquer si la phrase \u00ab les \u00e9l\u00e9ments sont maintenant retir\u00e9s (pour \u00eatre lus) de cette structure de donn\u00e9es dans le m\u00eame ordre qu'ils y ont \u00e9t\u00e9 ajout\u00e9s lors de l'enregistrement \u00bb d\u00e9crit le comportement d'une file ou d'une pile. Justifier.</p> R\u00e9ponse <p>Le premier \u00e0 \u00eatre retir\u00e9 \u00e9tait le premier \u00e0 \u00eatre ajout\u00e9, donc cela correspond \u00e0 une file.</p> <p>Pour v\u00e9rifier le parenth\u00e9sage, on peut utiliser une variable <code>controleur</code> qui :</p> <ul> <li>est un nombre entier \u00e9gal \u00e0 0 en d\u00e9but d'analyse de l'expression simplifi\u00e9e ;</li> <li>augmente de 1 si l'on rencontre une parenth\u00e8se ouvrante <code>\"(\"</code> ;</li> <li>diminue de 1 si l'on rencontre une parenth\u00e8se fermante <code>\")\"</code>.</li> </ul> <p>Exemple</p> <p>On consid\u00e8re l'expression simplifi\u00e9e A : <code>\"()(())\"</code></p> <p>Lors de l'analyse de l'expression A, <code>controleur</code> (initialement \u00e9gal \u00e0 0) prend successivement pour valeur 1, 0, 1, 2, 1, 0.</p> <p>Le parenth\u00e9sage est correct.</p> <p>2. \u00c9crire, pour chacune des 2 expressions simplifi\u00e9es B et C suivantes, les valeurs successives prises par la variable <code>controleur</code> lors de leur analyse.</p> <ul> <li>Expression simplifi\u00e9e B : \" ((()()\"</li> <li>Expression simplifi\u00e9e C : \"(()))(\"</li> </ul> R\u00e9ponse <ul> <li>Expression simplifi\u00e9e B : 1, 2, 3, 2, 3, 2</li> <li>Expression simplifi\u00e9e C : 1, 2, 1, 0, -1, 0</li> </ul> <p>3. L'expression simplifi\u00e9e B pr\u00e9c\u00e9dente est mal parenth\u00e9s\u00e9e (parenth\u00e8ses fermantes manquantes) car le <code>controleur</code> est diff\u00e9rent de z\u00e9ro en fin d'analyse. L'expression simplifi\u00e9e C pr\u00e9c\u00e9dente est \u00e9galement mal parenth\u00e9s\u00e9e (parenth\u00e8se fermante sans parenth\u00e8se ouvrante) car le <code>controleur</code> prend une valeur strictement n\u00e9gative pendant l'analyse.</p> <p>Recopier et compl\u00e9ter uniquement les lignes 13 et 16 du code ci-dessous pour que la fonction <code>parenthesage_correct</code> r\u00e9ponde \u00e0 sa description.</p> \ud83d\udc0d Script Python<pre><code>def parenthesage_correct(expression):\n    \"\"\" fonction renvoyant True si l'expression arithm\u00e9tique\n    simplifi\u00e9e (str) est correctement parenth\u00e9s\u00e9e, False sinon.\n    Condition: expression ne contient que\n      des parenth\u00e8ses ouvrantes et fermantes\n    \"\"\"\n    controleur = 0\n    for parenthese in expression:  # pour chaque parenth\u00e8se\n        if parenthese == '(':\n            controleur = controleur + 1\n        else:  # parenthese == ')'\n            controleur = controleur - 1\n            if controleur ... :  # test 1 (\u00e0 recopier et compl\u00e9ter)\n                # parenth\u00e8se fermante sans parenth\u00e8se ouvrante\n                return False\n    return controleur ...  # test 2 (\u00e0 recopier et compl\u00e9ter)\n    # test 2 est un bool\u00e9en renvoy\u00e9\n    #   True : le parenth\u00e9sage est correct\n    #   False : parenth\u00e8se(s) fermante(s) manquante(s)\n</code></pre> R\u00e9ponse <ul> <li>ligne 13: <code>(controleur &lt; 0)</code></li> <li>ligne 16: <code>(controleur == 0)</code></li> </ul> <p>Les parenth\u00e8ses sont inutiles.</p>"},{"location":"T6_Annales/revisionTAD/#partie-b-texte-correctement-balise","title":"Partie B : Texte correctement balis\u00e9","text":"<p>On peut faire l'analogie entre le texte simplifi\u00e9 des fichiers HTML (uniquement constitu\u00e9 de balises ouvrantes <code>&lt;nom&gt;</code> et fermantes <code>&lt;/nom&gt;</code>) et les expressions parenth\u00e9s\u00e9es.</p> <p>Par exemple, l'expression HTML simplifi\u00e9e : <code>\"&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\"</code> est correctement balis\u00e9e.</p> <p>On ne tiendra pas compte dans cette partie des balises ne comportant pas de fermeture comme <code>&lt;br&gt;</code> ou <code>&lt;img ...&gt;</code>.</p> <p>Afin de v\u00e9rifier qu'une expression HTML simplifi\u00e9e est correctement balis\u00e9e, on peut utiliser une pile (initialement vide) selon l'algorithme suivant :</p> <ul> <li> <p>On parcourt successivement chaque balise de l'expression :</p> <ul> <li>lorsque l'on rencontre une balise ouvrante, on l'empile ;</li> <li>lorsque l'on rencontre une balise fermante :<ul> <li>si la pile est vide, alors l'analyse s'arr\u00eate : le balisage est incorrect,</li> <li>sinon, on d\u00e9pile et on v\u00e9rifie que les deux balises (la balise fermante rencontr\u00e9e et la balise ouvrante d\u00e9pil\u00e9e) correspondent (c'est-\u00e0-dire ont le m\u00eame nom) si ce n'est pas le cas, l'analyse s'arr\u00eate (balisage incorrect).</li> </ul> </li> </ul> </li> </ul>"},{"location":"T6_Annales/revisionTAD/#exemple-detaille","title":"Exemple d\u00e9taill\u00e9","text":"\u00c9tape 1<pre><code>&lt;p&gt;&lt;em&gt;&lt;/p&gt;&lt;/em&gt;\n \u2191\n</code></pre> \u00c9tape 2<pre><code>&lt;p&gt;&lt;em&gt;&lt;/p&gt;&lt;/em&gt;\n     \u2191\n</code></pre> \u00c9tape 3<pre><code>&lt;p&gt;&lt;em&gt;&lt;/p&gt;&lt;/em&gt;\n         \u2191\n</code></pre>  \u00c9tat de la pile lors du d\u00e9roulement de cet algorithme pour l'expression simplifi\u00e9e  `#!html \"<p>\"` qui n'est pas correctement balis\u00e9e :      Balise `#!html <p>` ouvrante, on empile.       Balise `#!html ` ouvrante, on empile.       Balise `#!html ` fermante,  on d\u00e9pile, mais...      Pile<pre><code>.\n.         \u2199\n.\n&lt;p&gt;\n</code></pre> Pile<pre><code>.\n.         \u2199\n&lt;em&gt;\n&lt;p&gt;\n</code></pre> Pile<pre><code>.          &lt;em&gt;\n.         \u2197\n.\n&lt;p&gt;\n</code></pre> <p><code>&lt;em&gt;</code> et <code>&lt;/p&gt;</code> ne correspondent pas ! Donc le balisage est incorrect.</p> <p>4. Cette question traite de l'\u00e9tat de la pile lors du d\u00e9roulement de l'algorithme.</p> <p>4.a. Repr\u00e9senter la pile \u00e0 chaque \u00e9tape du d\u00e9roulement de cet algorithme pour l'expression <code>\"&lt;p&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;\"</code> (balisage correct).</p> R\u00e9ponse D\u00e9part\u00c9tape 1\u00c9tape 2\u00c9tape 3\u00c9tape 4Fin Parcours de l'expression<pre><code>\"&lt;p&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;\"\n\u2191\n</code></pre> flowchart TD     A[\"\u00a0 =====Pile\"]  Parcours de l'expression<pre><code>\"&lt;p&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;\"\n  \u2191                  Balise  &lt;p&gt;  ouvrante, on empile\n</code></pre> flowchart TD     A[\"\u00a0 &lt;p&gt;=====Pile\"]  Parcours de l'expression<pre><code>\"&lt;p&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;\"\n      \u2191              Balise  &lt;em&gt; ouvrante, on empile\n</code></pre> flowchart TD     A[\"\u00a0 &lt;em&gt;&lt;p&gt;=====Pile\"]  Parcours de l'expression<pre><code>\"&lt;p&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;\"\n          \u2191          Balise &lt;/em&gt; fermante, on d\u00e9pile\n</code></pre> flowchart TD     A[\"\u00a0 &lt;p&gt;=====Pile\"]  <p><code>&lt;#!html em&gt;</code> et <code>&lt;/em&gt;</code> se correspondent.</p> Parcours de l'expression<pre><code>\"&lt;p&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;\"\n               \u2191     Balise &lt;/p&gt;  fermante, on d\u00e9pile\n</code></pre> flowchart TD     A[\"\u00a0 =====Pile\"]  <p><code>&lt;p&gt;</code> et <code>&lt;/p&gt;</code> se correspondent.</p> Parcours de l'expression<pre><code>\"&lt;p&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;\"\n                 \u2191\n</code></pre> flowchart TD     A[\"\u00a0 =====Pile\"]  <p>La pile est vide. Le balisage est correct.</p> <p>4.b. Indiquer quelle condition simple (sur le contenu de la pile) permet alors de dire que le balisage est correct lorsque toute l'expression HTML simplifi\u00e9e a \u00e9t\u00e9 enti\u00e8rement parcourue, sans que l'analyse ne s'arr\u00eate.</p> R\u00e9ponse <p>Il suffirait de v\u00e9rifier que la pile est vide.</p> <p>5. Une expression HTML correctement balis\u00e9e contient 12 balises.</p> <p>Indiquer le nombre d'\u00e9l\u00e9ments que pourrait contenir au maximum la pile lors de son analyse.</p> R\u00e9ponse <p>6 \u00e9l\u00e9ments au maximum seront empil\u00e9s, dans le cas o\u00f9 12 balises HTML sont imbriqu\u00e9es. 6 ouvrantes qui seront empil\u00e9es, puis les 6 fermantes.</p>"},{"location":"T6_Annales/revisionTAD/#traitement-dune-pile","title":"Traitement d'une pile","text":"<p>D'apr\u00e8s 2022, Polyn\u00e9sie, J1, Ex. 4</p> <p>La classe <code>Pile</code> utilis\u00e9e dans cet exercice est impl\u00e9ment\u00e9e en utilisant des listes Python et propose quatre \u00e9l\u00e9ments d'interface :</p> <ul> <li>Un constructeur qui permet de cr\u00e9er une pile vide, repr\u00e9sent\u00e9e par <code>[]</code> ;</li> <li>La m\u00e9thode <code>est_vide()</code> qui renvoie <code>True</code> si l'objet est une pile ne contenant aucun \u00e9l\u00e9ment, et <code>False</code> sinon ;</li> <li>La m\u00e9thode <code>empile</code> qui prend un objet quelconque en param\u00e8tre et ajoute cet objet au sommet de la pile. Dans la repr\u00e9sentation de la pile dans la console, cet objet apparait \u00e0 droite des autres \u00e9l\u00e9ments de la pile ;</li> <li>La m\u00e9thode <code>depile</code> qui renvoie l'objet pr\u00e9sent au sommet de la pile et le retire de la pile.</li> </ul> <p>Exemples :</p> \ud83d\udc0d Console Python<pre><code>&gt;&gt;&gt; ma_pile = Pile()\n&gt;&gt;&gt; ma_pile.empile(2)\n&gt;&gt;&gt; ma_pile\n[2]\n&gt;&gt;&gt; ma_pile.empile(3)\n&gt;&gt;&gt; ma_pile.empile(50)\n&gt;&gt;&gt; ma_pile\n[2, 3, 50]\n&gt;&gt;&gt; ma_pile.depile()\n50\n&gt;&gt;&gt; ma_pile\n[2, 3]\n</code></pre> <p>La m\u00e9thode <code>est_triee</code> ci-dessous renvoie <code>True</code> si, en d\u00e9pilant tous les \u00e9l\u00e9ments, ils sont trait\u00e9s dans l'ordre croissant, et <code>False</code> sinon.</p> \ud83d\udc0d Script Python<pre><code>def est_triee(self):\n    if not self.est_vide():\n        e1 = self.depile()\n        while not self.est_vide():\n            e2 = self.depile()\n            if e1 ... e2 :\n                return False\n            e1 = ...\n    return True\n</code></pre> <p>1. Recopier sur la copie les lignes 6 et 8 en compl\u00e9tant les points de suspension.</p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def est_triee(self):\n    if not self.est_vide():\n        e1 = self.depile()\n        while not self.est_vide():\n            e2 = self.depile()\n            if e1 &gt; e2 :\n                return False\n            e1 = e2\n    return True\n</code></pre> <p>On cr\u00e9e dans la console la pile <code>A</code> repr\u00e9sent\u00e9e par <code>[1, 2, 3, 4]</code>.</p> <p>2.a. Donner la valeur renvoy\u00e9e par l'appel <code>A.est_triee()</code>.</p> R\u00e9ponse <p>La valeur \\(4\\) est d'abord d\u00e9pil\u00e9e, puis \\(3\\). L'ordre n'est pas croissant, ainsi <code>A.est_triee()</code> renvoie <code>False</code>.</p> <p>2.b. Donner le contenu de la pile <code>A</code> apr\u00e8s l'ex\u00e9cution de cette instruction.</p> R\u00e9ponse <p><code>A</code> sera repr\u00e9sent\u00e9 par <code>[1, 2]</code>.</p> <p>On souhaite maintenant \u00e9crire le code d'une m\u00e9thode <code>depile_max</code> d'une pile non vide ne contenant que des nombres entiers et renvoyant le plus grand \u00e9l\u00e9ment de cette pile en le retirant de la pile.</p> <p>Apr\u00e8s l'ex\u00e9cution de <code>p.depile_max()</code>, le nombre d'\u00e9l\u00e9ments de la pile <code>p</code> diminue donc de 1.</p> \ud83d\udc0d Script Python<pre><code>def depile_max(self):\n    assert not self.est_vide(), \"Pile vide\"\n    q = Pile()\n    maxi = self.depile()\n    while not self.est_vide():\n        elt = self.depile()\n        if maxi &lt; elt:\n            q.empile(maxi)\n            maxi = ...\n        else :\n            ...\n    while not q.est_vide():\n        self.empile(q.depile())\n    return maxi\n</code></pre> <p>3. Recopier sur la copie les lignes 9 et 11 en compl\u00e9tant les points de suspension.</p> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def depile_max(self):\n    assert not self.est_vide(), \"Pile vide\"\n    q = Pile()\n    maxi = self.depile()\n    while not self.est_vide():\n        elt = self.depile()\n        if maxi &lt; elt:\n            q.empile(maxi)\n            maxi = elt\n        else :\n            q.empile(elt)\n    while not q.est_vide():\n        self.empile(q.depile())\n    return maxi\n</code></pre> <p>On cr\u00e9e la pile <code>B</code> repr\u00e9sent\u00e9e par <code>[9, -7, 8, 12, 4]</code> et on effectue l'appel <code>B.depile_max()</code>.</p> <p>4.a. Donner le contenu des piles <code>B</code> et <code>q</code> \u00e0 la fin de chaque it\u00e9ration de la boucle <code>while</code> de la ligne 5.</p> R\u00e9ponse InitialisationFin du tour 1Fin du tour 2Fin du tour 3Fin du tour 4 <ul> <li><code>B</code> contient <code>[9, -7, 8, 12]</code> ;</li> <li><code>q</code> est vide ;</li> <li><code>maxi</code> est \u00e9gal \u00e0 <code>4</code>.</li> </ul> <p>Juste avant le premier tour de boucle</p> <ul> <li><code>B</code> contient <code>[9, -7, 8]</code> ;</li> <li><code>q</code> contient <code>[4]</code> ;</li> <li><code>maxi</code> est \u00e9gal \u00e0 <code>12</code>.</li> </ul> <ul> <li><code>B</code> contient <code>[9, -7]</code> ;</li> <li><code>q</code> contient <code>[4, 8]</code> ;</li> <li><code>maxi</code> est \u00e9gal \u00e0 <code>12</code>.</li> </ul> <ul> <li><code>B</code> contient <code>[9]</code> ;</li> <li><code>q</code> contient <code>[4, 8, -7]</code> ;</li> <li><code>maxi</code> est \u00e9gal \u00e0 <code>12</code>.</li> </ul> <ul> <li><code>B</code> est vide ;</li> <li><code>q</code> contient <code>[4, 8, -7, 9]</code> ;</li> <li><code>maxi</code> est \u00e9gal \u00e0 <code>12</code>.</li> </ul> <p>4.b. Donner le contenu des piles <code>B</code> et <code>q</code> avant l'ex\u00e9cution de la ligne 14.</p> R\u00e9ponse <p>La derni\u00e8re boucle renverse la pile <code>q</code> dans la pile <code>B</code>, ainsi, \u00e0 la ligne 14 :</p> <ul> <li><code>q</code> est vide ;</li> <li><code>B</code> contient <code>[9, -7, 8, 4]</code>.</li> </ul> <p>4.c. Donner un exemple de pile qui montre que l'ordre des \u00e9l\u00e9ments restants n'est pas pr\u00e9serv\u00e9 apr\u00e8s l'ex\u00e9cution de <code>depile_max</code>.</p> R\u00e9ponse <p>Avec une pile <code>B</code> qui contient <code>[3, 1, 2]</code></p> InitialisationFin du tour 1Fin du tour 2 <ul> <li><code>B</code> contient <code>[3, 1]</code> ;</li> <li><code>q</code> est vide ;</li> <li><code>maxi</code> est \u00e9gal \u00e0 <code>2</code>.</li> </ul> <p>Juste avant le premier tour de boucle</p> <ul> <li><code>B</code> contient <code>[3]</code> ;</li> <li><code>q</code> contient <code>[1]</code> ;</li> <li><code>maxi</code> est \u00e9gal \u00e0 <code>2</code>.</li> </ul> <ul> <li><code>B</code> est vide ;</li> <li><code>q</code> contient <code>[1, 2]</code> ;</li> <li><code>maxi</code> est \u00e9gal \u00e0 <code>3</code>.</li> </ul> <p>La derni\u00e8re boucle renverse la pile <code>q</code> dans la pile <code>B</code>, ainsi, \u00e0 la ligne 14 :</p> <ul> <li><code>q</code> est vide ;</li> <li><code>B</code> contient <code>[2, 1]</code>.</li> </ul> <p>Sans <code>3</code> dans la pile <code>B</code> initiale, on a dans l'ordre <code>[1, 2]</code> ce qui est diff\u00e9rent de <code>[2, 1]</code> obtenu ici avec <code>depile_max</code>.</p> <p>On a ainsi un exemple o\u00f9 l'ordre des \u00e9l\u00e9ments restants n'est pas pr\u00e9serv\u00e9 apr\u00e8s l'ex\u00e9cution de <code>depile_max</code>.</p> <p>On donne le code de la fonction <code>traite</code> :</p> \ud83d\udc0d Script Python<pre><code>def traite(self):\n    q = Pile()\n    while not self.est_vide():\n        q.empile(self.depile_max())\n    while not q.est_vide():\n        self.empile(q.depile())\n</code></pre> <p>5.a. Donner les contenus successifs des piles <code>B</code> et <code>q</code></p> <ul> <li>avant la ligne 3,</li> <li>avant la ligne 5,</li> <li>\u00e0 la fin de l'ex\u00e9cution de la fonction <code>traite</code> lorsque la fonction <code>traite</code> est appel\u00e9e avec la pile <code>B</code> contenant <code>[1, 6, 4, 3, 7, 2]</code>.</li> </ul> R\u00e9ponse <p>Avec <code>B = [1, 6, 4, 3, 7, 2]</code>, un appel <code>B.traite()</code> conduit successivement \u00e0 :</p> <ul> <li>Avant la ligne 3,<ul> <li><code>B</code> contient <code>[1, 6, 4, 3, 7, 2]</code> ;</li> <li><code>q</code> est vide.</li> </ul> </li> <li>Avant la ligne 5,<ul> <li><code>B</code> est vide ;</li> <li><code>q</code> contient <code>[7, 6, 4, 3, 2, 1]</code></li> </ul> </li> <li>\u00c0 la fin,<ul> <li><code>B</code> contient <code>[1, 2, 3, 4, 6, 7]</code></li> <li><code>q</code> est vide.</li> </ul> </li> </ul> <p>5.b. Expliquer le traitement effectu\u00e9 par cette m\u00e9thode.</p> R\u00e9ponse <p>Ce traitement est un tri de la pile. On construit d'abord <code>q</code> comme la pile des \u00e9l\u00e9ments de <code>self</code> dans l'ordre d\u00e9croissant. On renverse ensuite la pile, qui se retrouve comme si on avait empil\u00e9 les \u00e9l\u00e9ments de <code>self</code> dans l'ordre croissant.</p> <p>Attention, il s'agit de l'ordre inverse de celui propos\u00e9 par la fonction <code>est_triee</code> vu \u00e0 la question 1. ici, si on d\u00e9pile les \u00e9l\u00e9ments, ils sont d\u00e9sormais dans l'ordre d\u00e9croissant.</p>"},{"location":"T6_Annales/revisionTAD/#jeu-de-la-poussette","title":"Jeu de la poussette","text":"<p>D'apr\u00e8s 2022, M\u00e9tropole, J2, Ex. 2</p> <p>La poussette est un jeu de cartes en solitaire. Cet exercice propose une version simplifi\u00e9e de ce jeu bas\u00e9e sur des nombres.</p> <p>On consid\u00e8re une pile constitu\u00e9e de nombres entiers tir\u00e9s al\u00e9atoirement. Le jeu consiste \u00e0 r\u00e9duire la pile suivant la r\u00e8gle suivante : quand la pile contient du haut vers le bas un triplet dont les termes du haut et du bas sont de m\u00eame parit\u00e9, on supprime l'\u00e9l\u00e9ment central.</p> <p>Par exemple :</p> <ul> <li>Si la pile contient du haut vers le bas le triplet 1 ; 0 ; 3, on supprime le 0, car 1 et 3 sont tous les deux impairs.</li> <li>Si la pile contient du haut vers le bas le triplet 1 ; 0 ; 8, la pile reste inchang\u00e9e, car 1 et 8 n'ont pas la m\u00eame parit\u00e9.</li> </ul> <p>On parcourt la pile ainsi de haut en bas et on proc\u00e8de aux r\u00e9ductions.</p> <p>Arriv\u00e9 en bas de la pile, on recommence la r\u00e9duction en repartant du sommet de la pile jusqu'\u00e0 ce que la pile ne soit plus r\u00e9ductible.</p> <p>Une partie est \u00ab gagnante \u00bb lorsque la pile finale est r\u00e9duite \u00e0 deux \u00e9l\u00e9ments exactement.</p> <p>Voici un exemple d\u00e9taill\u00e9 de d\u00e9roulement d'une partie.</p> Premier parcours de la pileDeuxi\u00e8me parcoursTroisi\u00e8me parcoursQuatri\u00e8me parcours <p> </p> <ul> <li>La premi\u00e8re comparaison (7, 5 et 4) laisse la pile inchang\u00e9e.</li> <li>On retire le 4 lors de la deuxi\u00e8me it\u00e9ration.</li> <li>On retire le 8 lors de la troisi\u00e8me.</li> <li>Il ne reste plus que deux valeurs en bas de la pile (9 et 6) : on a fini le premier parcours.</li> </ul> <p> </p> <ul> <li>On recommence \u00e0 partir du haut de la pile : on retire le 5.</li> <li>Le triplet suivant (3, 9 et 6) n'entraine pas de suppression.</li> <li>Il ne reste plus que deux valeurs \u00e0 \u00e9tudier (9 et 6) : on a termin\u00e9 le deuxi\u00e8me parcours.</li> </ul> <p> </p> <ul> <li>On recommence en haut de la pile avec 7, 3 et 9 : on retire le 3.</li> <li>Il ne reste que le 9 et le 6 : on a termin\u00e9 le troisi\u00e8me parcours.</li> </ul> <p></p> <ul> <li>On recommence en haut de la pile avec 7, 9 et 6. La pile est inchang\u00e9e.</li> <li>La pile n'a pas \u00e9t\u00e9 modifi\u00e9e lors de ce parcours : la partie est termin\u00e9e et cette pile n'est pas gagnante.</li> </ul> <p>1.a. Donner les diff\u00e9rentes \u00e9tapes de r\u00e9duction de la pile suivante :</p> <p></p> R\u00e9ponse <p>Il s'agit d'une pile gagnante :</p> Premier parcoursSecond parcours <p> </p> <ul> <li>Lors de la premi\u00e8re comparaison, on retire le 9.</li> <li>Lors de la seconde comparaison, on retire le 7.</li> <li>Il ne reste plus que deux valeurs en bas de la pile (4 et 2) : on a fini le premier parcours.</li> </ul> <p> </p> <ul> <li>Lors de la premi\u00e8re comparaison, on retire le 8.</li> <li>Lors de la seconde comparaison, on retire le 4.</li> <li>Il ne reste plus que deux valeurs en bas de la pile (4 et 2) : la pile est gagnante.</li> </ul> <p>1.b. Parmi les piles propos\u00e9es ci-dessous, donner celle qui est gagnante.</p> Pile APile BPile C <p></p> <p></p> <p></p> R\u00e9ponse <p>Seule la pile B est gagnante. On fournit ci dessous les piles en d\u00e9but et fin de partie :</p> Pile APile BPile C <p> </p> <p> </p> <p> </p> <p>L'interface d'une pile est propos\u00e9e ci-dessous :</p> <ul> <li><code>pile_vide()</code> renvoie une pile vide, </li> <li><code>est_vide(p)</code> renvoie <code>True</code> si <code>p</code> est vide, <code>False</code> sinon, </li> <li><code>empile(p, element)</code> ajoute <code>element</code> au sommet de <code>p</code>, </li> <li><code>depile(p)</code> retire l'\u00e9l\u00e9ment au sommet de <code>p</code> et le renvoie, </li> <li><code>sommet(p)</code> renvoie l'\u00e9l\u00e9ment au sommet de <code>p</code> sans le retirer de <code>p</code>, </li> <li><code>taille(p):</code> renvoie le nombre d'\u00e9l\u00e9ments de <code>p</code>.</li> </ul> <p>Dans la suite de l'exercice on utilisera uniquement ces fonctions.</p> <p>2. La fonction <code>reduit_triplet_au_sommet</code> permet de supprimer l'\u00e9l\u00e9ment central des trois premiers \u00e9l\u00e9ments en partant du haut de la pile, si l'\u00e9l\u00e9ment du bas et du haut sont de m\u00eame parit\u00e9. Les \u00e9l\u00e9ments d\u00e9pil\u00e9s et non supprim\u00e9s sont replac\u00e9s dans le bon ordre dans la pile.</p> <p>Recopier et compl\u00e9ter sur la copie le code de la fonction <code>reduit_triplet_au_sommet</code> prenant une pile <code>p</code> en param\u00e8tre et la modifiant en place. Cette fonction renvoie le bool\u00e9en <code>est_reduit</code> indiquant si le triplet du sommet a \u00e9t\u00e9 r\u00e9duit ou non.</p> \ud83d\udc0d Script Python<pre><code>def reduit_triplet_au_sommet(p):\n    haut = depile(p)\n    milieu = depile(p)\n    bas = sommet(p)\n    est_reduit = ...\n    if haut % 2 != ...:\n        empile(p, ...)\n        ...\n    empile(p, ...)\n    return ...\n</code></pre> R\u00e9ponse \ud83d\udc0d Script Python<pre><code>def reduit_triplet_au_sommet(p):\n    haut = depile(p)\n    milieu = depile(p)\n    bas = sommet(p)\n    est_reduit = True\n    if haut % 2 != bas % 2:\n        empile(p, milieu)\n        est_reduit = False\n    empile(p, haut)\n    return est_reduit\n</code></pre> <p>3. On se propose maintenant d'\u00e9crire une fonction <code>parcourt_pile_en_reduisant</code> qui parcourt la pile du haut vers le bas en proc\u00e9dant aux r\u00e9ductions pour chaque triplet rencontr\u00e9 quand cela est possible.</p> <p>La pile est toujours modifi\u00e9e en place.</p> <p>La fonction <code>parcourt_pile_en_reduisant</code> renvoie un bool\u00e9en indiquant si la pile a \u00e9t\u00e9 r\u00e9duite \u00e0 au moins une reprise lors du parcours.</p> <p>3.a. Donner la taille minimale que doit avoir une pile pour \u00eatre r\u00e9ductible.</p> R\u00e9sultat <p>Si une pile a une taille de 2 ou moins, elle n'est pas r\u00e9ductible.</p> <p>Si une pile est r\u00e9ductible, alors sa taille est sup\u00e9rieure ou \u00e9gale \u00e0 3.</p> <p>3.b. Recopier et compl\u00e9ter sur la copie :</p> \ud83d\udc0d Script Python<pre><code>def parcourt_pile_en_reduisant(p):\n    q = pile_vide()\n    reduction_pendant_parcours = False\n    while taille(p) &gt;= 3:\n        if ...:\n            reduction_pendant_parcours = ...\n        e = depile(p)\n        empile(q, e)\n    while not est_vide(q):\n        ...\n        ...\n    return ...\n</code></pre> R\u00e9sultat \ud83d\udc0d Script Python<pre><code>def parcourt_pile_en_reduisant(p):\n    q = pile_vide()\n    reduction_pendant_parcours = False\n    while taille(p) &gt;= 3:\n        if reduit_triplet_au_sommet(p):\n            reduction_pendant_parcours = True\n        e = depile(p)\n        empile(q, e)\n    while not est_vide(q):\n        e = depile(q)\n        empile(p, e)\n    return reduction_pendant_parcours\n</code></pre> <p>4. Partant d'une pile d'entiers <code>p</code>, on propose ici d'impl\u00e9menter une fonction r\u00e9cursive <code>joue</code> jouant une partie compl\u00e8te sur la pile <code>p</code>.</p> <p>On effectue donc autant de parcours que n\u00e9cessaire.</p> <p>Une fois la pile parcourue de haut en bas, on effectue un nouveau parcours \u00e0 condition que le parcours pr\u00e9c\u00e9dent ait modifi\u00e9 la pile. Si \u00e0 l'inverse, la pile n'a pas \u00e9t\u00e9 modifi\u00e9e, on ne fait rien, car la partie est termin\u00e9e.</p> \ud83d\udc0d Script Python<pre><code>def joue(p):\n    if parcourt_pile_en_reduisant(...):\n        ...(...)\n</code></pre> R\u00e9sultat \ud83d\udc0d Script Python<pre><code>def joue(p):\n    if parcourt_pile_en_reduisant(p):\n        joue(p)\n</code></pre>"},{"location":"T7_Divers/conseils/","title":"Conseils de travail","text":""},{"location":"T7_Divers/conseils/#conditions-materielles","title":"Conditions mat\u00e9rielles","text":"<p>Il est conseill\u00e9 de travailler avec 3 espaces:</p> <ul> <li>l'\u00e9cran de l'ordinateur partitionn\u00e9 avec les 2 premiers espaces: ce site et un IDE (VS Code par exemple)</li> </ul> <p></p> <p>C'est en codant qu'on apprend \u00e0 coder</p> <p>Tous les exemples de code dans le cours doivent \u00eatre retap\u00e9s (r\u00e9sistez \u00e0 l'envie du copier-coller) dans votre \u00e9diteur, soit en fen\u00eatre de script, soit en console.</p> <p>Cela permet de :</p> <ul> <li>m\u00e9moriser la syntaxe ;</li> <li>v\u00e9rifier si le code propos\u00e9 ne contient pas d'erreur ;</li> </ul> <p>et le plus important :</p> <ul> <li>faire ses propres tests et modifications pour v\u00e9rifier sa bonne compr\u00e9hension. </li> </ul> <ul> <li>et un troisi\u00e8me espace essentiel : un petit cahier \u00e0 spirale et un stylo !</li> </ul> <p></p>"},{"location":"T7_Divers/conseils/#script-ou-console","title":"Script ou console ???","text":"<p>VS Code, comme la grande majorit\u00e9 des IDE Python, est compos\u00e9 de deux zones distinctes :</p> <ul> <li>la zone de script</li> <li>la console</li> </ul> <p></p> <p>La zone de script est asynchrone. Il ne se passera rien tant que vous n'aurez pas ex\u00e9cut\u00e9 le script (par CTRL+F5 par exemple). C'est donc l'endroit o\u00f9 on va r\u00e9diger son programme.</p> <p>La console est synchrone : elle r\u00e9pond d\u00e8s que vous appuyez sur la touche Entr\u00e9e. Elle sert donc aux petits tests rapides, ou bien tests post-ex\u00e9cution d'un code.</p> <p>Utilisation classique du couple script / console</p> <ol> <li>On \u00e9crit son code dans la zone de script</li> <li>On l'ex\u00e9cute.</li> <li>On interroge la console pour conna\u00eetre l'\u00e9tat des variables, pour utiliser les fonctions construites dans le script.</li> </ol> <p>Pour les extraits de code pr\u00e9sents sur ce site :</p> <ul> <li>tout le code qui est pr\u00e9c\u00e9d\u00e9 d'une num\u00e9rotation de ligne est \u00e0 \u00e9crire en zone de script.</li> </ul> <p>Exemple : \ud83d\udc0d Script Python<pre><code>def accueil(n):\n   for k in range(n):\n       print(\"bonjour\") \n</code></pre></p> <ul> <li>tout le code qui est pr\u00e9c\u00e9d\u00e9 <code>&gt;&gt;&gt;</code> est \u00e0 taper en console.</li> </ul> <p>Exemple : \ud83d\udc0d Script Python<pre><code>&gt;&gt;&gt; accueil(5)\n</code></pre></p>"},{"location":"T7_Divers/conseils/#dossiers-fichiers-et-versionning","title":"Dossiers, fichiers et versionning","text":"<p>Cette ann\u00e9e en NSI nous allons manipuler un certain nombre de fichiers. Il est important de les nommer et les classer de fa\u00e7on rigoureuse pour les retrouver rapidement et les partager.</p> <p>Conseils</p> <ul> <li>Utilisez des dossiers pour classer vos fichiers. Il n'y en a jamais assez.</li> <li>Prenez l'habitude de faire plusieurs sauvegardes de vos documents (sur le r\u00e9seau du lyc\u00e9e, sur le cloud d'Ecole directe, sur cl\u00e9 USB).</li> <li>\u00c9vitez dans les noms de fichiers et de dossiers les espaces (utilisez plut\u00f4t _ ) ainsi que les caract\u00e8res accentu\u00e9s et les caract\u00e8res sp\u00e9ciaux.</li> <li>Un nom de fichier doit \u00eatre parlant (un peu comme une variable en fait). On \u00e9vitera de nommer ses codes Python <code>python1.py</code>, <code>python2.py</code>, <code>python3.py</code>, etc. Mais plut\u00f4t <code>1NSI_T4_tri_selection.py</code> par exemple pour un exercice de programmation sur le tri par selection au th\u00e8me 4.</li> <li>Lorsqu'on travaille sur un projet ou un programme cons\u00e9quent, il peut \u00eatre utile de conserver des archives du travail \u00e0 plusieurs \u00e9tapes de l'\u00e9laboration, plut\u00f4t que de ne conserver que la derni\u00e8re version. \u00c0 cet effet on pourra num\u00e9roter : <code>1NSI_projet_morpion_v1.py</code>, puis <code>1NSI_projet_morpion_v2.py</code>, <code>1NSI_projet_morpion_v3.py</code>, etc.</li> </ul>"},{"location":"T7_Divers/conseils/#usage-du-clavier","title":"Usage du clavier","text":"<p>Utiliser le clavier est souvent bien plus pratique et surtout plus rapide qu'utiliser la souris. Encore faut-il apprendre \u00e0 l'apprivoiser...</p> <p>La s\u00e9lection au clavier</p> <p>Outre les touches <code>DEBUT</code> et <code>FIN</code> qui permettent d'atteindre rapidement le d\u00e9but ou la fin d'une ligne, les fl\u00e8ches directionelles servent \u00e9videmment \u00e0 se d\u00e9placer dans du texte. Mais combin\u00e9es:</p> <ul> <li>\u00e0 la touche <code>CTRL</code> : elles permettent de se d\u00e9placer de mot en mot;</li> <li>\u00e0 la touche <code>MAJ</code> : elles permettent de s\u00e9lectionner un caract\u00e8re;</li> <li>aux touches <code>MAJ</code> et <code>CTRL</code>: elles permettent de s\u00e9lectionner une mot.</li> </ul> <p>De m\u00eame, en se pla\u00e7ant en d\u00e9but d'une ligne et en combinant la touche <code>MAJ</code> et <code>FIN</code>, on s\u00e9lectionne la ligne enti\u00e8re.</p> <p>Les raccourcis clavier</p> <p>Il existe de tr\u00e8s nombreux raccourcis clavier qui permettent d'ex\u00e9cuter des t\u00e2ches courantes sans passer par les menus du logiciel. Certains sont (quasi-)universels, c'est-\u00e0-dire que ce sont les m\u00eames sur tous les logiciels, d'autres sont sp\u00e9cifiques \u00e0 chaque logiciel. Il est important d'en conna\u00eetre quelques-uns pour \u00eatre plus efficace.</p> Les universelsIDENavigateur Web <ul> <li>La triplette magique <code>CTRL+X</code>, <code>CTRL+C</code>, <code>CTRL+V</code> pour couper, copier, coller;</li> <li><code>CTRL+O</code> pour ouvrir un fichier</li> <li><code>CTRL+N</code> pour cr\u00e9er un nouveau document;</li> <li><code>CTRL+S</code> pour sauvegarder le document en cours;</li> <li><code>CTRL+MAJ+S</code> pour sauvegarder en pr\u00e9cisant le nom du fichier;</li> <li><code>CTRL+Z</code> pour annuler la derni\u00e8re action, <code>CTRL+Y</code> ou <code>CTRL+MAJ+Z</code> pour la r\u00e9tablir;</li> <li><code>CTRL+W</code> pour fermer un onglet;</li> <li><code>CTRL+Q</code> ou <code>ALT+F4</code> pour fermer le logiciel;</li> <li><code>CTRL+A</code> pour s\u00e9lectionner tout (All).</li> </ul> <p>\u00c0 chercher de suite lorsqu'on utilise un nouvel IDE, les raccourcis pour les actions suivantes (entre parenth\u00e8ses ceux de VScode):</p> <ul> <li>ex\u00e9cuter le code (<code>ctrl+F5</code>)</li> <li>commenter/d\u00e9commenter une ligne (<code>CTRL+:</code>)</li> </ul> <ul> <li><code>CTRL+T</code> pour ouvrir un nouvel onglet;</li> <li><code>CTRL+H</code> pour ouvrir l'historique;</li> <li>combiner <code>CTRL</code> + clic pour forcer l'ouverture d'un lien dans un nouvel onglet;</li> <li>combiner <code>MAJ</code> + clic pour forcer l'ouverture d'un lien dans une nouvelle fen\u00eatre;</li> </ul> sources <ul> <li>site de C\u00e9dric Gouygou</li> </ul>"},{"location":"T7_Divers/flask/","title":"Macro Syntax Error","text":"<p>File: <code>T7_Divers\\flask.md</code></p> <p>Line 426 in Markdown file: block 'contenu' defined twice Markdown<pre><code>{% block contenu %}\n</code></pre></p>"},{"location":"T7_Divers/orientation/","title":"Orientation Post-Bac","text":"<p>Quelles \u00e9tudes pour poursuivre dans l'informatique ?</p>"},{"location":"T7_Divers/orientation/#1-les-cursus-ingenieurs-publics-post-bac","title":"1. Les cursus ing\u00e9nieurs publics post-bac","text":""},{"location":"T7_Divers/orientation/#11-ecoles-du-reseau-geipi-polytech","title":"1.1 \u00c9coles du r\u00e9seau Geipi-Polytech","text":"<ul> <li>https://www.geipi-polytech.org/les-ecoles-du-concours-geipi-polytech#Informatique</li> <li>sur dossier ou concours (inscription via Parcoursup) \u00e0 la fin de l'ann\u00e9e de Terminale</li> </ul>"},{"location":"T7_Divers/orientation/#111-esir","title":"1.1.1 ESIR","text":"<ul> <li>https://esir.univ-rennes.fr/</li> </ul>"},{"location":"T7_Divers/orientation/#112-ensibs","title":"1.1.2 ENSIBS","text":"<ul> <li>https://www-ensibs.univ-ubs.fr/fr/formations/apres-le-bac/apres-le-bac-pei-ensibs.html</li> </ul>"},{"location":"T7_Divers/orientation/#12-ecoles-du-reseau-insa","title":"1.2 \u00c9coles du r\u00e9seau INSA","text":"<ul> <li>https://www.groupe-insa.fr/decouvrir/nos-ecoles</li> <li>sur dossier (inscription via Parcoursup)</li> </ul>"},{"location":"T7_Divers/orientation/#13-ecoles-du-reseau-advance","title":"1.3 \u00c9coles du r\u00e9seau Advance","text":"<ul> <li>https://concours-advance.fr/admission-post-bac/</li> <li>sur dossier ou concours (inscription via Parcoursup) \u00e0 la fin de l'ann\u00e9e de Terminale</li> </ul>"},{"location":"T7_Divers/orientation/#131-epita","title":"1.3.1 EPITA","text":"<ul> <li>https://www.epita.fr/</li> </ul>"},{"location":"T7_Divers/orientation/#2-le-cursus-info-de-luniversite-de-rennes-istic","title":"2. Le cursus Info de l'Universit\u00e9 de Rennes (ISTIC)","text":"<ul> <li>https://istic.univ-rennes.fr/</li> <li>via Parcoursup</li> </ul>"},{"location":"T7_Divers/orientation/#3-la-classe-preparatoire-mp2i-au-lycee-lesage","title":"3. La classe pr\u00e9paratoire MP2I au lyc\u00e9e Lesage","text":"<ul> <li>https://www.lycee-lesage.fr/Formation/mp2impi</li> <li>https://prepas-mp2i.fr/mp2i/</li> <li>via Parcoursup</li> </ul>"},{"location":"T7_Divers/orientation/#4-le-but-informatique","title":"4. Le BUT informatique","text":"<ul> <li>https://bretagne.iut.fr/</li> <li>Informatique sur les campus de : lannion, vannes, Laval et nantes</li> <li>via Parcoursup</li> </ul>"},{"location":"T7_Divers/orientation/#5-les-bts","title":"5. Les BTS","text":""},{"location":"T7_Divers/orientation/#51-le-bts-sn-ir-au-lycee-saint-joseph-lorient","title":"5.1 Le BTS SN-IR au lyc\u00e9e Saint Joseph (Lorient)","text":"<p>BTS Syst\u00e8mes num\u00e9riques option A informatique et r\u00e9seaux</p> <ul> <li>https://www.st-joseph-lorient.org/formations-et-metiers/enseignement-superieur/bts-systemes-numeriques-informatique-et-reseaux/</li> <li>via Parcoursup</li> </ul>"},{"location":"T7_Divers/orientation/#52-le-bts-sio-au-lycee-saint-sauveur-redon","title":"5.2 Le BTS SIO au lyc\u00e9e Saint Sauveur (Redon)","text":"<p>BTS Services informatiques aux organisations (SIO)</p> <ul> <li>https://www.btssio-redon.fr/</li> <li>via Parcoursup</li> </ul>"},{"location":"T7_Divers/orientation/#6-les-ecoles-dingenieurs-privees-post-bac-a-rennes","title":"6. Les \u00e9coles d'ing\u00e9nieurs priv\u00e9es post-bac \u00e0 Rennes","text":""},{"location":"T7_Divers/orientation/#51-ynov","title":"5.1 Ynov","text":"<ul> <li>https://www.ynov.com/</li> </ul>"},{"location":"T7_Divers/orientation/#62-epitech","title":"6.2 Epitech","text":"<ul> <li>https://www.epitech.eu/</li> </ul>"},{"location":"T7_Divers/orientation/#63-epsi","title":"6.3 Epsi","text":"<ul> <li>https://www.epsi.fr/</li> </ul>"},{"location":"T7_Divers/orientation/#64-isen","title":"6.4 ISEN","text":"<ul> <li>https://www.isen.fr/</li> </ul>"}]}