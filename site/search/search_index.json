{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Cahier de textes Terminale NSI \u2693\ufe0e S\u00e9ance du 01/09/2021 D\u00e9but du th\u00e8me 0 : Bases de Python - document : d\u00e9but S\u00e9ances pr\u00e9c\u00e9dentes Archives blabla blabla Programme Officiel \u2693\ufe0e Voir le programme sur le site Eduscol","title":"Accueil"},{"location":"index.html#cahier-de-textes-terminale-nsi","text":"S\u00e9ance du 01/09/2021 D\u00e9but du th\u00e8me 0 : Bases de Python - document : d\u00e9but S\u00e9ances pr\u00e9c\u00e9dentes Archives blabla blabla","title":"Cahier de textes Terminale NSI"},{"location":"index.html#programme-officiel","text":"Voir le programme sur le site Eduscol","title":"Programme Officiel"},{"location":"Divers/%C3%A0_venir.html","text":"","title":"\u00c0 venir"},{"location":"T1_Structures_de_donn%C3%A9es/sommaire.html","text":"Listes Piles Files Dictionnaires Arbres Graphes","title":"Sommaire"},{"location":"T1_Structures_de_donn%C3%A9es/1.1_Listes_Piles_Files/cours.html","text":"\u00e0 venir...","title":"Cours"},{"location":"T1_Structures_de_donn%C3%A9es/1.2_Dictionnaires/02_exercice.html","text":"Cr\u00e9ation d'une rainbow table \u2693\ufe0e Objectif : Cr\u00e9er une fonction inverse_md5() qui va chercher dans un dictionnaire (construit pr\u00e9alablement) la cl\u00e9 \u00e9ventuelle correspondant au hash donn\u00e9 en param\u00e8tre. Exemple : 1 2 >>> inverse_md5(0571749e2ac330a7455809c6b0e7af90) >>> 'sunshine' Aide : liste de 1000 mots de passe fr\u00e9quents : ici comment lire / convertir le contenu d'un fichier : ici comment calculer du MD5 en python : librairie hashlib (v\u00e9rifiez bien que \"vive la NSI\" donne bien e74fb2f94c052bbf16cea4a795145e35)","title":"Cr\u00e9ation d'une rainbow table"},{"location":"T1_Structures_de_donn%C3%A9es/1.2_Dictionnaires/02_exercice.html#creation-dune-rainbow-table","text":"Objectif : Cr\u00e9er une fonction inverse_md5() qui va chercher dans un dictionnaire (construit pr\u00e9alablement) la cl\u00e9 \u00e9ventuelle correspondant au hash donn\u00e9 en param\u00e8tre. Exemple : 1 2 >>> inverse_md5(0571749e2ac330a7455809c6b0e7af90) >>> 'sunshine' Aide : liste de 1000 mots de passe fr\u00e9quents : ici comment lire / convertir le contenu d'un fichier : ici comment calculer du MD5 en python : librairie hashlib (v\u00e9rifiez bien que \"vive la NSI\" donne bien e74fb2f94c052bbf16cea4a795145e35)","title":"Cr\u00e9ation d'une rainbow table"},{"location":"T1_Structures_de_donn%C3%A9es/1.2_Dictionnaires/cours.html","text":"\u00e0 venir...","title":"Cours"},{"location":"T1_Structures_de_donn%C3%A9es/1.3_Arbres/cours.html","text":"\u00e0 venir...","title":"Cours"},{"location":"T1_Structures_de_donn%C3%A9es/1.4_Graphes/cours.html","text":"\u00e0 venir...","title":"Cours"},{"location":"T2_Programmation/sommaire.html","text":"Programmation Orient\u00e9e Objet R\u00e9cursivit\u00e9 Calculabilit\u00e9 et D\u00e9cidabilit\u00e9 Pratiques de programmation","title":"Sommaire"},{"location":"T2_Programmation/2.1_Programmation_Orient%C3%A9e_Objet/4_Test_papier.html","text":"Test sur la Programmation Orient\u00e9e Objet \u2693\ufe0e Nom : \u2693\ufe0e Exercice 1 \u2693\ufe0e On consid\u00e8re l'extrait de code ci-dessous : 1 2 3 bart = Simpson ( \"fils\" , 12 ) homer = Simpson ( \"p\u00e8re\" , 41 ) homer . ronfle () Compl\u00e9ter les phrases ci-dessous : bart est une ............................ de la ............................ Simpson . C'est donc un ........................... de type ........................... \u00c0 la construction, l'........................... homer poss\u00e8de (au moins) deux ........................... qui valent \"p\u00e8re\" et 41 . Il poss\u00e8de aussi (au moins) une ........................... appel\u00e9e ........................... . Exercice 2 \u2693\ufe0e On s'int\u00e9resse aux joueurs du Top14 de rugby. Construire une classe Joueur o\u00f9 chaque instance contiendra les attributs nom , club et age . 1 Instancier le joueur Nans DUCUING, joueur de 27 ans \u00e9voluant \u00e0 l'UBB. 1 \u00c9crire une fonction prenant en param\u00e8tres deux joueurs de la classe Joueur et renvoyant le nom du joueur le plus \u00e2g\u00e9, ou celui des deux joueurs dans le cas d'une \u00e9galit\u00e9 d'\u00e2ge. 1","title":"Test sur la Programmation Orient\u00e9e Objet"},{"location":"T2_Programmation/2.1_Programmation_Orient%C3%A9e_Objet/4_Test_papier.html#test-sur-la-programmation-orientee-objet","text":"","title":"Test sur la Programmation Orient\u00e9e Objet"},{"location":"T2_Programmation/2.1_Programmation_Orient%C3%A9e_Objet/4_Test_papier.html#exercice-1","text":"On consid\u00e8re l'extrait de code ci-dessous : 1 2 3 bart = Simpson ( \"fils\" , 12 ) homer = Simpson ( \"p\u00e8re\" , 41 ) homer . ronfle () Compl\u00e9ter les phrases ci-dessous : bart est une ............................ de la ............................ Simpson . C'est donc un ........................... de type ........................... \u00c0 la construction, l'........................... homer poss\u00e8de (au moins) deux ........................... qui valent \"p\u00e8re\" et 41 . Il poss\u00e8de aussi (au moins) une ........................... appel\u00e9e ........................... .","title":"Exercice 1"},{"location":"T2_Programmation/2.1_Programmation_Orient%C3%A9e_Objet/4_Test_papier.html#exercice-2","text":"On s'int\u00e9resse aux joueurs du Top14 de rugby. Construire une classe Joueur o\u00f9 chaque instance contiendra les attributs nom , club et age . 1 Instancier le joueur Nans DUCUING, joueur de 27 ans \u00e9voluant \u00e0 l'UBB. 1 \u00c9crire une fonction prenant en param\u00e8tres deux joueurs de la classe Joueur et renvoyant le nom du joueur le plus \u00e2g\u00e9, ou celui des deux joueurs dans le cas d'une \u00e9galit\u00e9 d'\u00e2ge. 1","title":"Exercice 2"},{"location":"T2_Programmation/2.1_Programmation_Orient%C3%A9e_Objet/4_Test_papier_correction.html","text":"Test sur la Programmation Orient\u00e9e Objet \u2693\ufe0e Nom : \u2693\ufe0e Exercice 1 \u2693\ufe0e On consid\u00e8re l'extrait de code ci-dessous : 1 2 3 bart = Simpson ( \"fils\" , 12 ) homer = Simpson ( \"p\u00e8re\" , 41 ) homer . ronfle () Compl\u00e9ter les phrases ci-dessous : bart est une instance de la classe Simpson . C'est donc un objet de type Simpson . \u00c0 la construction, l' objet homer poss\u00e8de (au moins) deux attributs qui valent \"p\u00e8re\" et 41 . Il poss\u00e8de aussi (au moins) une m\u00e9thode appel\u00e9e ronfle() . Exercice 2 \u2693\ufe0e On s'int\u00e9resse aux joueurs du Top14 de rugby. Construire une classe Joueur o\u00f9 chaque instance contiendra les attributs nom , club et age . 1 2 3 4 5 class Joueur : def __init__ ( self , nom , club , age ): self . nom = nom self . club = club self . age = age Instancier le joueur Nans DUCUING, joueur de 27 ans \u00e9voluant \u00e0 l'UBB. 1 nducuing = Joueur ( \"Nans DUCUING\" , \"UBB\" , 27 ) \u00c9crire une fonction prenant en param\u00e8tres deux joueurs de la classe Joueur et renvoyant le nom du joueur le plus \u00e2g\u00e9, ou celui des deux joueurs dans le cas d'une \u00e9galit\u00e9 d'\u00e2ge. 1 2 3 4 5 def compare ( joueur1 , joueur2 ) : if joueur1 . age >= joueur2 . age : print ( joueur1 . nom ) if joueur2 . age >= joueur1 . age : print ( joueur2 . nom )","title":"Test sur la Programmation Orient\u00e9e Objet"},{"location":"T2_Programmation/2.1_Programmation_Orient%C3%A9e_Objet/4_Test_papier_correction.html#test-sur-la-programmation-orientee-objet","text":"","title":"Test sur la Programmation Orient\u00e9e Objet"},{"location":"T2_Programmation/2.1_Programmation_Orient%C3%A9e_Objet/4_Test_papier_correction.html#exercice-1","text":"On consid\u00e8re l'extrait de code ci-dessous : 1 2 3 bart = Simpson ( \"fils\" , 12 ) homer = Simpson ( \"p\u00e8re\" , 41 ) homer . ronfle () Compl\u00e9ter les phrases ci-dessous : bart est une instance de la classe Simpson . C'est donc un objet de type Simpson . \u00c0 la construction, l' objet homer poss\u00e8de (au moins) deux attributs qui valent \"p\u00e8re\" et 41 . Il poss\u00e8de aussi (au moins) une m\u00e9thode appel\u00e9e ronfle() .","title":"Exercice 1"},{"location":"T2_Programmation/2.1_Programmation_Orient%C3%A9e_Objet/4_Test_papier_correction.html#exercice-2","text":"On s'int\u00e9resse aux joueurs du Top14 de rugby. Construire une classe Joueur o\u00f9 chaque instance contiendra les attributs nom , club et age . 1 2 3 4 5 class Joueur : def __init__ ( self , nom , club , age ): self . nom = nom self . club = club self . age = age Instancier le joueur Nans DUCUING, joueur de 27 ans \u00e9voluant \u00e0 l'UBB. 1 nducuing = Joueur ( \"Nans DUCUING\" , \"UBB\" , 27 ) \u00c9crire une fonction prenant en param\u00e8tres deux joueurs de la classe Joueur et renvoyant le nom du joueur le plus \u00e2g\u00e9, ou celui des deux joueurs dans le cas d'une \u00e9galit\u00e9 d'\u00e2ge. 1 2 3 4 5 def compare ( joueur1 , joueur2 ) : if joueur1 . age >= joueur2 . age : print ( joueur1 . nom ) if joueur2 . age >= joueur1 . age : print ( joueur2 . nom )","title":"Exercice 2"},{"location":"T2_Programmation/2.1_Programmation_Orient%C3%A9e_Objet/cours.html","text":"\u00e0 venir...","title":"Cours"},{"location":"T2_Programmation/2.2_R%C3%A9cursivit%C3%A9/cours.html","text":"\u00e0 venir...","title":"Cours"},{"location":"T2_Programmation/2.3_Calculabilit%C3%A9_D%C3%A9cidabilit%C3%A9/cours.html","text":"D\u00e9cidabilit\u00e9, calculabilit\u00e9 \u2693\ufe0e 1. Un programme comme param\u00e8tre d'un programme \u2693\ufe0e Les codes que nous manipulons ressemblent souvent \u00e0 cela : 1 2 3 def accueil ( n ): for k in range ( n ): print ( \"bonjour\" ) Le programme s'appelle accueil , et pour fonctionner il a besoin d'un param\u00e8tre, qui sera ici un nombre entier n . Voici comment nous pouvons repr\u00e9senter notre machine accueil , son param\u00e8tre d'entr\u00e9e (5) et sa sortie (les 5 \u00abbonjour\u00bb) Maintenant, enregistrons le code suivant dans un fichier test.py : 1 2 3 4 5 def accueil ( n ): for k in range ( n ): print ( \"bonjour\" ) accueil ( 5 ) Pour ex\u00e9cuter ce code, nous devons taper dans un terminal l'instruction suivante : python3 test.py , ce qui donnera Le programme utilis\u00e9 est alors python3 , qui prend comme param\u00e8tre le programme test.py . Ce param\u00e8tre test.py est un ensemble de caract\u00e8res qui contient les instructions que le programme python3 va interpr\u00e9ter. L'illustration correspondante sera donc : Mais nous pouvons aller encore plus loin : l'instruction python3 test.py est tap\u00e9e dans mon Terminal Linux, qui lui-m\u00eame est un programme appel\u00e9 Terminal . Et donc : Conclusion : Il n'y a donc aucun obstacle \u00e0 consid\u00e9rer un programme comme une simple donn\u00e9e, pouvant \u00eatre re\u00e7ue en param\u00e8tre par un autre programme. (voire par lui-m\u00eame !) \u00c0 titre anecdotique, on pourra ex\u00e9cuter avec int\u00e9r\u00eat cette instruction Python : a='a=%r;print(a%%a)';print(a%a) Ce type de code (magique !) existe dans tous les langages et s'appelle un quine . 2. Mon programme va-t-il s'arr\u00eater ? \u2693\ufe0e 2.1 Un exemple \u2693\ufe0e Consid\u00e9rons le programme suivant : 1 2 3 4 5 def countdown ( n ): while n != 0 : print ( n ) n = n - 1 print ( \"fini\" ) En l'observant attentivement, je peux pr\u00e9voir que countdown(10) affichera les nombres de 10 \u00e0 1 avant d'\u00e9crire \"fini\". Puis le programme s'arr\u00eatera. Mais que va provoquer countdown(10.8) ? Comme la variable n ne sera jamais \u00e9gale \u00e0 0, le programme va rentrer dans une boucle infinie, il ne s'arr\u00eatera jamais. Mauvaise nouvelle. J'ai pu pr\u00e9voir ceci en regardant attentivement le code de mon programme. J'ai \u00abremarqu\u00e9\u00bb qu'une variable n non enti\u00e8re provoquerait une boucle infinie. Question : Est-ce qu'un programme d' analyse de programmes aurait pu faire cela \u00e0 ma place ? 2.2 Une machine pour pr\u00e9dire l'arr\u00eat ou non d'un programme. \u2693\ufe0e Apr\u00e8s tout, un programme est une suite d'instructions (le code-source), et peut donc \u00eatre, comme on l'a vu, le param\u00e8tre d'entr\u00e9e d'un autre programme qui l'analyserait. Un tel programme (appelons-le halt ) prendrait en entr\u00e9es : - un param\u00e8tre prog (le code-source du programme) - un param\u00e8tre x , qui serait le param\u00e8tre d'entr\u00e9e de prog . L'instruction halt(prog, x) renverrait True si prog(x) s'arr\u00eate, et False si prog(x) ne s'arr\u00eate pas. Exemple : - halt(countdown, 10) renverrait True . - halt(countdown, 10.8) renverrait False . Tentative d'\u00e9criture de halt en Python : 1 2 3 4 5 def halt ( prog , x ): if \"prog(x) s'arr\u00eate\" : # ce code n'est pas encore abouti ... return True else : return False Nous en resterons l\u00e0 pour l'instant dans l'\u00e9criture de ce programme. Nous allons nous en servir pour construire d'autres programmes. 2.3 Amusons-nous avec ce programme halt . \u2693\ufe0e Consid\u00e9rons le programme : 1 2 3 4 5 6 def sym ( prog ): if halt ( prog , prog ) == True : while True : pass else : return 1 On peut remarquer que le programme halt est appel\u00e9 avec comme param\u00e8tres prog, prog , ce qui signifie que prog se prend lui-m\u00eame en param\u00e8tre. On rappelle que ce n'est pas choquant, un code-source \u00e9tant une donn\u00e9e comme une autre. Ce programme sym re\u00e7oit donc en param\u00e8tre un programme prog , et : - va rentrer dans une boucle infinie si prog(prog) s'arr\u00eate. - va renvoyer 1 si prog(prog) ne s'arr\u00eate pas. 2.4 Un l\u00e9ger probl\u00e8me ... \u2693\ufe0e Puisqu'un programme peut prendre en param\u00e8tre son propre code-source, que donnerait l'appel \u00e0 sym(sym) ? Deux cas peuvent se pr\u00e9senter, suivant si halt(sym, sym) renvoie True ou False . cas n\u00b01 : halt(sym, sym) renvoie True , ce qui signifie que sym(sym) devrait s'arr\u00eater. Mais dans ce cas-l\u00e0, l'ex\u00e9cution de sym(sym) rentre dans une boucle infinie. C'est une contradiction. cas n\u00b02 : halt(sym, sym) renvoie False , ce qui signifie que sym(sym) rentre dans une boucle infinie. Mais dans ce cas-l\u00e0, l'ex\u00e9cution de sym(sym) se termine correctement et renvoie la valeur 1. C'est une contradiction. 2.5 Conclusion \u2693\ufe0e Nous venons de prouver que notre programme halt , cens\u00e9 pr\u00e9dire si un programme prog peut s'arr\u00eater sur une entr\u00e9e x , NE PEUT PAS EXISTER . Ce r\u00e9sultat th\u00e9orique, d'une importance cruciale, s'appelle le th\u00e9or\u00e8me de l'arr\u00eat . Ce r\u00e9sultat a \u00e9t\u00e9 d\u00e9montr\u00e9 par Alan Turing en 1936, dans un article intitul\u00e9 \u00abOn computable numbers, with an application to the Entscheidungsproblem\u00bb . Pour sa d\u00e9monstration, il pr\u00e9sente un mod\u00e8le th\u00e9orique de machine capable d'ex\u00e9cuter des instructions basiques sur un ruban infini, les machines de Turing . \u00c0 la m\u00eame \u00e9poque, le math\u00e9maticien Alonzo Church d\u00e9montre lui aussi ce th\u00e9or\u00e8me de l'arr\u00eat, mais par un moyen totalement diff\u00e9rent, en inventant le lambda-calcul . Tous deux mettent ainsi un terme au r\u00eave du math\u00e9maticien allemand David Hilbert , qui avait en 1928 pos\u00e9 la question de l'existence d'un algorithme capable de r\u00e9pondre \u00aboui\u00bb ou \u00abnon\u00bb \u00e0 n'importe quel \u00e9nonc\u00e9 math\u00e9matique pos\u00e9 sous forme d\u00e9cisionnelle (\u00abun triangle rectangle peut-il \u00eatre isoc\u00e8le ?\u00bb, \u00abexiste-t-il un nombre premier pair ?\u00bb) Cette question, appel\u00e9e \u00abprobl\u00e8me de la d\u00e9cision\u00bb, ou Entscheidungsproblem en allemand, est d\u00e9finitivement tranch\u00e9e par le probl\u00e8me de l'arr\u00eat : un tel th\u00e9or\u00e8me ne peut pas exister, puisque par exemple, aucun algorithme ne peut r\u00e9pondre \u00aboui\u00bb ou \u00abnon\u00bb \u00e0 la question \u00abce programme va-t-il s'arr\u00eater ?\u00bb. Le th\u00e9or\u00e8me de l'arr\u00eat sera \u00e9tendu plus tard par le th\u00e9or\u00e8me de Rice . Ce r\u00e9sultat d\u00e9montre que toutes les questions s\u00e9mantiques (non \u00e9videntes) au sujet d'un programme sont ind\u00e9cidables : - \u00abce programme va-t-il s'arr\u00eater ?\u00bb (le th\u00e9or\u00e8me de l'arr\u00eat) - \u00abce programme va renvoyer la valeur 12 ?\u00bb - \u00abce programme va-t-il un jour renvoyer un message d'erreur ?\u00bb - ... Rice d\u00e9montre que toutes ces questions peuvent \u00eatre ramen\u00e9es (on dit r\u00e9duites ) au th\u00e9or\u00e8me de l'arr\u00eat, qui est ind\u00e9cidable. 2. Calculabilit\u00e9 \u2693\ufe0e Le probl\u00e8me de l'arr\u00eat est dit ind\u00e9cidable car la fonction qui le r\u00e9sout (notre brave programme halt ) n'est pas calculable . 2.1 Notion de calculabilit\u00e9 \u2693\ufe0e Qu'y a-t-il derri\u00e8re cette notion de calculabilit\u00e9 ? Cette notion, qui jette un pont entre les math\u00e9matiques (la vision de Church, pour sch\u00e9matiser) et l'informatique (la vision de Turing) n'est pas simple \u00e0 d\u00e9finir ! Le calcul math\u00e9matique peut se r\u00e9duire \u00e0 une succession d'op\u00e9rations \u00e9l\u00e9mentaires (songez \u00e0 la multiplication enti\u00e8re comme une s\u00e9rie d'additions). Les nombres calculables sont les nombres qui sont g\u00e9n\u00e9rables en un nombre fini d'op\u00e9rations \u00e9l\u00e9mentaires. De la m\u00eame mani\u00e8re, une fonction math\u00e9matique sera dite calculable s'il existe une suite finie d'op\u00e9rations \u00e9l\u00e9mentaires permettant de passer d'un nombre x \u00e0 son image f(x). On retrouve cette notion d'op\u00e9rations \u00e9l\u00e9mentaires dans les machines de Turing . Cette machine (th\u00e9orique) permet de simuler tout ce qu'un programme informatique (une suite d'instructions) est capable d'ex\u00e9cuter. Un algorithme peut se r\u00e9duire \u00e0 une suite d'op\u00e9rations \u00e9lementaires, comme une fonction math\u00e9matique peut se r\u00e9duire \u00e0 une suite de calculs. D\u00e8s lors, on pourra consid\u00e9rer un algorithme comme une fonction. Turing a d\u00e9montr\u00e9 que l'ensemble des fonctions calculables, au sens de Church, \u00e9tait \u00e9quivalent \u00e0 l'ensemble des fonctions programmables sur sa machine. Certaines fonctions peuvent \u00eatre calculables, ou ne pas l'\u00eatre : c'est notamment le cas de notre fonction du probl\u00e8me de l'arr\u00eat. 2.2 Langages Turing-complets \u2693\ufe0e Ce r\u00e9sultat ne d\u00e9pend pas du langage utilis\u00e9 : le fait que nous ayons utilis\u00e9 Python au paragraphe pr\u00e9c\u00e9dent n'a pas d'influence sur notre d\u00e9monstration. Nous savons depuis les machines de Turing que tous nos langages de programmation sont Turing-complets : ils sont tous capables de faire la m\u00eame chose (avec plus ou moins de facilit\u00e9 !). Scratch, C, Python, Java, Basic, Haskell, Brainfuck... tous ces langages sont th\u00e9oriquement \u00e9quivalents : la calculabilit\u00e9 ne d\u00e9pend pas du langage utilis\u00e9 . 2.3 (HP) Calculable, oui, mais facilement ? -> 1 million de $ \u00e0 gagner ci-dessous. \u2693\ufe0e L'\u00e9tude de la calculabilit\u00e9 d'une fonction (\u00e0 prendre au sens le plus large, c'est-\u00e0-dire un algorithme) ne se limite pas \u00e0 un choix binaire : \u00abcalculable\u00bb vs \u00abnon calculable\u00bb. Parmi les fonctions calculables, certaines peuvent l'\u00eatre rapidement, et d'autre beaucoup moins. On retrouve alors la notion bien connue de complexit\u00e9 algorithmique, qui permet de classifier les algorithmes suivant leur d\u00e9pendance \u00e0 la taille de leurs donn\u00e9es d'entr\u00e9e (voir le cours de Premi\u00e8re). On peut regrouper les probl\u00e8mes suivant la complexit\u00e9 de l'algorithme qui permet de les r\u00e9soudre. 2.3.1 la classe P \u2693\ufe0e \u25ee On dira que sont de \u00abclasse P\u00bb tous les probl\u00e8mes dont l'algorithme de recherche de solution est de complexit\u00e9 polynomiale . Que retrouve-t-on dans la classe P ? Tous les probl\u00e8mes dont la solution est un algorithme de complexit\u00e9 lin\u00e9raire, quadratique, logarithmique... Tout mais surtout pas un algorithme de complexit\u00e9 exponentielle. Pour le r\u00e9sumer tr\u00e8s grossi\u00e8rement, un probl\u00e8me de classe P est un probl\u00e8me que l'on sait r\u00e9soudre en temps raisonnable (m\u00eame grand). - le probl\u00e8me du tri d'une liste est dans P. - le probl\u00e8me de la factorisation d'un grand nombre (sur lequel repose la s\u00e9curit\u00e9 du RSA) n'est a priori pas dans P. - le probl\u00e8me de la primalit\u00e9 (\u00abce nombre est-il premier ?\u00bb) a longtemps \u00e9t\u00e9 consid\u00e9r\u00e9 comme n'\u00e9tant pas dans P... jusqu'en 2002, o\u00f9 a \u00e9t\u00e9 d\u00e9couvert le test de primalit\u00e9 AKS , de complexit\u00e9 polynomiale (d'ordre 6). Ce test est donc maintenant dans P. 2.3.2 la classe NP \u2693\ufe0e \u25ee On dira que sont de \u00abclasse NP\u00bb tous les probl\u00e8mes dont l'algorithme de recherche de solution est Non-d\u00e9terministe Polynomial . Warning : NP ne signifie pas Non-Polynomial !!! Que veut dire la formulation \u00abnon-d\u00e9terministe polynomial\u00bb ? Cela fait r\u00e9f\u00e9rence \u00e0 ce que serait capable de faire une machine de Turing (donc, n'importe quel ordinateur) travaillant de mani\u00e8re non-d\u00e9terministe , donc capable d'explorer simultan\u00e9ment plusieurs solutions possibles. On peut imaginer un arbre dont le parcours se ferait simultan\u00e9ment dans toutes les branches, et non en largeur ou profondeur comme nous l'avons vu. Sur une machine non-d\u00e9terministe, si la solution \u00e0 un probl\u00e8me se trouve en temps polynomial, alors ce probl\u00e8me appartient \u00e0 la classe NP. Tr\u00e8s bien, mais les machines non-d\u00e9terministes... cela n'existe pas r\u00e9ellement. Comment caract\u00e9riser concr\u00e8tement cette classe de probl\u00e8me ? Si la solution peut \u00eatre trouv\u00e9e de mani\u00e8re polynomiale par une machine non-d\u00e9terministe, une machine d\u00e9terministe qui aurait de la chance en partant directement vers la bonne solution la trouverait elle aussi de mani\u00e8re polynomiale. On simplifie souvent cela en disant \u00abla v\u00e9rification de la solution est polynomiale\u00bb. Cela nous donnne cette d\u00e9finition plus accessible de la classe NP : \u25ee On dira que sont de \u00abclasse NP\u00bb tous les probl\u00e8mes dont l'algorithme de v\u00e9rification de solution est polynomial . Pour le r\u00e9sumer tr\u00e8s grossi\u00e8rement, un probl\u00e8me de classe NP est un probl\u00e8me dont on sait v\u00e9rifier facilement si une solution propos\u00e9e marche ou pas : la r\u00e9solution d'un sudoku est dans NP : si quelqu'un vous montre un sudoku rempli, vous pouvez tr\u00e8s rapidement lui dire si sa solution est valable ou pas. la factorisation d'un nombre est dans NP : si quelqu'un vous propose 4567*6037 comme d\u00e9composition de 27570979, vous pouvez tr\u00e8s rapidement lui dire s'il a raison. (oui.) le probl\u00e8me du sac \u00e0 dos (en version d\u00e9cisionnelle) est dans NP. Une proposition de butin peut facilement \u00eatre examin\u00e9e pour savoir si elle est possible ou non. le probl\u00e8me du voyageur de commerce (ou TSP : Traveller Sales Problem), en version d\u00e9cisionnelle, est dans NP. Si on vous propose un trajet, vous pouvez facilement v\u00e9rifier que sa longueur est (par exemple) inf\u00e9rieure \u00e0 150 km. Malheureusement, aucun de ces probl\u00e8mes cit\u00e9s n'a (\u00e0 ce jour) d'algorithme de r\u00e9solution meilleur qu'exponentiel... 2.2.3 P = NP, ou pas ? \u2693\ufe0e Tous les probl\u00e8mes de P ont une solution qui peut \u00eatre trouv\u00e9e de mani\u00e8re polynomiale. Donc \u00e9videmment, la v\u00e9rification de cette solution est aussi polynomiale. Donc tous les probl\u00e8mes de P sont dans NP. On dit que P est inclus dans NP, que l'on \u00e9crit P \u2282 NP . Voici une capture d'\u00e9cran de l'excellente vid\u00e9o Nos algorithmes pourraient-ils \u00eatre BEAUCOUP plus rapides ? (P=NP ?) de l'excellent David Louapre : On y retrouve (en vert) la classe P, qui contient les algorithmes de tri. En blanc, la classe NP, qui contient les probl\u00e8mes de factorisation, du sudoku, du sac-\u00e0-dos... Si quelqu'un trouve un jour un algorithme de polynomial de factorisation, alors le probl\u00e8me de factorisation viendra se ranger dans P. (accessoirement, le RSA sera sans doute d\u00e9truit par cette d\u00e9couverte, sauf si l'ordre de complexit\u00e9 est tr\u00e8s grand) Mais certains de ces probl\u00e8mes dans NP ont une propri\u00e9t\u00e9 remarquable : la r\u00e9solution polynomiale d'un seul d'entre eux ferait ramener la totalit\u00e9 des probl\u00e8mes NP dans P. On dit que ces probl\u00e8mes sont NP-complets (marqu\u00e9s en rouge ci-dessus) Concr\u00e8tement, si vous trouvez une solution polynomiale de r\u00e9solution du sudoku, vous entrainez avec lui dans P tous les autres probl\u00e8mes NP, et vous aurez ainsi prouv\u00e9 que P = NP. Accessoirement, vous gagnerez aussi le prix d' un million de dollars promis par la fondation Clay \u00e0 qui tranchera cette question... (prix que vous partagerez bien \u00e9videmment avec votre professeur de NSI) Actuellement, \u00e0 part le grand Donald Knuth , la plupart des chercheurs qui travaillent \u00e0 ce probl\u00e8me sont plut\u00f4t pessimistes, et pensent que P \u2260 NP. Cela signifie qu'ils pensent que certains probl\u00e8mes ne pourront jamais avoir une solution polynomiale. Alors, P = NP ou P \u2260 NP ? R\u00e9ponse peut-\u00eatre un jour... Bibliographie \u2693\ufe0e Num\u00e9rique et Sciences Informatiques, Terminale, T. BALABONSKI, S. CONCHON, J.-C. FILLIATRE, K. NGUYEN, \u00e9ditions ELLIPSES. Pr\u00e9pabac NSI, Terminale, G. CONNAN, V. PETROV, G. ROZSAVOLGYI, L. SIGNAC, \u00e9ditions HATIER. https://interstices.info/pnp-elementaire-ma-chere-watson/ https://interstices.info/alan-turing-du-calculable-a-lindecidable/ https://www.labri.fr/perso/betrema/MC/MC8.html https://scienceetonnante.com/2020/07/17/est-ce-que-p-np/","title":"Cours"},{"location":"T2_Programmation/2.3_Calculabilit%C3%A9_D%C3%A9cidabilit%C3%A9/cours.html#decidabilite-calculabilite","text":"","title":"D\u00e9cidabilit\u00e9, calculabilit\u00e9"},{"location":"T2_Programmation/2.3_Calculabilit%C3%A9_D%C3%A9cidabilit%C3%A9/cours.html#1-un-programme-comme-parametre-dun-programme","text":"Les codes que nous manipulons ressemblent souvent \u00e0 cela : 1 2 3 def accueil ( n ): for k in range ( n ): print ( \"bonjour\" ) Le programme s'appelle accueil , et pour fonctionner il a besoin d'un param\u00e8tre, qui sera ici un nombre entier n . Voici comment nous pouvons repr\u00e9senter notre machine accueil , son param\u00e8tre d'entr\u00e9e (5) et sa sortie (les 5 \u00abbonjour\u00bb) Maintenant, enregistrons le code suivant dans un fichier test.py : 1 2 3 4 5 def accueil ( n ): for k in range ( n ): print ( \"bonjour\" ) accueil ( 5 ) Pour ex\u00e9cuter ce code, nous devons taper dans un terminal l'instruction suivante : python3 test.py , ce qui donnera Le programme utilis\u00e9 est alors python3 , qui prend comme param\u00e8tre le programme test.py . Ce param\u00e8tre test.py est un ensemble de caract\u00e8res qui contient les instructions que le programme python3 va interpr\u00e9ter. L'illustration correspondante sera donc : Mais nous pouvons aller encore plus loin : l'instruction python3 test.py est tap\u00e9e dans mon Terminal Linux, qui lui-m\u00eame est un programme appel\u00e9 Terminal . Et donc : Conclusion : Il n'y a donc aucun obstacle \u00e0 consid\u00e9rer un programme comme une simple donn\u00e9e, pouvant \u00eatre re\u00e7ue en param\u00e8tre par un autre programme. (voire par lui-m\u00eame !) \u00c0 titre anecdotique, on pourra ex\u00e9cuter avec int\u00e9r\u00eat cette instruction Python : a='a=%r;print(a%%a)';print(a%a) Ce type de code (magique !) existe dans tous les langages et s'appelle un quine .","title":"1. Un programme comme param\u00e8tre d'un programme"},{"location":"T2_Programmation/2.3_Calculabilit%C3%A9_D%C3%A9cidabilit%C3%A9/cours.html#2-mon-programme-va-t-il-sarreter","text":"","title":"2. Mon programme va-t-il s'arr\u00eater ?"},{"location":"T2_Programmation/2.3_Calculabilit%C3%A9_D%C3%A9cidabilit%C3%A9/cours.html#21-un-exemple","text":"Consid\u00e9rons le programme suivant : 1 2 3 4 5 def countdown ( n ): while n != 0 : print ( n ) n = n - 1 print ( \"fini\" ) En l'observant attentivement, je peux pr\u00e9voir que countdown(10) affichera les nombres de 10 \u00e0 1 avant d'\u00e9crire \"fini\". Puis le programme s'arr\u00eatera. Mais que va provoquer countdown(10.8) ? Comme la variable n ne sera jamais \u00e9gale \u00e0 0, le programme va rentrer dans une boucle infinie, il ne s'arr\u00eatera jamais. Mauvaise nouvelle. J'ai pu pr\u00e9voir ceci en regardant attentivement le code de mon programme. J'ai \u00abremarqu\u00e9\u00bb qu'une variable n non enti\u00e8re provoquerait une boucle infinie. Question : Est-ce qu'un programme d' analyse de programmes aurait pu faire cela \u00e0 ma place ?","title":"2.1 Un exemple"},{"location":"T2_Programmation/2.3_Calculabilit%C3%A9_D%C3%A9cidabilit%C3%A9/cours.html#22-une-machine-pour-predire-larret-ou-non-dun-programme","text":"Apr\u00e8s tout, un programme est une suite d'instructions (le code-source), et peut donc \u00eatre, comme on l'a vu, le param\u00e8tre d'entr\u00e9e d'un autre programme qui l'analyserait. Un tel programme (appelons-le halt ) prendrait en entr\u00e9es : - un param\u00e8tre prog (le code-source du programme) - un param\u00e8tre x , qui serait le param\u00e8tre d'entr\u00e9e de prog . L'instruction halt(prog, x) renverrait True si prog(x) s'arr\u00eate, et False si prog(x) ne s'arr\u00eate pas. Exemple : - halt(countdown, 10) renverrait True . - halt(countdown, 10.8) renverrait False . Tentative d'\u00e9criture de halt en Python : 1 2 3 4 5 def halt ( prog , x ): if \"prog(x) s'arr\u00eate\" : # ce code n'est pas encore abouti ... return True else : return False Nous en resterons l\u00e0 pour l'instant dans l'\u00e9criture de ce programme. Nous allons nous en servir pour construire d'autres programmes.","title":"2.2 Une machine pour pr\u00e9dire l'arr\u00eat ou non d'un programme."},{"location":"T2_Programmation/2.3_Calculabilit%C3%A9_D%C3%A9cidabilit%C3%A9/cours.html#23-amusons-nous-avec-ce-programme-halt","text":"Consid\u00e9rons le programme : 1 2 3 4 5 6 def sym ( prog ): if halt ( prog , prog ) == True : while True : pass else : return 1 On peut remarquer que le programme halt est appel\u00e9 avec comme param\u00e8tres prog, prog , ce qui signifie que prog se prend lui-m\u00eame en param\u00e8tre. On rappelle que ce n'est pas choquant, un code-source \u00e9tant une donn\u00e9e comme une autre. Ce programme sym re\u00e7oit donc en param\u00e8tre un programme prog , et : - va rentrer dans une boucle infinie si prog(prog) s'arr\u00eate. - va renvoyer 1 si prog(prog) ne s'arr\u00eate pas.","title":"2.3 Amusons-nous avec ce programme halt."},{"location":"T2_Programmation/2.3_Calculabilit%C3%A9_D%C3%A9cidabilit%C3%A9/cours.html#24-un-leger-probleme","text":"Puisqu'un programme peut prendre en param\u00e8tre son propre code-source, que donnerait l'appel \u00e0 sym(sym) ? Deux cas peuvent se pr\u00e9senter, suivant si halt(sym, sym) renvoie True ou False . cas n\u00b01 : halt(sym, sym) renvoie True , ce qui signifie que sym(sym) devrait s'arr\u00eater. Mais dans ce cas-l\u00e0, l'ex\u00e9cution de sym(sym) rentre dans une boucle infinie. C'est une contradiction. cas n\u00b02 : halt(sym, sym) renvoie False , ce qui signifie que sym(sym) rentre dans une boucle infinie. Mais dans ce cas-l\u00e0, l'ex\u00e9cution de sym(sym) se termine correctement et renvoie la valeur 1. C'est une contradiction.","title":"2.4 Un l\u00e9ger probl\u00e8me ..."},{"location":"T2_Programmation/2.3_Calculabilit%C3%A9_D%C3%A9cidabilit%C3%A9/cours.html#25-conclusion","text":"Nous venons de prouver que notre programme halt , cens\u00e9 pr\u00e9dire si un programme prog peut s'arr\u00eater sur une entr\u00e9e x , NE PEUT PAS EXISTER . Ce r\u00e9sultat th\u00e9orique, d'une importance cruciale, s'appelle le th\u00e9or\u00e8me de l'arr\u00eat . Ce r\u00e9sultat a \u00e9t\u00e9 d\u00e9montr\u00e9 par Alan Turing en 1936, dans un article intitul\u00e9 \u00abOn computable numbers, with an application to the Entscheidungsproblem\u00bb . Pour sa d\u00e9monstration, il pr\u00e9sente un mod\u00e8le th\u00e9orique de machine capable d'ex\u00e9cuter des instructions basiques sur un ruban infini, les machines de Turing . \u00c0 la m\u00eame \u00e9poque, le math\u00e9maticien Alonzo Church d\u00e9montre lui aussi ce th\u00e9or\u00e8me de l'arr\u00eat, mais par un moyen totalement diff\u00e9rent, en inventant le lambda-calcul . Tous deux mettent ainsi un terme au r\u00eave du math\u00e9maticien allemand David Hilbert , qui avait en 1928 pos\u00e9 la question de l'existence d'un algorithme capable de r\u00e9pondre \u00aboui\u00bb ou \u00abnon\u00bb \u00e0 n'importe quel \u00e9nonc\u00e9 math\u00e9matique pos\u00e9 sous forme d\u00e9cisionnelle (\u00abun triangle rectangle peut-il \u00eatre isoc\u00e8le ?\u00bb, \u00abexiste-t-il un nombre premier pair ?\u00bb) Cette question, appel\u00e9e \u00abprobl\u00e8me de la d\u00e9cision\u00bb, ou Entscheidungsproblem en allemand, est d\u00e9finitivement tranch\u00e9e par le probl\u00e8me de l'arr\u00eat : un tel th\u00e9or\u00e8me ne peut pas exister, puisque par exemple, aucun algorithme ne peut r\u00e9pondre \u00aboui\u00bb ou \u00abnon\u00bb \u00e0 la question \u00abce programme va-t-il s'arr\u00eater ?\u00bb. Le th\u00e9or\u00e8me de l'arr\u00eat sera \u00e9tendu plus tard par le th\u00e9or\u00e8me de Rice . Ce r\u00e9sultat d\u00e9montre que toutes les questions s\u00e9mantiques (non \u00e9videntes) au sujet d'un programme sont ind\u00e9cidables : - \u00abce programme va-t-il s'arr\u00eater ?\u00bb (le th\u00e9or\u00e8me de l'arr\u00eat) - \u00abce programme va renvoyer la valeur 12 ?\u00bb - \u00abce programme va-t-il un jour renvoyer un message d'erreur ?\u00bb - ... Rice d\u00e9montre que toutes ces questions peuvent \u00eatre ramen\u00e9es (on dit r\u00e9duites ) au th\u00e9or\u00e8me de l'arr\u00eat, qui est ind\u00e9cidable.","title":"2.5 Conclusion"},{"location":"T2_Programmation/2.3_Calculabilit%C3%A9_D%C3%A9cidabilit%C3%A9/cours.html#2-calculabilite","text":"Le probl\u00e8me de l'arr\u00eat est dit ind\u00e9cidable car la fonction qui le r\u00e9sout (notre brave programme halt ) n'est pas calculable .","title":"2. Calculabilit\u00e9"},{"location":"T2_Programmation/2.3_Calculabilit%C3%A9_D%C3%A9cidabilit%C3%A9/cours.html#21-notion-de-calculabilite","text":"Qu'y a-t-il derri\u00e8re cette notion de calculabilit\u00e9 ? Cette notion, qui jette un pont entre les math\u00e9matiques (la vision de Church, pour sch\u00e9matiser) et l'informatique (la vision de Turing) n'est pas simple \u00e0 d\u00e9finir ! Le calcul math\u00e9matique peut se r\u00e9duire \u00e0 une succession d'op\u00e9rations \u00e9l\u00e9mentaires (songez \u00e0 la multiplication enti\u00e8re comme une s\u00e9rie d'additions). Les nombres calculables sont les nombres qui sont g\u00e9n\u00e9rables en un nombre fini d'op\u00e9rations \u00e9l\u00e9mentaires. De la m\u00eame mani\u00e8re, une fonction math\u00e9matique sera dite calculable s'il existe une suite finie d'op\u00e9rations \u00e9l\u00e9mentaires permettant de passer d'un nombre x \u00e0 son image f(x). On retrouve cette notion d'op\u00e9rations \u00e9l\u00e9mentaires dans les machines de Turing . Cette machine (th\u00e9orique) permet de simuler tout ce qu'un programme informatique (une suite d'instructions) est capable d'ex\u00e9cuter. Un algorithme peut se r\u00e9duire \u00e0 une suite d'op\u00e9rations \u00e9lementaires, comme une fonction math\u00e9matique peut se r\u00e9duire \u00e0 une suite de calculs. D\u00e8s lors, on pourra consid\u00e9rer un algorithme comme une fonction. Turing a d\u00e9montr\u00e9 que l'ensemble des fonctions calculables, au sens de Church, \u00e9tait \u00e9quivalent \u00e0 l'ensemble des fonctions programmables sur sa machine. Certaines fonctions peuvent \u00eatre calculables, ou ne pas l'\u00eatre : c'est notamment le cas de notre fonction du probl\u00e8me de l'arr\u00eat.","title":"2.1 Notion de calculabilit\u00e9"},{"location":"T2_Programmation/2.3_Calculabilit%C3%A9_D%C3%A9cidabilit%C3%A9/cours.html#22-langages-turing-complets","text":"Ce r\u00e9sultat ne d\u00e9pend pas du langage utilis\u00e9 : le fait que nous ayons utilis\u00e9 Python au paragraphe pr\u00e9c\u00e9dent n'a pas d'influence sur notre d\u00e9monstration. Nous savons depuis les machines de Turing que tous nos langages de programmation sont Turing-complets : ils sont tous capables de faire la m\u00eame chose (avec plus ou moins de facilit\u00e9 !). Scratch, C, Python, Java, Basic, Haskell, Brainfuck... tous ces langages sont th\u00e9oriquement \u00e9quivalents : la calculabilit\u00e9 ne d\u00e9pend pas du langage utilis\u00e9 .","title":"2.2 Langages Turing-complets"},{"location":"T2_Programmation/2.3_Calculabilit%C3%A9_D%C3%A9cidabilit%C3%A9/cours.html#23-hp-calculable-oui-mais-facilement-1-million-de-a-gagner-ci-dessous","text":"L'\u00e9tude de la calculabilit\u00e9 d'une fonction (\u00e0 prendre au sens le plus large, c'est-\u00e0-dire un algorithme) ne se limite pas \u00e0 un choix binaire : \u00abcalculable\u00bb vs \u00abnon calculable\u00bb. Parmi les fonctions calculables, certaines peuvent l'\u00eatre rapidement, et d'autre beaucoup moins. On retrouve alors la notion bien connue de complexit\u00e9 algorithmique, qui permet de classifier les algorithmes suivant leur d\u00e9pendance \u00e0 la taille de leurs donn\u00e9es d'entr\u00e9e (voir le cours de Premi\u00e8re). On peut regrouper les probl\u00e8mes suivant la complexit\u00e9 de l'algorithme qui permet de les r\u00e9soudre.","title":"2.3 (HP) Calculable, oui, mais facilement ? -&gt; 1 million de $ \u00e0 gagner ci-dessous."},{"location":"T2_Programmation/2.3_Calculabilit%C3%A9_D%C3%A9cidabilit%C3%A9/cours.html#bibliographie","text":"Num\u00e9rique et Sciences Informatiques, Terminale, T. BALABONSKI, S. CONCHON, J.-C. FILLIATRE, K. NGUYEN, \u00e9ditions ELLIPSES. Pr\u00e9pabac NSI, Terminale, G. CONNAN, V. PETROV, G. ROZSAVOLGYI, L. SIGNAC, \u00e9ditions HATIER. https://interstices.info/pnp-elementaire-ma-chere-watson/ https://interstices.info/alan-turing-du-calculable-a-lindecidable/ https://www.labri.fr/perso/betrema/MC/MC8.html https://scienceetonnante.com/2020/07/17/est-ce-que-p-np/","title":"Bibliographie"},{"location":"T2_Programmation/2.4_Pratiques_de_programmation/cours.html","text":"extrait du site https://realpython.com/python-pep8/ 1. Conventions syntaxiques \u2693\ufe0e La programmation est un art d\u00e9licat : un simple caract\u00e8re en trop peut provoquer une erreur pour le code tout entier (penser \u00e0 un innocent caract\u00e8re d'espace en d\u00e9but de ligne dans un code Python). Mais m\u00eame lorsqu'un code s'ex\u00e9cute sans erreur, il ne faut pas n\u00e9gliger l'aspect purement \u00abesth\u00e9tique\u00bb de celui-ci : il est n\u00e9cessaire de respecter autant que possible des conventions typographiques, qui vont standardiser le code et le rendre ainsi plus lisible. Ainsi pour chaque langage, il existe une \u00abbible\u00bb de bonnes pratiques de pr\u00e9sentation du code, qui visent \u00e0 l'uniformiser. Pour Python, cette r\u00e9f\u00e9rence s'appelle la Python Enhancement Proposal 8, plus connue sous le nom de PEP8. Vous trouverez un excellent r\u00e9sum\u00e9 de la PEP8 sur le site http://sametmax.com/le-pep8-en-resume/. En voici quelques extraits : Les espaces \u2693\ufe0e \u25b6 Il faut mettre une espace (oui, en typographie, on dit \u00abune\u00bb espace et non pas \u00abun\u00bb espace) avant et apr\u00e8s chaque op\u00e9rateur de comparaison, d'affectation, ou math\u00e9matiques ( =, ==, >, +, *, ... ) 1 2 3 4 5 # PAS BIEN a = 3 # BIEN a = 3 1 2 3 4 5 6 7 # PAS BIEN if x > 3 : print ( \"ok\" ) # BIEN if x > 3 : print ( \"ok\" ) \u25b6 Pour les op\u00e9rateurs math\u00e9matiques, on essaie de reconstituer les groupes de priorit\u00e9 (lorsqu'il y en a) : 1 2 3 4 5 # PAS BIEN x = 3 * 2 # BIEN x = 3 * 2 mais 1 2 3 4 5 # PAS BIEN x = 3 * 2 + 5 # BIEN x = 3 * 2 + 5 \u25b6 On ne met pas d'espace \u00e0 int\u00e9rieur des parenth\u00e8ses, des crochets ou des accolades : 1 2 3 4 5 6 7 # PAS BIEN for x in range ( 5 ): print ( 'bonjour' ) # BIEN for x in range ( 5 ): print ( 'bonjour' ) \u25b6 Pour les virgules, et les deux points : pas d'espace avant mais une espace apr\u00e8s. 1 2 3 4 5 6 7 # PAS BIEN if color == ( 0 , 255 , 0 ) : print ( 'vert' ) # BIEN if color == ( 0 , 255 , 0 ): print ( 'vert' ) Les conventions de nommage \u2693\ufe0e \u25b6 Les variables \u00e0 une lettre (comme i , j , k ) sont r\u00e9serv\u00e9es aux indices (notamment dans les boucles). \u25b6 Les autres variables doivent avoir des noms explicites, \u00e9ventuellement \u00e9crits en snake_case si plusieurs mots doivent \u00eatre reli\u00e9s. 1 2 3 4 5 6 7 # PAS BIEN if d == 1 : cep += vm # BIEN if date == 1 : compte_epargne += versement_mensuel Rappel des diff\u00e9rents types de casse : - snake_case : les mots sont s\u00e9par\u00e9s par des underscores. Conseill\u00e9 en Python. - camelCase : les mots sont s\u00e9par\u00e9s par des majuscules mais la 1\u00e8re lettre est minuscule. Conseill\u00e9 en Javascript. - PascalCase : les mots sont s\u00e9par\u00e9s par des majuscules et la 1\u00e8re lettre est majuscule. Conseill\u00e9 en C. - kebab-case : les mots sont s\u00e9par\u00e9s par des tirets courts. Conseill\u00e9 en HTML - CSS. \u25b6 Cas particulier des classes en Programmation Orient\u00e9e Objet : leur nom doit commencer par une majuscule. 1 2 3 4 5 6 7 8 9 # PAS BIEN class voiture : def __init__ ( self , annee , marque , modele ): #pass # BIEN class Voiture : def __init__ ( self , annee , marque , modele ): #pass 2. Commentaires et docstrings \u2693\ufe0e 2.1 Commenter son code ? (ou pas) \u2693\ufe0e La n\u00e9cessit\u00e9 de commenter son code est assez controvers\u00e9e. Il est d'usage de dire qu'un code doit \u00eatre assez explicite pour que le lecteur puisse le comprendre sans avoir \u00e0 lire un commentaire. De fait, les commentaires sont parfois (souvent) superflus : Et s'ils sont r\u00e9ellement n\u00e9cessaires, il faut se poser la question : est-ce que ce code n'aurait pas pu \u00eatre plus simple ? (attention, la r\u00e9ponse n'est pas toujours oui) Exemple : Consid\u00e9rons la fonction suivante. 1 2 3 def f ( c , t , n ): # c est le capital de d\u00e9part, t le taux annuel et n le nombre d'ann\u00e9es return c * ( 1 + t ) ** n #renvoie le capital apr\u00e8s n ann\u00e9es Elle est bien comment\u00e9e. Mais si on croise la fonction f() ailleurs dans le code, se souviendra-t-on de son r\u00f4le ? Il aurait mieux valu \u00e9crire : 1 2 def capital_apres_n_annees ( capital , taux , nombre_annees ) : return capital * ( 1 + taux ) ** nombre_annees Ce code est plus long, mais assez explicite pour se passer de commentaires. 2.2 Le cas particulier des docstrings \u2693\ufe0e 2.2.1 Que sont les docstrings ? \u2693\ufe0e Les docstrings sont des commentaires normalis\u00e9s pour les fonctions, qui peuvent \u00eatre consult\u00e9s en console. Exemples : Nous connaissons la fonction len() qui permet par exemple de conna\u00eetre la longueur d'une liste pass\u00e9e en param\u00e8tre. Si nous tapons en console la commande print(len.__doc__) , nous aurons la description de cette fonction. 1 2 >>> len . __doc__ 'Return the number of items in a container.' Il est aussi possible d'acc\u00e9der \u00e0 la docstring d'une fonction f par la commande help(f) : 1 2 3 4 5 >>> help ( len ) Help on built - in function len in module builtins : len ( obj , / ) Return the number of items in a container . De m\u00eame pour la fonction range : 1 2 3 4 5 6 7 8 9 >>> print ( range . __doc__ ) range ( stop ) -> range object range ( start , stop [, step ]) -> range object Return an object that produces a sequence of integers from start ( inclusive ) to stop ( exclusive ) by step . range ( i , j ) produces i , i + 1 , i + 2 , ... , j - 1. start defaults to 0 , and stop is omitted ! range ( 4 ) produces 0 , 1 , 2 , 3. These are exactly the valid indices for a list of 4 elements . When step is given , it specifies the increment ( or decrement ) . Le r\u00e9sultat de la commande help(range) est trop long pour \u00eatre repris ici, mais on y retrouve bien la docstring de la fonction range . 2.2.2 Cr\u00e9er ses propres docstrings \u2693\ufe0e Il suffit pour cela de commencer la fonction \u00e0 documenter par une ou plusieurs phrases entre triples quotes : 1 2 3 4 5 6 7 8 def capital_apres_n_annees ( capital , taux , nombre_annees ) : \"\"\" Renvoie le capital apr\u00e8s n ann\u00e9es. capital : valeur initiale taux : taux d'int\u00e9r\u00eat exprim\u00e9 en nombre d\u00e9cimal (ex: 0.02 pour un taux de 2 %) nombre_annees : nombre d'ann\u00e9es de placement du capital \"\"\" return capital * ( 1 + taux ) ** nombre_annees Ainsi, un utilisateur pourra trouver en console le mode d'emploi de notre fonction : 1 2 3 4 5 6 7 8 >>> help ( capital_apres_n_annees ) Help on function capital_apres_n_annees in module __main__ : capital_apres_n_annees ( capital , taux , nombre_annees ) Renvoie le capital apr\u00e8s n ann\u00e9es . capital : valeur initiale taux : taux d 'int\u00e9r\u00eat exprim\u00e9 en nombre d\u00e9cimal (ex: 0.02 pour un taux de 2 %) nombre_annees : nombre d 'ann\u00e9es de placement du capital Comme on le voit, tout cela est tr\u00e8s \u00abverbeux\u00bb. Cela peut nous para\u00eetre largement superflu puisque nos codes d\u00e9passent rarement quelques dizaines de lignes et sont lus par rarement plus de 2 personnes. Mais dans la vraie vie des d\u00e9veloppeurs, il est primordial qu'un code soit clair et document\u00e9. 3. La programmation d\u00e9fensive : des assert pour s\u00e9curiser le code \u2693\ufe0e La programmation d\u00e9fensive est l'art de pr\u00e9voir le pire et d'essayer de le d\u00e9tecter avant qu'il ne soit trop tard. De mani\u00e8re bien plus concr\u00e8te, il est d'usage d'essayer de r\u00e9p\u00e9rer si des donn\u00e9es (souvent des param\u00e8tres d'une fonction) sont susceptibles de cr\u00e9er des probl\u00e8mes, ou sont hors sp\u00e9cification. Un exemple : La fonction : 1 2 3 def racine_carree ( x ): assert x >= 0 , 'un nombre positif ou nul est requis' return x ** 0.5 donnera, lors de l'appel \u00e0 racine_carree(-2) , le message suivant : 1 2 3 4 5 6 >>> racine_carree ( - 2 ) Traceback ( most recent call last ): File \"<pyshell>\" , line 1 , in < module > File \"/home/gilles/Bureau/exemples_assert.py\" , line 2 , in racine_carree assert x >= 0 , 'un nombre positif ou nul est requis' AssertionError : un nombre positif ou nul est requis Un autre exemple : 1 2 3 4 5 6 7 8 9 def moyenne_trimestrielle ( liste_notes ): \"\"\" calcule la moyenne des nombres de la liste liste_notes \"\"\" assert liste_notes != [] , 'liste vide' assert max ( liste_notes ) <= 20 , 'au moins une note d\u00e9passe 20' assert min ( liste_notes ) >= 0 , 'au moins une note est en dessous de 0' return sum ( liste_notes ) / len ( liste_notes ) \u00c0 ce stade, les assert sont donc pour nous juste un moyen rapide de remplacer un test if ... then ... else pour d\u00e9tecter des erreurs potentielles. Ils sont en r\u00e9alit\u00e9 plus utiles que cela : lors de la conception d'un programme, des assert sont pos\u00e9s pour v\u00e9rifier l'int\u00e9grit\u00e9 du code, mais peuvent \u00eatre d\u00e9sactiv\u00e9s \u00e0 tout moment pour en faire un code optimis\u00e9 (par la commande -O \u00e0 l'ex\u00e9cution). Tout ceci d\u00e9passe largement le cadre de notre cours. Il est \u00e0 noter aussi que les erreurs peuvent \u00eatre g\u00e9r\u00e9es par le m\u00e9canisme try ... except , qui permet de \u00ablever des exceptions\u00bb. Pour les curieux, plus de renseignements ici . 4. Les tests \u2693\ufe0e 4.1 Pourquoi des tests ? \u2693\ufe0e Tester une fonction est la premi\u00e8re chose que l'on fait (normalement...) lorsqu'on vient de finir de l'\u00e9crire. Par exemple, si on vient de construire la fonction valeur_absolue(n) , il est fort probable qu'on aille taper ceci dans la console : 1 2 3 4 5 6 >>> valeur_absolue ( - 3 ) 3 >>> valeur_absolue ( 0 ) 0 >>> valeur_absolue ( 7 ) 7 On peut regrouper tous ces tests au sein d'une m\u00eame fonction test_valeur_absolue() . On peut \u00e9crire cette fonction test_valeur_absolue() avant m\u00eame de commencer \u00e0 \u00e9crire la fonction valeur_absolue(n) . Remarque : la m\u00e9thode de d\u00e9veloppement logiciel TDD (Test Driven Developement) est bas\u00e9e en partie sur ce principe : 1. On commence par \u00e9crire le test de la fonction. 2. Le test \u00e9choue (forc\u00e9ment, la fonction n'est pas encore cod\u00e9e !) 3. On \u00e9crit le code de la fonction pour que le test soit valid\u00e9. 4. On am\u00e9liore (si possible) ce code tout en v\u00e9rifiant que le test continue \u00e0 \u00eatre valide. Revenons \u00e0 nos tests sur la fonction valeur_absolue(n) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 def test_valeur_absolue (): if valeur_absolue ( - 3 ) == 3 : print ( \"ok\" ) else : print ( \"erreur\" ) if valeur_absolue ( 0 ) == 0 : print ( \"ok\" ) else : print ( \"erreur\" ) if valeur_absolue ( 7 ) == 7 : print ( \"ok\" ) else : print ( \"erreur\" ) En console, il suffit maintenant d'appeler la fonction test_valeur_absolue() : 1 2 3 4 >>> test_valeur_absolue () ok ok ok 4.2 Revoil\u00e0 les assert \u2693\ufe0e Utiliser des assert permet d'\u00e9crire tr\u00e8s simplement les tests pr\u00e9c\u00e9dents. Reprenons notre fonction valeur_absolue() . Sa fonction test test_valeur_absolue() peut s'\u00e9crire : 1 2 3 4 def test_valeur_absolue (): assert valeur_absolue ( - 3 ) == 3 assert valeur_absolue ( 0 ) == 0 assert valeur_absolue ( 7 ) == 7 Exercice : \u00c9crire une fonction maxi(liste) qui renvoie le plus grand \u00e9l\u00e9ment de la liste liste pass\u00e9e en param\u00e8tre (de pr\u00e9f\u00e9rence sans utiliser la fonction max() ...). Vous \u00e9crirez d'abord une fonction test_maxi() avant d'\u00e9crire la fonction maxi(liste) 4.3 Le module doctest \u2693\ufe0e Le module doctest permet d'\u00e9crire les tests \u00e0 l'int\u00e9rieur de la docstring d'une fonction. Consid\u00e9rons une fonction dont le but est de compter les voyelles du mot pass\u00e9 en param\u00e8tre. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 def compte_voyelles ( mot ): \"\"\" renvoie le nombre de voyelles du mot donn\u00e9 en param\u00e8tre. >>> compte_voyelles(\"python\") 2 >>> compte_voyelles(\"HTTP\") 0 >>> compte_voyelles(\"eau\") 3 \"\"\" voyelles = \"aeiou\" total = 0 for lettre in mot : if lettre in voyelles : total += 1 return total Observez bien la docstring : elle contient explicitement ce qu'on veut que renvoie le terminal lorsqu'on appellera la fonction. On \u00e9crit donc les trois chevrons >>> suivi de l'appel \u00e0 la fonction, et \u00e0 la ligne en dessous ce que nous esp\u00e9rons que la fonction nous renvoie. On peut \u00e9crire autant de tests que l'on veut. Ensuite, en console : 1 2 >>> import doctest >>> doctest . testmod () Dans notre cas, le retour sera celui-ci : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 >>> import doctest >>> doctest . testmod () ********************************************************************** File \"voyelles.py\" , line 4 , in __main__ . compte_voyelles Failed example : compte_voyelles ( \"python\" ) Expected : 2 Got : 1 ********************************************************************** 1 items had failures : 1 of 3 in __main__ . compte_voyelles *** Test Failed *** 1 failures . TestResults ( failed = 1 , attempted = 3 ) On voit que le test compte_voyelles(\"python\") a renvoy\u00e9 la valeur 1 alors qu'on attendait 2. En regardant notre fonction, on s'aper\u00e7oit donc qu'on avait oubli\u00e9 le y dans la liste des voyelles. En corrigeant ceci, le test devient : 1 2 3 >>> import doctest >>> doctest . testmod () TestResults ( failed = 0 , attempted = 3 ) Ce qui est beaucoup plus satisfaisant. 4.3 \u00c0 propos des tests \u2693\ufe0e Le comportement face aux tests en programmation doit \u00eatre le m\u00eame qu'en math\u00e9matiques : un test qui ne marche pas est plus riche d'enseignements qu'un test qui marche . En math\u00e9matiques, seule la notion de contre-exemple est fertile : si quelqu'un vous affirme que \u00abtous les nombres impairs sont premiers\u00bb , il vous suffit d'exhiber le nombre 9 pour lui prouver qu'il a tort et achever la discussion. Par contre, il aurait pu essayer de vous convaincre avec les nombres 3, 5 et 13, qui sont bien impairs et premiers. De la m\u00eame mani\u00e8re, voir qu'une fonction passe les tests que vous avez \u00e9crits ne vous assurera pas que cette fonction aura toujours le bon comportement souhait\u00e9. Elle l'aura pour les valeurs de test, mais pas forc\u00e9ment pour les autres. En revanche, si une fonction ne passe pas un des tests, vous avez la certitude qu'il y a un probl\u00e8me \u00e0 r\u00e9gler quelque part. Tout ceci en admettant, bien s\u00fbr, que vos tests eux-m\u00eames ne comportent pas d'erreurs... Bibliographie \u2693\ufe0e https://www.reddit.com/r/ProgrammerHumor/ https://fr.wikipedia.org/wiki/Test_driven_development https://www.fil.univ-lille1.fr/~L1S2API/CoursTP/tp_doctest.html http://sametmax.com/le-pep8-en-resume/","title":"Cours"},{"location":"T2_Programmation/2.4_Pratiques_de_programmation/cours.html#1-conventions-syntaxiques","text":"La programmation est un art d\u00e9licat : un simple caract\u00e8re en trop peut provoquer une erreur pour le code tout entier (penser \u00e0 un innocent caract\u00e8re d'espace en d\u00e9but de ligne dans un code Python). Mais m\u00eame lorsqu'un code s'ex\u00e9cute sans erreur, il ne faut pas n\u00e9gliger l'aspect purement \u00abesth\u00e9tique\u00bb de celui-ci : il est n\u00e9cessaire de respecter autant que possible des conventions typographiques, qui vont standardiser le code et le rendre ainsi plus lisible. Ainsi pour chaque langage, il existe une \u00abbible\u00bb de bonnes pratiques de pr\u00e9sentation du code, qui visent \u00e0 l'uniformiser. Pour Python, cette r\u00e9f\u00e9rence s'appelle la Python Enhancement Proposal 8, plus connue sous le nom de PEP8. Vous trouverez un excellent r\u00e9sum\u00e9 de la PEP8 sur le site http://sametmax.com/le-pep8-en-resume/. En voici quelques extraits :","title":"1. Conventions syntaxiques"},{"location":"T2_Programmation/2.4_Pratiques_de_programmation/cours.html#les-espaces","text":"\u25b6 Il faut mettre une espace (oui, en typographie, on dit \u00abune\u00bb espace et non pas \u00abun\u00bb espace) avant et apr\u00e8s chaque op\u00e9rateur de comparaison, d'affectation, ou math\u00e9matiques ( =, ==, >, +, *, ... ) 1 2 3 4 5 # PAS BIEN a = 3 # BIEN a = 3 1 2 3 4 5 6 7 # PAS BIEN if x > 3 : print ( \"ok\" ) # BIEN if x > 3 : print ( \"ok\" ) \u25b6 Pour les op\u00e9rateurs math\u00e9matiques, on essaie de reconstituer les groupes de priorit\u00e9 (lorsqu'il y en a) : 1 2 3 4 5 # PAS BIEN x = 3 * 2 # BIEN x = 3 * 2 mais 1 2 3 4 5 # PAS BIEN x = 3 * 2 + 5 # BIEN x = 3 * 2 + 5 \u25b6 On ne met pas d'espace \u00e0 int\u00e9rieur des parenth\u00e8ses, des crochets ou des accolades : 1 2 3 4 5 6 7 # PAS BIEN for x in range ( 5 ): print ( 'bonjour' ) # BIEN for x in range ( 5 ): print ( 'bonjour' ) \u25b6 Pour les virgules, et les deux points : pas d'espace avant mais une espace apr\u00e8s. 1 2 3 4 5 6 7 # PAS BIEN if color == ( 0 , 255 , 0 ) : print ( 'vert' ) # BIEN if color == ( 0 , 255 , 0 ): print ( 'vert' )","title":"Les espaces"},{"location":"T2_Programmation/2.4_Pratiques_de_programmation/cours.html#les-conventions-de-nommage","text":"\u25b6 Les variables \u00e0 une lettre (comme i , j , k ) sont r\u00e9serv\u00e9es aux indices (notamment dans les boucles). \u25b6 Les autres variables doivent avoir des noms explicites, \u00e9ventuellement \u00e9crits en snake_case si plusieurs mots doivent \u00eatre reli\u00e9s. 1 2 3 4 5 6 7 # PAS BIEN if d == 1 : cep += vm # BIEN if date == 1 : compte_epargne += versement_mensuel Rappel des diff\u00e9rents types de casse : - snake_case : les mots sont s\u00e9par\u00e9s par des underscores. Conseill\u00e9 en Python. - camelCase : les mots sont s\u00e9par\u00e9s par des majuscules mais la 1\u00e8re lettre est minuscule. Conseill\u00e9 en Javascript. - PascalCase : les mots sont s\u00e9par\u00e9s par des majuscules et la 1\u00e8re lettre est majuscule. Conseill\u00e9 en C. - kebab-case : les mots sont s\u00e9par\u00e9s par des tirets courts. Conseill\u00e9 en HTML - CSS. \u25b6 Cas particulier des classes en Programmation Orient\u00e9e Objet : leur nom doit commencer par une majuscule. 1 2 3 4 5 6 7 8 9 # PAS BIEN class voiture : def __init__ ( self , annee , marque , modele ): #pass # BIEN class Voiture : def __init__ ( self , annee , marque , modele ): #pass","title":"Les conventions de nommage"},{"location":"T2_Programmation/2.4_Pratiques_de_programmation/cours.html#2-commentaires-et-docstrings","text":"","title":"2. Commentaires et docstrings"},{"location":"T2_Programmation/2.4_Pratiques_de_programmation/cours.html#21-commenter-son-code-ou-pas","text":"La n\u00e9cessit\u00e9 de commenter son code est assez controvers\u00e9e. Il est d'usage de dire qu'un code doit \u00eatre assez explicite pour que le lecteur puisse le comprendre sans avoir \u00e0 lire un commentaire. De fait, les commentaires sont parfois (souvent) superflus : Et s'ils sont r\u00e9ellement n\u00e9cessaires, il faut se poser la question : est-ce que ce code n'aurait pas pu \u00eatre plus simple ? (attention, la r\u00e9ponse n'est pas toujours oui) Exemple : Consid\u00e9rons la fonction suivante. 1 2 3 def f ( c , t , n ): # c est le capital de d\u00e9part, t le taux annuel et n le nombre d'ann\u00e9es return c * ( 1 + t ) ** n #renvoie le capital apr\u00e8s n ann\u00e9es Elle est bien comment\u00e9e. Mais si on croise la fonction f() ailleurs dans le code, se souviendra-t-on de son r\u00f4le ? Il aurait mieux valu \u00e9crire : 1 2 def capital_apres_n_annees ( capital , taux , nombre_annees ) : return capital * ( 1 + taux ) ** nombre_annees Ce code est plus long, mais assez explicite pour se passer de commentaires.","title":"2.1 Commenter son code ? (ou pas)"},{"location":"T2_Programmation/2.4_Pratiques_de_programmation/cours.html#22-le-cas-particulier-des-docstrings","text":"","title":"2.2 Le cas particulier des docstrings"},{"location":"T2_Programmation/2.4_Pratiques_de_programmation/cours.html#3-la-programmation-defensive-des-assert-pour-securiser-le-code","text":"La programmation d\u00e9fensive est l'art de pr\u00e9voir le pire et d'essayer de le d\u00e9tecter avant qu'il ne soit trop tard. De mani\u00e8re bien plus concr\u00e8te, il est d'usage d'essayer de r\u00e9p\u00e9rer si des donn\u00e9es (souvent des param\u00e8tres d'une fonction) sont susceptibles de cr\u00e9er des probl\u00e8mes, ou sont hors sp\u00e9cification. Un exemple : La fonction : 1 2 3 def racine_carree ( x ): assert x >= 0 , 'un nombre positif ou nul est requis' return x ** 0.5 donnera, lors de l'appel \u00e0 racine_carree(-2) , le message suivant : 1 2 3 4 5 6 >>> racine_carree ( - 2 ) Traceback ( most recent call last ): File \"<pyshell>\" , line 1 , in < module > File \"/home/gilles/Bureau/exemples_assert.py\" , line 2 , in racine_carree assert x >= 0 , 'un nombre positif ou nul est requis' AssertionError : un nombre positif ou nul est requis Un autre exemple : 1 2 3 4 5 6 7 8 9 def moyenne_trimestrielle ( liste_notes ): \"\"\" calcule la moyenne des nombres de la liste liste_notes \"\"\" assert liste_notes != [] , 'liste vide' assert max ( liste_notes ) <= 20 , 'au moins une note d\u00e9passe 20' assert min ( liste_notes ) >= 0 , 'au moins une note est en dessous de 0' return sum ( liste_notes ) / len ( liste_notes ) \u00c0 ce stade, les assert sont donc pour nous juste un moyen rapide de remplacer un test if ... then ... else pour d\u00e9tecter des erreurs potentielles. Ils sont en r\u00e9alit\u00e9 plus utiles que cela : lors de la conception d'un programme, des assert sont pos\u00e9s pour v\u00e9rifier l'int\u00e9grit\u00e9 du code, mais peuvent \u00eatre d\u00e9sactiv\u00e9s \u00e0 tout moment pour en faire un code optimis\u00e9 (par la commande -O \u00e0 l'ex\u00e9cution). Tout ceci d\u00e9passe largement le cadre de notre cours. Il est \u00e0 noter aussi que les erreurs peuvent \u00eatre g\u00e9r\u00e9es par le m\u00e9canisme try ... except , qui permet de \u00ablever des exceptions\u00bb. Pour les curieux, plus de renseignements ici .","title":"3. La programmation d\u00e9fensive : des assert pour s\u00e9curiser le code"},{"location":"T2_Programmation/2.4_Pratiques_de_programmation/cours.html#4-les-tests","text":"","title":"4. Les tests"},{"location":"T2_Programmation/2.4_Pratiques_de_programmation/cours.html#41-pourquoi-des-tests","text":"Tester une fonction est la premi\u00e8re chose que l'on fait (normalement...) lorsqu'on vient de finir de l'\u00e9crire. Par exemple, si on vient de construire la fonction valeur_absolue(n) , il est fort probable qu'on aille taper ceci dans la console : 1 2 3 4 5 6 >>> valeur_absolue ( - 3 ) 3 >>> valeur_absolue ( 0 ) 0 >>> valeur_absolue ( 7 ) 7 On peut regrouper tous ces tests au sein d'une m\u00eame fonction test_valeur_absolue() . On peut \u00e9crire cette fonction test_valeur_absolue() avant m\u00eame de commencer \u00e0 \u00e9crire la fonction valeur_absolue(n) . Remarque : la m\u00e9thode de d\u00e9veloppement logiciel TDD (Test Driven Developement) est bas\u00e9e en partie sur ce principe : 1. On commence par \u00e9crire le test de la fonction. 2. Le test \u00e9choue (forc\u00e9ment, la fonction n'est pas encore cod\u00e9e !) 3. On \u00e9crit le code de la fonction pour que le test soit valid\u00e9. 4. On am\u00e9liore (si possible) ce code tout en v\u00e9rifiant que le test continue \u00e0 \u00eatre valide. Revenons \u00e0 nos tests sur la fonction valeur_absolue(n) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 def test_valeur_absolue (): if valeur_absolue ( - 3 ) == 3 : print ( \"ok\" ) else : print ( \"erreur\" ) if valeur_absolue ( 0 ) == 0 : print ( \"ok\" ) else : print ( \"erreur\" ) if valeur_absolue ( 7 ) == 7 : print ( \"ok\" ) else : print ( \"erreur\" ) En console, il suffit maintenant d'appeler la fonction test_valeur_absolue() : 1 2 3 4 >>> test_valeur_absolue () ok ok ok","title":"4.1 Pourquoi des tests ?"},{"location":"T2_Programmation/2.4_Pratiques_de_programmation/cours.html#42-revoila-les-assert","text":"Utiliser des assert permet d'\u00e9crire tr\u00e8s simplement les tests pr\u00e9c\u00e9dents. Reprenons notre fonction valeur_absolue() . Sa fonction test test_valeur_absolue() peut s'\u00e9crire : 1 2 3 4 def test_valeur_absolue (): assert valeur_absolue ( - 3 ) == 3 assert valeur_absolue ( 0 ) == 0 assert valeur_absolue ( 7 ) == 7 Exercice : \u00c9crire une fonction maxi(liste) qui renvoie le plus grand \u00e9l\u00e9ment de la liste liste pass\u00e9e en param\u00e8tre (de pr\u00e9f\u00e9rence sans utiliser la fonction max() ...). Vous \u00e9crirez d'abord une fonction test_maxi() avant d'\u00e9crire la fonction maxi(liste)","title":"4.2 Revoil\u00e0 les assert"},{"location":"T2_Programmation/2.4_Pratiques_de_programmation/cours.html#43-le-module-doctest","text":"Le module doctest permet d'\u00e9crire les tests \u00e0 l'int\u00e9rieur de la docstring d'une fonction. Consid\u00e9rons une fonction dont le but est de compter les voyelles du mot pass\u00e9 en param\u00e8tre. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 def compte_voyelles ( mot ): \"\"\" renvoie le nombre de voyelles du mot donn\u00e9 en param\u00e8tre. >>> compte_voyelles(\"python\") 2 >>> compte_voyelles(\"HTTP\") 0 >>> compte_voyelles(\"eau\") 3 \"\"\" voyelles = \"aeiou\" total = 0 for lettre in mot : if lettre in voyelles : total += 1 return total Observez bien la docstring : elle contient explicitement ce qu'on veut que renvoie le terminal lorsqu'on appellera la fonction. On \u00e9crit donc les trois chevrons >>> suivi de l'appel \u00e0 la fonction, et \u00e0 la ligne en dessous ce que nous esp\u00e9rons que la fonction nous renvoie. On peut \u00e9crire autant de tests que l'on veut. Ensuite, en console : 1 2 >>> import doctest >>> doctest . testmod () Dans notre cas, le retour sera celui-ci : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 >>> import doctest >>> doctest . testmod () ********************************************************************** File \"voyelles.py\" , line 4 , in __main__ . compte_voyelles Failed example : compte_voyelles ( \"python\" ) Expected : 2 Got : 1 ********************************************************************** 1 items had failures : 1 of 3 in __main__ . compte_voyelles *** Test Failed *** 1 failures . TestResults ( failed = 1 , attempted = 3 ) On voit que le test compte_voyelles(\"python\") a renvoy\u00e9 la valeur 1 alors qu'on attendait 2. En regardant notre fonction, on s'aper\u00e7oit donc qu'on avait oubli\u00e9 le y dans la liste des voyelles. En corrigeant ceci, le test devient : 1 2 3 >>> import doctest >>> doctest . testmod () TestResults ( failed = 0 , attempted = 3 ) Ce qui est beaucoup plus satisfaisant.","title":"4.3 Le module doctest"},{"location":"T2_Programmation/2.4_Pratiques_de_programmation/cours.html#43-a-propos-des-tests","text":"Le comportement face aux tests en programmation doit \u00eatre le m\u00eame qu'en math\u00e9matiques : un test qui ne marche pas est plus riche d'enseignements qu'un test qui marche . En math\u00e9matiques, seule la notion de contre-exemple est fertile : si quelqu'un vous affirme que \u00abtous les nombres impairs sont premiers\u00bb , il vous suffit d'exhiber le nombre 9 pour lui prouver qu'il a tort et achever la discussion. Par contre, il aurait pu essayer de vous convaincre avec les nombres 3, 5 et 13, qui sont bien impairs et premiers. De la m\u00eame mani\u00e8re, voir qu'une fonction passe les tests que vous avez \u00e9crits ne vous assurera pas que cette fonction aura toujours le bon comportement souhait\u00e9. Elle l'aura pour les valeurs de test, mais pas forc\u00e9ment pour les autres. En revanche, si une fonction ne passe pas un des tests, vous avez la certitude qu'il y a un probl\u00e8me \u00e0 r\u00e9gler quelque part. Tout ceci en admettant, bien s\u00fbr, que vos tests eux-m\u00eames ne comportent pas d'erreurs...","title":"4.3 \u00c0 propos des tests"},{"location":"T2_Programmation/2.4_Pratiques_de_programmation/cours.html#bibliographie","text":"https://www.reddit.com/r/ProgrammerHumor/ https://fr.wikipedia.org/wiki/Test_driven_development https://www.fil.univ-lille1.fr/~L1S2API/CoursTP/tp_doctest.html http://sametmax.com/le-pep8-en-resume/","title":"Bibliographie"},{"location":"T3_Algorithmique/sommaire.html","text":"Diviser pour r\u00e9gner Programmation dynamique Recherche textuelle","title":"Sommaire"},{"location":"T3_Algorithmique/3.1_Diviser_pour_r%C3%A9gner/cours.html","text":"\u00e0 venir...","title":"Cours"},{"location":"T3_Algorithmique/3.2_Programmation_dynamique/cours.html","text":"\u00e0 venir...","title":"Cours"},{"location":"T3_Algorithmique/3.3_Recherche_textuelle/cours.html","text":"\u00e0 venir...","title":"Cours"},{"location":"T4_Bases_de_donn%C3%A9es/sommaire.html","text":"Mod\u00e8le relationnel Langage SQL","title":"Sommaire"},{"location":"T4_Bases_de_donn%C3%A9es/4.1_Mod%C3%A8le_relationnel/02_exercices.html","text":"Exercices sur le mod\u00e8le relationnel \u2693\ufe0e Exercice 1 \u2693\ufe0e (d'apr\u00e8s Pr\u00e9pabac NSI, Terminale, G.CONNAN, V.PETROV, G.ROZSAVOLGYI, L.SIGNAC, \u00e9ditions HATIER.) Deux relations mod\u00e9lisent la flotte de voitures d'un r\u00e9seau de location de voitures. Agences | id_agence | ville | d\u00e9partement | |-----------|-----------|-------------| | 1 | Paris | 75 | | 2 | Lyon | 69 | | 3 | Marseille | 13 | | 4 | Aubagne | 13 | Voitures | id_voiture | marque | mod\u00e8le | kilom\u00e9trage | couleur | id_agence | |------------|---------|--------|-------------|---------|-----------| | 1 | Renault | Clio | 12000 | Rouge | 2 | | 2 | Peugeot | 205 | 22000 | Noir | 3 | | 3 | Toyota | Yaris | 33000 | Noir | 3 | Combien la relation Voitures comporte-t-elle d'attributs ? Que vaut son cardinal ? Quel est le domaine de l'attribut ig_agnece dans la relation Voitures ? Quel est le sch\u00e9ma relationnel de la relation Agences ? Quelle est la cl\u00e9 primaire de la relation Agences ? Quelle est la cl\u00e9 primaire de la relation Voitures ? Quelle est la cl\u00e9 \u00e9trang\u00e8re de la relation Voitures ? Exercice 2 \u2693\ufe0e Reprenons la base Tour de France 2020 vue en cours : relation \u00c9quipes | codeEquipe | nomEquipe | |------|-----------------------------| | ALM | AG2R La Mondiale | | AST | Astana Pro Team | | TBM | Bahrain - McLaren | | BOH | BORA - hansgrohe | | CCC | CCC Team | | COF | Cofidis, Solutions Cr\u00e9dits | | DQT | Deceuninck - Quick Step | | EF1 | EF Pro Cycling | | GFC | Groupama - FDJ | | LTS | Lotto Soudal | | ... | ... | relation Coureurs | dossard | nomCoureur | pr\u00e9nomCoureur | codeEquipe | |---------------|-------------|---------------|------------| | 141 | L\u00d3PEZ | Miguel \u00c1ngel | AST | | 142 | FRAILE | Omar | AST | | 143 | HOULE | Hugo | AST | | 11 | ROGLI\u010c | Primo\u017e | TJV | | 12 | BENNETT | George | TJV | | 41 | ALAPHILIPPE | Julian | DQT | | 44 | CAVAGNA | R\u00e9mi | DQT | | 45 | DECLERCQ | Tim | DQT | | 121 | MARTIN | Guillaume | COF | | 122 | CONSONNI | Simone | COF | | 123 | EDET | Nicolas | COF | | \u2026 | \u2026 | \u2026 | \u2026 | relation \u00c9tapes | num\u00e9roEtape | villeD\u00e9part | villeArriv\u00e9e | km | |-------------|-------------|-------------------|-----| | 1 | Nice | Nice | 156 | | 2 | Nice | Nice | 185 | | 3 | Nice | Sisteron | 198 | | 4 | Sisteron | Orci\u00e8res-Merlette | 160 | | 5 | Gap | Privas | 198 | | ... | ... | ... | ... | relation Temps | dossard | num\u00e9roEtape | tempsR\u00e9alis\u00e9 | |:-------------:|:-----------:|:------------:| | 41 | 2 | 04:55:27 | | 121 | 4 | 04:07:47 | | 11 | 5 | 04:21:22 | | 122 | 5 | 04:21:22 | | ... | ... | ... | Questions 1. Quel temps a r\u00e9alis\u00e9 Guillaume MARTIN sur l'\u00e9tape Sisteron / Orci\u00e8res-Merlette ? 2. \u00c0 l'arriv\u00e9e \u00e0 Privas, qui est arriv\u00e9 en premier entre Primo\u017e ROGLI\u010c et Simone CONSONNI ?","title":"Exercices sur le mod\u00e8le relationnel"},{"location":"T4_Bases_de_donn%C3%A9es/4.1_Mod%C3%A8le_relationnel/02_exercices.html#exercices-sur-le-modele-relationnel","text":"","title":"Exercices sur le mod\u00e8le relationnel"},{"location":"T4_Bases_de_donn%C3%A9es/4.1_Mod%C3%A8le_relationnel/02_exercices.html#exercice-1","text":"(d'apr\u00e8s Pr\u00e9pabac NSI, Terminale, G.CONNAN, V.PETROV, G.ROZSAVOLGYI, L.SIGNAC, \u00e9ditions HATIER.) Deux relations mod\u00e9lisent la flotte de voitures d'un r\u00e9seau de location de voitures. Agences | id_agence | ville | d\u00e9partement | |-----------|-----------|-------------| | 1 | Paris | 75 | | 2 | Lyon | 69 | | 3 | Marseille | 13 | | 4 | Aubagne | 13 | Voitures | id_voiture | marque | mod\u00e8le | kilom\u00e9trage | couleur | id_agence | |------------|---------|--------|-------------|---------|-----------| | 1 | Renault | Clio | 12000 | Rouge | 2 | | 2 | Peugeot | 205 | 22000 | Noir | 3 | | 3 | Toyota | Yaris | 33000 | Noir | 3 | Combien la relation Voitures comporte-t-elle d'attributs ? Que vaut son cardinal ? Quel est le domaine de l'attribut ig_agnece dans la relation Voitures ? Quel est le sch\u00e9ma relationnel de la relation Agences ? Quelle est la cl\u00e9 primaire de la relation Agences ? Quelle est la cl\u00e9 primaire de la relation Voitures ? Quelle est la cl\u00e9 \u00e9trang\u00e8re de la relation Voitures ?","title":"Exercice 1"},{"location":"T4_Bases_de_donn%C3%A9es/4.1_Mod%C3%A8le_relationnel/02_exercices.html#exercice-2","text":"Reprenons la base Tour de France 2020 vue en cours : relation \u00c9quipes | codeEquipe | nomEquipe | |------|-----------------------------| | ALM | AG2R La Mondiale | | AST | Astana Pro Team | | TBM | Bahrain - McLaren | | BOH | BORA - hansgrohe | | CCC | CCC Team | | COF | Cofidis, Solutions Cr\u00e9dits | | DQT | Deceuninck - Quick Step | | EF1 | EF Pro Cycling | | GFC | Groupama - FDJ | | LTS | Lotto Soudal | | ... | ... | relation Coureurs | dossard | nomCoureur | pr\u00e9nomCoureur | codeEquipe | |---------------|-------------|---------------|------------| | 141 | L\u00d3PEZ | Miguel \u00c1ngel | AST | | 142 | FRAILE | Omar | AST | | 143 | HOULE | Hugo | AST | | 11 | ROGLI\u010c | Primo\u017e | TJV | | 12 | BENNETT | George | TJV | | 41 | ALAPHILIPPE | Julian | DQT | | 44 | CAVAGNA | R\u00e9mi | DQT | | 45 | DECLERCQ | Tim | DQT | | 121 | MARTIN | Guillaume | COF | | 122 | CONSONNI | Simone | COF | | 123 | EDET | Nicolas | COF | | \u2026 | \u2026 | \u2026 | \u2026 | relation \u00c9tapes | num\u00e9roEtape | villeD\u00e9part | villeArriv\u00e9e | km | |-------------|-------------|-------------------|-----| | 1 | Nice | Nice | 156 | | 2 | Nice | Nice | 185 | | 3 | Nice | Sisteron | 198 | | 4 | Sisteron | Orci\u00e8res-Merlette | 160 | | 5 | Gap | Privas | 198 | | ... | ... | ... | ... | relation Temps | dossard | num\u00e9roEtape | tempsR\u00e9alis\u00e9 | |:-------------:|:-----------:|:------------:| | 41 | 2 | 04:55:27 | | 121 | 4 | 04:07:47 | | 11 | 5 | 04:21:22 | | 122 | 5 | 04:21:22 | | ... | ... | ... | Questions 1. Quel temps a r\u00e9alis\u00e9 Guillaume MARTIN sur l'\u00e9tape Sisteron / Orci\u00e8res-Merlette ? 2. \u00c0 l'arriv\u00e9e \u00e0 Privas, qui est arriv\u00e9 en premier entre Primo\u017e ROGLI\u010c et Simone CONSONNI ?","title":"Exercice 2"},{"location":"T4_Bases_de_donn%C3%A9es/4.1_Mod%C3%A8le_relationnel/cours.html","text":"Le mod\u00e8le relationnel \u2693\ufe0e 0. De la n\u00e9cessit\u00e9 d'organiser le stockage de ses donn\u00e9es \u2693\ufe0e Lorsqu'une grande quantit\u00e9 de donn\u00e9es doit \u00eatre g\u00e9r\u00e9e, il faut savoir distinguer deux choses : - la structure qui va sous-tendre l'ensemble de ces donn\u00e9es, notamment les liens entre elles, les hi\u00e9rarchies \u00e9ventuelles,... - le type de logiciel qui va m'aider \u00e0 g\u00e9rer ces donn\u00e9es. Par exemple, si je souhaite stocker toutes les temp\u00e9ratures relev\u00e9es dans mon jardin tous les matins \u00e0 07h00, je sais que mes donn\u00e9es seront des couples (date, temperature) . \u00c9ventuellement ces dates seront regroup\u00e9es par mois, ou par saison... mais la structure des donn\u00e9es sera quand m\u00eame simple et lin\u00e9aire. Pour g\u00e9rer ces donn\u00e9es, je peux : les \u00e9crire \u00e0 la main dans mon agenda, cr\u00e9er un feuille de tableur avec Excel ou LibreOffice, utiliser une liste dans un IDE Python,... Chaque m\u00e9thode aura ses avantages et ses inconv\u00e9nients. - Si le nombre de donn\u00e9es \u00e0 stocker devient tr\u00e8s grand, est-ce que ma solution choisie pourra les g\u00e9rer ? (on peut par exemple m\u00e9diter sur le cas du Royaume-Uni dont le comptage des patients positifs au Covid est devenu faux car il a d\u00e9pass\u00e9 les limites de leur feuille Excel ) Est-ce que d'autres personnes que moi sont susceptibles de consulter ou modifier ces donn\u00e9es, \u00e9ventuellement en m\u00eame temps que moi ? Si une donn\u00e9e se retrouve \u00e0 plusieurs endroits dans mes donn\u00e9es, devrais-je aller modifier cette donn\u00e9e partout o\u00f9 elle se trouve ou bien une seule fois ? L'\u00e9tude des Bases de Donn\u00e9es tente d'apporter des r\u00e9ponses \u00e0 toutes ces questions. 1. Le mod\u00e8le relationnel \u2693\ufe0e Le programme de Terminale NSI pr\u00e9voit uniquement l'\u00e9tude du mod\u00e8le relationnel . Th\u00e9oris\u00e9 en 1970 par le Britannique Edgard J. Codd, le mod\u00e8le relationnel est \u00e0 ce jour le mod\u00e8le de base de donn\u00e9es le plus utilis\u00e9, m\u00eame si l'\u00e8re actuelle du Big Data tend \u00e0 mettre en avant d'autres mod\u00e8les non relationnels (nous en reparlerons). Les principes de bases du mod\u00e8le relationnel sont : Les donn\u00e9es sont regroup\u00e9es dans diff\u00e9rentes tables (qu'on appellera plut\u00f4t relations et qui donnent son nom au mod\u00e8le). Chaque relation contient des \u00e9l\u00e9ments directement en lien avec le sujet g\u00e9n\u00e9ral de la table. Autant que possible, des donn\u00e9es ne doivent se trouver dans des tables diff\u00e9rentes : on \u00e9vite la redondance des donn\u00e9es. Les donn\u00e9es ne doivent pas contenir elles-m\u00eames d'autres donn\u00e9es : on parle d' atomicit\u00e9 des donn\u00e9es. Un mod\u00e8le relationnel est donc bas\u00e9 sur des... relations . 1.1 Premi\u00e8re relation \u2693\ufe0e Prenons l'exemple d'une biblioth\u00e8que dont la base de donn\u00e9es poss\u00e8de une relation \u00ablivres\u00bb : Vocabulaire \u2665 relation , ou table : c'est l'endroit o\u00f9 sont rang\u00e9es les donn\u00e9es. L'ordre des lignes (que l'on appelera des enregistrements) n'a pas d'importance. enregistrement , ou tuple , ou n-uplet , ou t-uplet , ou vecteur : cela correspond \u00e0 une ligne du tableau, et donc un ensemble de valeurs li\u00e9es entre elles : l'auteur \u00abEric VUILLARD\u00bb a bien \u00e9crit le livre \u00abL'Ordre du jour\u00bb. Il est interdit que des enregistrements soient totalement identiques. Le nombre d'enregistrement d'une relation s'appelle son cardinal . attribut : c'est l'\u00e9quivalent d'une colonne. Il y a dans notre relation un attribut \u00abcode\u00bb, un attribut \u00abTitre\u00bb, etc. domaine : le domaine d\u00e9signe \u00able type\u00bb (au sens type Int , Float , String ). L'attribut \u00ab\u00c9diteur\u00bb est une cha\u00eene de caract\u00e8res, par contre l'attribut \u00abISBN\u00bb est un nombre de 13 chiffres, commen\u00e7ant manifestement par 978. sch\u00e9ma : le sch\u00e9ma d'une relation est le regroupement de tous les attributs et de leur domaine respectif. Ici notre sch\u00e9ma serait ((Code, Entier), (Titre, Cha\u00eene de caract\u00e8res), (Auteur, Cha\u00eene de caract\u00e8res), (\u00c9diteur, Cha\u00eene de caract\u00e8res), (ISBN, Entier)) 1.2 Cl\u00e9 Primaire \u2693\ufe0e Une cl\u00e9 primaire est un attribut (ou une r\u00e9union d'attributs) dont la connaissance suffit \u00e0 identifier avec certitude un unique enregistrement. Observons, dans notre relation pr\u00e9c\u00e9dente, ce qui peut \u00eatre une cl\u00e9 primaire et ce qui ne peut pas l'\u00eatre. Titre : cet attribut pourrait jouer le r\u00f4le de cl\u00e9 primaire. En effet, notre table ne contient pas deux livres ayant le m\u00eame titre. Auteur : cet attribut pourrait jouer le r\u00f4le de cl\u00e9 primaire. En effet, notre table ne contient pas deux livres ayant le m\u00eame auteur. \u00c9diteur : cet attribut ne peut pas jouer le r\u00f4le de cl\u00e9 primaire. En effet, la donn\u00e9e de l'attribut \u00abActes Sud\u00bb renvoie vers 4 livres diff\u00e9rents. ISBN : (International Standard Book Number) cet attribut est un num\u00e9ro unique sp\u00e9cifique \u00e0 chaque livre : il peut jouer le r\u00f4le de cl\u00e9 primaire. Code : cet attribut pourrait jouer le r\u00f4le de cl\u00e9 primaire. En effet, notre table ne contient pas deux livres ayant le m\u00eame code. Alors, quelle cl\u00e9 primaire choisir ? Il faut pour cela r\u00e9fl\u00e9chir \u00e0 ce que deviendrait notre relation si elle contenait 1000 livres au lieu de 10. Il est fort probable que deux livres aient alors le m\u00eame auteur : l'attribut \u00abAuteur\u00bb ne serait donc plus une cl\u00e9 primaire. Il peut arriver aussi que deux livres aient le m\u00eame titre : l'attribut \u00abTitre\u00bb n'est donc pas une bonne cl\u00e9 primaire. Par d\u00e9finition, l'attribut \u00abISBN\u00bb pourrait jouer le r\u00f4le de cl\u00e9 primaire. Quant \u00e0 l'attribut \u00abCode\u00bb, il s'agit sans doute d'une nomenclature \u00abmaison\u00bb correspondant \u00e0 une \u00e9tiquette coll\u00e9e sur la tranche des livres : c'est donc une cl\u00e9 primaire qu'on qualifiera d'\u00abartificielle\u00bb. Attention, il ne peut pas y avoir deux cl\u00e9s primaires dans une table. La cl\u00e9 primaire choisie ici serait sans aucun doute l'attribut \u00abCode\u00bb. 1.3 D'autres relations \u2693\ufe0e Ajoutons maintenant les relations ci-dessous : Relation \u00abEmprunts\u00bb | id_emprunteur | date | Nom | Pr\u00e9nom | titre | auteur | code | |---------------|------------|--------|--------|-------------------|-----------------|------| | 845 | 12/10/2020 | DURAND | Michel | Au revoir l\u00e0-haut | Pierre LEMAITRE | 942 | | 125 | 13/10/2020 | MARTIN | Jean | Pas pleurer | Lydie SALVAYRE | 1023 | | 125 | 13/10/2020 | MARTIN | Jean | Boussole | Mathias ENARD | 486 | Relation \u00abEmprunteurs\u00bb | id_emprunteur | Nom | Pr\u00e9nom | |---------------|--------|--------| | 129 | DULAC | Marcel | | 845 | DURAND | Michel | | 125 | MARTIN | Jean | L'attribut \u00abid_emprunteur\u00bb est une cl\u00e9 primaire de la relation \u00abEmprunteurs\u00bb. Notion de cl\u00e9 \u00e9trang\u00e8re Y-a-t-il une cl\u00e9 primaire dans la relation \u00abEmprunts\u00bb ? \u00abid_emprunteur\u00bb est bien une cl\u00e9 primaire (d'\u00abEmprunteurs\u00bb) mais ne peut pas \u00eatre une cl\u00e9 primaire d'\u00abEmprunts\u00bb, car une personne peut prendre plusieurs livres \u00e0 la fois : on dit que c'est une cl\u00e9 \u00e9trang\u00e8re . \u00abcode\u00bb est aussi une cl\u00e9 \u00e9trang\u00e8re : c'est une cl\u00e9 primaire (de la relation \u00ablivres\u00bb) mais elle ne peut pas jouer le r\u00f4le de cl\u00e9 primaire pour la relation emprunt, car un m\u00eame livre pourra \u00eatre pris \u00e0 diff\u00e9rentes dates. Une cl\u00e9 primaire pourrait alors \u00eatre la combinaison (\u00abdate\u00bb, \u00abcode\u00bb). En effet, aucun livre ne pouvant \u00eatre emprunt\u00e9 deux fois le m\u00eame jour, la connaissance de \u00abdate\u00bb et \u00abcode\u00bb suffit \u00e0 identifier n'importe quel enregistrement. 1.4 Redondance des donn\u00e9es \u2693\ufe0e La relation \u00abEmprunts\u00bb contient des informations qui sont d\u00e9j\u00e0 disponibles dans d'autres relations : on dit qu'elle est redondante , et c'est quelque chose qu'il faut \u00e9viter. \u00c0 la fois pour des raisons d'espace de stockage mais aussi de coh\u00e9rence : si une modification doit \u00eatre faite (un emprunteur change de pr\u00e9nom), cette modification ne doit \u00eatre faite qu'\u00e0 un seul endroit de notre base de donn\u00e9es. Une version non-redondante de la relation \u00abEmprunteurs\u00bb serait donc celle-ci : Relation \u00abEmprunts\u00bb | id_emprunteur | date | code | |---------------|------------|------| | 845 | 12/10/2020 | 942 | | 125 | 13/10/2020 | 1023 | | 125 | 13/10/2020 | 486 | 1.5 Contraintes d'int\u00e9grit\u00e9 \u2693\ufe0e 1.5.1 Contrainte de domaine \u2693\ufe0e Tout attribut d'un enregistrement doit respecter le domaine indiqu\u00e9 dans le sch\u00e9ma relationnel. Attention, certains domaines sont subtils. Par exemple, si une relation poss\u00e8de un attribut \"Code Postal\", le domaine de cet attribut devra \u00eatre String plut\u00f4t que Entier . Dans le cas contraire, un enregistrement poss\u00e9dant le code postal 03150 serait converti en 3150 (car pour les entiers, 03150 = 3150). Or le code postal 3150 n'existe pas. 1.5.2 Contrainte de relation \u2693\ufe0e La contrainte de relation impose que tout enregistrement soit unique : cette contrainte est r\u00e9alis\u00e9e par l'existence obligatoire d'une cl\u00e9 primaire. Cette cl\u00e9 primaire est souvent cr\u00e9\u00e9e de mani\u00e8re artificielle (voir id_emprunteurs dans la table ci-dessus par exemple). 1.5.3 Contrainte de r\u00e9f\u00e9rence \u2693\ufe0e La coh\u00e9rence entre les diff\u00e9rentes tables d'une base de donn\u00e9es est assur\u00e9e par les cl\u00e9s \u00e9trang\u00e8res : dans une table, la valeur d'un attribut qui est cl\u00e9 \u00e9trang\u00e8re doit obligatoirement pouvoir \u00eatre retrouv\u00e9e dans la table dont cet attribut est cl\u00e9 primaire. Par exemple, la relation \u00abEmprunts_v2\u00bb ci-dessous n'est pas valable : Relation \u00abEmprunts_v2\u00bb | id_emprunteur | date | code | |---------------|------------|------| | 845 | 12/10/2020 | 942 | | 125 | 13/10/2020 | 1023 | | 125 | 13/10/2020 | 511 | En effet, le code 511 (cl\u00e9 \u00e9trang\u00e8re de ma table \u00abEmprunts_v2\u00bb) ne correspond \u00e0 aucun enregistrement dans la table dont il est cl\u00e9 primaire (la table \u00abLivres\u00bb) : Il n'y a pas de code 511, donc ma relation \u00abEmprunts_v2\u00bb ne respecte pas la contrainte de r\u00e9f\u00e9rence, et provoquerait une erreur du SGBD. 1.6 Repr\u00e9sentation usuelles des bases de donn\u00e9es en mod\u00e8le relationnel \u2693\ufe0e Consid\u00e9rons la base de donn\u00e9es Tour de France 2020, contenant les relations suivantes : (d'apr\u00e8s une id\u00e9e de Didier Boulle, http://webtic.free.fr/sql/mldr.htm) relation \u00c9quipes | codeEquipe | nomEquipe | |------|-----------------------------| | ALM | AG2R La Mondiale | | AST | Astana Pro Team | | TBM | Bahrain - McLaren | | BOH | BORA - hansgrohe | | CCC | CCC Team | | COF | Cofidis, Solutions Cr\u00e9dits | | DQT | Deceuninck - Quick Step | | EF1 | EF Pro Cycling | | GFC | Groupama - FDJ | | LTS | Lotto Soudal | | ... | ... | Le sch\u00e9ma relationnel de cette table s'\u00e9crira souvent : Equipes ( codeEquipe String , nomEquipe String ) Notez le soulignement sous le mot \u00abcodeEquipe\u00bb, qui signifie que cet attribut est une cl\u00e9 primaire. Les cl\u00e9s \u00e9trang\u00e8res, lorsqu'elles existent, peuvent \u00eatre signal\u00e9es par une ast\u00e9risque *. relation Coureurs | dossard | nomCoureur | pr\u00e9nomCoureur | codeEquipe | |---------------|-------------|---------------|------------| | 141 | L\u00d3PEZ | Miguel \u00c1ngel | AST | | 142 | FRAILE | Omar | AST | | 143 | HOULE | Hugo | AST | | 11 | ROGLI\u010c | Primo\u017e | TJV | | 12 | BENNETT | George | TJV | | 41 | ALAPHILIPPE | Julian | DQT | | 44 | CAVAGNA | R\u00e9mi | DQT | | 45 | DECLERCQ | Tim | DQT | | 121 | MARTIN | Guillaume | COF | | 122 | CONSONNI | Simone | COF | | 123 | EDET | Nicolas | COF | | \u2026 | \u2026 | \u2026 | \u2026 | Sch\u00e9ma : Equipes ( dossard Int , nomCoureur String , pr\u00e9nomCoureur String , codeEquipe* String ) relation \u00c9tapes | num\u00e9roEtape | villeD\u00e9part | villeArriv\u00e9e | km | |-------------|-------------|-------------------|-----| | 1 | Nice | Nice | 156 | | 2 | Nice | Nice | 185 | | 3 | Nice | Sisteron | 198 | | 4 | Sisteron | Orci\u00e8res-Merlette | 160 | | 5 | Gap | Privas | 198 | | ... | ... | ... | ... | Sch\u00e9ma : \u00c9tapes ( num\u00e9roEtape Int , villeD\u00e9part String , villeArriv\u00e9e String , km Int ) relation Temps | dossard | num\u00e9roEtape | tempsR\u00e9alis\u00e9 | |:-------------:|:-----------:|:------------:| | 41 | 2 | 04:55:27 | | 121 | 4 | 04:07:47 | | 11 | 5 | 04:21:22 | | 122 | 5 | 04:21:22 | | 41 | 4 | 04:08:24 | | ... | ... | ... | Sch\u00e9ma : Temps ( dossard * Int , num\u00e9roEtape * Int , tempsR\u00e9alis\u00e9 String ) Remarquez que la cl\u00e9 primaire de cette relation est le couple dossard-num\u00e9roEtape. Repr\u00e9sentation graphique Bibliographie \u2693\ufe0e Num\u00e9rique et Sciences Informatiques, Terminale, T. BALABONSKI, S. CONCHON, J.-C. FILLIATRE, K. NGUYEN, \u00e9ditions ELLIPSES. Pr\u00e9pabac NSI, Terminale, G.CONNAN, V.PETROV, G.ROZSAVOLGYI, L.SIGNAC, \u00e9ditions HATIER. Cours d'Olivier L\u00e9cluse, https://lecluseo.frama.io/leclusemaths/nsi/NSI_T/bdd/modrel/ https://www.procyclingstats.com/","title":"Le mod\u00e8le relationnel"},{"location":"T4_Bases_de_donn%C3%A9es/4.1_Mod%C3%A8le_relationnel/cours.html#le-modele-relationnel","text":"","title":"Le mod\u00e8le relationnel"},{"location":"T4_Bases_de_donn%C3%A9es/4.1_Mod%C3%A8le_relationnel/cours.html#0-de-la-necessite-dorganiser-le-stockage-de-ses-donnees","text":"Lorsqu'une grande quantit\u00e9 de donn\u00e9es doit \u00eatre g\u00e9r\u00e9e, il faut savoir distinguer deux choses : - la structure qui va sous-tendre l'ensemble de ces donn\u00e9es, notamment les liens entre elles, les hi\u00e9rarchies \u00e9ventuelles,... - le type de logiciel qui va m'aider \u00e0 g\u00e9rer ces donn\u00e9es. Par exemple, si je souhaite stocker toutes les temp\u00e9ratures relev\u00e9es dans mon jardin tous les matins \u00e0 07h00, je sais que mes donn\u00e9es seront des couples (date, temperature) . \u00c9ventuellement ces dates seront regroup\u00e9es par mois, ou par saison... mais la structure des donn\u00e9es sera quand m\u00eame simple et lin\u00e9aire. Pour g\u00e9rer ces donn\u00e9es, je peux : les \u00e9crire \u00e0 la main dans mon agenda, cr\u00e9er un feuille de tableur avec Excel ou LibreOffice, utiliser une liste dans un IDE Python,... Chaque m\u00e9thode aura ses avantages et ses inconv\u00e9nients. - Si le nombre de donn\u00e9es \u00e0 stocker devient tr\u00e8s grand, est-ce que ma solution choisie pourra les g\u00e9rer ? (on peut par exemple m\u00e9diter sur le cas du Royaume-Uni dont le comptage des patients positifs au Covid est devenu faux car il a d\u00e9pass\u00e9 les limites de leur feuille Excel ) Est-ce que d'autres personnes que moi sont susceptibles de consulter ou modifier ces donn\u00e9es, \u00e9ventuellement en m\u00eame temps que moi ? Si une donn\u00e9e se retrouve \u00e0 plusieurs endroits dans mes donn\u00e9es, devrais-je aller modifier cette donn\u00e9e partout o\u00f9 elle se trouve ou bien une seule fois ? L'\u00e9tude des Bases de Donn\u00e9es tente d'apporter des r\u00e9ponses \u00e0 toutes ces questions.","title":"0. De la n\u00e9cessit\u00e9 d'organiser le stockage de ses donn\u00e9es"},{"location":"T4_Bases_de_donn%C3%A9es/4.1_Mod%C3%A8le_relationnel/cours.html#1-le-modele-relationnel","text":"Le programme de Terminale NSI pr\u00e9voit uniquement l'\u00e9tude du mod\u00e8le relationnel . Th\u00e9oris\u00e9 en 1970 par le Britannique Edgard J. Codd, le mod\u00e8le relationnel est \u00e0 ce jour le mod\u00e8le de base de donn\u00e9es le plus utilis\u00e9, m\u00eame si l'\u00e8re actuelle du Big Data tend \u00e0 mettre en avant d'autres mod\u00e8les non relationnels (nous en reparlerons). Les principes de bases du mod\u00e8le relationnel sont : Les donn\u00e9es sont regroup\u00e9es dans diff\u00e9rentes tables (qu'on appellera plut\u00f4t relations et qui donnent son nom au mod\u00e8le). Chaque relation contient des \u00e9l\u00e9ments directement en lien avec le sujet g\u00e9n\u00e9ral de la table. Autant que possible, des donn\u00e9es ne doivent se trouver dans des tables diff\u00e9rentes : on \u00e9vite la redondance des donn\u00e9es. Les donn\u00e9es ne doivent pas contenir elles-m\u00eames d'autres donn\u00e9es : on parle d' atomicit\u00e9 des donn\u00e9es. Un mod\u00e8le relationnel est donc bas\u00e9 sur des... relations .","title":"1. Le mod\u00e8le relationnel"},{"location":"T4_Bases_de_donn%C3%A9es/4.1_Mod%C3%A8le_relationnel/cours.html#15-contraintes-dintegrite","text":"","title":"1.5 Contraintes d'int\u00e9grit\u00e9"},{"location":"T4_Bases_de_donn%C3%A9es/4.1_Mod%C3%A8le_relationnel/cours.html#bibliographie","text":"Num\u00e9rique et Sciences Informatiques, Terminale, T. BALABONSKI, S. CONCHON, J.-C. FILLIATRE, K. NGUYEN, \u00e9ditions ELLIPSES. Pr\u00e9pabac NSI, Terminale, G.CONNAN, V.PETROV, G.ROZSAVOLGYI, L.SIGNAC, \u00e9ditions HATIER. Cours d'Olivier L\u00e9cluse, https://lecluseo.frama.io/leclusemaths/nsi/NSI_T/bdd/modrel/ https://www.procyclingstats.com/","title":"Bibliographie"},{"location":"T4_Bases_de_donn%C3%A9es/4.2_Langage_SQL/02_exercices.html","text":"Exercices sur le langage SQL \u2693\ufe0e Exercice 1 \u2693\ufe0e (d'apr\u00e8s Pr\u00e9pabac NSI, Terminale, G.CONNAN, V.PETROV, G.ROZSAVOLGYI, L.SIGNAC, \u00e9ditions HATIER.) On veut cr\u00e9er une base de donn\u00e9es baseHopital.db qui contiendra les trois tables suivantes : Patients Int id Text nom Text prenom Text genre Int annee_naissance Ordonnances Int code Int id_patient Int matricule_medecin Text date_ord Text medicaments Medecins Int matricule Text nom_prenom Text specialite Text telephone On suppose que les dates sont donn\u00e9es sous la forme jj-mm-aaaa . Donner les commandes SQLite permettant de cr\u00e9er ces tables. correction : CREATE TABLE Patients( id INTEGER PRIMARY KEY AUTOINCREMENT, nom TEXT, prenom TEXT, genre TEXT, annee_naissance INTEGER ); CREATE TABLE Ordonnances( code INTEGER PRIMARY KEY, id_patient INTEGER, matricule_medecin INTEGER, date_ord TEXT, medicaments INTEGER ); CREATE TABLE Medecins( matricule INTEGER PRIMARY KEY, nom_prenom TEXT, specialite TEXT, telephone TEXT ); Mme Anne Wizeunid, n\u00e9e en 2000 et demeurant 3 rue des Pignons Verts 12345 Avonelit doit \u00eatre enregistr\u00e9e comme patiente. Donner la commande SQLite correspondante. correction : INSERT INTO Patients VALUES (NULL, \"Wizeunit\", \"Anne\", \"F\", 2000); Commentaire : NULL sert ici \u00e0 ne rien mettre l\u00e0 o\u00f9 le SGBD g\u00e8re tout seul la cl\u00e9 primaire en autoincrement. (hors-programme) Le patient num\u00e9ro 100 a chang\u00e9 de genre et est maintenant une femme. Donner la commande SQLite modifiant en cons\u00e9quence ses donn\u00e9es. correction : UPDATE Patients SET genre = 'F' WHERE id = 100 ; Par souci d'\u00e9conomie, la direction d\u00e9cide de se passer des m\u00e9decins sp\u00e9cialis\u00e9s en \u00e9pid\u00e9miologie. Donner la commande permettant de supprimer leurs fiches. correction : DELETE FROM Medecins WHERE specialite = \"\u00e9pid\u00e9miologie\"; Donner la liste des patient(e)s ayant \u00e9t\u00e9 examin\u00e9(e)s par un(e) psychiatre en avril 2020. correction : SELECT p.nom, p.prenom FROM Patients AS p JOIN Ordonnances AS o ON p.id = o.id_patient JOIN Medecins AS m ON o.matricule_medecin = m.matricule WHERE m.specialite = \"psychiatrie\" AND o.date_ord LIKE \"%04-2020%\" Exercice 2 \u2693\ufe0e Questions interactives \u00e0 r\u00e9aliser sur le site sqlzoo.net Travail sur SELECT, (base de donn\u00e9es Nobel) ici Correction : voir https://github.com/jisaw/sqlzoo-solutions/blob/master/select-from-nobel.sql Travail sur SUM et COUNT, (base de donn\u00e9es World) ici Correction : voir https://github.com/jisaw/sqlzoo-solutions/blob/master/sum-and-count.sql Travail sur JOIN, (base de donn\u00e9es Euro2012) ici Correction : voir https://github.com/jisaw/sqlzoo-solutions/blob/master/join.sql Exercice 3 \u2693\ufe0e bas\u00e9 sur le travail de G.Viateau (Bayonne) On consid\u00e8re ci-dessous le sch\u00e9ma de la base de donn\u00e9es du stock d'un supermarch\u00e9 : Quelle requ\u00eate SQL donne le prix d'achat du produit dont le nom_court est \u00abLiq_Vaiss_1L\u00bb ? correction : SELECT prix_achat FROM Produits WHERE nom_court = 'Liq_Vaiss_1L' ; Quelle requ\u00eate donne l'adresse, le code postal et la ville du fournisseur dont le nom est \u00abAvenir_confiseur\u00bb ? correction : SELECT adresse, cp, ville FROM Fournisseurs WHERE nom = 'Avenir_confiseur'; Quelle requ\u00eate donne les produits \u00e9tant en rupture de stock ? correction : SELECT Produits.nom FROM Produits JOIN Stocks ON Produits.id = Stocks.produit WHERE Stocks.quantite = 0; Quelle requ\u00eate donne la liste de toutes les ampoules vendues en magasin ? On pourra faire l'hypoth\u00e8se que le nom du produit contient le mot \u00abampoule\u00bb correction : SELECT nom FROM Produits WHERE nom LIKE \"%ampoule%\"; Quelle requ\u00eate permet d'avoir le prix moyen de ces ampoules ? correction : SELECT AVG(prix_vente) FROM Produits WHERE nom LIKE \"%ampoule%\"; Quelle requ\u00eate permet d'identifier le produit le plus cher du magasin ? correction : SELECT nom_court FROM Produits ORDER BY prix_vente DESC LIMIT 1; ou SELECT nom FROM Produits WHERE prix_vente = (SELECT MAX(prix_vente) FROM Produits); Quelle requ\u00eate renvoie les noms des produits dont la date de p\u00e9remption est d\u00e9pass\u00e9e ? (on pourra utiliser la fonction SQL NOW() qui renvoie la date actuelle ) correction : SELECT p.nom FROM Produits AS p JOIN Stocks AS s ON s.produits = p.id WHERE s.date_peremption < NOW(); Exercice 4 \u2693\ufe0e site r\u00e9alis\u00e9 par J. Le Coupanec (Acad\u00e9mie de Rennes) Sur la page http://nsi.colbert.bzh/sql/ , suivez le parcours des deux TPs : - TP1 : Gestion d'un r\u00e9seau d'agences de location de voitures. La base de donn\u00e9es locations.db contient les tables Agences , Locations , Vehicules . TP2 : Le championnat de France 2015-2016 La base de donn\u00e9es soccer.db contient les tables Team , Match , Event , Player .","title":"Exercices sur le langage SQL"},{"location":"T4_Bases_de_donn%C3%A9es/4.2_Langage_SQL/02_exercices.html#exercices-sur-le-langage-sql","text":"","title":"Exercices sur le langage SQL"},{"location":"T4_Bases_de_donn%C3%A9es/4.2_Langage_SQL/02_exercices.html#exercice-1","text":"(d'apr\u00e8s Pr\u00e9pabac NSI, Terminale, G.CONNAN, V.PETROV, G.ROZSAVOLGYI, L.SIGNAC, \u00e9ditions HATIER.) On veut cr\u00e9er une base de donn\u00e9es baseHopital.db qui contiendra les trois tables suivantes : Patients Int id Text nom Text prenom Text genre Int annee_naissance Ordonnances Int code Int id_patient Int matricule_medecin Text date_ord Text medicaments Medecins Int matricule Text nom_prenom Text specialite Text telephone On suppose que les dates sont donn\u00e9es sous la forme jj-mm-aaaa . Donner les commandes SQLite permettant de cr\u00e9er ces tables. correction : CREATE TABLE Patients( id INTEGER PRIMARY KEY AUTOINCREMENT, nom TEXT, prenom TEXT, genre TEXT, annee_naissance INTEGER ); CREATE TABLE Ordonnances( code INTEGER PRIMARY KEY, id_patient INTEGER, matricule_medecin INTEGER, date_ord TEXT, medicaments INTEGER ); CREATE TABLE Medecins( matricule INTEGER PRIMARY KEY, nom_prenom TEXT, specialite TEXT, telephone TEXT ); Mme Anne Wizeunid, n\u00e9e en 2000 et demeurant 3 rue des Pignons Verts 12345 Avonelit doit \u00eatre enregistr\u00e9e comme patiente. Donner la commande SQLite correspondante. correction : INSERT INTO Patients VALUES (NULL, \"Wizeunit\", \"Anne\", \"F\", 2000); Commentaire : NULL sert ici \u00e0 ne rien mettre l\u00e0 o\u00f9 le SGBD g\u00e8re tout seul la cl\u00e9 primaire en autoincrement. (hors-programme) Le patient num\u00e9ro 100 a chang\u00e9 de genre et est maintenant une femme. Donner la commande SQLite modifiant en cons\u00e9quence ses donn\u00e9es. correction : UPDATE Patients SET genre = 'F' WHERE id = 100 ; Par souci d'\u00e9conomie, la direction d\u00e9cide de se passer des m\u00e9decins sp\u00e9cialis\u00e9s en \u00e9pid\u00e9miologie. Donner la commande permettant de supprimer leurs fiches. correction : DELETE FROM Medecins WHERE specialite = \"\u00e9pid\u00e9miologie\"; Donner la liste des patient(e)s ayant \u00e9t\u00e9 examin\u00e9(e)s par un(e) psychiatre en avril 2020. correction : SELECT p.nom, p.prenom FROM Patients AS p JOIN Ordonnances AS o ON p.id = o.id_patient JOIN Medecins AS m ON o.matricule_medecin = m.matricule WHERE m.specialite = \"psychiatrie\" AND o.date_ord LIKE \"%04-2020%\"","title":"Exercice 1"},{"location":"T4_Bases_de_donn%C3%A9es/4.2_Langage_SQL/02_exercices.html#exercice-2","text":"Questions interactives \u00e0 r\u00e9aliser sur le site sqlzoo.net Travail sur SELECT, (base de donn\u00e9es Nobel) ici Correction : voir https://github.com/jisaw/sqlzoo-solutions/blob/master/select-from-nobel.sql Travail sur SUM et COUNT, (base de donn\u00e9es World) ici Correction : voir https://github.com/jisaw/sqlzoo-solutions/blob/master/sum-and-count.sql Travail sur JOIN, (base de donn\u00e9es Euro2012) ici Correction : voir https://github.com/jisaw/sqlzoo-solutions/blob/master/join.sql","title":"Exercice 2"},{"location":"T4_Bases_de_donn%C3%A9es/4.2_Langage_SQL/02_exercices.html#exercice-3","text":"bas\u00e9 sur le travail de G.Viateau (Bayonne) On consid\u00e8re ci-dessous le sch\u00e9ma de la base de donn\u00e9es du stock d'un supermarch\u00e9 : Quelle requ\u00eate SQL donne le prix d'achat du produit dont le nom_court est \u00abLiq_Vaiss_1L\u00bb ? correction : SELECT prix_achat FROM Produits WHERE nom_court = 'Liq_Vaiss_1L' ; Quelle requ\u00eate donne l'adresse, le code postal et la ville du fournisseur dont le nom est \u00abAvenir_confiseur\u00bb ? correction : SELECT adresse, cp, ville FROM Fournisseurs WHERE nom = 'Avenir_confiseur'; Quelle requ\u00eate donne les produits \u00e9tant en rupture de stock ? correction : SELECT Produits.nom FROM Produits JOIN Stocks ON Produits.id = Stocks.produit WHERE Stocks.quantite = 0; Quelle requ\u00eate donne la liste de toutes les ampoules vendues en magasin ? On pourra faire l'hypoth\u00e8se que le nom du produit contient le mot \u00abampoule\u00bb correction : SELECT nom FROM Produits WHERE nom LIKE \"%ampoule%\"; Quelle requ\u00eate permet d'avoir le prix moyen de ces ampoules ? correction : SELECT AVG(prix_vente) FROM Produits WHERE nom LIKE \"%ampoule%\"; Quelle requ\u00eate permet d'identifier le produit le plus cher du magasin ? correction : SELECT nom_court FROM Produits ORDER BY prix_vente DESC LIMIT 1; ou SELECT nom FROM Produits WHERE prix_vente = (SELECT MAX(prix_vente) FROM Produits); Quelle requ\u00eate renvoie les noms des produits dont la date de p\u00e9remption est d\u00e9pass\u00e9e ? (on pourra utiliser la fonction SQL NOW() qui renvoie la date actuelle ) correction : SELECT p.nom FROM Produits AS p JOIN Stocks AS s ON s.produits = p.id WHERE s.date_peremption < NOW();","title":"Exercice 3"},{"location":"T4_Bases_de_donn%C3%A9es/4.2_Langage_SQL/02_exercices.html#exercice-4","text":"site r\u00e9alis\u00e9 par J. Le Coupanec (Acad\u00e9mie de Rennes) Sur la page http://nsi.colbert.bzh/sql/ , suivez le parcours des deux TPs : - TP1 : Gestion d'un r\u00e9seau d'agences de location de voitures. La base de donn\u00e9es locations.db contient les tables Agences , Locations , Vehicules . TP2 : Le championnat de France 2015-2016 La base de donn\u00e9es soccer.db contient les tables Team , Match , Event , Player .","title":"Exercice 4"},{"location":"T4_Bases_de_donn%C3%A9es/4.2_Langage_SQL/03_python_et_SQL.html","text":"Python et SQL / mini-projets \u2693\ufe0e Nous allons cr\u00e9er et interroger une base de donn\u00e9es sqlite avec le module sqlite3 de Python. 1. Permiers exemples \u2693\ufe0e 1.1 Cr\u00e9ation d'une table \u2693\ufe0e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import sqlite3 #Connexion connexion = sqlite3 . connect ( 'mynewbase.db' ) #R\u00e9cup\u00e9ration d'un curseur c = connexion . cursor () # ---- d\u00e9but des instructions SQL #Cr\u00e9ation de la table c . execute ( \"\"\" CREATE TABLE IF NOT EXISTS bulletin( Nom TEXT, Pr\u00e9nom TEXT, Note INT); \"\"\" ) # ---- fin des instructions SQL #Validation connexion . commit () #D\u00e9connexion connexion . close () Le fichier mynewbase.db sera cr\u00e9\u00e9 dans le m\u00eame r\u00e9pertoire que le fichier source Python. Si fichier existe d\u00e9j\u00e0, il est ouvert et peut \u00eatre modifi\u00e9. IF NOT EXISTS assure de ne pas \u00e9craser une table existante qui porterait le m\u00eame nom. Si une telle table existe, elle n'est alors pas modifi\u00e9e. La nouvelle table peut \u00eatre ouverte avec DB Browser pour v\u00e9rifier sa structure et ses donn\u00e9es. 1.2 Insertion d'enregistrements dans la table \u2693\ufe0e Les morceaux de code ci-dessous sont \u00e0 positionner entre les balises # ---- d\u00e9but des instructions SQL et # ---- fin des instructions SQL . 1.2.1 Insertion d'un enregistrement unique \u2693\ufe0e 1 c . execute ( '''INSERT INTO bulletin VALUES ('Simpson', 'Bart', 17)''' ) Pensez \u00e0 v\u00e9rifier avec DB Browser si les modifications sont effectives. 1.2.2 Insertion d'un enregistrement unique avec variable \u2693\ufe0e 1 2 data = ( 'Simpson' , 'Maggie' , 2 ) c . execute ( '''INSERT INTO bulletin VALUES (?,?,?)''' , data ) 1.2.3 Insertion de multiples enregistrements \u2693\ufe0e 1 2 3 lst_notes = [ ( 'Simpson' , 'Lisa' , 19 ), ( 'Muntz' , 'Nelson' , 4 ), ( 'Van Houten' , 'Milhouse' , 12 ) ] c . executemany ( '''INSERT INTO bulletin VALUES (?, ?, ?)''' , lst_notes ) Les diff\u00e9rentes valeurs sont stock\u00e9es au pr\u00e9alable dans une liste de tuples. 1.3 Mini-projet 1 \u2693\ufe0e Cr\u00e9er un programme qui demande \u00e0 l'utilisateur un nom et une note, en boucle. Les r\u00e9sultats sont stock\u00e9s au fur et \u00e0 mesure dans une base de donn\u00e9es. Si le nom est \u00e9gal \u00e0 \u00abQ\u00bb ou \u00abq\u00bb, le programme s'arr\u00eate. 1.4 \u2620 Exemple d'injection SQL \u2693\ufe0e L'injection SQL est une technique consistant \u00e0 \u00e9crire du code SQL \u00e0 un endroit qui n'est pas cens\u00e9 en recevoir. https://xkcd.com/327/ Cr\u00e9ez un fichier contenant le code suivant : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 import sqlite3 #Connexion connexion = sqlite3 . connect ( 'mabasecobaye.db' ) #R\u00e9cup\u00e9ration d'un curseur c = connexion . cursor () c . execute ( \"\"\" CREATE TABLE IF NOT EXISTS notes( Nom TEXT, Note INT); \"\"\" ) while True : nom = input ( 'Nom ? ' ) if nom in [ 'Q' , 'q' ] : break note = input ( 'Note ? ' ) data = ( nom , note ) p = \"INSERT INTO notes VALUES ('\" + nom + \"','\" + note + \"')\" c . executescript ( p ) #Validation connexion . commit () #D\u00e9connexion connexion . close () Ex\u00e9cutez ce fichier, rentrez quelques valeurs, quittez, et ouvrez dans DB Browser la table notes pour bien v\u00e9rifier que vos valeurs ont bien \u00e9t\u00e9 stock\u00e9es. Lancez \u00e0 nouveau le fichier, en donnant ensuite comme nom la cha\u00eene de caract\u00e8res suivante : g','3'); DROP TABLE notes;-- Donnez une note quelconque (par exemple 12), quittez le programme... et allez observer l'\u00e9tat de la base de donn\u00e9es. La table notes n'existe plus ! Explication : La requ\u00eate qui a \u00e9t\u00e9 formul\u00e9e est INSERT INTO notes VALUES ('g','3'); DROP TABLE notes;--','12') Dans un premier temps, le couple ('g','3') a \u00e9t\u00e9 ins\u00e9r\u00e9. Puis l'ordre a \u00e9t\u00e9 donn\u00e9 de d\u00e9truire la table notes . Le reste du code (qui n'est pas correct) est ignor\u00e9 car -- est le symbole du commentaire en SQL (l'\u00e9quivalent du # de Python). Remarques : \u00c9videmment, ce code a \u00e9t\u00e9 fait sp\u00e9cifiquement pour \u00eatre vuln\u00e9rable \u00e0 l'injection SQL. Il suffit d'ailleurs de remplacer le c.executescript(p) par c.execute(p) pour que le code reste fonctionnel mais refuse l'injection SQL. Ceci dit, de nombreux serveurs sont encore attaqu\u00e9s par cette technique, au prix de manipulations bien s\u00fbr plus complexes que celles que nous venons de voir (vous pouvez par exemple regarder ici ). Rappelons enfin que ce genre de pratiques est interdit sur un serveur qui ne vous appartient pas. 2. Lecture des enregistrements \u2693\ufe0e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import sqlite3 #Connexion connexion = sqlite3 . connect ( 'mynewbase.db' ) #R\u00e9cup\u00e9ration d'un curseur c = connexion . cursor () data = ( 'Simpson' , ) c . execute ( \"SELECT Pr\u00e9nom FROM Bulletin WHERE Nom = ?\" , data ) print ( c . fetchall ()) #D\u00e9connexion connexion . close () Ce code renvoie [('Homer',), ('Lisa',), ('Maggie',)] , ou une liste vide s'il n'y a pas de r\u00e9sultat \u00e0 la requ\u00eate. 2.1 Mini-projet 2 \u2693\ufe0e Reprendre le mini-projet pr\u00e9c\u00e9dent, en rendant possible \u00e0 l'utilisateur de rentrer des notes ou bien de les consulter. Exemple : 2.3 Mini-projet 3 \u2693\ufe0e Cr\u00e9er un syst\u00e8me d'authenfication par login / mot de passe, dans le but de conserver une phrase secr\u00e8te. Id\u00e9alement le mot de passe ne sera pas conserv\u00e9 en clair mais hach\u00e9. Exemple : lien vers une correction","title":"Python et SQL / mini-projets"},{"location":"T4_Bases_de_donn%C3%A9es/4.2_Langage_SQL/03_python_et_SQL.html#python-et-sql-mini-projets","text":"Nous allons cr\u00e9er et interroger une base de donn\u00e9es sqlite avec le module sqlite3 de Python.","title":"Python et SQL / mini-projets"},{"location":"T4_Bases_de_donn%C3%A9es/4.2_Langage_SQL/03_python_et_SQL.html#1-permiers-exemples","text":"","title":"1. Permiers exemples"},{"location":"T4_Bases_de_donn%C3%A9es/4.2_Langage_SQL/03_python_et_SQL.html#2-lecture-des-enregistrements","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import sqlite3 #Connexion connexion = sqlite3 . connect ( 'mynewbase.db' ) #R\u00e9cup\u00e9ration d'un curseur c = connexion . cursor () data = ( 'Simpson' , ) c . execute ( \"SELECT Pr\u00e9nom FROM Bulletin WHERE Nom = ?\" , data ) print ( c . fetchall ()) #D\u00e9connexion connexion . close () Ce code renvoie [('Homer',), ('Lisa',), ('Maggie',)] , ou une liste vide s'il n'y a pas de r\u00e9sultat \u00e0 la requ\u00eate.","title":"2. Lecture des enregistrements"},{"location":"T4_Bases_de_donn%C3%A9es/4.2_Langage_SQL/cours.html","text":"Langage SQL \u2693\ufe0e 0. Du mod\u00e8le relationnel au SGBD \u2693\ufe0e Les consid\u00e9rations sur le mod\u00e8le relationnel du cours pr\u00e9c\u00e9dent traitaient plut\u00f4t de la structure math\u00e9matique des donn\u00e9es. Il s'agissait de d\u00e9terminer la meilleure structure pour repr\u00e9senter les donn\u00e9es et les relations qui les lient. Il convient maintenant d'aborder la partie logicielle : les SGBD (Syst\u00e8mes de Gestion de Bases de Donn\u00e9es). Les SGBD jouent le r\u00f4le d'interface entre l'\u00eatre humain et la base de donn\u00e9es. Par l'interm\u00e9diaire de requ\u00eates , l'utilisateur va consulter ou modifier la base de donn\u00e9es. Le SGBD est garant de l'int\u00e9grit\u00e9 de cette base, et pr\u00e9vient notamment que les modifications (souvent appel\u00e9es transactions ) ne soient pas pr\u00e9judiciables \u00e0 la base de donn\u00e9es. Le langage utilis\u00e9 pour communiquer avec le SGBD est le langage SQL , pour Structured Query Langage (pour langage de requ\u00eates structur\u00e9es ). Les SGBD les plus utilis\u00e9s utilisent le mod\u00e8le relationnel. Parmi eux, citons Oracle, MySQL, Microsoft SQL Server, PostgreSQL, Microsoft Access, SQLite, MariaDB... Mais de plus en plus de SGBD non-relationnels sont utilis\u00e9s, sp\u00e9cialement adapt\u00e9s \u00e0 des donn\u00e9es plus diverses et moins structur\u00e9es. On les retrouve sous l'appelation NoSQL (pour Not only SQL ). Citons parmi eux MongoDB, Cassandra (Facebook), BigTable (Google)... La quasi-totalit\u00e9 de ces SGBD fonctionnent avec un mod\u00e8le client-serveur. Mais le logiciel SQLite peut lui s'utiliser directement sans d\u00e9marrer un serveur : la base de donn\u00e9es est enti\u00e8rement repr\u00e9sent\u00e9e dans le logiciel. Sa simplicit\u00e9 d'utilisation en fera notre choix pour illustrer cette pr\u00e9sentation du langage SQL. 1. Introduction au langage SQL \u2693\ufe0e Dans toute la suite, nous allons travailler avec la base de donn\u00e9es livres.db qui provient de l'ouvrage paru chez Ellipses, cit\u00e9 en bibliographie. 1.0 Diff\u00e9rents moyens d'interroger la base de donn\u00e9es \u2693\ufe0e Pr\u00e9-requis : t\u00e9l\u00e9chargez la base de donn\u00e9es livres.db . 1.0.1 En ligne : sqlonline \u2693\ufe0e Rendez vous sur https://sqliteonline.com/ Par File / OpenDB, ouvrez le fichier livres.db pr\u00e9c\u00e9demment t\u00e9l\u00e9charg\u00e9. \u00c9crivez votre requ\u00eate plus cliquez sur Run. 1.0.2 Avec un logiciel externe : DB Browser for SQLite \u2693\ufe0e Installez DB Browser for SQLite , t\u00e9l\u00e9chargeable \u00e0 l'adresse https://sqlitebrowser.org/ Ouvrez le fichier livres.db 1.0.3 Au sein d'un notebook Jupyter \u2693\ufe0e Si n\u00e9cessaire, installez via le terminal les paquets suivants : 1 2 3 sudo pip3 install jupyter-sql sudo pip3 install ipython-sql sudo apt install python3-sql Dans un notebook Jupyter, votre premi\u00e8re cellule doit \u00eatre 1 2 %load_ext sql %sql sqlite:///livres.db en ayant bien pris soin de mettre le fichier livres.db dans le m\u00eame r\u00e9pertoire que votre fichier Jupyter. Ensuite, chaque requ\u00eate devra \u00eatre pr\u00e9c\u00e9d\u00e9e de la ligne %% sql . Dans toute la suite, les manipulations sont \u00e0 faire en interrogeant la base de donn\u00e9es livres.db , avec l'une des m\u00e9thodes indiqu\u00e9es ci-dessus. Cette base de donn\u00e9es contient les tables suivantes : ### 1.1. S\u00e9lection de donn\u00e9es 1.1.1 Exemple 1 : requ\u00eate basique \ud83e\udc16 SELECT, FROM, WHERE \u2693\ufe0e Commande : 1 SELECT titre FROM livre WHERE annee >= 1990 ; Traduction : On veut les titres de la table \u00ablivre\u00bb qui sont parus apr\u00e8s (ou en ) 1990; - R\u00e9sultat : 1.1.2 Exemple 2 : requ\u00eate basique avec bool\u00e9ens \ud83e\udc16 AND \u2693\ufe0e Commande : 1 2 3 SELECT titre FROM livre WHERE annee >= 1970 AND annee <= 1980 AND editeur = 'Dargaud' ; Traduction : On veut les titres de la table \u00ablivre\u00bb qui sont parus entre 1970 et 1980 chez l'\u00e9diteur Dargaud; - R\u00e9sultat : 1.1.3 Exemple 3 : requ\u00eate approch\u00e9e \ud83e\udc16 LIKE \u2693\ufe0e Commande : 1 SELECT titre FROM livre WHERE titre LIKE '%Ast\u00e9rix%' ; Traduction : On veut les titres de la table \u00ablivre\u00bb dont le titre contient la cha\u00eene de caract\u00e8res \"Ast\u00e9rix\". Le symbole % est un joker qui peut symboliser n'importe quelle cha\u00eene de caract\u00e8res. - R\u00e9sultat : 1.1.4 Exemple 4 : renvoi de plusieurs colonnes \u2693\ufe0e Commande : 1 SELECT titre , isbn FROM livre WHERE annee >= 1990 ; Traduction : On veut les titres et les ISBN de la table \u00ablivre\u00bb qui sont parus apr\u00e8s 1990. - R\u00e9sultat : 1.1.5 Exemple 5 : renvoi de toutes les colonnes \u2693\ufe0e Commande : 1 SELECT * FROM livre WHERE annee >= 1990 ; Traduction : On veut toutes les colonnes disponibles de la table \u00ablivre\u00bb pour les livres qui sont parus apr\u00e8s 1990. L'ast\u00e9risque * est un joker ( wildcard en anglais). - R\u00e9sultat : 1.1.6 Exemple 6 : renommer les colonnes \ud83e\udc16 AS \u2693\ufe0e Commande : 1 SELECT titre AS titre_du_livre FROM livre WHERE annee >= 1990 ; Traduction : Lors de l'affichage du r\u00e9sulats et dans la suite de la requ\u00eate (important), la colonne \"titre\" est renomm\u00e9e \"titre_du_livre\". - R\u00e9sultat : ### 1.2. Des op\u00e9rations sur les donn\u00e9es : s\u00e9lection avec agr\u00e9gation 1.2.1 Exemple 7 : nombre de r\u00e9sultats \ud83e\udc16 COUNT \u2693\ufe0e Commande : 1 2 SELECT COUNT ( * ) AS total FROM livre WHERE titre LIKE \"%Ast\u00e9rix%\" ; Traduction : On veut compter le nombre d'enregistrements de la tables livres comportant le mot \"Ast\u00e9rix\". Le r\u00e9sultat sera le seul \u00e9l\u00e9ment d'une colonne nomm\u00e9e \u00abtotal\u00bb. - R\u00e9sultat : 1.2.2 Exemple 8 : somme de valeurs num\u00e9riques \ud83e\udc16 SUM \u2693\ufe0e Commande : 1 2 SELECT SUM ( annee ) AS somme FROM livre WHERE titre LIKE \"%Ast\u00e9rix%\" ; Traduction : On veut additionner les ann\u00e9es des livres de la tables livres comportant le mot \"Ast\u00e9rix\". Le r\u00e9sultat sera le seul \u00e9l\u00e9ment d'une colonne nomm\u00e9e \u00absomme\u00bb. Attention : dans notre cas pr\u00e9cis, ce calcul n'a aucun sens... - R\u00e9sultat : 1.2.3 Exemple 9 : moyenne de valeurs num\u00e9riques \ud83e\udc16 AVG \u2693\ufe0e Commande : 1 2 SELECT AVG ( annee ) AS moyenne FROM livre WHERE titre LIKE \"%Ast\u00e9rix%\" ; Traduction : On veut calculer la moyenne des ann\u00e9es de parution des livres de la table livres comportant le mot \"Ast\u00e9rix\". Le r\u00e9sultat sera le seul \u00e9l\u00e9ment d'une colonne nomm\u00e9e \u00abmoyenne\u00bb. - R\u00e9sultat : #### 1.2.4 Exemple 10 : minimum ou maximum de valeurs num\u00e9riques \ud83e\udc16 MIN, MAX - Commande : 1 2 SELECT MIN ( annee ) AS minimum FROM livre WHERE titre LIKE \"%Ast\u00e9rix%\" ; - Traduction : On veut trouver la pus petite valeur de la colonne \u00abannee\u00bb parmi les livres de la tables livre comportant le mot \"Ast\u00e9rix\". Le r\u00e9sultat sera le seul \u00e9l\u00e9ment d'une colonne nomm\u00e9e minimum. Le fonctionnement est identique avec MAX pour la recherche du maximum. - R\u00e9sultat : 1.2.5 Exemple 11 : tri de valeurs \ud83e\udc16 ORDER BY, ASC, DESC \u2693\ufe0e Commande : 1 2 3 SELECT titre , annee FROM livre WHERE titre LIKE \"%Ast\u00e9rix%\" ORDER BY annee DESC ; Traduction : On veut afficher tous les albums d'Ast\u00e9rix, et leur ann\u00e9e de parution, class\u00e9s par ann\u00e9e d\u00e9croissante. - R\u00e9sultat : 1.2.5 Exemple 12 : suppression des doublons \ud83e\udc16 DISTINCT \u2693\ufe0e Commande : 1 SELECT DISTINCT editeur FROM livre ; Traduction : On veut la liste de tous les \u00e9diteurs. Sans le mot-cl\u00e9 DISTINCT , beaucoup de doublons appara\u00eetraient. - R\u00e9sultat : 1.3 Des recherches crois\u00e9es sur les tables : les jointures \u2693\ufe0e Observons le contenu de la table \u00abemprunt\u00bb : 1 SELECT * FROM emprunt ; Le contenu est peu lisible. Souvenons-nous du diagramme de la base de donn\u00e9es. Pour que la table \u00abemprunt\u00bb soit lisible, il faudrait (dans un premier temps) que l'on affiche \u00e0 la place de l'ISBN le titre de l'ouvrage. Or ce titre est disponible dans la table \u00ablivres\u00bb. On va donc proc\u00e9der \u00e0 une jointure de ces deux tables. #### 1.3.1 Exemple 13 : jointure de deux tables \ud83e\udc16 JOIN - Commande : 1 2 SELECT livre . titre , emprunt . code_barre , emprunt . retour FROM emprunt JOIN livre ON emprunt . isbn = livre . isbn ; - Traduction : Comme plusieurs tables sont appel\u00e9es, nous pr\u00e9fixons chaque colonne avec le nom de la table. Nous demandons ici l'affichage de la table \u00abemprunt\u00bb, mais o\u00f9 on aura remplac\u00e9 l'ISBN (peu lisible) par le titre du livre. L'expression 1 JOIN livre ON emprunt . isbn = livre . isbn doit se comprendre comme ceci : on \u00abinvite\u00bb la table \u00ablivres\u00bb (dont on va afficher la colonne \u00abtitre\u00bb). La correspondance entre la table \u00ablivres\u00bb et la table \u00abemprunt\u00bb doit se faire sur l'attribut ISBN, qui est la cl\u00e9 primaire de \u00ablivres\u00bb et une cl\u00e9 \u00e9trang\u00e8re d'\u00abemprunts\u00bb. Il est donc tr\u00e8s important de sp\u00e9cifier ce sur quoi les deux tables vont se retrouver (ici, l'ISBN) R\u00e9sultat : #### 1.3.2 Exemple 14 : jointure de trois tables \ud83e\udc16 JOIN Le r\u00e9sultat pr\u00e9c\u00e9demment a permis d'am\u00e9liorer la visibilit\u00e9 de la table \u00abemprunt\u00bb, mais il reste la colonne \u00abcode_barre\u00bb qui est peu lisible. Nous pouvons la remplacer par le titre du livre, en faisant une nouvelle jointure, en invitant maintenant les deux tables \u00ablivre\u00bb et \u00abusager\u00bb. Commande : 1 2 3 SELECT u . nom , u . prenom , l . titre , e . retour FROM emprunt AS e JOIN livre AS l ON e . isbn = l . isbn JOIN usager AS u ON e . code_barre = u . code_barre ; Traduction : Il faut bien comprendre que la table principale qui nous int\u00e9resse ici est \u00abemprunts\u00bb, mais qu'on modifie les valeurs affich\u00e9es en allant chercher des correspondances dans deux autres tables. Notez ici que des alias sont donn\u00e9s aux tables (par AS ) afin de faciliter l'\u00e9criture. R\u00e9sultat : 1.4 Exercice d'application : The SQL Murder Mystery \u2693\ufe0e Cet exercice en ligne est propos\u00e9 le Knight Lab de l'universit\u00e9 am\u00e9ricaine Northwerstern University. Le point de d\u00e9part de l'histoire : un meurtre a \u00e9t\u00e9 commis dans la ville de SQL City le 15 janvier 2018. \u00c0 partir de ce point de d\u00e9part et d'une base de donn\u00e9es dont le diagramme est donn\u00e9 ci-dessous, il s'agit de trouver le meurtrier. Rendez-vous sur cette page , et bonne enqu\u00eate \u00e0 coups de requ\u00eates ! 2. Cr\u00e9ation et modification d'une base de donn\u00e9es \u2693\ufe0e rappel : L'objectif est de cr\u00e9er la table suivante : id Nom Maths Anglais NSI 1 Alice 16 11 17 2 Bob 12 15 10 3 Charles 9 11 18 2.1 Exemple 15 : Cr\u00e9ation d'une table \ud83e\udc16 CREATE TABLE \u2693\ufe0e Commande : 1 2 3 4 5 6 7 CREATE TABLE Table_notes ( Id INTEGER PRIMARY KEY , Nom TEXT , Maths INTEGER , Anglais INTEGER , NSI INTEGER ); Remarques : C'est l'utilisateur qui sp\u00e9cifie, \u00e9ventuellement, quel attribut sera une cl\u00e9 primaire. R\u00e9sultat : Dans DB Browser, il faut avoir au pr\u00e9alable cr\u00e9\u00e9 une nouvelle base de donn\u00e9es. 2.2 Exemple 16 : Insertion de valeurs \ud83e\udc16 INSERT INTO, VALUES \u2693\ufe0e Commande : 1 2 3 INSERT INTO Table_notes VALUES ( 1 , 'Alice' , 16 , 11 , 17 ), ( 2 , 'Bob' , 12 , 15 , 10 ), ( 3 , 'Charles' , 9 , 11 , 18 ); R\u00e9sultat : 2.3 Exemple 17 : Int\u00e9r\u00eat de la cl\u00e9 primaire \u2693\ufe0e Essayons d'ins\u00e9rer un 4\u00e8me enregistrement ayant le m\u00eame id qu'un autre \u00e9l\u00e8ve. Commande : 1 INSERT INTO Table_notes VALUES ( 3 , 'Denis' , 18 , 10 , 12 ); R\u00e9sultat : La contrainte de relation est viol\u00e9e : le SGBD \u00abprot\u00e8ge\u00bb la base de donn\u00e9es en n'acceptant pas la proposition d'insertion. La base de donn\u00e9es n'est pas modifi\u00e9e. Remarque : Il est possible de \u00abd\u00e9l\u00e9guer\u00bb la gestion des valeurs de la cl\u00e9 primaire avec l'instruction AUTOINCREMENT . La d\u00e9claration de la table et l'insertion des valeurs serait : 1 2 3 4 5 6 7 8 9 10 11 12 CREATE TABLE Table_notes ( Id INTEGER PRIMARY KEY AUTOINCREMENT , Nom TEXT , Maths INTEGER , Anglais INTEGER , NSI INTEGER ); INSERT INTO Table_notes ( Nom , Maths , Anglais , NSI ) VALUES ( 'Alice' , 16 , 11 , 17 ), ( 'Bob' , 12 , 15 , 10 ), ( 'Charles' , 9 , 11 , 18 ); et le r\u00e9sultat serait : L'attribut id est donc g\u00e9r\u00e9 automatiquement par le SGBD. 2.4 Exemple 18 : Modification d'une valeur \ud83e\udc16 UPDATE, SET \u2693\ufe0e Pour modifier la note de Maths d'Alice : Commande : 1 UPDATE Table_notes SET Maths = 18 WHERE Nom = 'Alice' ; 2.5 Exemple 19 : Suppression d'un enregistrement \ud83e\udc16 DELETE \u2693\ufe0e Pour supprimer totalement la ligne concernant Charles : Commande : 1 DELETE FROM Table_notes WHERE Nom = 'Charles' ; Si une autre table contient par exemple l'attribut id comme cl\u00e9 \u00e9trang\u00e8re, et si l' id de Charles fait partie de cette table, le SGBD refusera de supprimer cette ligne, afin de ne pas violer la contrainte de r\u00e9f\u00e9rence. 2.6 Exemple 20 : Suppression totale d'une table \ud83e\udc16 DROP TABLE \u2693\ufe0e Pour supprimer totalement et d\u00e9fitivement la table : Commande : 1 DROP TABLE Table_notes ; L\u00e0 encore, si une autre table est reli\u00e9e \u00e0 Table_notes par une cl\u00e9 \u00e9trang\u00e8re, la suppression sera bloqu\u00e9e par le SGBD.","title":"Langage SQL"},{"location":"T4_Bases_de_donn%C3%A9es/4.2_Langage_SQL/cours.html#langage-sql","text":"","title":"Langage SQL"},{"location":"T4_Bases_de_donn%C3%A9es/4.2_Langage_SQL/cours.html#0-du-modele-relationnel-au-sgbd","text":"Les consid\u00e9rations sur le mod\u00e8le relationnel du cours pr\u00e9c\u00e9dent traitaient plut\u00f4t de la structure math\u00e9matique des donn\u00e9es. Il s'agissait de d\u00e9terminer la meilleure structure pour repr\u00e9senter les donn\u00e9es et les relations qui les lient. Il convient maintenant d'aborder la partie logicielle : les SGBD (Syst\u00e8mes de Gestion de Bases de Donn\u00e9es). Les SGBD jouent le r\u00f4le d'interface entre l'\u00eatre humain et la base de donn\u00e9es. Par l'interm\u00e9diaire de requ\u00eates , l'utilisateur va consulter ou modifier la base de donn\u00e9es. Le SGBD est garant de l'int\u00e9grit\u00e9 de cette base, et pr\u00e9vient notamment que les modifications (souvent appel\u00e9es transactions ) ne soient pas pr\u00e9judiciables \u00e0 la base de donn\u00e9es. Le langage utilis\u00e9 pour communiquer avec le SGBD est le langage SQL , pour Structured Query Langage (pour langage de requ\u00eates structur\u00e9es ). Les SGBD les plus utilis\u00e9s utilisent le mod\u00e8le relationnel. Parmi eux, citons Oracle, MySQL, Microsoft SQL Server, PostgreSQL, Microsoft Access, SQLite, MariaDB... Mais de plus en plus de SGBD non-relationnels sont utilis\u00e9s, sp\u00e9cialement adapt\u00e9s \u00e0 des donn\u00e9es plus diverses et moins structur\u00e9es. On les retrouve sous l'appelation NoSQL (pour Not only SQL ). Citons parmi eux MongoDB, Cassandra (Facebook), BigTable (Google)... La quasi-totalit\u00e9 de ces SGBD fonctionnent avec un mod\u00e8le client-serveur. Mais le logiciel SQLite peut lui s'utiliser directement sans d\u00e9marrer un serveur : la base de donn\u00e9es est enti\u00e8rement repr\u00e9sent\u00e9e dans le logiciel. Sa simplicit\u00e9 d'utilisation en fera notre choix pour illustrer cette pr\u00e9sentation du langage SQL.","title":"0. Du mod\u00e8le relationnel au SGBD"},{"location":"T4_Bases_de_donn%C3%A9es/4.2_Langage_SQL/cours.html#1-introduction-au-langage-sql","text":"Dans toute la suite, nous allons travailler avec la base de donn\u00e9es livres.db qui provient de l'ouvrage paru chez Ellipses, cit\u00e9 en bibliographie.","title":"1. Introduction au langage SQL"},{"location":"T4_Bases_de_donn%C3%A9es/4.2_Langage_SQL/cours.html#10-differents-moyens-dinterroger-la-base-de-donnees","text":"Pr\u00e9-requis : t\u00e9l\u00e9chargez la base de donn\u00e9es livres.db .","title":"1.0 Diff\u00e9rents moyens d'interroger la base de donn\u00e9es"},{"location":"T4_Bases_de_donn%C3%A9es/4.2_Langage_SQL/cours.html#13-des-recherches-croisees-sur-les-tables-les-jointures","text":"Observons le contenu de la table \u00abemprunt\u00bb : 1 SELECT * FROM emprunt ; Le contenu est peu lisible. Souvenons-nous du diagramme de la base de donn\u00e9es. Pour que la table \u00abemprunt\u00bb soit lisible, il faudrait (dans un premier temps) que l'on affiche \u00e0 la place de l'ISBN le titre de l'ouvrage. Or ce titre est disponible dans la table \u00ablivres\u00bb. On va donc proc\u00e9der \u00e0 une jointure de ces deux tables. #### 1.3.1 Exemple 13 : jointure de deux tables \ud83e\udc16 JOIN - Commande : 1 2 SELECT livre . titre , emprunt . code_barre , emprunt . retour FROM emprunt JOIN livre ON emprunt . isbn = livre . isbn ; - Traduction : Comme plusieurs tables sont appel\u00e9es, nous pr\u00e9fixons chaque colonne avec le nom de la table. Nous demandons ici l'affichage de la table \u00abemprunt\u00bb, mais o\u00f9 on aura remplac\u00e9 l'ISBN (peu lisible) par le titre du livre. L'expression 1 JOIN livre ON emprunt . isbn = livre . isbn doit se comprendre comme ceci : on \u00abinvite\u00bb la table \u00ablivres\u00bb (dont on va afficher la colonne \u00abtitre\u00bb). La correspondance entre la table \u00ablivres\u00bb et la table \u00abemprunt\u00bb doit se faire sur l'attribut ISBN, qui est la cl\u00e9 primaire de \u00ablivres\u00bb et une cl\u00e9 \u00e9trang\u00e8re d'\u00abemprunts\u00bb. Il est donc tr\u00e8s important de sp\u00e9cifier ce sur quoi les deux tables vont se retrouver (ici, l'ISBN) R\u00e9sultat : #### 1.3.2 Exemple 14 : jointure de trois tables \ud83e\udc16 JOIN Le r\u00e9sultat pr\u00e9c\u00e9demment a permis d'am\u00e9liorer la visibilit\u00e9 de la table \u00abemprunt\u00bb, mais il reste la colonne \u00abcode_barre\u00bb qui est peu lisible. Nous pouvons la remplacer par le titre du livre, en faisant une nouvelle jointure, en invitant maintenant les deux tables \u00ablivre\u00bb et \u00abusager\u00bb. Commande : 1 2 3 SELECT u . nom , u . prenom , l . titre , e . retour FROM emprunt AS e JOIN livre AS l ON e . isbn = l . isbn JOIN usager AS u ON e . code_barre = u . code_barre ; Traduction : Il faut bien comprendre que la table principale qui nous int\u00e9resse ici est \u00abemprunts\u00bb, mais qu'on modifie les valeurs affich\u00e9es en allant chercher des correspondances dans deux autres tables. Notez ici que des alias sont donn\u00e9s aux tables (par AS ) afin de faciliter l'\u00e9criture. R\u00e9sultat :","title":"1.3 Des recherches crois\u00e9es sur les tables : les jointures"},{"location":"T4_Bases_de_donn%C3%A9es/4.2_Langage_SQL/cours.html#14-exercice-dapplication-the-sql-murder-mystery","text":"Cet exercice en ligne est propos\u00e9 le Knight Lab de l'universit\u00e9 am\u00e9ricaine Northwerstern University. Le point de d\u00e9part de l'histoire : un meurtre a \u00e9t\u00e9 commis dans la ville de SQL City le 15 janvier 2018. \u00c0 partir de ce point de d\u00e9part et d'une base de donn\u00e9es dont le diagramme est donn\u00e9 ci-dessous, il s'agit de trouver le meurtrier. Rendez-vous sur cette page , et bonne enqu\u00eate \u00e0 coups de requ\u00eates !","title":"1.4 Exercice d'application : The SQL Murder Mystery"},{"location":"T4_Bases_de_donn%C3%A9es/4.2_Langage_SQL/cours.html#2-creation-et-modification-dune-base-de-donnees","text":"rappel : L'objectif est de cr\u00e9er la table suivante : id Nom Maths Anglais NSI 1 Alice 16 11 17 2 Bob 12 15 10 3 Charles 9 11 18","title":"2. Cr\u00e9ation et modification d'une base de donn\u00e9es"},{"location":"T5_Architecture_mat%C3%A9rielle/sommaire.html","text":"Autour de GNU/Linux Syst\u00e8mes sur puce Gestion des processus Protocoles de routage Cryptographie","title":"Sommaire"},{"location":"T5_Architecture_mat%C3%A9rielle/5.0_Autour_de_GNU_Linux/cours.html","text":"\u00e0 venir...","title":"Cours"},{"location":"T5_Architecture_mat%C3%A9rielle/5.1_Syst%C3%A8mes_sur_puce/cours.html","text":"\u00e0 venir...","title":"Cours"},{"location":"T5_Architecture_mat%C3%A9rielle/5.2_Gestion_des_processus/cours.html","text":"\u00e0 venir...","title":"Cours"},{"location":"T5_Architecture_mat%C3%A9rielle/5.3_Protocoles_de_routage/02_Exercices.html","text":"Exercice 1 \u2693\ufe0e Cr\u00e9er une fonction meme_sous_reseau(ip_a, ip_b, masque) qui renvoie un bool\u00e9en indiquant si A et B sont partie du m\u00eame sous-r\u00e9seau. Exercice \u00e0 r\u00e9aliser en Test Driven Developpement \u00e0 partir du squelette de code ci-dessous, en testant chaque fonction apr\u00e8s sa r\u00e9alisation, jusqu'\u00e0 la fonction finale. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 def convert_ip_to_list ( ip ): \"\"\" entr\u00e9e : ip (string) sortie : liste d'entiers \"\"\" # \u00e0 vous def test_convert_ip_to_list (): assert convert_ip_to_list ( '192.168.0.1' ) == [ 192 , 168 , 0 , 1 ] def nb_to_binary_word ( masque ): \"\"\" entr\u00e9e : masque (int) sortie : string \"\"\" # \u00e0 vous def test_nb_convert_to_binary_word (): assert nb_to_binary_word ( 24 ) == '11111111111111111111111100000000' def binary_word_to_list ( word ): \"\"\" entr\u00e9e : word (string de 32 caract\u00e8res) sortie : liste de 4 entiers \"\"\" # \u00e0 vous def test_binary_word_to_list (): assert binary_word_to_list ( '11111111111111111111111100000000' ) == [ 255 , 255 , 255 , 0 ] def meme_sous_reseau ( ip_a , ip_b , masque ): \"\"\" ip_a: string contenant une IP (ex \"192.168.0.1\") ip_b : string contenant une IP masque : entier du masque en notation CIDR (ex : 24) renvoie un bool\u00e9en indiquant si ip_a et ip_b sont dans le m\u00eame sous-r\u00e9seau \"\"\" # \u00e0 vous def test_meme_sous_reseau (): assert meme_sous_reseau ( \"192.168.0.1\" , \"192.168.1.3\" , 24 ) == False assert meme_sous_reseau ( \"192.168.0.1\" , \"192.168.1.3\" , 20 ) == True assert meme_sous_reseau ( \"192.168.0.1\" , \"192.168.0.3\" , 30 ) == True Exercice 2 \u2693\ufe0e On consid\u00e8re un r\u00e9seau compos\u00e9 de plusieurs routeurs reli\u00e9s de la fa\u00e7on suivante : Le protocole RIP permet de construire les tables de routage des diff\u00e9rents routeurs, en indiquant pour chaque routeur la distance, en nombre de sauts, qui le s\u00e9pare d\u2019un autre routeur. Pour le r\u00e9seau ci-dessus, on dispose des tables de routage suivantes : Question 1 Le routeur A doit transmettre un message au routeur G, en effectuant un nombre minimal de sauts. D\u00e9terminer le trajet parcouru. D\u00e9terminer une table de routage possible pour le routeur G obtenu \u00e0 l\u2019aide du protocole RIP. Question 2 Le routeur C tombe en panne. Reconstruire la table de routage du routeur A en suivant le protocole RIP. Exercice 3 \u2693\ufe0e On repr\u00e9sente ci-dessous un r\u00e9seau dans lequel R1, R2, R3, R4, R5 et R6 sont des routeurs. Le r\u00e9seau local L1 est reli\u00e9 au routeur R1 et le r\u00e9seau local L2 au routeur R6. Dans cet exercice, les adresses IP sont compos\u00e9es de 4 octets, soit 32 bits. Elles sont not\u00e9es X1.X2.X3.X4, o\u00f9 X1, X2, X3 et X4 sont les valeurs des 4 octets, convertis en notation d\u00e9cimale. La notation X1.X2.X3.X4/n signifie que les n premiers bits de poids forts de l\u2019adresse IP repr\u00e9sentent la partie \u00ab r\u00e9seau \u00bb, les bits suivants repr\u00e9sentent la partie \u00ab h\u00f4te \u00bb. Toutes les adresses des h\u00f4tes connect\u00e9s \u00e0 un r\u00e9seau local ont la m\u00eame partie r\u00e9seau et peuvent donc communiquer directement. L\u2019adresse IP dont tous les bits de la partie \u00ab h\u00f4te \u00bb sont \u00e0 0 est appel\u00e9e \u00ab adresse du r\u00e9seau \u00bb. On donne \u00e9galement des extraits de la table de routage des routeurs R1 \u00e0 R5 dans le tableau suivant : Un paquet part du r\u00e9seau local L1 \u00e0 destination du r\u00e9seau local L2. a. En utilisant l\u2019extrait de la table de routage de R1, vers quel routeur R1 envoie-t-il ce paquet : R2 ou R3 ? Justifier. b. A l\u2019aide des extraits de tables de routage ci-dessus, nommer les routeurs travers\u00e9s par ce paquet, lorsqu\u2019il va du r\u00e9seau L1 au r\u00e9seau L2. La liaison entre R1 et R2 est rompue. a. Sachant que ce r\u00e9seau utilise le protocole RIP (distance en nombre de sauts), donner l\u2019un des deux chemins possibles que pourra suivre un paquet allant de L1 vers L2. b. Dans les extraits de tables de routage ci-dessus, pour le chemin de la question 2.a, quelle(s) ligne(s) sera (seront) modifi\u00e9e(s) ? On a r\u00e9tabli la liaison entre R1 et R2. Par ailleurs, pour tenir compte du d\u00e9bit des liaisons, on d\u00e9cide d\u2019utiliser le protocole OSPF (distance li\u00e9e au co\u00fbt minimal des liaisons) pour effectuer le routage. Le co\u00fbt des liaisons entre les routeurs est donn\u00e9 par le tableau suivant : a. Le co\u00fbt C d\u2019une liaison est donn\u00e9 ici par la formule o\u00f9 BP est la bande passante de la connexion en bps (bits par seconde). Sachant que la bande passante de la liaison R2-R3 est de 10 Mbps, calculer le co\u00fbt correspondant. b. D\u00e9terminer le chemin parcouru par un paquet partant du r\u00e9seau L1 et arrivant au r\u00e9seau L2, en utilisant le protocole OSPF. c. Indiquer pour quel(s) routeur(s) l\u2019extrait de la table de routage sera modifi\u00e9 pour un paquet \u00e0 destination de L2, avec la m\u00e9trique OSPF. Exercice 4 \u2693\ufe0e Figure 1 La figure 1 ci-dessus repr\u00e9sente le sch\u00e9ma d\u2019un r\u00e9seau d\u2019entreprise. Il y figure deux r\u00e9seaux locaux L1 et L2. Ces deux r\u00e9seaux locaux sont interconnect\u00e9s par les routeurs R2, R3, R4 et R5. Le r\u00e9seau local L1 est constitu\u00e9 des PC portables P1 et P2 connect\u00e9s \u00e0 la passerelle R1 par le switch Sw1. Les serveurs S1 et S2 sont connect\u00e9s \u00e0 la passerelle R6 par le switch Sw2. Le tableau 1 suivant indique les adresses IPv4 des machines constituants le r\u00e9seau de l\u2019entreprise. Tableau 1 : adresses IPv4 des machines Rappels et notations Rappelons qu\u2019une adresse IP est compos\u00e9e de 4 octets, soit 32 bits. Elle est not\u00e9e X1.X2.X3.X4, o\u00f9 X1, X2, X3 et X4 sont les valeurs des 4 octets. Dans le tableau 1, les valeurs des 4 octets ont \u00e9t\u00e9 converties en notation d\u00e9cimale. La notation X1.X2.X3.X4/n signifie que les n premiers bits de poids forts de l\u2019adresse IP repr\u00e9sentent la partie \u00ab r\u00e9seau \u00bb, les bits suivants de poids faibles repr\u00e9sentent la partie \u00ab machine \u00bb. Toutes les adresses des machines connect\u00e9es \u00e0 un r\u00e9seau local ont la m\u00eame partie r\u00e9seau. L\u2019adresse IP dont tous les bits de la partie \u00ab machine \u00bb sont \u00e0 0 est appel\u00e9e \u00ab adresse du r\u00e9seau \u00bb. L\u2019adresse IP dont tous les bits de la partie \u00ab machine \u00bb sont \u00e0 1 est appel\u00e9e \u00ab adresse de diffusion \u00bb. a. Quelles sont les adresses des r\u00e9seaux locaux L1 et L2 ? b. Donner la plus petite et la plus grande adresse IP valides pouvant \u00eatre attribu\u00e9es \u00e0 un ordinateur portable ou un serveur sur chacun des r\u00e9seaux L1 et L2 sachant que l\u2019adresse du r\u00e9seau et l\u2019adresse de diffusion ne peuvent pas \u00eatre attribu\u00e9es \u00e0 une machine. c. Combien de machines peut-on connecter au maximum \u00e0 chacun des r\u00e9seaux locaux L1 et L2 ? a. Expliquer l\u2019utilit\u00e9 d\u2019avoir plusieurs chemins possibles reliant les r\u00e9seaux L1 et L2. b. Quel est le chemin le plus court en nombre de sauts pour relier R1 et R6 ? Donner le nombre de sauts de ce chemin et pr\u00e9ciser les routeurs utilis\u00e9s. c. La bande passante d\u2019une liaison Ether (quantit\u00e9 d\u2019information qui peut \u00eatre transmise en bits/s) est de 10^7 bits/s et celle d\u2019une liaison FastEther est de 10^8 bits/s. Le co\u00fbt d\u2019une liaison est d\u00e9fini par 10^8 / d , o\u00f9 d est sa bande passante en bits/s. Tableau 2 : type des liaisons entre les routeurs Quel est le chemin reliant R1 et R6 qui a le plus petit co\u00fbt ? Donner le co\u00fbt de ce chemin et pr\u00e9ciser les routeurs utilis\u00e9s. Dans l\u2019annexe A figurent les tables de routages des routeurs R1, R2, R5 et R6 au d\u00e9marrage du r\u00e9seau. Indiquer sur votre copie ce qui doit figurer dans les lignes laiss\u00e9es vides des tables de routage des routeurs R5 et R6 pour que les \u00e9changes entre les ordinateurs des r\u00e9seaux L1 et L2 se fassent en empruntant le chemin le plus court en nombre de sauts.","title":"02 Exercices"},{"location":"T5_Architecture_mat%C3%A9rielle/5.3_Protocoles_de_routage/02_Exercices.html#exercice-1","text":"Cr\u00e9er une fonction meme_sous_reseau(ip_a, ip_b, masque) qui renvoie un bool\u00e9en indiquant si A et B sont partie du m\u00eame sous-r\u00e9seau. Exercice \u00e0 r\u00e9aliser en Test Driven Developpement \u00e0 partir du squelette de code ci-dessous, en testant chaque fonction apr\u00e8s sa r\u00e9alisation, jusqu'\u00e0 la fonction finale. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 def convert_ip_to_list ( ip ): \"\"\" entr\u00e9e : ip (string) sortie : liste d'entiers \"\"\" # \u00e0 vous def test_convert_ip_to_list (): assert convert_ip_to_list ( '192.168.0.1' ) == [ 192 , 168 , 0 , 1 ] def nb_to_binary_word ( masque ): \"\"\" entr\u00e9e : masque (int) sortie : string \"\"\" # \u00e0 vous def test_nb_convert_to_binary_word (): assert nb_to_binary_word ( 24 ) == '11111111111111111111111100000000' def binary_word_to_list ( word ): \"\"\" entr\u00e9e : word (string de 32 caract\u00e8res) sortie : liste de 4 entiers \"\"\" # \u00e0 vous def test_binary_word_to_list (): assert binary_word_to_list ( '11111111111111111111111100000000' ) == [ 255 , 255 , 255 , 0 ] def meme_sous_reseau ( ip_a , ip_b , masque ): \"\"\" ip_a: string contenant une IP (ex \"192.168.0.1\") ip_b : string contenant une IP masque : entier du masque en notation CIDR (ex : 24) renvoie un bool\u00e9en indiquant si ip_a et ip_b sont dans le m\u00eame sous-r\u00e9seau \"\"\" # \u00e0 vous def test_meme_sous_reseau (): assert meme_sous_reseau ( \"192.168.0.1\" , \"192.168.1.3\" , 24 ) == False assert meme_sous_reseau ( \"192.168.0.1\" , \"192.168.1.3\" , 20 ) == True assert meme_sous_reseau ( \"192.168.0.1\" , \"192.168.0.3\" , 30 ) == True","title":"Exercice 1"},{"location":"T5_Architecture_mat%C3%A9rielle/5.3_Protocoles_de_routage/02_Exercices.html#exercice-2","text":"On consid\u00e8re un r\u00e9seau compos\u00e9 de plusieurs routeurs reli\u00e9s de la fa\u00e7on suivante : Le protocole RIP permet de construire les tables de routage des diff\u00e9rents routeurs, en indiquant pour chaque routeur la distance, en nombre de sauts, qui le s\u00e9pare d\u2019un autre routeur. Pour le r\u00e9seau ci-dessus, on dispose des tables de routage suivantes : Question 1 Le routeur A doit transmettre un message au routeur G, en effectuant un nombre minimal de sauts. D\u00e9terminer le trajet parcouru. D\u00e9terminer une table de routage possible pour le routeur G obtenu \u00e0 l\u2019aide du protocole RIP. Question 2 Le routeur C tombe en panne. Reconstruire la table de routage du routeur A en suivant le protocole RIP.","title":"Exercice 2"},{"location":"T5_Architecture_mat%C3%A9rielle/5.3_Protocoles_de_routage/02_Exercices.html#exercice-3","text":"On repr\u00e9sente ci-dessous un r\u00e9seau dans lequel R1, R2, R3, R4, R5 et R6 sont des routeurs. Le r\u00e9seau local L1 est reli\u00e9 au routeur R1 et le r\u00e9seau local L2 au routeur R6. Dans cet exercice, les adresses IP sont compos\u00e9es de 4 octets, soit 32 bits. Elles sont not\u00e9es X1.X2.X3.X4, o\u00f9 X1, X2, X3 et X4 sont les valeurs des 4 octets, convertis en notation d\u00e9cimale. La notation X1.X2.X3.X4/n signifie que les n premiers bits de poids forts de l\u2019adresse IP repr\u00e9sentent la partie \u00ab r\u00e9seau \u00bb, les bits suivants repr\u00e9sentent la partie \u00ab h\u00f4te \u00bb. Toutes les adresses des h\u00f4tes connect\u00e9s \u00e0 un r\u00e9seau local ont la m\u00eame partie r\u00e9seau et peuvent donc communiquer directement. L\u2019adresse IP dont tous les bits de la partie \u00ab h\u00f4te \u00bb sont \u00e0 0 est appel\u00e9e \u00ab adresse du r\u00e9seau \u00bb. On donne \u00e9galement des extraits de la table de routage des routeurs R1 \u00e0 R5 dans le tableau suivant : Un paquet part du r\u00e9seau local L1 \u00e0 destination du r\u00e9seau local L2. a. En utilisant l\u2019extrait de la table de routage de R1, vers quel routeur R1 envoie-t-il ce paquet : R2 ou R3 ? Justifier. b. A l\u2019aide des extraits de tables de routage ci-dessus, nommer les routeurs travers\u00e9s par ce paquet, lorsqu\u2019il va du r\u00e9seau L1 au r\u00e9seau L2. La liaison entre R1 et R2 est rompue. a. Sachant que ce r\u00e9seau utilise le protocole RIP (distance en nombre de sauts), donner l\u2019un des deux chemins possibles que pourra suivre un paquet allant de L1 vers L2. b. Dans les extraits de tables de routage ci-dessus, pour le chemin de la question 2.a, quelle(s) ligne(s) sera (seront) modifi\u00e9e(s) ? On a r\u00e9tabli la liaison entre R1 et R2. Par ailleurs, pour tenir compte du d\u00e9bit des liaisons, on d\u00e9cide d\u2019utiliser le protocole OSPF (distance li\u00e9e au co\u00fbt minimal des liaisons) pour effectuer le routage. Le co\u00fbt des liaisons entre les routeurs est donn\u00e9 par le tableau suivant : a. Le co\u00fbt C d\u2019une liaison est donn\u00e9 ici par la formule o\u00f9 BP est la bande passante de la connexion en bps (bits par seconde). Sachant que la bande passante de la liaison R2-R3 est de 10 Mbps, calculer le co\u00fbt correspondant. b. D\u00e9terminer le chemin parcouru par un paquet partant du r\u00e9seau L1 et arrivant au r\u00e9seau L2, en utilisant le protocole OSPF. c. Indiquer pour quel(s) routeur(s) l\u2019extrait de la table de routage sera modifi\u00e9 pour un paquet \u00e0 destination de L2, avec la m\u00e9trique OSPF.","title":"Exercice 3"},{"location":"T5_Architecture_mat%C3%A9rielle/5.3_Protocoles_de_routage/02_Exercices.html#exercice-4","text":"Figure 1 La figure 1 ci-dessus repr\u00e9sente le sch\u00e9ma d\u2019un r\u00e9seau d\u2019entreprise. Il y figure deux r\u00e9seaux locaux L1 et L2. Ces deux r\u00e9seaux locaux sont interconnect\u00e9s par les routeurs R2, R3, R4 et R5. Le r\u00e9seau local L1 est constitu\u00e9 des PC portables P1 et P2 connect\u00e9s \u00e0 la passerelle R1 par le switch Sw1. Les serveurs S1 et S2 sont connect\u00e9s \u00e0 la passerelle R6 par le switch Sw2. Le tableau 1 suivant indique les adresses IPv4 des machines constituants le r\u00e9seau de l\u2019entreprise. Tableau 1 : adresses IPv4 des machines Rappels et notations Rappelons qu\u2019une adresse IP est compos\u00e9e de 4 octets, soit 32 bits. Elle est not\u00e9e X1.X2.X3.X4, o\u00f9 X1, X2, X3 et X4 sont les valeurs des 4 octets. Dans le tableau 1, les valeurs des 4 octets ont \u00e9t\u00e9 converties en notation d\u00e9cimale. La notation X1.X2.X3.X4/n signifie que les n premiers bits de poids forts de l\u2019adresse IP repr\u00e9sentent la partie \u00ab r\u00e9seau \u00bb, les bits suivants de poids faibles repr\u00e9sentent la partie \u00ab machine \u00bb. Toutes les adresses des machines connect\u00e9es \u00e0 un r\u00e9seau local ont la m\u00eame partie r\u00e9seau. L\u2019adresse IP dont tous les bits de la partie \u00ab machine \u00bb sont \u00e0 0 est appel\u00e9e \u00ab adresse du r\u00e9seau \u00bb. L\u2019adresse IP dont tous les bits de la partie \u00ab machine \u00bb sont \u00e0 1 est appel\u00e9e \u00ab adresse de diffusion \u00bb. a. Quelles sont les adresses des r\u00e9seaux locaux L1 et L2 ? b. Donner la plus petite et la plus grande adresse IP valides pouvant \u00eatre attribu\u00e9es \u00e0 un ordinateur portable ou un serveur sur chacun des r\u00e9seaux L1 et L2 sachant que l\u2019adresse du r\u00e9seau et l\u2019adresse de diffusion ne peuvent pas \u00eatre attribu\u00e9es \u00e0 une machine. c. Combien de machines peut-on connecter au maximum \u00e0 chacun des r\u00e9seaux locaux L1 et L2 ? a. Expliquer l\u2019utilit\u00e9 d\u2019avoir plusieurs chemins possibles reliant les r\u00e9seaux L1 et L2. b. Quel est le chemin le plus court en nombre de sauts pour relier R1 et R6 ? Donner le nombre de sauts de ce chemin et pr\u00e9ciser les routeurs utilis\u00e9s. c. La bande passante d\u2019une liaison Ether (quantit\u00e9 d\u2019information qui peut \u00eatre transmise en bits/s) est de 10^7 bits/s et celle d\u2019une liaison FastEther est de 10^8 bits/s. Le co\u00fbt d\u2019une liaison est d\u00e9fini par 10^8 / d , o\u00f9 d est sa bande passante en bits/s. Tableau 2 : type des liaisons entre les routeurs Quel est le chemin reliant R1 et R6 qui a le plus petit co\u00fbt ? Donner le co\u00fbt de ce chemin et pr\u00e9ciser les routeurs utilis\u00e9s. Dans l\u2019annexe A figurent les tables de routages des routeurs R1, R2, R5 et R6 au d\u00e9marrage du r\u00e9seau. Indiquer sur votre copie ce qui doit figurer dans les lignes laiss\u00e9es vides des tables de routage des routeurs R5 et R6 pour que les \u00e9changes entre les ordinateurs des r\u00e9seaux L1 et L2 se fassent en empruntant le chemin le plus court en nombre de sauts.","title":"Exercice 4"},{"location":"T5_Architecture_mat%C3%A9rielle/5.3_Protocoles_de_routage/cours.html","text":"Protocoles de routage \u2693\ufe0e 0. R\u00e9sum\u00e9 des \u00e9pisodes pr\u00e9c\u00e9dents \u2693\ufe0e cours de 1\u00e8re sur l'architecture d'un r\u00e9seau cours de 1\u00e8re sur les diff\u00e9rents protocoles de communication dans un r\u00e9seau. Notions essentielles : Lorsqu'une machine A, d'adresse IP_A veut discuter avec une machine B, d'adresse IP_B: - La machine A calcule (gr\u00e2ce au masque de sous-r\u00e9seau) si B est dans le m\u00eame sous-r\u00e9seau qu'elle, ou pas. - Si oui, elle peut donc conna\u00eetre l'adresse MAC de la carte r\u00e9seau de la machine B (soit elle la poss\u00e8de d\u00e9j\u00e0 dans sa table ARP, soit elle la demande en envoyant un message de broadcast \u00e0 tout le sous-r\u00e9seau : \u00abqui poss\u00e8de cette adresse IP_B ?\u00bb). Elle envoie donc dans le sous-r\u00e9seau une trame ayant pour ent\u00eate l'adresse MAC de B : le switch lit cette trame, sait sur quel port est branch\u00e9 la machine B et lui envoie sp\u00e9cifiquement donc le message. - Si B n'est pas dans le m\u00eame sous-r\u00e9seau que A, A mettra en ent\u00eate de sa trame l'adresse MAC de la carte r\u00e9seau du routeur, qui joue le r\u00f4le de passerelle. Le routeur va ouvrir la trame et va observer l'IP_B, \u00e0 qui il doit remettre ce message. C'est maintenant que vont intervenir les protocoles de routage : - est-ce que B est dans le m\u00eame sous-r\u00e9seau que le routeur ? - est-ce que B est dans un autre sous-r\u00e9seau connu du routeur ? - est-ce que B est totalement inconnu du routeur ? Ces questions trouveront des r\u00e9ponses gr\u00e2ce \u00e0 table de routage du routeur. 1. Tables de routage \u2693\ufe0e Les tables de routage sont des informations stock\u00e9es dans le routeur permettant d'aiguiller intelligemment les donn\u00e9es qui lui sont transmises. Dans le r\u00e9seau ci-dessus, si l'ordinateur d'adresse 192.168.0.5 veut interroger le serveur 10.7.3.8 : - l'adresse 10.7.3.8 n'\u00e9tant pas dans le sous-r\u00e9seau F (d'adresse 192.168.0.0 / 24 ), la requ\u00eate est confi\u00e9e au routeur via son adresse passerelle dans le r\u00e9seau F (ici 192.168.0.254 ). - le routeur observe si l'IP recherch\u00e9e appartient \u00e0 un autre des sous-r\u00e9seaux auquel il est connect\u00e9. Ici, l'IP recherch\u00e9e 10.7.3.8 n'appartient ni au sous-r\u00e9seau A ou E. - le routeur va donc regarder dans sa table de routage l'adresse passerelle d'un autre routeur vers qui elle doit rediriger les donn\u00e9es. Si le sous-r\u00e9seau C fait partie de sa table de routage, le routeur R1 saura alors que le meilleur chemin est (par exemple) de confier les donn\u00e9es au routeur R3. - si le sous-r\u00e9seau C ne fait pas partie de la table de routage, le routeur R1 va alors le rediriger vers une route \u00abpar d\u00e9faut\u00bb (que l'on peut assimiler au panneau \u00abtoutes directions\u00bb sur les panneaux de signalisation). Par exemple, la table de routage du routeur R1 pourrait \u00eatre : Destination Passerelle 192.168.0.0 /24 192.168.0.254 172.17.1.0 /24 172.17.1.254 10.0.5.0 /24 10.0.5.152 10.5.2.0 /24 172.17.1.254 10.7.3.0 /24 10.0.5.135 Comment sont construites les tables de routage ? \u2693\ufe0e Soit \u00e0 la main par l'administrateur r\u00e9seau, quand le r\u00e9seau est petit : on parle alors de table statique . Soit de mani\u00e8re dynamique : les r\u00e9seaux s'envoient eux-m\u00eames des informations permettant de mettre \u00e0 jour leurs tables de routages respectives. Des algorithmes de d\u00e9termination de meilleur chemin sont alors utilis\u00e9s : nous allons en d\u00e9couvrir deux, le protocole RIP et le protocole OSPF. 2. Le protocole RIP \u2693\ufe0e voir le TP d\u00e9branch\u00e9 : le jeu dont vous \u00eates le routeur Le Routing Information Protocol est bas\u00e9 sur l'\u00e9change (toutes les 30 secondes) des tables de routage de chaque routeur. Au d\u00e9but, chaque routeur ne conna\u00eet que les r\u00e9seaux auquel il est directement connect\u00e9, associ\u00e9 \u00e0 la distance 1. Ensuite, chaque routeur re\u00e7oit p\u00e9riodiquement la table des r\u00e9seaux auquel il est connect\u00e9 : - s'il d\u00e9couvre une route vers un nouveau r\u00e9seau inconnu, il l'ajoute \u00e0 sa table en augmentant de 1 la distance annonc\u00e9e par le routeur qui lui a transmis sa table. s'il d\u00e9couvre une route vers un r\u00e9seau connu mais plus courte (en rajoutant 1) que celle qu'il poss\u00e8de dans sa table, il actualise sa table. s'il d\u00e9couvre une route vers un r\u00e9seau connu mais plus longue que celle qu'il poss\u00e8de dans sa table, il ignore cette route. s'il re\u00e7oit une route vers un r\u00e9seau connu en provenance d'un routeur d\u00e9j\u00e0 existant dans sa table, s'il met \u00e0 jour sa table car la topologie du r\u00e9seau a \u00e9t\u00e9 modifi\u00e9e. si le r\u00e9seau n'\u00e9volue pas (panne ou ajout de nouveau mat\u00e9riel), les tables de routage convergent vers une valeur stable. Elles n'\u00e9voluent plus. si un routeur ne re\u00e7oit pas pendant 3 minutes d'information de la part d'un routeur qui lui avait auparavant communiqu\u00e9 sa table de routage, ce routeur est consid\u00e9r\u00e9 comme en panne, et toutes les routes passant par lui sont affect\u00e9es de la distance infinie : 16. Remarques et incov\u00e9nients: - Le protocole RIP n'admet qu'une distance maximale \u00e9gale \u00e0 15 (ceci explique que 16 soit consid\u00e9r\u00e9 comme la distance infinie), ce qui le limite aux r\u00e9seaux de petite taille. Chaque routeur n'a jamais connaissance de la topologie du r\u00e9seau tout entier : il ne le conna\u00eet que par ce que les autres routeurs lui ont racont\u00e9. On dit que ce protocole de routage est du routing by rumor . La m\u00e9trique utilis\u00e9e (le nombre de sauts) ne tient pas compte de la qualit\u00e9 de la liaison, contrairement au protocole OSPF. 3. Le protocole OSPF \u2693\ufe0e OSPF : Open Shortest Path First Un inconv\u00e9nient majeur du protocole pr\u00e9c\u00e9dent est la non-prise en compte de la bande passante reliant les routeurs. En voiture, le chemin le plus rapide n'est pas forc\u00e9ment le plus court. En gris, le chemin RIP. En bleu, l'OSPF. Dans le protocole OSPF, les tables de routage vont prendre en consid\u00e9ration la vitesse de communication entre les routeurs. Dans une premi\u00e8re phase d'initialisation, chaque routeur va acqu\u00e9rir (par succession de messages envoy\u00e9s et re\u00e7us) la connaissance totale du r\u00e9seau (diff\u00e9rence fondamentale avec RIP) et de la qualit\u00e9 technique de la liaison entre chaque routeur. 3.1 Les diff\u00e9rents types de liaison et leur co\u00fbt \u2693\ufe0e On peut, approximativement, classer les types de liaison suivant ce tableau de d\u00e9bits th\u00e9oriques : | Technologie | BP descendante | BP montante | |-|-|-| | Modem | 56 kbit/s | 48 kbit/s | | Bluetooth | 3 Mbit/s | 3 Mbit/s | | Ethernet | 10 Mbit/s | 10 Mbit/s | | Wi-Fi | 10 Mbit/s ~ 10 Gbits/s | 10 Mbit/s ~ 10 Gbits/s | | ADSL | 13 Mbit/s | 1 Mbit/s | | 4G | 100 Mbit/s | 50 Mbit/s | | Satellite | 50 Mbit/s | 1 Mbit/s | | Fast Ethernet | 100 Mbit/s | 100 Mbit/s | | FFTH (fibre) | 10 Gbit/s | 10 Gbit/s | | 5G | 20 Gbit/s | 10 Gbit/s | L'id\u00e9e du protocole OSPF est de pond\u00e9rer chaque trajet entre routeurs (comptant simplement pour \u00ab1\u00bb dans le protocole RIP) par une valeur de co\u00fbt inversement proportionnelle au d\u00e9bit de transfert. Par exemple, si le d\u00e9bit d est exprim\u00e9 en bits/s, on peut calculer le co\u00fbt de chaque liaison par la formule : Cette formule de calcul peut \u00eatre diff\u00e9rente suivant les exercices, et sera syst\u00e9matiquement redonn\u00e9e. N\u00e9anmoins la valeur d sera toujours au d\u00e9nominateur, pour assurer la proportionnalit\u00e9 inverse du d\u00e9bit. Avec cette convention, un route entre deux routeurs reli\u00e9s en Fast Ethernet (100 Mbits/s) aura a un poids de 1, une liaison satellite de 20 Mbits/s aura un poids de 5, etc. 3.2 Exemple \u2693\ufe0e Reprenons le r\u00e9seau suivant : et simplifions-le en ne gardant que les liens entre routeurs, en indiquant leur d\u00e9bit : Notre r\u00e9seau est devenu un graphe . Nous allons pond\u00e9rer ses ar\u00eates avec la fonction co\u00fbt introduite pr\u00e9c\u00e9demment. L'unit\u00e9 \u00e9tant le Mbit/s, l'ar\u00eate entre R1 et R3 aura un poids de 100/20=5. Le graphe pond\u00e9r\u00e9 est donc : Le chemin le plus rapide pour aller de l'ordinateur au serveur est donc R1-R2-R4, et non plus R1-R3 comme l'aurait indiqu\u00e9 le protocole RIP. 3.3 Trouver le plus court chemin dans un graphe pond\u00e9r\u00e9 \u2693\ufe0e L'exemple pr\u00e9c\u00e9dent \u00e9tait tr\u00e8s simple et de solution intuitive. Dans le cas d'un graphe pond\u00e9r\u00e9 complexe, existe-t-il un algorithme de d\u00e9termination du plus court chemin d'un point \u00e0 un autre ? La r\u00e9ponse est oui , depuis la d\u00e9couverte en 1959 par Edsger Dijkstra de l'algorithme qui porte son nom, l'algorithme de Dijkstra . Pour le comprendre, vous pouvez regarder la vid\u00e9o d'un c\u00e9l\u00e8bre YouTuber : Cet algorithme, ici ex\u00e9cut\u00e9 de mani\u00e8re manuelle, est bien s\u00fbr programmable. Et c'est donc gr\u00e2ce \u00e0 lui que chaque routeur calcule la route la plus rapide pour acheminer les donn\u00e9es qu'il re\u00e7oit. Exemple d'application de l'algorithme de Dijkstra : Donner le plus court chemin pour aller de E \u00e0 F. 3.4 Exercice \u2693\ufe0e (extrait du sujet 0) On consid\u00e8re le r\u00e9seau suivant : On rappelle que le co\u00fbt d\u2019une liaison est donn\u00e9 par la formule suivante : Question 1 V\u00e9rifier que le co\u00fbt de la liaison entre les routeurs A et B est 0,01. La liaison entre le routeur B et D a un co\u00fbt de 5. Quel est le d\u00e9bit de cette liaison ? Question 2 Le routeur A doit transmettre un message au routeur G, en empruntant le chemin dont la somme des co\u00fbts sera la plus petite possible. D\u00e9terminer le chemin parcouru. On indiquera le raisonnement utilis\u00e9. Correction du tableau de l'algorithme de Dijkstra Bibliographie \u2693\ufe0e Num\u00e9rique et Sciences Informatiques, Terminale, T. BALABONSKI, S. CONCHON, J.-C. FILLIATRE, K. NGUYEN, \u00e9ditions ELLIPSES. Pr\u00e9pabac NSI, Terminale, G. CONNAN, V. PETROV, G. ROZSAVOLGYI, L. SIGNAC, \u00e9ditions HATIER. Site d'Olivier L\u00e9cluse https://www.lecluse.fr/nsi/NSI_T/archi/routage/","title":"Protocoles de routage"},{"location":"T5_Architecture_mat%C3%A9rielle/5.3_Protocoles_de_routage/cours.html#protocoles-de-routage","text":"","title":"Protocoles de routage"},{"location":"T5_Architecture_mat%C3%A9rielle/5.3_Protocoles_de_routage/cours.html#0-resume-des-episodes-precedents","text":"cours de 1\u00e8re sur l'architecture d'un r\u00e9seau cours de 1\u00e8re sur les diff\u00e9rents protocoles de communication dans un r\u00e9seau. Notions essentielles : Lorsqu'une machine A, d'adresse IP_A veut discuter avec une machine B, d'adresse IP_B: - La machine A calcule (gr\u00e2ce au masque de sous-r\u00e9seau) si B est dans le m\u00eame sous-r\u00e9seau qu'elle, ou pas. - Si oui, elle peut donc conna\u00eetre l'adresse MAC de la carte r\u00e9seau de la machine B (soit elle la poss\u00e8de d\u00e9j\u00e0 dans sa table ARP, soit elle la demande en envoyant un message de broadcast \u00e0 tout le sous-r\u00e9seau : \u00abqui poss\u00e8de cette adresse IP_B ?\u00bb). Elle envoie donc dans le sous-r\u00e9seau une trame ayant pour ent\u00eate l'adresse MAC de B : le switch lit cette trame, sait sur quel port est branch\u00e9 la machine B et lui envoie sp\u00e9cifiquement donc le message. - Si B n'est pas dans le m\u00eame sous-r\u00e9seau que A, A mettra en ent\u00eate de sa trame l'adresse MAC de la carte r\u00e9seau du routeur, qui joue le r\u00f4le de passerelle. Le routeur va ouvrir la trame et va observer l'IP_B, \u00e0 qui il doit remettre ce message. C'est maintenant que vont intervenir les protocoles de routage : - est-ce que B est dans le m\u00eame sous-r\u00e9seau que le routeur ? - est-ce que B est dans un autre sous-r\u00e9seau connu du routeur ? - est-ce que B est totalement inconnu du routeur ? Ces questions trouveront des r\u00e9ponses gr\u00e2ce \u00e0 table de routage du routeur.","title":"0. R\u00e9sum\u00e9 des \u00e9pisodes pr\u00e9c\u00e9dents"},{"location":"T5_Architecture_mat%C3%A9rielle/5.3_Protocoles_de_routage/cours.html#1-tables-de-routage","text":"Les tables de routage sont des informations stock\u00e9es dans le routeur permettant d'aiguiller intelligemment les donn\u00e9es qui lui sont transmises. Dans le r\u00e9seau ci-dessus, si l'ordinateur d'adresse 192.168.0.5 veut interroger le serveur 10.7.3.8 : - l'adresse 10.7.3.8 n'\u00e9tant pas dans le sous-r\u00e9seau F (d'adresse 192.168.0.0 / 24 ), la requ\u00eate est confi\u00e9e au routeur via son adresse passerelle dans le r\u00e9seau F (ici 192.168.0.254 ). - le routeur observe si l'IP recherch\u00e9e appartient \u00e0 un autre des sous-r\u00e9seaux auquel il est connect\u00e9. Ici, l'IP recherch\u00e9e 10.7.3.8 n'appartient ni au sous-r\u00e9seau A ou E. - le routeur va donc regarder dans sa table de routage l'adresse passerelle d'un autre routeur vers qui elle doit rediriger les donn\u00e9es. Si le sous-r\u00e9seau C fait partie de sa table de routage, le routeur R1 saura alors que le meilleur chemin est (par exemple) de confier les donn\u00e9es au routeur R3. - si le sous-r\u00e9seau C ne fait pas partie de la table de routage, le routeur R1 va alors le rediriger vers une route \u00abpar d\u00e9faut\u00bb (que l'on peut assimiler au panneau \u00abtoutes directions\u00bb sur les panneaux de signalisation). Par exemple, la table de routage du routeur R1 pourrait \u00eatre : Destination Passerelle 192.168.0.0 /24 192.168.0.254 172.17.1.0 /24 172.17.1.254 10.0.5.0 /24 10.0.5.152 10.5.2.0 /24 172.17.1.254 10.7.3.0 /24 10.0.5.135","title":"1. Tables de routage"},{"location":"T5_Architecture_mat%C3%A9rielle/5.3_Protocoles_de_routage/cours.html#2-le-protocole-rip","text":"voir le TP d\u00e9branch\u00e9 : le jeu dont vous \u00eates le routeur Le Routing Information Protocol est bas\u00e9 sur l'\u00e9change (toutes les 30 secondes) des tables de routage de chaque routeur. Au d\u00e9but, chaque routeur ne conna\u00eet que les r\u00e9seaux auquel il est directement connect\u00e9, associ\u00e9 \u00e0 la distance 1. Ensuite, chaque routeur re\u00e7oit p\u00e9riodiquement la table des r\u00e9seaux auquel il est connect\u00e9 : - s'il d\u00e9couvre une route vers un nouveau r\u00e9seau inconnu, il l'ajoute \u00e0 sa table en augmentant de 1 la distance annonc\u00e9e par le routeur qui lui a transmis sa table. s'il d\u00e9couvre une route vers un r\u00e9seau connu mais plus courte (en rajoutant 1) que celle qu'il poss\u00e8de dans sa table, il actualise sa table. s'il d\u00e9couvre une route vers un r\u00e9seau connu mais plus longue que celle qu'il poss\u00e8de dans sa table, il ignore cette route. s'il re\u00e7oit une route vers un r\u00e9seau connu en provenance d'un routeur d\u00e9j\u00e0 existant dans sa table, s'il met \u00e0 jour sa table car la topologie du r\u00e9seau a \u00e9t\u00e9 modifi\u00e9e. si le r\u00e9seau n'\u00e9volue pas (panne ou ajout de nouveau mat\u00e9riel), les tables de routage convergent vers une valeur stable. Elles n'\u00e9voluent plus. si un routeur ne re\u00e7oit pas pendant 3 minutes d'information de la part d'un routeur qui lui avait auparavant communiqu\u00e9 sa table de routage, ce routeur est consid\u00e9r\u00e9 comme en panne, et toutes les routes passant par lui sont affect\u00e9es de la distance infinie : 16. Remarques et incov\u00e9nients: - Le protocole RIP n'admet qu'une distance maximale \u00e9gale \u00e0 15 (ceci explique que 16 soit consid\u00e9r\u00e9 comme la distance infinie), ce qui le limite aux r\u00e9seaux de petite taille. Chaque routeur n'a jamais connaissance de la topologie du r\u00e9seau tout entier : il ne le conna\u00eet que par ce que les autres routeurs lui ont racont\u00e9. On dit que ce protocole de routage est du routing by rumor . La m\u00e9trique utilis\u00e9e (le nombre de sauts) ne tient pas compte de la qualit\u00e9 de la liaison, contrairement au protocole OSPF.","title":"2. Le protocole RIP"},{"location":"T5_Architecture_mat%C3%A9rielle/5.3_Protocoles_de_routage/cours.html#3-le-protocole-ospf","text":"OSPF : Open Shortest Path First Un inconv\u00e9nient majeur du protocole pr\u00e9c\u00e9dent est la non-prise en compte de la bande passante reliant les routeurs. En voiture, le chemin le plus rapide n'est pas forc\u00e9ment le plus court. En gris, le chemin RIP. En bleu, l'OSPF. Dans le protocole OSPF, les tables de routage vont prendre en consid\u00e9ration la vitesse de communication entre les routeurs. Dans une premi\u00e8re phase d'initialisation, chaque routeur va acqu\u00e9rir (par succession de messages envoy\u00e9s et re\u00e7us) la connaissance totale du r\u00e9seau (diff\u00e9rence fondamentale avec RIP) et de la qualit\u00e9 technique de la liaison entre chaque routeur.","title":"3. Le protocole OSPF"},{"location":"T5_Architecture_mat%C3%A9rielle/5.3_Protocoles_de_routage/cours.html#32-exemple","text":"Reprenons le r\u00e9seau suivant : et simplifions-le en ne gardant que les liens entre routeurs, en indiquant leur d\u00e9bit : Notre r\u00e9seau est devenu un graphe . Nous allons pond\u00e9rer ses ar\u00eates avec la fonction co\u00fbt introduite pr\u00e9c\u00e9demment. L'unit\u00e9 \u00e9tant le Mbit/s, l'ar\u00eate entre R1 et R3 aura un poids de 100/20=5. Le graphe pond\u00e9r\u00e9 est donc : Le chemin le plus rapide pour aller de l'ordinateur au serveur est donc R1-R2-R4, et non plus R1-R3 comme l'aurait indiqu\u00e9 le protocole RIP.","title":"3.2 Exemple"},{"location":"T5_Architecture_mat%C3%A9rielle/5.3_Protocoles_de_routage/cours.html#33-trouver-le-plus-court-chemin-dans-un-graphe-pondere","text":"L'exemple pr\u00e9c\u00e9dent \u00e9tait tr\u00e8s simple et de solution intuitive. Dans le cas d'un graphe pond\u00e9r\u00e9 complexe, existe-t-il un algorithme de d\u00e9termination du plus court chemin d'un point \u00e0 un autre ? La r\u00e9ponse est oui , depuis la d\u00e9couverte en 1959 par Edsger Dijkstra de l'algorithme qui porte son nom, l'algorithme de Dijkstra . Pour le comprendre, vous pouvez regarder la vid\u00e9o d'un c\u00e9l\u00e8bre YouTuber : Cet algorithme, ici ex\u00e9cut\u00e9 de mani\u00e8re manuelle, est bien s\u00fbr programmable. Et c'est donc gr\u00e2ce \u00e0 lui que chaque routeur calcule la route la plus rapide pour acheminer les donn\u00e9es qu'il re\u00e7oit. Exemple d'application de l'algorithme de Dijkstra : Donner le plus court chemin pour aller de E \u00e0 F.","title":"3.3 Trouver le plus court chemin dans un graphe pond\u00e9r\u00e9"},{"location":"T5_Architecture_mat%C3%A9rielle/5.3_Protocoles_de_routage/cours.html#34-exercice","text":"(extrait du sujet 0) On consid\u00e8re le r\u00e9seau suivant : On rappelle que le co\u00fbt d\u2019une liaison est donn\u00e9 par la formule suivante : Question 1 V\u00e9rifier que le co\u00fbt de la liaison entre les routeurs A et B est 0,01. La liaison entre le routeur B et D a un co\u00fbt de 5. Quel est le d\u00e9bit de cette liaison ? Question 2 Le routeur A doit transmettre un message au routeur G, en empruntant le chemin dont la somme des co\u00fbts sera la plus petite possible. D\u00e9terminer le chemin parcouru. On indiquera le raisonnement utilis\u00e9. Correction du tableau de l'algorithme de Dijkstra","title":"3.4 Exercice"},{"location":"T5_Architecture_mat%C3%A9rielle/5.3_Protocoles_de_routage/cours.html#bibliographie","text":"Num\u00e9rique et Sciences Informatiques, Terminale, T. BALABONSKI, S. CONCHON, J.-C. FILLIATRE, K. NGUYEN, \u00e9ditions ELLIPSES. Pr\u00e9pabac NSI, Terminale, G. CONNAN, V. PETROV, G. ROZSAVOLGYI, L. SIGNAC, \u00e9ditions HATIER. Site d'Olivier L\u00e9cluse https://www.lecluse.fr/nsi/NSI_T/archi/routage/","title":"Bibliographie"},{"location":"T5_Architecture_mat%C3%A9rielle/5.4_Cryptographie/cours.html","text":"Cryptographie \u2693\ufe0e 1. Chiffrement sym\u00e9trique \u2693\ufe0e 1.1 Activit\u00e9 du masque jetable \u2693\ufe0e On consid\u00e8re la variable suivante : 1 masque = \"CETTEPHRASEESTVRAIMENTTRESTRESLONGUEMAISCESTFAITEXPRES\" Cr\u00e9er une fonction chiffre(message_clair, masque) qui chiffre message en le XORant avec masque . Cr\u00e9er une fonction dechiffre(message_chiffre, masque) qui r\u00e9alise l'op\u00e9ration inverse. 1.2 Principe du chiffrement sym\u00e9trique \u2693\ufe0e Dans un chiffrement sym\u00e9trique, c'est la m\u00eame cl\u00e9 qui va servir au chiffrement et au d\u00e9chiffrement. Qu'appelle-t-on une cl\u00e9 ? \u2693\ufe0e La cl\u00e9 est un renseignement permettant de chiffrer ou d\u00e9chiffrer un message. Cela peut \u00eatre : - un nombre (dans un simple d\u00e9calage des lettres de l'alphabet, comme le chiffre de C\u00e9sar ) - une phrase (dans la m\u00e9thode du masque jetable ) - une image (imaginez un chiffrement o\u00f9 on effectue un XOR par les pixels d'une image, comme dans cette \u00e9nigme ) Un chiffrement est dit sym\u00e9trique lorsque la connaissance de la cl\u00e9 ayant servi au chiffrement permet de d\u00e9chiffrer le message. Par exemple, Alice chiffre son message en d\u00e9calant les lettres de 3 rangs vers la droite dans l'alphabet, Bob saura qu'il doit les d\u00e9caler de 3 rangs vers la gauche pour retrouver le message initial. Quel est l'avantage d'un chiffrement sym\u00e9trique ? \u2693\ufe0e Les chiffrements sym\u00e9triques sont souvent rapides, consommant peu de ressources et donc adapt\u00e9s au chiffrement de flux important d'informations. Comme nous le verrons, la s\u00e9curisation des donn\u00e9es transitant par le protocole https est bas\u00e9e sur un chiffrement sym\u00e9trique. Quel est l'inconv\u00e9nient d'un chiffrement sym\u00e9trique ? \u2693\ufe0e La cl\u00e9 ! Si Alice et Bob ont besoin d'utiliser un chiffrement pour se parler, comment peuvent-ils \u00e9changer leurs cl\u00e9s puisque leur canal de transmission n'est pas s\u00fbr ? Le chiffrement sym\u00e9trique impose qu'Alice et Bob aient pu se rencontrer physiquement au pr\u00e9alable pour convenir d'une cl\u00e9 secr\u00e8te, ou bien qu'ils aient r\u00e9ussi \u00e0 \u00e9tablir une connexion s\u00e9curis\u00e9e pour s'\u00e9changer cette cl\u00e9. Un chiffrement sym\u00e9trique est-il un chiffrement de mauvaise qualit\u00e9 ? \u2693\ufe0e Pas du tout ! S'il est associ\u00e9 naturellement \u00e0 des chiffrements simples et faibles (comme le d\u00e9calage de C\u00e9sar), un chiffrement sym\u00e9trique peut \u00eatre tr\u00e8s robuste... voire inviolable. C'est le cas du masque jetable. Si le masque avec lequel on effectue le XOR sur le message est aussi long que le message, alors il est impossible de retrouver le message initial. Pourquoi ? Imaginons qu'Alice veuille transmettre le message clair \"LUNDI\". Elle le chiffre avec un masque jetable (que connait aussi Bob), et Bob re\u00e7oit donc \"KHZOK\". Si Marc a intercept\u00e9 le message \"KHZOK\", m\u00eame s'il sait que la m\u00e9thode de chiffrement utilis\u00e9e est celle du masque jetable (principe de Kerckhoffs), il n'a pas d'autre choix que de tester tous les masques de 5 lettres possibles. Ce qui lui donne 26^5 possibilit\u00e9s (plus de 11 millions) pour le masque, et par cons\u00e9quent (propri\u00e9t\u00e9 de bijectivit\u00e9 du XOR) 26^5 possibilit\u00e9s pour le message \u00abd\u00e9chiffr\u00e9\u00bb... Cela signifie que Marc verra appara\u00eetre, dans sa tentative de d\u00e9chiffrage, les mots \"MARDI\", \"JEUDI\", \"JOUDI\", \"STYLO\", \"FSDJK\", \"LUNDI, \"LUNDA\"... Il n'a aucune possibilit\u00e9 de savoir o\u00f9 est le bon message original parmi toutes les propositions (on parle de s\u00e9curit\u00e9 s\u00e9mantique ). Principe de Kerckhoffs : la s\u00e9curit\u00e9 d'un syst\u00e8me de chiffrement ne doit reposer que sur la s\u00e9curit\u00e9 de la cl\u00e9, et non pas sur la connaissance de l'algorithme de chiffrement. Cet algorithme peut m\u00eame \u00eatre public (ce qui est pratiquement toujours le cas). Quels sont les chiffrements sym\u00e9triques modernes ? \u2693\ufe0e L'algorithme de chiffrement sym\u00e9trique le plus utilis\u00e9 actuellement est le chiffrement AES , pour Advanced Encryption Standard. - chiffrement par bloc de 128 bits, r\u00e9partis dans une matrice de 16 octets (matrice carr\u00e9e de taille 4). - ces 128 bits sont transform\u00e9s par des rotations, multiplications, transpositions, [...] de la matrice initiale, en faisant intervenir dans ces transformations une cl\u00e9 de 128, 192 ou 256 bits. - pour l'AES-256 (avec une cl\u00e9 de 256 bits), l'attaque par force brute n\u00e9cessiterait 2^256 op\u00e9rations, soit un nombre \u00e0 78 chiffres... - il n'existe pas d'attaque connue efficace \u00e0 ce jour. Les seules attaques sont des attaques sur des faiblesses d'impl\u00e9mentation, ou par canal auxiliaire . 2. Chiffrement asym\u00e9trique \u2693\ufe0e Invent\u00e9 par Whitfield Diffie et Martin Hellman en 1976, le chiffrement asym\u00e9trique vient r\u00e9soudre l'inconv\u00e9nient essentiel du chiffrement sym\u00e9trique : le n\u00e9cessaire partage d'un secret (la cl\u00e9) avant l'\u00e9tablissement de la communication s\u00e9curis\u00e9e. 2.1 Principe du chiffrement asym\u00e9trique \u2693\ufe0e Le principe de base est l'existence d'une cl\u00e9 publique , appel\u00e9e \u00e0 \u00eatre distribu\u00e9e largement, et d'une cl\u00e9 priv\u00e9e , qui ne quitte jamais son propri\u00e9taire. 2.2 Le r\u00f4le interchangeable des cl\u00e9s publiques et priv\u00e9es \u2693\ufe0e L'illustration pr\u00e9c\u00e9dente associe : - une image de cadenas \u00e0 la cl\u00e9 publique (car on s'en sert pour chiffrer les messages) - une image de cl\u00e9 \u00e0 la cl\u00e9 priv\u00e9e (car on s'en sert pour d\u00e9chiffrer les messages) Concr\u00e8tement, (nous le verrons dans l'applciation par le chiffrement RSA), la cl\u00e9 priv\u00e9e et la cl\u00e9 publique sont deux nombres aux r\u00f4les identiques. Appelons-les A et B : - il est impossible de trouver A en fonction de B. R\u00e9ciproquement, si on conna\u00eet A, il est impossible d'en d\u00e9duire B. - si on chiffre un message avec A, on peut le d\u00e9chiffrer avec B. R\u00e9ciproquement, si on chiffre avec B, on peut d\u00e9chiffrer le message gr\u00e2ce \u00e0 A. - on peut donc chiffrer avec une cl\u00e9 publique et d\u00e9chiffrer avec la cl\u00e9 priv\u00e9e associ\u00e9e (ce qui est fait dans l'exemple pr\u00e9c\u00e9dent). Mais on peut aussi chiffrer avec la cl\u00e9 priv\u00e9e, et d\u00e9chiffrer avec la cl\u00e9 publique associ\u00e9e. A et B ont donc des r\u00f4les interchangeables (chacun peut \u00eatre un cadenas, chacun peut \u00eatre une cl\u00e9), et ce n'est qu'en connaissant A et B qu'on peut d\u00e9chiffrer le message. Nous allons donc maintenant adopter une nouvelle convention infographique : Consid\u00e9rons ce message : Si ce message est chiffr\u00e9 avec la cl\u00e9 publique d'Alice, le message sera : Si on d\u00e9chiffre ce message avec la cl\u00e9 priv\u00e9e d'Alice, il deviendra et donc puisque l'application de la cl\u00e9 priv\u00e9e sur la cl\u00e9 publique, ou bien de la cl\u00e9 publique sur la cl\u00e9 priv\u00e9e, permet de retrouver le message en clair. De mani\u00e8re graphique, la connaissance des deux moiti\u00e9s du disque qui s'assemblent permet de les faire disparaitre, qu'importe qu'on ait commenc\u00e9 par chiffrer avec la cl\u00e9 publique ou avec la cl\u00e9 priv\u00e9e. 2.3 Communication authentifi\u00e9e. \u2693\ufe0e Dans la situation du 2.1, Alice (qui a distribu\u00e9 largement sa cl\u00e9 publique) ne peut pas s'assurer que le message vient bien de Bob. Il peut avoir \u00e9t\u00e9 cr\u00e9\u00e9 par Marc, qui signe \u00abBob\u00bb et usurpe ainsi son identit\u00e9. Le protocole que nous allons d\u00e9crire ci-dessous permet : - d'emp\u00eacher qu'un message intercept\u00e9 soit d\u00e9chiffr\u00e9 (ce qui \u00e9tait d\u00e9j\u00e0 le cas dans le 2.1) - mais aussi de s'assurer que chaque personne est bien celle qu'elle pr\u00e9tend \u00eatre : on r\u00e9sout le probl\u00e8me d'authentification . En r\u00e9sum\u00e9 : - Alice est s\u00fbre que seul Bob pourra d\u00e9chiffrer le message qu'elle envoie. - Bob est s\u00fbr que le message qu'il re\u00e7oit vient bien d'Alice. 2.3 Un exemple de chiffrement asym\u00e9trique : le chiffrement RSA \u2693\ufe0e Lorsqu'en 1976 Diffie et Hellman pr\u00e9sentent le concept de chiffrement asym\u00e9trique (souvent appel\u00e9 cryptographie \u00e0 cl\u00e9s publiques ), ils en proposent uniquement un mod\u00e8le th\u00e9orique, n'ayant pas trouv\u00e9 une r\u00e9elle impl\u00e9mentation de leur protocole. Trois chercheurs du MIT (Boston), Ron R**ivest, Adi **S**hamir et Len **A**dleman se penchent alors sur ce protocole, convaincus qu'il est en effet impossible d'en trouver une impl\u00e9mentation pratique. En 1977, au cours de leurs recherches, ils d\u00e9montrent en fait l'inverse de ce qu'ils cherchaient : ils cr\u00e9ent le premier protocole concret de chiffrement asym\u00e9trique : le chiffrement **RSA . Le chiffrement RSA est bas\u00e9 sur l'arithm\u00e9tique modulaire . Faire des calculs modulo un entier n , c'est ne garder que le reste de la division euclidienne par n . Le fait que 15 soit \u00e9gal \u00e0 1 modulo 7 (car 15=2*7+1) s'\u00e9crira 15 \u2261 1 [7]. De m\u00eame, 10 \u2261 3 [7], 25 \u2261 4 [7], 32 \u2261 2 [10], etc. \u00c9tape 1 \u2693\ufe0e Alice choisit 2 grands nombres premiers p et q . Dans la r\u00e9alit\u00e9 ces nombres seront vraiment tr\u00e8s grands (plus de 100 chiffres). Dans notre exemple, nous prendrons p = 3 et q = 11 . \u00c9tape 2 \u2693\ufe0e Alice multiplie ces deux nombres p et q et obtient ainsi un nombre n . Il est tr\u00e8s facile pour Alice de calculer n en connaissant p et q , mais il extr\u00eamement difficile pour Marc de faire le travail inverse : trouver p et q en connaissant n prend un temps exponentiel avec la taille de n . C'est sur cette difficult\u00e9 (appel\u00e9e difficult\u00e9 de factorisation ) que repose la robustesse du syst\u00e8me RSA. \u00c9tape 3 \u2693\ufe0e Alice choisit un nombre e qui doit \u00eatre premier avec (p-1)(q-1) . On note \u03c6(n) le nombre (p-1)(q-1) . Dans notre exemple, (p-1)(q-1) = 20 , Alice choisit donc e = 3 . (mais elle aurait pu aussi choisir 7, 9, 13...). Le couple (e, n) sera la cl\u00e9 publique d'Alice. Elle la diffuse \u00e0 qui veut lui \u00e9crire. Dans notre exemple, la cl\u00e9 publique d'Alice est (3, 33) . \u00c9tape 4 \u2693\ufe0e Alice calcule maintenant sa cl\u00e9 priv\u00e9e : elle doit trouver un nombre d qui v\u00e9rifie l'\u00e9galit\u00e9 e.d \u2261 1 [\u03c6(n)] . Dans notre exemple, comme 7 x 3 \u2261 1 [20] , ce nombre d est \u00e9gal \u00e0 7. En pratique, il existe un algorithme simple (algorithme d' Euclide \u00e9tendu ) pour trouver cette valeur d , appel\u00e9e inverse de e . Le couple (d, n) sera la cl\u00e9 priv\u00e9e d'Alice. Elle ne la diffuse \u00e0 personne. Dans notre exemple, la cl\u00e9 priv\u00e9e d'Alice est (7, 33) . \u00c9tape 5 \u2693\ufe0e Supposons que Bob veuille \u00e9crire \u00e0 Alice pour lui envoyer le nombre 4. Il poss\u00e8de la cl\u00e9 publique d'Alice, qui est (3, 33) . Il calcule donc 4**3 modulo 33, qui vaut 31. C'est cette valeur 31 qu'il transmet \u00e0 Alice. Si Marc intercepte cette valeur 31, m\u00eame en connaissant la cl\u00e9 publique d'Alice (3,33), il ne peut pas r\u00e9soudre l'\u00e9quation x**3 \u2261 31 [33] de mani\u00e8re efficace. \u00c9tape 6 \u2693\ufe0e Alice re\u00e7oit la valeur 31. Il lui suffit alors d'\u00e9lever 31 \u00e0 la puissance 7 (sa cl\u00e9 priv\u00e9e), et de calculer le reste modulo 33 : 31**7 = 27512614111 27512614111 \u2261 4 [33] Elle r\u00e9cup\u00e8re la valeur 4, qui est bien le message original de Bob. Comment \u00e7a marche ? Gr\u00e2ce au Petit Th\u00e9or\u00e8me de Fermat , on d\u00e9montre (voir ici ) assez facilement que M**ed \u2261 M [n]. Il faut remarquer que M **ed = M **de. On voit que les r\u00f4les de la cl\u00e9 publique et de la cl\u00e9 priv\u00e9e sont sym\u00e9triques : un message chiffr\u00e9 avec la cl\u00e9 publique se d\u00e9chiffrera en le chiffrant avec la cl\u00e9 priv\u00e9e, tout comme un message chiffr\u00e9 avec la cl\u00e9 priv\u00e9e se d\u00e9chiffrera en le chiffrant avec la cl\u00e9 publique. Animation interactive voir https://animations.interstices.info/interstices-rsa/rsa.html RSA, un syst\u00e8me inviolable ? \u2693\ufe0e Le chiffrement RSA a des d\u00e9fauts (notamment une grande consommation des ressources, due \u00e0 la manipulation de tr\u00e8s grands nombres). Mais le choix d'une cl\u00e9 publique de grande taille (actuellement 1024 ou 2048 bits) le rend pour l'instant inviolable. Actuellement, il n'existe pas d'algorithme efficace pour factoriser un nombre ayant plusieurs centaines de chiffres. Deux \u00e9v\u00e8nements pourraient faire s'\u00e9crouler la s\u00e9curit\u00e9 du RSA : - la d\u00e9couverte d'un algorithme efficace de factorisation, capable de tourner sur les ordinateurs actuels. Cette annonce est r\u00e9guli\u00e8rement faite, et tout aussi r\u00e9guli\u00e8rement contredite par la communaut\u00e9 scientifique. (voir, le 05/03/2021, https://www.schneier.com/blog/archives/2021/03/no-rsa-is-not-broken.html ) - l'av\u00e8nement d' ordinateurs quantiques , dont la vitesse d'ex\u00e9cution permettrait une factorisation rapide. Il est \u00e0 noter que l'algorithme de factorisation destin\u00e9 \u00e0 tourner sur un ordinateur quantique existe d\u00e9j\u00e0 : l'algorithme de Schor . 3. HTTPS : exemple d'utilisation conjointe d'un chiffrement asym\u00e9trique et d'un chiffrement sym\u00e9trique. \u2693\ufe0e ### 3.1 Principe g\u00e9n\u00e9ral Aujourd'hui, plus de 90 % du trafic sur internet est chiffr\u00e9 : les donn\u00e9es ne transitent plus en clair (protocole http ) mais de mani\u00e8re chiffr\u00e9e (protocole https ), ce qui emp\u00eache la lecture de paquets \u00e9ventuellements intercept\u00e9s. Le protocole https est la r\u00e9union de deux protocoles : - le protocole TLS (Transport Layer Security, qui a succ\u00e9d\u00e9 au SSL) : ce protocole, bas\u00e9 sur du chiffrement asym\u00e9trique , va conduire \u00e0 la g\u00e9n\u00e9ration d'une cl\u00e9 identique chez le client et chez le serveur. - le (bon vieux) protocole http , mais qui convoiera maintenant des donn\u00e9es chiffr\u00e9es avec la cl\u00e9 g\u00e9n\u00e9r\u00e9e \u00e0 l'\u00e9tape pr\u00e9c\u00e9dente. Les donn\u00e9es peuvent toujours \u00eatre intercept\u00e9es, mais sont illisibles. Le chiffrement sym\u00e9trique utilis\u00e9 est actuellement le chiffrement AES. Pourquoi ne pas utiliser que le chiffrement asym\u00e9trique, RSA par exemple ? Car il est tr\u00e8s gourmand en ressources ! Le chiffrement/d\u00e9chiffrement doit \u00eatre rapide pour ne pas ralentir les communications ou l'exploitation des donn\u00e9es. Le chiffrement asym\u00e9trique est donc r\u00e9serv\u00e9 \u00e0 l'\u00e9change de cl\u00e9s (au d\u00e9but de la communication). Le chiffrement sym\u00e9trique, bien plus rapide, prend ensuite le relais pour l'ensemble de la communication. ### 3.2 (HP) Fonctionnement du TLS : explication du handshake Observons en d\u00e9tail le fonctionnement du protocole TLS , dont le r\u00f4le est de g\u00e9n\u00e9rer de mani\u00e8re s\u00e9curis\u00e9e une cl\u00e9 dont disposeront \u00e0 la fois le client et le serveur, leur permettant ainsi d'appliquer un chiffrement sym\u00e9trique \u00e0 leurs \u00e9changes. \u00e9tape 1 : le \u00abclient Hello\u00bb. Le client envoie sa version de TLS utilis\u00e9e. \u00e9tape 2 : le \u00abserver Hello\u00bb. Le serveur r\u00e9pond en renvoyant son certificat prouvant son identit\u00e9, ainsi que sa cl\u00e9 publique. \u00e9tape 3 : le client interroge l'autorit\u00e9 de certification pour valider le fait que le certificat est bien valide et que le serveur est bien celui qu'il pr\u00e9tend \u00eatre. Cette v\u00e9rification est faite gr\u00e2ce \u00e0 un m\u00e9canisme de chiffrement asym\u00e9trique. La pr\u00e9sentation du certificat \u00e0 l'autorit\u00e9 de certification peut se repr\u00e9senter comme le scan d'une pi\u00e8ce d'identit\u00e9 dans un a\u00e9roport. L'autorit\u00e9 de certification est alors l'\u00c9tat (dont la base de donn\u00e9es est interrog\u00e9e par un logiciel) qui valide que la pi\u00e8ce d'identit\u00e9 est bien un document officiel. \u00e9tape 4 : une fois v\u00e9rifi\u00e9e l'authenfication du serveur et que son certificat est valide, le client calcule ce qui sera la future cl\u00e9 de chiffrement sym\u00e9trique (appel\u00e9e \u00abcl\u00e9 AES\u00bb dans l'infographie). Cette cl\u00e9 est chiffr\u00e9e avec la cl\u00e9 publique du server (transmise \u00e0 l'\u00e9tape 1), ce qui assure la s\u00e9curit\u00e9 de son transfert. Le serveur d\u00e9chiffre cette cl\u00e9 gr\u00e2ce \u00e0 sa cl\u00e9 priv\u00e9e, et dispose ainsi lui aussi de la cl\u00e9. Le transmission par protocole http de donn\u00e9es chiffr\u00e9es au pr\u00e9alable avec la cl\u00e9 AES peut commencer. Remarque : en r\u00e9alit\u00e9, ce n'est pas la cl\u00e9 AES qui est transmise \u00e0 l'\u00e9tape 4, mais un nombre choisi par le client, qui permettra, avec deux autres nombres choisis par le client (\u00e9tape 1) et le serveur (\u00e9tape 2) de reconstituer la cl\u00e9 AES, qui sera donc identique c\u00f4t\u00e9 client et c\u00f4t\u00e9 serveur. Bibliographie \u2693\ufe0e Num\u00e9rique et Sciences Informatiques, Terminale, T. BALABONSKI, S. CONCHON, J.-C. FILLIATRE, K. NGUYEN, \u00e9ditions ELLIPSES. Pr\u00e9pabac NSI, Terminale, G. CONNAN, V. PETROV, G. ROZSAVOLGYI, L. SIGNAC, \u00e9ditions HATIER. https://www.cloudflare.com/fr-fr/learning/ssl/what-happens-in-a-tls-handshake/","title":"Cours"},{"location":"T5_Architecture_mat%C3%A9rielle/5.4_Cryptographie/cours.html#cryptographie","text":"","title":"Cryptographie"},{"location":"T5_Architecture_mat%C3%A9rielle/5.4_Cryptographie/cours.html#1-chiffrement-symetrique","text":"","title":"1. Chiffrement sym\u00e9trique"},{"location":"T5_Architecture_mat%C3%A9rielle/5.4_Cryptographie/cours.html#11-activite-du-masque-jetable","text":"On consid\u00e8re la variable suivante : 1 masque = \"CETTEPHRASEESTVRAIMENTTRESTRESLONGUEMAISCESTFAITEXPRES\" Cr\u00e9er une fonction chiffre(message_clair, masque) qui chiffre message en le XORant avec masque . Cr\u00e9er une fonction dechiffre(message_chiffre, masque) qui r\u00e9alise l'op\u00e9ration inverse.","title":"1.1 Activit\u00e9 du masque jetable"},{"location":"T5_Architecture_mat%C3%A9rielle/5.4_Cryptographie/cours.html#12-principe-du-chiffrement-symetrique","text":"Dans un chiffrement sym\u00e9trique, c'est la m\u00eame cl\u00e9 qui va servir au chiffrement et au d\u00e9chiffrement.","title":"1.2 Principe du chiffrement sym\u00e9trique"},{"location":"T5_Architecture_mat%C3%A9rielle/5.4_Cryptographie/cours.html#2-chiffrement-asymetrique","text":"Invent\u00e9 par Whitfield Diffie et Martin Hellman en 1976, le chiffrement asym\u00e9trique vient r\u00e9soudre l'inconv\u00e9nient essentiel du chiffrement sym\u00e9trique : le n\u00e9cessaire partage d'un secret (la cl\u00e9) avant l'\u00e9tablissement de la communication s\u00e9curis\u00e9e.","title":"2. Chiffrement asym\u00e9trique"},{"location":"T5_Architecture_mat%C3%A9rielle/5.4_Cryptographie/cours.html#21-principe-du-chiffrement-asymetrique","text":"Le principe de base est l'existence d'une cl\u00e9 publique , appel\u00e9e \u00e0 \u00eatre distribu\u00e9e largement, et d'une cl\u00e9 priv\u00e9e , qui ne quitte jamais son propri\u00e9taire.","title":"2.1 Principe du chiffrement asym\u00e9trique"},{"location":"T5_Architecture_mat%C3%A9rielle/5.4_Cryptographie/cours.html#22-le-role-interchangeable-des-cles-publiques-et-privees","text":"L'illustration pr\u00e9c\u00e9dente associe : - une image de cadenas \u00e0 la cl\u00e9 publique (car on s'en sert pour chiffrer les messages) - une image de cl\u00e9 \u00e0 la cl\u00e9 priv\u00e9e (car on s'en sert pour d\u00e9chiffrer les messages) Concr\u00e8tement, (nous le verrons dans l'applciation par le chiffrement RSA), la cl\u00e9 priv\u00e9e et la cl\u00e9 publique sont deux nombres aux r\u00f4les identiques. Appelons-les A et B : - il est impossible de trouver A en fonction de B. R\u00e9ciproquement, si on conna\u00eet A, il est impossible d'en d\u00e9duire B. - si on chiffre un message avec A, on peut le d\u00e9chiffrer avec B. R\u00e9ciproquement, si on chiffre avec B, on peut d\u00e9chiffrer le message gr\u00e2ce \u00e0 A. - on peut donc chiffrer avec une cl\u00e9 publique et d\u00e9chiffrer avec la cl\u00e9 priv\u00e9e associ\u00e9e (ce qui est fait dans l'exemple pr\u00e9c\u00e9dent). Mais on peut aussi chiffrer avec la cl\u00e9 priv\u00e9e, et d\u00e9chiffrer avec la cl\u00e9 publique associ\u00e9e. A et B ont donc des r\u00f4les interchangeables (chacun peut \u00eatre un cadenas, chacun peut \u00eatre une cl\u00e9), et ce n'est qu'en connaissant A et B qu'on peut d\u00e9chiffrer le message. Nous allons donc maintenant adopter une nouvelle convention infographique : Consid\u00e9rons ce message : Si ce message est chiffr\u00e9 avec la cl\u00e9 publique d'Alice, le message sera : Si on d\u00e9chiffre ce message avec la cl\u00e9 priv\u00e9e d'Alice, il deviendra et donc puisque l'application de la cl\u00e9 priv\u00e9e sur la cl\u00e9 publique, ou bien de la cl\u00e9 publique sur la cl\u00e9 priv\u00e9e, permet de retrouver le message en clair. De mani\u00e8re graphique, la connaissance des deux moiti\u00e9s du disque qui s'assemblent permet de les faire disparaitre, qu'importe qu'on ait commenc\u00e9 par chiffrer avec la cl\u00e9 publique ou avec la cl\u00e9 priv\u00e9e.","title":"2.2 Le r\u00f4le interchangeable des cl\u00e9s publiques et priv\u00e9es"},{"location":"T5_Architecture_mat%C3%A9rielle/5.4_Cryptographie/cours.html#23-communication-authentifiee","text":"Dans la situation du 2.1, Alice (qui a distribu\u00e9 largement sa cl\u00e9 publique) ne peut pas s'assurer que le message vient bien de Bob. Il peut avoir \u00e9t\u00e9 cr\u00e9\u00e9 par Marc, qui signe \u00abBob\u00bb et usurpe ainsi son identit\u00e9. Le protocole que nous allons d\u00e9crire ci-dessous permet : - d'emp\u00eacher qu'un message intercept\u00e9 soit d\u00e9chiffr\u00e9 (ce qui \u00e9tait d\u00e9j\u00e0 le cas dans le 2.1) - mais aussi de s'assurer que chaque personne est bien celle qu'elle pr\u00e9tend \u00eatre : on r\u00e9sout le probl\u00e8me d'authentification . En r\u00e9sum\u00e9 : - Alice est s\u00fbre que seul Bob pourra d\u00e9chiffrer le message qu'elle envoie. - Bob est s\u00fbr que le message qu'il re\u00e7oit vient bien d'Alice.","title":"2.3 Communication authentifi\u00e9e."},{"location":"T5_Architecture_mat%C3%A9rielle/5.4_Cryptographie/cours.html#23-un-exemple-de-chiffrement-asymetrique-le-chiffrement-rsa","text":"Lorsqu'en 1976 Diffie et Hellman pr\u00e9sentent le concept de chiffrement asym\u00e9trique (souvent appel\u00e9 cryptographie \u00e0 cl\u00e9s publiques ), ils en proposent uniquement un mod\u00e8le th\u00e9orique, n'ayant pas trouv\u00e9 une r\u00e9elle impl\u00e9mentation de leur protocole. Trois chercheurs du MIT (Boston), Ron R**ivest, Adi **S**hamir et Len **A**dleman se penchent alors sur ce protocole, convaincus qu'il est en effet impossible d'en trouver une impl\u00e9mentation pratique. En 1977, au cours de leurs recherches, ils d\u00e9montrent en fait l'inverse de ce qu'ils cherchaient : ils cr\u00e9ent le premier protocole concret de chiffrement asym\u00e9trique : le chiffrement **RSA . Le chiffrement RSA est bas\u00e9 sur l'arithm\u00e9tique modulaire . Faire des calculs modulo un entier n , c'est ne garder que le reste de la division euclidienne par n . Le fait que 15 soit \u00e9gal \u00e0 1 modulo 7 (car 15=2*7+1) s'\u00e9crira 15 \u2261 1 [7]. De m\u00eame, 10 \u2261 3 [7], 25 \u2261 4 [7], 32 \u2261 2 [10], etc.","title":"2.3 Un exemple de chiffrement asym\u00e9trique : le chiffrement RSA"},{"location":"T5_Architecture_mat%C3%A9rielle/5.4_Cryptographie/cours.html#3-https-exemple-dutilisation-conjointe-dun-chiffrement-asymetrique-et-dun-chiffrement-symetrique","text":"### 3.1 Principe g\u00e9n\u00e9ral Aujourd'hui, plus de 90 % du trafic sur internet est chiffr\u00e9 : les donn\u00e9es ne transitent plus en clair (protocole http ) mais de mani\u00e8re chiffr\u00e9e (protocole https ), ce qui emp\u00eache la lecture de paquets \u00e9ventuellements intercept\u00e9s. Le protocole https est la r\u00e9union de deux protocoles : - le protocole TLS (Transport Layer Security, qui a succ\u00e9d\u00e9 au SSL) : ce protocole, bas\u00e9 sur du chiffrement asym\u00e9trique , va conduire \u00e0 la g\u00e9n\u00e9ration d'une cl\u00e9 identique chez le client et chez le serveur. - le (bon vieux) protocole http , mais qui convoiera maintenant des donn\u00e9es chiffr\u00e9es avec la cl\u00e9 g\u00e9n\u00e9r\u00e9e \u00e0 l'\u00e9tape pr\u00e9c\u00e9dente. Les donn\u00e9es peuvent toujours \u00eatre intercept\u00e9es, mais sont illisibles. Le chiffrement sym\u00e9trique utilis\u00e9 est actuellement le chiffrement AES. Pourquoi ne pas utiliser que le chiffrement asym\u00e9trique, RSA par exemple ? Car il est tr\u00e8s gourmand en ressources ! Le chiffrement/d\u00e9chiffrement doit \u00eatre rapide pour ne pas ralentir les communications ou l'exploitation des donn\u00e9es. Le chiffrement asym\u00e9trique est donc r\u00e9serv\u00e9 \u00e0 l'\u00e9change de cl\u00e9s (au d\u00e9but de la communication). Le chiffrement sym\u00e9trique, bien plus rapide, prend ensuite le relais pour l'ensemble de la communication. ### 3.2 (HP) Fonctionnement du TLS : explication du handshake Observons en d\u00e9tail le fonctionnement du protocole TLS , dont le r\u00f4le est de g\u00e9n\u00e9rer de mani\u00e8re s\u00e9curis\u00e9e une cl\u00e9 dont disposeront \u00e0 la fois le client et le serveur, leur permettant ainsi d'appliquer un chiffrement sym\u00e9trique \u00e0 leurs \u00e9changes. \u00e9tape 1 : le \u00abclient Hello\u00bb. Le client envoie sa version de TLS utilis\u00e9e. \u00e9tape 2 : le \u00abserver Hello\u00bb. Le serveur r\u00e9pond en renvoyant son certificat prouvant son identit\u00e9, ainsi que sa cl\u00e9 publique. \u00e9tape 3 : le client interroge l'autorit\u00e9 de certification pour valider le fait que le certificat est bien valide et que le serveur est bien celui qu'il pr\u00e9tend \u00eatre. Cette v\u00e9rification est faite gr\u00e2ce \u00e0 un m\u00e9canisme de chiffrement asym\u00e9trique. La pr\u00e9sentation du certificat \u00e0 l'autorit\u00e9 de certification peut se repr\u00e9senter comme le scan d'une pi\u00e8ce d'identit\u00e9 dans un a\u00e9roport. L'autorit\u00e9 de certification est alors l'\u00c9tat (dont la base de donn\u00e9es est interrog\u00e9e par un logiciel) qui valide que la pi\u00e8ce d'identit\u00e9 est bien un document officiel. \u00e9tape 4 : une fois v\u00e9rifi\u00e9e l'authenfication du serveur et que son certificat est valide, le client calcule ce qui sera la future cl\u00e9 de chiffrement sym\u00e9trique (appel\u00e9e \u00abcl\u00e9 AES\u00bb dans l'infographie). Cette cl\u00e9 est chiffr\u00e9e avec la cl\u00e9 publique du server (transmise \u00e0 l'\u00e9tape 1), ce qui assure la s\u00e9curit\u00e9 de son transfert. Le serveur d\u00e9chiffre cette cl\u00e9 gr\u00e2ce \u00e0 sa cl\u00e9 priv\u00e9e, et dispose ainsi lui aussi de la cl\u00e9. Le transmission par protocole http de donn\u00e9es chiffr\u00e9es au pr\u00e9alable avec la cl\u00e9 AES peut commencer. Remarque : en r\u00e9alit\u00e9, ce n'est pas la cl\u00e9 AES qui est transmise \u00e0 l'\u00e9tape 4, mais un nombre choisi par le client, qui permettra, avec deux autres nombres choisis par le client (\u00e9tape 1) et le serveur (\u00e9tape 2) de reconstituer la cl\u00e9 AES, qui sera donc identique c\u00f4t\u00e9 client et c\u00f4t\u00e9 serveur.","title":"3. HTTPS : exemple d'utilisation conjointe d'un chiffrement asym\u00e9trique et d'un chiffrement sym\u00e9trique."},{"location":"T5_Architecture_mat%C3%A9rielle/5.4_Cryptographie/cours.html#bibliographie","text":"Num\u00e9rique et Sciences Informatiques, Terminale, T. BALABONSKI, S. CONCHON, J.-C. FILLIATRE, K. NGUYEN, \u00e9ditions ELLIPSES. Pr\u00e9pabac NSI, Terminale, G. CONNAN, V. PETROV, G. ROZSAVOLGYI, L. SIGNAC, \u00e9ditions HATIER. https://www.cloudflare.com/fr-fr/learning/ssl/what-happens-in-a-tls-handshake/","title":"Bibliographie"}]}